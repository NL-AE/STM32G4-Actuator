
STM32G431_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000096e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006f8  080098c4  080098c4  000198c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fbc  08009fbc  00020078  2**0
                  CONTENTS
  4 .ARM          00000000  08009fbc  08009fbc  00020078  2**0
                  CONTENTS
  5 .preinit_array 00000000  08009fbc  08009fbc  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fbc  08009fbc  00019fbc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009fc0  08009fc0  00019fc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08009fc4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000078  0800a03c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800a03c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce69  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003528  00000000  00000000  0003cf11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040440  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  00041b80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022956  00000000  00000000  00043128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001923a  00000000  00000000  00065a7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df675  00000000  00000000  0007ecb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e32d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006de0  00000000  00000000  0015e380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	080098ac 	.word	0x080098ac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	080098ac 	.word	0x080098ac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f007 fd9f 	bl	80085e8 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000aac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b18:	f002 f92c 	bl	8002d74 <HAL_ADC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000b22:	f001 fbb4 	bl	800228e <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000b26:	2306      	movs	r3, #6
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b3c:	f003 fa24 	bl	8003f88 <HAL_ADCEx_MultiModeConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000b46:	f001 fba2 	bl	800228e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_ADC1_Init+0x114>)
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000b52:	2306      	movs	r3, #6
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	; 0x7f
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b68:	f002 fd02 	bl	8003570 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000b72:	f001 fb8c 	bl	800228e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_ADC1_Init+0x118>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b84:	f002 fcf4 	bl	8003570 <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000b8e:	f001 fb7e 	bl	800228e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000114 	.word	0x20000114
 8000ba0:	32601000 	.word	0x32601000
 8000ba4:	3ef08000 	.word	0x3ef08000

08000ba8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fd17 	bl	80085e8 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <MX_ADC2_Init+0xd4>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c18:	4817      	ldr	r0, [pc, #92]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c1a:	f002 f8ab 	bl	8002d74 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000c24:	f001 fb33 	bl	800228e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_ADC2_Init+0xd8>)
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000c30:	2306      	movs	r3, #6
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c34:	237f      	movs	r3, #127	; 0x7f
 8000c36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c46:	f002 fc93 	bl	8003570 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000c50:	f001 fb1d 	bl	800228e <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_ADC2_Init+0xdc>)
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c62:	f002 fc85 	bl	8003570 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000c6c:	f001 fb0f 	bl	800228e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000a8 	.word	0x200000a8
 8000c7c:	50000100 	.word	0x50000100
 8000c80:	32601000 	.word	0x32601000
 8000c84:	10c00010 	.word	0x10c00010

08000c88 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09e      	sub	sp, #120	; 0x78
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2244      	movs	r2, #68	; 0x44
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fc9d 	bl	80085e8 <memset>
  if(adcHandle->Instance==ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb6:	d168      	bne.n	8000d8a <HAL_ADC_MspInit+0x102>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 f867 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f001 fadb 	bl	800228e <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cd8:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000ce0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10b      	bne.n	8000d02 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cea:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a6d      	ldr	r2, [pc, #436]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a67      	ldr	r2, [pc, #412]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = V_Sen_Pin|SO_A_Pin;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	485e      	ldr	r0, [pc, #376]	; (8000ea8 <HAL_ADC_MspInit+0x220>)
 8000d2e:	f004 f8af 	bl	8004e90 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d32:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d34:	4a5e      	ldr	r2, [pc, #376]	; (8000eb0 <HAL_ADC_MspInit+0x228>)
 8000d36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d38:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d44:	4b59      	ldr	r3, [pc, #356]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d58:	4b54      	ldr	r3, [pc, #336]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d6c:	484f      	ldr	r0, [pc, #316]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d6e:	f003 fabf 	bl	80042f0 <HAL_DMA_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8000d78:	f001 fa89 	bl	800228e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d80:	655a      	str	r2, [r3, #84]	; 0x54
 8000d82:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d88:	e086      	b.n	8000e98 <HAL_ADC_MspInit+0x210>
  else if(adcHandle->Instance==ADC2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_ADC_MspInit+0x22c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f040 8081 	bne.w	8000e98 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000da0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f004 fff8 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000db2:	f001 fa6c 	bl	800228e <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a38      	ldr	r2, [pc, #224]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10b      	bne.n	8000de0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_Sen_Pin;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e14:	2303      	movs	r3, #3
 8000e16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(T_Sen_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f004 f833 	bl	8004e90 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO_B_Pin;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SO_B_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <HAL_ADC_MspInit+0x220>)
 8000e3e:	f004 f827 	bl	8004e90 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_ADC_MspInit+0x234>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e4a:	2224      	movs	r2, #36	; 0x24
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e7e:	f003 fa37 	bl	80042f0 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8000e88:	f001 fa01 	bl	800228e <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e98:	bf00      	nop
 8000e9a:	3778      	adds	r7, #120	; 0x78
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	20000180 	.word	0x20000180
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	50000100 	.word	0x50000100
 8000eb8:	200001e0 	.word	0x200001e0
 8000ebc:	40020408 	.word	0x40020408

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_DMA_Init+0x78>)
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x78>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6493      	str	r3, [r2, #72]	; 0x48
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x78>)
 8000f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200b      	movs	r0, #11
 8000f14:	f003 f9b7 	bl	8004286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f18:	200b      	movs	r0, #11
 8000f1a:	f003 f9ce 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2038      	movs	r0, #56	; 0x38
 8000f24:	f003 f9af 	bl	8004286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f28:	2038      	movs	r0, #56	; 0x38
 8000f2a:	f003 f9c6 	bl	80042ba <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <MX_FDCAN1_Init+0x88>)
 8000f44:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fae:	f003 fc11 	bl	80047d4 <HAL_FDCAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fb8:	f001 f969 	bl	800228e <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000240 	.word	0x20000240
 8000fc4:	40006400 	.word	0x40006400

08000fc8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2244      	movs	r2, #68	; 0x44
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 fafd 	bl	80085e8 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_FDCAN_MspInit+0xbc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d140      	bne.n	800107a <HAL_FDCAN_MspInit+0xb2>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4618      	mov	r0, r3
 800100a:	f004 fec7 	bl	8005d9c <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001014:	f001 f93b 	bl	800228e <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800101e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8001048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800105a:	2309      	movs	r3, #9
 800105c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_FDCAN_MspInit+0xc4>)
 8001066:	f003 ff13 	bl	8004e90 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 2, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2102      	movs	r1, #2
 800106e:	2015      	movs	r0, #21
 8001070:	f003 f909 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001074:	2015      	movs	r0, #21
 8001076:	f003 f920 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	3768      	adds	r7, #104	; 0x68
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40006400 	.word	0x40006400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800110c:	4828      	ldr	r0, [pc, #160]	; (80011b0 <MX_GPIO_Init+0x120>)
 800110e:	f004 f859 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f004 f852 	bl	80051c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001120:	2320      	movs	r3, #32
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001124:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f003 feaa 	bl	8004e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f003 fe9d 	bl	8004e90 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 8001156:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_GPIO_Init+0x120>)
 8001170:	f003 fe8e 	bl	8004e90 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f003 fe7e 	bl	8004e90 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2101      	movs	r1, #1
 8001198:	2017      	movs	r0, #23
 800119a:	f003 f874 	bl	8004286 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800119e:	2017      	movs	r0, #23
 80011a0:	f003 f88b 	bl	80042ba <HAL_NVIC_EnableIRQ>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400

080011b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011dc:	e000      	b.n	80011e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f9      	beq.n	80011de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	int i=0;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc7 	bl	80011b4 <ITM_SendChar>
	for(i=0; i<len; i++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x16>
	return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b5b0      	push	{r4, r5, r7, lr}
 8001242:	ed2d 8b02 	vpush	{d8}
 8001246:	b084      	sub	sp, #16
 8001248:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800124a:	f001 faf2 	bl	8002832 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124e:	f000 fcaf 	bl	8001bb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001252:	f7ff ff1d 	bl	8001090 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001256:	f7ff fc19 	bl	8000a8c <MX_ADC1_Init>
  MX_ADC2_Init();
 800125a:	f7ff fca5 	bl	8000ba8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800125e:	f7ff fe6d 	bl	8000f3c <MX_FDCAN1_Init>
  MX_DMA_Init();
 8001262:	f7ff fe2d 	bl	8000ec0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001266:	f001 f9d7 	bl	8002618 <MX_TIM2_Init>
  MX_SPI3_Init();
 800126a:	f001 f815 	bl	8002298 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\nActuator Firmware Version: %i\n",REV);
 800126e:	2101      	movs	r1, #1
 8001270:	48c0      	ldr	r0, [pc, #768]	; (8001574 <main+0x334>)
 8001272:	f007 f9c1 	bl	80085f8 <iprintf>

  /* Start ADCs */
  printf("Start ADC... ");
 8001276:	48c0      	ldr	r0, [pc, #768]	; (8001578 <main+0x338>)
 8001278:	f007 f9be 	bl	80085f8 <iprintf>
  HAL_ADC_Start(&hadc1);
 800127c:	48bf      	ldr	r0, [pc, #764]	; (800157c <main+0x33c>)
 800127e:	f001 ff03 	bl	8003088 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc.ADC1_DMA_Buff, 2);
 8001282:	2202      	movs	r2, #2
 8001284:	49be      	ldr	r1, [pc, #760]	; (8001580 <main+0x340>)
 8001286:	48bd      	ldr	r0, [pc, #756]	; (800157c <main+0x33c>)
 8001288:	f002 f892 	bl	80033b0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 800128c:	48bd      	ldr	r0, [pc, #756]	; (8001584 <main+0x344>)
 800128e:	f001 fefb 	bl	8003088 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc.ADC2_DMA_Buff, 2);
 8001292:	2202      	movs	r2, #2
 8001294:	49bc      	ldr	r1, [pc, #752]	; (8001588 <main+0x348>)
 8001296:	48bb      	ldr	r0, [pc, #748]	; (8001584 <main+0x344>)
 8001298:	f002 f88a 	bl	80033b0 <HAL_ADC_Start_DMA>
  printf("Good\n");
 800129c:	48bb      	ldr	r0, [pc, #748]	; (800158c <main+0x34c>)
 800129e:	f007 fa47 	bl	8008730 <puts>

  /* Start Timers */
  printf("Start TIM... ");
 80012a2:	48bb      	ldr	r0, [pc, #748]	; (8001590 <main+0x350>)
 80012a4:	f007 f9a8 	bl	80085f8 <iprintf>
  HAL_TIM_Base_Start_IT(&htim2);
 80012a8:	48ba      	ldr	r0, [pc, #744]	; (8001594 <main+0x354>)
 80012aa:	f005 fed7 	bl	800705c <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, Phase_A_Ch);
 80012ae:	210c      	movs	r1, #12
 80012b0:	48b8      	ldr	r0, [pc, #736]	; (8001594 <main+0x354>)
 80012b2:	f005 ff9f 	bl	80071f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_B_Ch);
 80012b6:	2108      	movs	r1, #8
 80012b8:	48b6      	ldr	r0, [pc, #728]	; (8001594 <main+0x354>)
 80012ba:	f005 ff9b 	bl	80071f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_C_Ch);
 80012be:	2100      	movs	r1, #0
 80012c0:	48b4      	ldr	r0, [pc, #720]	; (8001594 <main+0x354>)
 80012c2:	f005 ff97 	bl	80071f4 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 80012c6:	ed9f 1ab4 	vldr	s2, [pc, #720]	; 8001598 <main+0x358>
 80012ca:	eddf 0ab3 	vldr	s1, [pc, #716]	; 8001598 <main+0x358>
 80012ce:	ed9f 0ab2 	vldr	s0, [pc, #712]	; 8001598 <main+0x358>
 80012d2:	f000 ff15 	bl	8002100 <Set_PWM3>
  printf("Good\n");
 80012d6:	48ad      	ldr	r0, [pc, #692]	; (800158c <main+0x34c>)
 80012d8:	f007 fa2a 	bl	8008730 <puts>

  /* Start Encoder */
  printf("Start ENC... ");
 80012dc:	48af      	ldr	r0, [pc, #700]	; (800159c <main+0x35c>)
 80012de:	f007 f98b 	bl	80085f8 <iprintf>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80012e2:	2201      	movs	r2, #1
 80012e4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012e8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012ec:	f003 ff6a 	bl	80051c4 <HAL_GPIO_WritePin>
  // 10		- 0 access to current values/1 access all in buffer
  // 9-4	- 6 bit address
  // 3-0	- 4 bit number of data words	if 0000, no safety word

  // 		command1, 	command2,   data1,	    data2,      mask1,      mask2
  printf("\n");
 80012f0:	200a      	movs	r0, #10
 80012f2:	f007 f999 	bl	8008628 <putchar>
//  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000001, 0b11000000, 0b00010111);		// write MOD_1	06 register		A/B
  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000010, 0b11000000, 0b00010111);		// write MOD_1	06 register		step/dir
 80012f6:	2317      	movs	r3, #23
 80012f8:	9301      	str	r3, [sp, #4]
 80012fa:	23c0      	movs	r3, #192	; 0xc0
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	2302      	movs	r3, #2
 8001300:	2240      	movs	r2, #64	; 0x40
 8001302:	2161      	movs	r1, #97	; 0x61
 8001304:	20d0      	movs	r0, #208	; 0xd0
 8001306:	f000 fdf9 	bl	8001efc <ENC_Write>
  ENC_Write(0b11010000, 0b10000001, 0b00001000, 0b00000001, 0b01111111, 0b11111111);		// write MOD_2	08 register
 800130a:	23ff      	movs	r3, #255	; 0xff
 800130c:	9301      	str	r3, [sp, #4]
 800130e:	237f      	movs	r3, #127	; 0x7f
 8001310:	9300      	str	r3, [sp, #0]
 8001312:	2301      	movs	r3, #1
 8001314:	2208      	movs	r2, #8
 8001316:	2181      	movs	r1, #129	; 0x81
 8001318:	20d0      	movs	r0, #208	; 0xd0
 800131a:	f000 fdef 	bl	8001efc <ENC_Write>
  ENC_Write(0b11010000, 0b10010001, 0b00000000, 0b00000000, 0b11111111, 0b11111111);		// write MOD_3  09 register
 800131e:	23ff      	movs	r3, #255	; 0xff
 8001320:	9301      	str	r3, [sp, #4]
 8001322:	23ff      	movs	r3, #255	; 0xff
 8001324:	9300      	str	r3, [sp, #0]
 8001326:	2300      	movs	r3, #0
 8001328:	2200      	movs	r2, #0
 800132a:	2191      	movs	r1, #145	; 0x91
 800132c:	20d0      	movs	r0, #208	; 0xd0
 800132e:	f000 fde5 	bl	8001efc <ENC_Write>
  ENC_Write(0b11010000, 0b11010001, 0b00000000, 0b00001001, 0b11111111, 0b11111111);		// write IFAB	0D register	(13)
 8001332:	23ff      	movs	r3, #255	; 0xff
 8001334:	9301      	str	r3, [sp, #4]
 8001336:	23ff      	movs	r3, #255	; 0xff
 8001338:	9300      	str	r3, [sp, #0]
 800133a:	2309      	movs	r3, #9
 800133c:	2200      	movs	r2, #0
 800133e:	21d1      	movs	r1, #209	; 0xd1
 8001340:	20d0      	movs	r0, #208	; 0xd0
 8001342:	f000 fddb 	bl	8001efc <ENC_Write>
  ENC_Write(0b11010000, 0b11100001, 0b00000000, 0b10000000, 0b00000001, 0b11111011);		// write MOD_4	0E register (14)
 8001346:	23fb      	movs	r3, #251	; 0xfb
 8001348:	9301      	str	r3, [sp, #4]
 800134a:	2301      	movs	r3, #1
 800134c:	9300      	str	r3, [sp, #0]
 800134e:	2380      	movs	r3, #128	; 0x80
 8001350:	2200      	movs	r2, #0
 8001352:	21e1      	movs	r1, #225	; 0xe1
 8001354:	20d0      	movs	r0, #208	; 0xd0
 8001356:	f000 fdd1 	bl	8001efc <ENC_Write>

  ENC_Read_Ang(&enc.SPI_theta);
 800135a:	4891      	ldr	r0, [pc, #580]	; (80015a0 <main+0x360>)
 800135c:	f000 fd7a 	bl	8001e54 <ENC_Read_Ang>
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 8001360:	4b8f      	ldr	r3, [pc, #572]	; (80015a0 <main+0x360>)
 8001362:	ed93 7a00 	vldr	s14, [r3]
 8001366:	eddf 6a8f 	vldr	s13, [pc, #572]	; 80015a4 <main+0x364>
 800136a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800136e:	ed9f 7a8e 	vldr	s14, [pc, #568]	; 80015a8 <main+0x368>
 8001372:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001376:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800137a:	ee17 3a90 	vmov	r3, s15
 800137e:	b21a      	sxth	r2, r3
 8001380:	4b87      	ldr	r3, [pc, #540]	; (80015a0 <main+0x360>)
 8001382:	809a      	strh	r2, [r3, #4]

  /* Start CAN */
  printf("Start CAN... ");
 8001384:	4889      	ldr	r0, [pc, #548]	; (80015ac <main+0x36c>)
 8001386:	f007 f937 	bl	80085f8 <iprintf>
  // can code
  printf("Good\n");
 800138a:	4880      	ldr	r0, [pc, #512]	; (800158c <main+0x34c>)
 800138c:	f007 f9d0 	bl	8008730 <puts>

  /* Setup ADC structure */
  adc.VDDA = 3.30f;
 8001390:	4b87      	ldr	r3, [pc, #540]	; (80015b0 <main+0x370>)
 8001392:	4a88      	ldr	r2, [pc, #544]	; (80015b4 <main+0x374>)
 8001394:	601a      	str	r2, [r3, #0]
  adc.V_bat_R_Top = 255.0f;
 8001396:	4b86      	ldr	r3, [pc, #536]	; (80015b0 <main+0x370>)
 8001398:	4a87      	ldr	r2, [pc, #540]	; (80015b8 <main+0x378>)
 800139a:	61da      	str	r2, [r3, #28]
  adc.V_bat_R_Bot = 10.0f;
 800139c:	4b84      	ldr	r3, [pc, #528]	; (80015b0 <main+0x370>)
 800139e:	4a87      	ldr	r2, [pc, #540]	; (80015bc <main+0x37c>)
 80013a0:	619a      	str	r2, [r3, #24]
  adc.Temp_V_Offset = 0.424f;
 80013a2:	4b83      	ldr	r3, [pc, #524]	; (80015b0 <main+0x370>)
 80013a4:	4a86      	ldr	r2, [pc, #536]	; (80015c0 <main+0x380>)
 80013a6:	625a      	str	r2, [r3, #36]	; 0x24
  adc.Temp_Slope = 0.00625f;
 80013a8:	4b81      	ldr	r3, [pc, #516]	; (80015b0 <main+0x370>)
 80013aa:	4a86      	ldr	r2, [pc, #536]	; (80015c4 <main+0x384>)
 80013ac:	629a      	str	r2, [r3, #40]	; 0x28
  adc.R_Shunt_Res = 0.001f;
 80013ae:	4b80      	ldr	r3, [pc, #512]	; (80015b0 <main+0x370>)
 80013b0:	4a85      	ldr	r2, [pc, #532]	; (80015c8 <main+0x388>)
 80013b2:	63da      	str	r2, [r3, #60]	; 0x3c
  adc.SO_Gain = 40.0f;
 80013b4:	4b7e      	ldr	r3, [pc, #504]	; (80015b0 <main+0x370>)
 80013b6:	2228      	movs	r2, #40	; 0x28
 80013b8:	641a      	str	r2, [r3, #64]	; 0x40

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 80013ba:	4b84      	ldr	r3, [pc, #528]	; (80015cc <main+0x38c>)
 80013bc:	2215      	movs	r2, #21
 80013be:	601a      	str	r2, [r3, #0]
  foc.dt = (float)(2.0f/(170.0f*1000000.0f/(htim2.Init.Period+1)/(htim2.Init.RepetitionCounter+1)));
 80013c0:	4b74      	ldr	r3, [pc, #464]	; (8001594 <main+0x354>)
 80013c2:	68db      	ldr	r3, [r3, #12]
 80013c4:	3301      	adds	r3, #1
 80013c6:	ee07 3a90 	vmov	s15, r3
 80013ca:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013ce:	ed9f 7a80 	vldr	s14, [pc, #512]	; 80015d0 <main+0x390>
 80013d2:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013d6:	4b6f      	ldr	r3, [pc, #444]	; (8001594 <main+0x354>)
 80013d8:	695b      	ldr	r3, [r3, #20]
 80013da:	3301      	adds	r3, #1
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013f0:	4b76      	ldr	r3, [pc, #472]	; (80015cc <main+0x38c>)
 80013f2:	edc3 7a01 	vstr	s15, [r3, #4]
  foc.PWM_Reg_Max = htim2.Init.Period;
 80013f6:	4b67      	ldr	r3, [pc, #412]	; (8001594 <main+0x354>)
 80013f8:	68db      	ldr	r3, [r3, #12]
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	4b73      	ldr	r3, [pc, #460]	; (80015cc <main+0x38c>)
 80013fe:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8001402:	4b74      	ldr	r3, [pc, #464]	; (80015d4 <main+0x394>)
 8001404:	4a74      	ldr	r2, [pc, #464]	; (80015d8 <main+0x398>)
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4b72      	ldr	r3, [pc, #456]	; (80015d4 <main+0x394>)
 800140a:	4a74      	ldr	r2, [pc, #464]	; (80015dc <main+0x39c>)
 800140c:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 800140e:	4b71      	ldr	r3, [pc, #452]	; (80015d4 <main+0x394>)
 8001410:	4a71      	ldr	r2, [pc, #452]	; (80015d8 <main+0x398>)
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	4b6f      	ldr	r3, [pc, #444]	; (80015d4 <main+0x394>)
 8001416:	4a71      	ldr	r2, [pc, #452]	; (80015dc <main+0x39c>)
 8001418:	60da      	str	r2, [r3, #12]

  printf("\nSetup complete!\n\n");
 800141a:	4871      	ldr	r0, [pc, #452]	; (80015e0 <main+0x3a0>)
 800141c:	f007 f988 	bl	8008730 <puts>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  if(RCR==0 && FOC_Running==0)	// on correct RCR and FOC algorithm isnt running,
 8001420:	4b70      	ldr	r3, [pc, #448]	; (80015e4 <main+0x3a4>)
 8001422:	f993 3000 	ldrsb.w	r3, [r3]
 8001426:	2b00      	cmp	r3, #0
 8001428:	d1fa      	bne.n	8001420 <main+0x1e0>
 800142a:	4b6f      	ldr	r3, [pc, #444]	; (80015e8 <main+0x3a8>)
 800142c:	f993 3000 	ldrsb.w	r3, [r3]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d1f5      	bne.n	8001420 <main+0x1e0>
	  	{
	  		/* LED on */
	  		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 8001434:	2201      	movs	r2, #1
 8001436:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800143a:	486c      	ldr	r0, [pc, #432]	; (80015ec <main+0x3ac>)
 800143c:	f003 fec2 	bl	80051c4 <HAL_GPIO_WritePin>

	  		FOC_Running=1;	// now is running. need to set this otherwise next interrupt will run FOC again
 8001440:	4b69      	ldr	r3, [pc, #420]	; (80015e8 <main+0x3a8>)
 8001442:	2201      	movs	r2, #1
 8001444:	701a      	strb	r2, [r3, #0]

	  		/* FOC sample */
	  		ADC_Get_Raw(&adc.i_a_Raw,&adc.i_b_Raw, &adc.PVDD_Raw, &adc.Temp_Raw);	// Read raw ADC
 8001446:	4b6a      	ldr	r3, [pc, #424]	; (80015f0 <main+0x3b0>)
 8001448:	4a6a      	ldr	r2, [pc, #424]	; (80015f4 <main+0x3b4>)
 800144a:	496b      	ldr	r1, [pc, #428]	; (80015f8 <main+0x3b8>)
 800144c:	486b      	ldr	r0, [pc, #428]	; (80015fc <main+0x3bc>)
 800144e:	f000 fbf9 	bl	8001c44 <ADC_Get_Raw>
	  		enc.IIF_Raw = enc.IIF_Counter;											// Get encoder angle
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <main+0x360>)
 8001454:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001458:	b29a      	uxth	r2, r3
 800145a:	4b51      	ldr	r3, [pc, #324]	; (80015a0 <main+0x360>)
 800145c:	821a      	strh	r2, [r3, #16]

	  		/* Filter and normalise readings */
	  		ADC_Filter_Curr(adc.i_a_Raw,adc.i_b_Raw,&adc.i_a_Fil,&adc.i_b_Fil);		// Filter raw ADC currents
 800145e:	4b54      	ldr	r3, [pc, #336]	; (80015b0 <main+0x370>)
 8001460:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8001464:	4b52      	ldr	r3, [pc, #328]	; (80015b0 <main+0x370>)
 8001466:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 800146a:	4b65      	ldr	r3, [pc, #404]	; (8001600 <main+0x3c0>)
 800146c:	4a65      	ldr	r2, [pc, #404]	; (8001604 <main+0x3c4>)
 800146e:	f000 fc19 	bl	8001ca4 <ADC_Filter_Curr>
	  		ADC_Norm_Curr  (adc.i_a_Fil,adc.i_b_Fil,&foc.i_a,&foc.i_b);				// Normalise currents
 8001472:	4b4f      	ldr	r3, [pc, #316]	; (80015b0 <main+0x370>)
 8001474:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	; 0x34
 8001478:	4b4d      	ldr	r3, [pc, #308]	; (80015b0 <main+0x370>)
 800147a:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	; 0x36
 800147e:	4b62      	ldr	r3, [pc, #392]	; (8001608 <main+0x3c8>)
 8001480:	4a62      	ldr	r2, [pc, #392]	; (800160c <main+0x3cc>)
 8001482:	f000 fc8d 	bl	8001da0 <ADC_Norm_Curr>
	  		foc.m_theta = (float)enc.IIF_Raw / 4095.0f * 360.0f;					// Normalise angle to 0-360deg
 8001486:	4b46      	ldr	r3, [pc, #280]	; (80015a0 <main+0x360>)
 8001488:	8a1b      	ldrh	r3, [r3, #16]
 800148a:	ee07 3a90 	vmov	s15, r3
 800148e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001492:	eddf 6a45 	vldr	s13, [pc, #276]	; 80015a8 <main+0x368>
 8001496:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800149a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80015a4 <main+0x364>
 800149e:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014a2:	4b4a      	ldr	r3, [pc, #296]	; (80015cc <main+0x38c>)
 80014a4:	edc3 7a02 	vstr	s15, [r3, #8]

	  		/* FOC maths */
	  		// Get electrical angles correct
	  		foc.e_theta = fmodf(foc.m_theta*foc.Pole_Pairs,360.0f);	// get electrical angle and constrain in 360 deg
 80014a8:	4b48      	ldr	r3, [pc, #288]	; (80015cc <main+0x38c>)
 80014aa:	ed93 7a02 	vldr	s14, [r3, #8]
 80014ae:	4b47      	ldr	r3, [pc, #284]	; (80015cc <main+0x38c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	ee07 3a90 	vmov	s15, r3
 80014b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80014ba:	ee67 7a27 	vmul.f32	s15, s14, s15
 80014be:	eddf 0a39 	vldr	s1, [pc, #228]	; 80015a4 <main+0x364>
 80014c2:	eeb0 0a67 	vmov.f32	s0, s15
 80014c6:	f008 f943 	bl	8009750 <fmodf>
 80014ca:	eef0 7a40 	vmov.f32	s15, s0
 80014ce:	4b3f      	ldr	r3, [pc, #252]	; (80015cc <main+0x38c>)
 80014d0:	edc3 7a04 	vstr	s15, [r3, #16]

	  		// Clarke -> alpha/beta
	  		foc.i_alph = foc.i_a;
 80014d4:	4b3d      	ldr	r3, [pc, #244]	; (80015cc <main+0x38c>)
 80014d6:	699b      	ldr	r3, [r3, #24]
 80014d8:	4a3c      	ldr	r2, [pc, #240]	; (80015cc <main+0x38c>)
 80014da:	6253      	str	r3, [r2, #36]	; 0x24
	  		foc.i_beta = SQRT1_3 * (2.0f*foc.i_b - foc.i_a);
 80014dc:	4b3b      	ldr	r3, [pc, #236]	; (80015cc <main+0x38c>)
 80014de:	edd3 7a07 	vldr	s15, [r3, #28]
 80014e2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80014e6:	4b39      	ldr	r3, [pc, #228]	; (80015cc <main+0x38c>)
 80014e8:	edd3 7a06 	vldr	s15, [r3, #24]
 80014ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80014f0:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001610 <main+0x3d0>
 80014f4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80014f8:	4b34      	ldr	r3, [pc, #208]	; (80015cc <main+0x38c>)
 80014fa:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	  		// Park -> direct/quadrature
	  		float sin_Ang = _sin(foc.e_theta);
 80014fe:	4b33      	ldr	r3, [pc, #204]	; (80015cc <main+0x38c>)
 8001500:	edd3 7a04 	vldr	s15, [r3, #16]
 8001504:	eeb0 0a67 	vmov.f32	s0, s15
 8001508:	f000 fe44 	bl	8002194 <_sin>
 800150c:	ed87 0a01 	vstr	s0, [r7, #4]
	  		float cos_Ang = _cos(foc.e_theta);
 8001510:	4b2e      	ldr	r3, [pc, #184]	; (80015cc <main+0x38c>)
 8001512:	edd3 7a04 	vldr	s15, [r3, #16]
 8001516:	eeb0 0a67 	vmov.f32	s0, s15
 800151a:	f000 fe5d 	bl	80021d8 <_cos>
 800151e:	ed87 0a00 	vstr	s0, [r7]
	  		foc.i_d = cos_Ang*foc.i_alph + sin_Ang*foc.i_beta;
 8001522:	4b2a      	ldr	r3, [pc, #168]	; (80015cc <main+0x38c>)
 8001524:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001528:	edd7 7a00 	vldr	s15, [r7]
 800152c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001530:	4b26      	ldr	r3, [pc, #152]	; (80015cc <main+0x38c>)
 8001532:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001536:	edd7 7a01 	vldr	s15, [r7, #4]
 800153a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800153e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <main+0x38c>)
 8001544:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	  		foc.i_q = cos_Ang*foc.i_beta - sin_Ang*foc.i_alph;
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <main+0x38c>)
 800154a:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 800154e:	edd7 7a00 	vldr	s15, [r7]
 8001552:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001556:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <main+0x38c>)
 8001558:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 800155c:	edd7 7a01 	vldr	s15, [r7, #4]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <main+0x38c>)
 800156a:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	  		/* Regulate currents */
	  		foc.DC_I = 0.3f;				// Current duty cycle
 800156e:	4b17      	ldr	r3, [pc, #92]	; (80015cc <main+0x38c>)
 8001570:	e050      	b.n	8001614 <main+0x3d4>
 8001572:	bf00      	nop
 8001574:	080098c4 	.word	0x080098c4
 8001578:	080098e8 	.word	0x080098e8
 800157c:	20000114 	.word	0x20000114
 8001580:	20000320 	.word	0x20000320
 8001584:	200000a8 	.word	0x200000a8
 8001588:	20000328 	.word	0x20000328
 800158c:	080098f8 	.word	0x080098f8
 8001590:	08009900 	.word	0x08009900
 8001594:	20000468 	.word	0x20000468
 8001598:	00000000 	.word	0x00000000
 800159c:	08009910 	.word	0x08009910
 80015a0:	200002a8 	.word	0x200002a8
 80015a4:	43b40000 	.word	0x43b40000
 80015a8:	457ff000 	.word	0x457ff000
 80015ac:	08009920 	.word	0x08009920
 80015b0:	2000031c 	.word	0x2000031c
 80015b4:	40533333 	.word	0x40533333
 80015b8:	437f0000 	.word	0x437f0000
 80015bc:	41200000 	.word	0x41200000
 80015c0:	3ed91687 	.word	0x3ed91687
 80015c4:	3bcccccd 	.word	0x3bcccccd
 80015c8:	3a83126f 	.word	0x3a83126f
 80015cc:	200002c0 	.word	0x200002c0
 80015d0:	4d221fe8 	.word	0x4d221fe8
 80015d4:	200003e4 	.word	0x200003e4
 80015d8:	3ed78d50 	.word	0x3ed78d50
 80015dc:	3e21cac1 	.word	0x3e21cac1
 80015e0:	08009930 	.word	0x08009930
 80015e4:	20000099 	.word	0x20000099
 80015e8:	20000098 	.word	0x20000098
 80015ec:	48000400 	.word	0x48000400
 80015f0:	2000034e 	.word	0x2000034e
 80015f4:	2000034c 	.word	0x2000034c
 80015f8:	2000034a 	.word	0x2000034a
 80015fc:	20000348 	.word	0x20000348
 8001600:	20000352 	.word	0x20000352
 8001604:	20000350 	.word	0x20000350
 8001608:	200002dc 	.word	0x200002dc
 800160c:	200002d8 	.word	0x200002d8
 8001610:	3f13cd3a 	.word	0x3f13cd3a
 8001614:	4ac6      	ldr	r2, [pc, #792]	; (8001930 <main+0x6f0>)
 8001616:	635a      	str	r2, [r3, #52]	; 0x34

	  		/* Set PWM Compare values */
	  		foc.alpha = fmodf(foc.e_theta,60.0f);	// calculate alpha
 8001618:	4bc6      	ldr	r3, [pc, #792]	; (8001934 <main+0x6f4>)
 800161a:	edd3 7a04 	vldr	s15, [r3, #16]
 800161e:	eddf 0ac6 	vldr	s1, [pc, #792]	; 8001938 <main+0x6f8>
 8001622:	eeb0 0a67 	vmov.f32	s0, s15
 8001626:	f008 f893 	bl	8009750 <fmodf>
 800162a:	eef0 7a40 	vmov.f32	s15, s0
 800162e:	4bc1      	ldr	r3, [pc, #772]	; (8001934 <main+0x6f4>)
 8001630:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	  		foc.DC_1 = foc.DC_I*_sin(60.0f - foc.alpha);
 8001634:	4bbf      	ldr	r3, [pc, #764]	; (8001934 <main+0x6f4>)
 8001636:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 800163a:	4bbe      	ldr	r3, [pc, #760]	; (8001934 <main+0x6f4>)
 800163c:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001640:	ed9f 7abd 	vldr	s14, [pc, #756]	; 8001938 <main+0x6f8>
 8001644:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001648:	eeb0 0a67 	vmov.f32	s0, s15
 800164c:	f000 fda2 	bl	8002194 <_sin>
 8001650:	eef0 7a40 	vmov.f32	s15, s0
 8001654:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001658:	4bb6      	ldr	r3, [pc, #728]	; (8001934 <main+0x6f4>)
 800165a:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	  		foc.DC_2 = foc.DC_I*_sin(foc.alpha);
 800165e:	4bb5      	ldr	r3, [pc, #724]	; (8001934 <main+0x6f4>)
 8001660:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001664:	4bb3      	ldr	r3, [pc, #716]	; (8001934 <main+0x6f4>)
 8001666:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 800166a:	eeb0 0a67 	vmov.f32	s0, s15
 800166e:	f000 fd91 	bl	8002194 <_sin>
 8001672:	eef0 7a40 	vmov.f32	s15, s0
 8001676:	ee68 7a27 	vmul.f32	s15, s16, s15
 800167a:	4bae      	ldr	r3, [pc, #696]	; (8001934 <main+0x6f4>)
 800167c:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	  		foc.DC_0 = 1.0f - foc.DC_1 - foc.DC_2;
 8001680:	4bac      	ldr	r3, [pc, #688]	; (8001934 <main+0x6f4>)
 8001682:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001686:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800168a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800168e:	4ba9      	ldr	r3, [pc, #676]	; (8001934 <main+0x6f4>)
 8001690:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001694:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001698:	4ba6      	ldr	r3, [pc, #664]	; (8001934 <main+0x6f4>)
 800169a:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	  		foc.sector = (int)floor(foc.e_theta/60.0f);
 800169e:	4ba5      	ldr	r3, [pc, #660]	; (8001934 <main+0x6f4>)
 80016a0:	edd3 7a04 	vldr	s15, [r3, #16]
 80016a4:	ed9f 7aa4 	vldr	s14, [pc, #656]	; 8001938 <main+0x6f8>
 80016a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 80016ac:	ee16 0a90 	vmov	r0, s13
 80016b0:	f7ff f894 	bl	80007dc <__aeabi_f2d>
 80016b4:	4602      	mov	r2, r0
 80016b6:	460b      	mov	r3, r1
 80016b8:	ec43 2b10 	vmov	d0, r2, r3
 80016bc:	f007 ffc8 	bl	8009650 <floor>
 80016c0:	ec53 2b10 	vmov	r2, r3, d0
 80016c4:	4610      	mov	r0, r2
 80016c6:	4619      	mov	r1, r3
 80016c8:	f7ff f968 	bl	800099c <__aeabi_d2iz>
 80016cc:	4603      	mov	r3, r0
 80016ce:	4a99      	ldr	r2, [pc, #612]	; (8001934 <main+0x6f4>)
 80016d0:	63d3      	str	r3, [r2, #60]	; 0x3c

	  		switch (foc.sector)
 80016d2:	4b98      	ldr	r3, [pc, #608]	; (8001934 <main+0x6f4>)
 80016d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016d6:	2b05      	cmp	r3, #5
 80016d8:	f200 824c 	bhi.w	8001b74 <main+0x934>
 80016dc:	a201      	add	r2, pc, #4	; (adr r2, 80016e4 <main+0x4a4>)
 80016de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016e2:	bf00      	nop
 80016e4:	080016fd 	.word	0x080016fd
 80016e8:	080017b9 	.word	0x080017b9
 80016ec:	08001875 	.word	0x08001875
 80016f0:	08001941 	.word	0x08001941
 80016f4:	080019fd 	.word	0x080019fd
 80016f8:	08001ab9 	.word	0x08001ab9
	  		{
	  			case 0:
	  				foc.PWM_A = 0.5*foc.DC_0;
 80016fc:	4b8d      	ldr	r3, [pc, #564]	; (8001934 <main+0x6f4>)
 80016fe:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001702:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001706:	ee67 7a87 	vmul.f32	s15, s15, s14
 800170a:	4b8a      	ldr	r3, [pc, #552]	; (8001934 <main+0x6f4>)
 800170c:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1;
 8001710:	4b88      	ldr	r3, [pc, #544]	; (8001934 <main+0x6f4>)
 8001712:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001714:	4618      	mov	r0, r3
 8001716:	f7ff f861 	bl	80007dc <__aeabi_f2d>
 800171a:	f04f 0200 	mov.w	r2, #0
 800171e:	4b87      	ldr	r3, [pc, #540]	; (800193c <main+0x6fc>)
 8001720:	f7fe fdce 	bl	80002c0 <__aeabi_dmul>
 8001724:	4602      	mov	r2, r0
 8001726:	460b      	mov	r3, r1
 8001728:	4614      	mov	r4, r2
 800172a:	461d      	mov	r5, r3
 800172c:	4b81      	ldr	r3, [pc, #516]	; (8001934 <main+0x6f4>)
 800172e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001730:	4618      	mov	r0, r3
 8001732:	f7ff f853 	bl	80007dc <__aeabi_f2d>
 8001736:	4602      	mov	r2, r0
 8001738:	460b      	mov	r3, r1
 800173a:	4620      	mov	r0, r4
 800173c:	4629      	mov	r1, r5
 800173e:	f7fe feef 	bl	8000520 <__adddf3>
 8001742:	4602      	mov	r2, r0
 8001744:	460b      	mov	r3, r1
 8001746:	4610      	mov	r0, r2
 8001748:	4619      	mov	r1, r3
 800174a:	f7ff f94f 	bl	80009ec <__aeabi_d2f>
 800174e:	4603      	mov	r3, r0
 8001750:	4a78      	ldr	r2, [pc, #480]	; (8001934 <main+0x6f4>)
 8001752:	6593      	str	r3, [r2, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001754:	4b77      	ldr	r3, [pc, #476]	; (8001934 <main+0x6f4>)
 8001756:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001758:	4618      	mov	r0, r3
 800175a:	f7ff f83f 	bl	80007dc <__aeabi_f2d>
 800175e:	f04f 0200 	mov.w	r2, #0
 8001762:	4b76      	ldr	r3, [pc, #472]	; (800193c <main+0x6fc>)
 8001764:	f7fe fdac 	bl	80002c0 <__aeabi_dmul>
 8001768:	4602      	mov	r2, r0
 800176a:	460b      	mov	r3, r1
 800176c:	4614      	mov	r4, r2
 800176e:	461d      	mov	r5, r3
 8001770:	4b70      	ldr	r3, [pc, #448]	; (8001934 <main+0x6f4>)
 8001772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff f831 	bl	80007dc <__aeabi_f2d>
 800177a:	4602      	mov	r2, r0
 800177c:	460b      	mov	r3, r1
 800177e:	4620      	mov	r0, r4
 8001780:	4629      	mov	r1, r5
 8001782:	f7fe fecd 	bl	8000520 <__adddf3>
 8001786:	4602      	mov	r2, r0
 8001788:	460b      	mov	r3, r1
 800178a:	4614      	mov	r4, r2
 800178c:	461d      	mov	r5, r3
 800178e:	4b69      	ldr	r3, [pc, #420]	; (8001934 <main+0x6f4>)
 8001790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001792:	4618      	mov	r0, r3
 8001794:	f7ff f822 	bl	80007dc <__aeabi_f2d>
 8001798:	4602      	mov	r2, r0
 800179a:	460b      	mov	r3, r1
 800179c:	4620      	mov	r0, r4
 800179e:	4629      	mov	r1, r5
 80017a0:	f7fe febe 	bl	8000520 <__adddf3>
 80017a4:	4602      	mov	r2, r0
 80017a6:	460b      	mov	r3, r1
 80017a8:	4610      	mov	r0, r2
 80017aa:	4619      	mov	r1, r3
 80017ac:	f7ff f91e 	bl	80009ec <__aeabi_d2f>
 80017b0:	4603      	mov	r3, r0
 80017b2:	4a60      	ldr	r2, [pc, #384]	; (8001934 <main+0x6f4>)
 80017b4:	6553      	str	r3, [r2, #84]	; 0x54
	  				break;
 80017b6:	e1dd      	b.n	8001b74 <main+0x934>
	  			case 1:
	  				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_2;
 80017b8:	4b5e      	ldr	r3, [pc, #376]	; (8001934 <main+0x6f4>)
 80017ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80017bc:	4618      	mov	r0, r3
 80017be:	f7ff f80d 	bl	80007dc <__aeabi_f2d>
 80017c2:	f04f 0200 	mov.w	r2, #0
 80017c6:	4b5d      	ldr	r3, [pc, #372]	; (800193c <main+0x6fc>)
 80017c8:	f7fe fd7a 	bl	80002c0 <__aeabi_dmul>
 80017cc:	4602      	mov	r2, r0
 80017ce:	460b      	mov	r3, r1
 80017d0:	4614      	mov	r4, r2
 80017d2:	461d      	mov	r5, r3
 80017d4:	4b57      	ldr	r3, [pc, #348]	; (8001934 <main+0x6f4>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	4618      	mov	r0, r3
 80017da:	f7fe ffff 	bl	80007dc <__aeabi_f2d>
 80017de:	4602      	mov	r2, r0
 80017e0:	460b      	mov	r3, r1
 80017e2:	4620      	mov	r0, r4
 80017e4:	4629      	mov	r1, r5
 80017e6:	f7fe fe9b 	bl	8000520 <__adddf3>
 80017ea:	4602      	mov	r2, r0
 80017ec:	460b      	mov	r3, r1
 80017ee:	4610      	mov	r0, r2
 80017f0:	4619      	mov	r1, r3
 80017f2:	f7ff f8fb 	bl	80009ec <__aeabi_d2f>
 80017f6:	4603      	mov	r3, r0
 80017f8:	4a4e      	ldr	r2, [pc, #312]	; (8001934 <main+0x6f4>)
 80017fa:	6513      	str	r3, [r2, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0;
 80017fc:	4b4d      	ldr	r3, [pc, #308]	; (8001934 <main+0x6f4>)
 80017fe:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001802:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001806:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180a:	4b4a      	ldr	r3, [pc, #296]	; (8001934 <main+0x6f4>)
 800180c:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001810:	4b48      	ldr	r3, [pc, #288]	; (8001934 <main+0x6f4>)
 8001812:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001814:	4618      	mov	r0, r3
 8001816:	f7fe ffe1 	bl	80007dc <__aeabi_f2d>
 800181a:	f04f 0200 	mov.w	r2, #0
 800181e:	4b47      	ldr	r3, [pc, #284]	; (800193c <main+0x6fc>)
 8001820:	f7fe fd4e 	bl	80002c0 <__aeabi_dmul>
 8001824:	4602      	mov	r2, r0
 8001826:	460b      	mov	r3, r1
 8001828:	4614      	mov	r4, r2
 800182a:	461d      	mov	r5, r3
 800182c:	4b41      	ldr	r3, [pc, #260]	; (8001934 <main+0x6f4>)
 800182e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001830:	4618      	mov	r0, r3
 8001832:	f7fe ffd3 	bl	80007dc <__aeabi_f2d>
 8001836:	4602      	mov	r2, r0
 8001838:	460b      	mov	r3, r1
 800183a:	4620      	mov	r0, r4
 800183c:	4629      	mov	r1, r5
 800183e:	f7fe fe6f 	bl	8000520 <__adddf3>
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	4614      	mov	r4, r2
 8001848:	461d      	mov	r5, r3
 800184a:	4b3a      	ldr	r3, [pc, #232]	; (8001934 <main+0x6f4>)
 800184c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800184e:	4618      	mov	r0, r3
 8001850:	f7fe ffc4 	bl	80007dc <__aeabi_f2d>
 8001854:	4602      	mov	r2, r0
 8001856:	460b      	mov	r3, r1
 8001858:	4620      	mov	r0, r4
 800185a:	4629      	mov	r1, r5
 800185c:	f7fe fe60 	bl	8000520 <__adddf3>
 8001860:	4602      	mov	r2, r0
 8001862:	460b      	mov	r3, r1
 8001864:	4610      	mov	r0, r2
 8001866:	4619      	mov	r1, r3
 8001868:	f7ff f8c0 	bl	80009ec <__aeabi_d2f>
 800186c:	4603      	mov	r3, r0
 800186e:	4a31      	ldr	r2, [pc, #196]	; (8001934 <main+0x6f4>)
 8001870:	6553      	str	r3, [r2, #84]	; 0x54
	  				break;
 8001872:	e17f      	b.n	8001b74 <main+0x934>
	  			case 2:
	  				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001874:	4b2f      	ldr	r3, [pc, #188]	; (8001934 <main+0x6f4>)
 8001876:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001878:	4618      	mov	r0, r3
 800187a:	f7fe ffaf 	bl	80007dc <__aeabi_f2d>
 800187e:	f04f 0200 	mov.w	r2, #0
 8001882:	4b2e      	ldr	r3, [pc, #184]	; (800193c <main+0x6fc>)
 8001884:	f7fe fd1c 	bl	80002c0 <__aeabi_dmul>
 8001888:	4602      	mov	r2, r0
 800188a:	460b      	mov	r3, r1
 800188c:	4614      	mov	r4, r2
 800188e:	461d      	mov	r5, r3
 8001890:	4b28      	ldr	r3, [pc, #160]	; (8001934 <main+0x6f4>)
 8001892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001894:	4618      	mov	r0, r3
 8001896:	f7fe ffa1 	bl	80007dc <__aeabi_f2d>
 800189a:	4602      	mov	r2, r0
 800189c:	460b      	mov	r3, r1
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fe3d 	bl	8000520 <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	4614      	mov	r4, r2
 80018ac:	461d      	mov	r5, r3
 80018ae:	4b21      	ldr	r3, [pc, #132]	; (8001934 <main+0x6f4>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4618      	mov	r0, r3
 80018b4:	f7fe ff92 	bl	80007dc <__aeabi_f2d>
 80018b8:	4602      	mov	r2, r0
 80018ba:	460b      	mov	r3, r1
 80018bc:	4620      	mov	r0, r4
 80018be:	4629      	mov	r1, r5
 80018c0:	f7fe fe2e 	bl	8000520 <__adddf3>
 80018c4:	4602      	mov	r2, r0
 80018c6:	460b      	mov	r3, r1
 80018c8:	4610      	mov	r0, r2
 80018ca:	4619      	mov	r1, r3
 80018cc:	f7ff f88e 	bl	80009ec <__aeabi_d2f>
 80018d0:	4603      	mov	r3, r0
 80018d2:	4a18      	ldr	r2, [pc, #96]	; (8001934 <main+0x6f4>)
 80018d4:	6513      	str	r3, [r2, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0;
 80018d6:	4b17      	ldr	r3, [pc, #92]	; (8001934 <main+0x6f4>)
 80018d8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80018dc:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80018e0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80018e4:	4b13      	ldr	r3, [pc, #76]	; (8001934 <main+0x6f4>)
 80018e6:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1;
 80018ea:	4b12      	ldr	r3, [pc, #72]	; (8001934 <main+0x6f4>)
 80018ec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80018ee:	4618      	mov	r0, r3
 80018f0:	f7fe ff74 	bl	80007dc <__aeabi_f2d>
 80018f4:	f04f 0200 	mov.w	r2, #0
 80018f8:	4b10      	ldr	r3, [pc, #64]	; (800193c <main+0x6fc>)
 80018fa:	f7fe fce1 	bl	80002c0 <__aeabi_dmul>
 80018fe:	4602      	mov	r2, r0
 8001900:	460b      	mov	r3, r1
 8001902:	4614      	mov	r4, r2
 8001904:	461d      	mov	r5, r3
 8001906:	4b0b      	ldr	r3, [pc, #44]	; (8001934 <main+0x6f4>)
 8001908:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190a:	4618      	mov	r0, r3
 800190c:	f7fe ff66 	bl	80007dc <__aeabi_f2d>
 8001910:	4602      	mov	r2, r0
 8001912:	460b      	mov	r3, r1
 8001914:	4620      	mov	r0, r4
 8001916:	4629      	mov	r1, r5
 8001918:	f7fe fe02 	bl	8000520 <__adddf3>
 800191c:	4602      	mov	r2, r0
 800191e:	460b      	mov	r3, r1
 8001920:	4610      	mov	r0, r2
 8001922:	4619      	mov	r1, r3
 8001924:	f7ff f862 	bl	80009ec <__aeabi_d2f>
 8001928:	4603      	mov	r3, r0
 800192a:	4a02      	ldr	r2, [pc, #8]	; (8001934 <main+0x6f4>)
 800192c:	6553      	str	r3, [r2, #84]	; 0x54
	  				break;
 800192e:	e121      	b.n	8001b74 <main+0x934>
 8001930:	3e99999a 	.word	0x3e99999a
 8001934:	200002c0 	.word	0x200002c0
 8001938:	42700000 	.word	0x42700000
 800193c:	3fe00000 	.word	0x3fe00000
	  			case 3:
	  				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001940:	4b95      	ldr	r3, [pc, #596]	; (8001b98 <main+0x958>)
 8001942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001944:	4618      	mov	r0, r3
 8001946:	f7fe ff49 	bl	80007dc <__aeabi_f2d>
 800194a:	f04f 0200 	mov.w	r2, #0
 800194e:	4b93      	ldr	r3, [pc, #588]	; (8001b9c <main+0x95c>)
 8001950:	f7fe fcb6 	bl	80002c0 <__aeabi_dmul>
 8001954:	4602      	mov	r2, r0
 8001956:	460b      	mov	r3, r1
 8001958:	4614      	mov	r4, r2
 800195a:	461d      	mov	r5, r3
 800195c:	4b8e      	ldr	r3, [pc, #568]	; (8001b98 <main+0x958>)
 800195e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001960:	4618      	mov	r0, r3
 8001962:	f7fe ff3b 	bl	80007dc <__aeabi_f2d>
 8001966:	4602      	mov	r2, r0
 8001968:	460b      	mov	r3, r1
 800196a:	4620      	mov	r0, r4
 800196c:	4629      	mov	r1, r5
 800196e:	f7fe fdd7 	bl	8000520 <__adddf3>
 8001972:	4602      	mov	r2, r0
 8001974:	460b      	mov	r3, r1
 8001976:	4614      	mov	r4, r2
 8001978:	461d      	mov	r5, r3
 800197a:	4b87      	ldr	r3, [pc, #540]	; (8001b98 <main+0x958>)
 800197c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800197e:	4618      	mov	r0, r3
 8001980:	f7fe ff2c 	bl	80007dc <__aeabi_f2d>
 8001984:	4602      	mov	r2, r0
 8001986:	460b      	mov	r3, r1
 8001988:	4620      	mov	r0, r4
 800198a:	4629      	mov	r1, r5
 800198c:	f7fe fdc8 	bl	8000520 <__adddf3>
 8001990:	4602      	mov	r2, r0
 8001992:	460b      	mov	r3, r1
 8001994:	4610      	mov	r0, r2
 8001996:	4619      	mov	r1, r3
 8001998:	f7ff f828 	bl	80009ec <__aeabi_d2f>
 800199c:	4603      	mov	r3, r0
 800199e:	4a7e      	ldr	r2, [pc, #504]	; (8001b98 <main+0x958>)
 80019a0:	6513      	str	r3, [r2, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_2;
 80019a2:	4b7d      	ldr	r3, [pc, #500]	; (8001b98 <main+0x958>)
 80019a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7fe ff18 	bl	80007dc <__aeabi_f2d>
 80019ac:	f04f 0200 	mov.w	r2, #0
 80019b0:	4b7a      	ldr	r3, [pc, #488]	; (8001b9c <main+0x95c>)
 80019b2:	f7fe fc85 	bl	80002c0 <__aeabi_dmul>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4614      	mov	r4, r2
 80019bc:	461d      	mov	r5, r3
 80019be:	4b76      	ldr	r3, [pc, #472]	; (8001b98 <main+0x958>)
 80019c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019c2:	4618      	mov	r0, r3
 80019c4:	f7fe ff0a 	bl	80007dc <__aeabi_f2d>
 80019c8:	4602      	mov	r2, r0
 80019ca:	460b      	mov	r3, r1
 80019cc:	4620      	mov	r0, r4
 80019ce:	4629      	mov	r1, r5
 80019d0:	f7fe fda6 	bl	8000520 <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f806 	bl	80009ec <__aeabi_d2f>
 80019e0:	4603      	mov	r3, r0
 80019e2:	4a6d      	ldr	r2, [pc, #436]	; (8001b98 <main+0x958>)
 80019e4:	6593      	str	r3, [r2, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0;
 80019e6:	4b6c      	ldr	r3, [pc, #432]	; (8001b98 <main+0x958>)
 80019e8:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80019ec:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80019f0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80019f4:	4b68      	ldr	r3, [pc, #416]	; (8001b98 <main+0x958>)
 80019f6:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	  				break;
 80019fa:	e0bb      	b.n	8001b74 <main+0x934>
	  			case 4:
	  				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1;
 80019fc:	4b66      	ldr	r3, [pc, #408]	; (8001b98 <main+0x958>)
 80019fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe feeb 	bl	80007dc <__aeabi_f2d>
 8001a06:	f04f 0200 	mov.w	r2, #0
 8001a0a:	4b64      	ldr	r3, [pc, #400]	; (8001b9c <main+0x95c>)
 8001a0c:	f7fe fc58 	bl	80002c0 <__aeabi_dmul>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4614      	mov	r4, r2
 8001a16:	461d      	mov	r5, r3
 8001a18:	4b5f      	ldr	r3, [pc, #380]	; (8001b98 <main+0x958>)
 8001a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fedd 	bl	80007dc <__aeabi_f2d>
 8001a22:	4602      	mov	r2, r0
 8001a24:	460b      	mov	r3, r1
 8001a26:	4620      	mov	r0, r4
 8001a28:	4629      	mov	r1, r5
 8001a2a:	f7fe fd79 	bl	8000520 <__adddf3>
 8001a2e:	4602      	mov	r2, r0
 8001a30:	460b      	mov	r3, r1
 8001a32:	4610      	mov	r0, r2
 8001a34:	4619      	mov	r1, r3
 8001a36:	f7fe ffd9 	bl	80009ec <__aeabi_d2f>
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	4a56      	ldr	r2, [pc, #344]	; (8001b98 <main+0x958>)
 8001a3e:	6513      	str	r3, [r2, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001a40:	4b55      	ldr	r3, [pc, #340]	; (8001b98 <main+0x958>)
 8001a42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a44:	4618      	mov	r0, r3
 8001a46:	f7fe fec9 	bl	80007dc <__aeabi_f2d>
 8001a4a:	f04f 0200 	mov.w	r2, #0
 8001a4e:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <main+0x95c>)
 8001a50:	f7fe fc36 	bl	80002c0 <__aeabi_dmul>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4614      	mov	r4, r2
 8001a5a:	461d      	mov	r5, r3
 8001a5c:	4b4e      	ldr	r3, [pc, #312]	; (8001b98 <main+0x958>)
 8001a5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a60:	4618      	mov	r0, r3
 8001a62:	f7fe febb 	bl	80007dc <__aeabi_f2d>
 8001a66:	4602      	mov	r2, r0
 8001a68:	460b      	mov	r3, r1
 8001a6a:	4620      	mov	r0, r4
 8001a6c:	4629      	mov	r1, r5
 8001a6e:	f7fe fd57 	bl	8000520 <__adddf3>
 8001a72:	4602      	mov	r2, r0
 8001a74:	460b      	mov	r3, r1
 8001a76:	4614      	mov	r4, r2
 8001a78:	461d      	mov	r5, r3
 8001a7a:	4b47      	ldr	r3, [pc, #284]	; (8001b98 <main+0x958>)
 8001a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f7fe feac 	bl	80007dc <__aeabi_f2d>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4620      	mov	r0, r4
 8001a8a:	4629      	mov	r1, r5
 8001a8c:	f7fe fd48 	bl	8000520 <__adddf3>
 8001a90:	4602      	mov	r2, r0
 8001a92:	460b      	mov	r3, r1
 8001a94:	4610      	mov	r0, r2
 8001a96:	4619      	mov	r1, r3
 8001a98:	f7fe ffa8 	bl	80009ec <__aeabi_d2f>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	4a3e      	ldr	r2, [pc, #248]	; (8001b98 <main+0x958>)
 8001aa0:	6593      	str	r3, [r2, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0;
 8001aa2:	4b3d      	ldr	r3, [pc, #244]	; (8001b98 <main+0x958>)
 8001aa4:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001aa8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001aac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ab0:	4b39      	ldr	r3, [pc, #228]	; (8001b98 <main+0x958>)
 8001ab2:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
	  				break;
 8001ab6:	e05d      	b.n	8001b74 <main+0x934>
	  			case 5:
	  				foc.PWM_A = 0.5*foc.DC_0;
 8001ab8:	4b37      	ldr	r3, [pc, #220]	; (8001b98 <main+0x958>)
 8001aba:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001abe:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ac2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ac6:	4b34      	ldr	r3, [pc, #208]	; (8001b98 <main+0x958>)
 8001ac8:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
	  				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001acc:	4b32      	ldr	r3, [pc, #200]	; (8001b98 <main+0x958>)
 8001ace:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f7fe fe83 	bl	80007dc <__aeabi_f2d>
 8001ad6:	f04f 0200 	mov.w	r2, #0
 8001ada:	4b30      	ldr	r3, [pc, #192]	; (8001b9c <main+0x95c>)
 8001adc:	f7fe fbf0 	bl	80002c0 <__aeabi_dmul>
 8001ae0:	4602      	mov	r2, r0
 8001ae2:	460b      	mov	r3, r1
 8001ae4:	4614      	mov	r4, r2
 8001ae6:	461d      	mov	r5, r3
 8001ae8:	4b2b      	ldr	r3, [pc, #172]	; (8001b98 <main+0x958>)
 8001aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fe75 	bl	80007dc <__aeabi_f2d>
 8001af2:	4602      	mov	r2, r0
 8001af4:	460b      	mov	r3, r1
 8001af6:	4620      	mov	r0, r4
 8001af8:	4629      	mov	r1, r5
 8001afa:	f7fe fd11 	bl	8000520 <__adddf3>
 8001afe:	4602      	mov	r2, r0
 8001b00:	460b      	mov	r3, r1
 8001b02:	4614      	mov	r4, r2
 8001b04:	461d      	mov	r5, r3
 8001b06:	4b24      	ldr	r3, [pc, #144]	; (8001b98 <main+0x958>)
 8001b08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f7fe fe66 	bl	80007dc <__aeabi_f2d>
 8001b10:	4602      	mov	r2, r0
 8001b12:	460b      	mov	r3, r1
 8001b14:	4620      	mov	r0, r4
 8001b16:	4629      	mov	r1, r5
 8001b18:	f7fe fd02 	bl	8000520 <__adddf3>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	460b      	mov	r3, r1
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f7fe ff62 	bl	80009ec <__aeabi_d2f>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	4a1b      	ldr	r2, [pc, #108]	; (8001b98 <main+0x958>)
 8001b2c:	6593      	str	r3, [r2, #88]	; 0x58
	  				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_2;
 8001b2e:	4b1a      	ldr	r3, [pc, #104]	; (8001b98 <main+0x958>)
 8001b30:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b32:	4618      	mov	r0, r3
 8001b34:	f7fe fe52 	bl	80007dc <__aeabi_f2d>
 8001b38:	f04f 0200 	mov.w	r2, #0
 8001b3c:	4b17      	ldr	r3, [pc, #92]	; (8001b9c <main+0x95c>)
 8001b3e:	f7fe fbbf 	bl	80002c0 <__aeabi_dmul>
 8001b42:	4602      	mov	r2, r0
 8001b44:	460b      	mov	r3, r1
 8001b46:	4614      	mov	r4, r2
 8001b48:	461d      	mov	r5, r3
 8001b4a:	4b13      	ldr	r3, [pc, #76]	; (8001b98 <main+0x958>)
 8001b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f7fe fe44 	bl	80007dc <__aeabi_f2d>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4620      	mov	r0, r4
 8001b5a:	4629      	mov	r1, r5
 8001b5c:	f7fe fce0 	bl	8000520 <__adddf3>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4610      	mov	r0, r2
 8001b66:	4619      	mov	r1, r3
 8001b68:	f7fe ff40 	bl	80009ec <__aeabi_d2f>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	4a0a      	ldr	r2, [pc, #40]	; (8001b98 <main+0x958>)
 8001b70:	6553      	str	r3, [r2, #84]	; 0x54
	  				break;
 8001b72:	bf00      	nop
	  		}

	  		/* Set PWM */
	  	//	Set_PWM3(foc.PWM_A,foc.PWM_B,foc.PWM_C);
	  		Set_PWM3(0.066f, 0.500f, 0.933f);
 8001b74:	ed9f 1a0a 	vldr	s2, [pc, #40]	; 8001ba0 <main+0x960>
 8001b78:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8001b7c:	ed9f 0a09 	vldr	s0, [pc, #36]	; 8001ba4 <main+0x964>
 8001b80:	f000 fabe 	bl	8002100 <Set_PWM3>

	  		/* LED off */
	  		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 8001b84:	2200      	movs	r2, #0
 8001b86:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b8a:	4807      	ldr	r0, [pc, #28]	; (8001ba8 <main+0x968>)
 8001b8c:	f003 fb1a 	bl	80051c4 <HAL_GPIO_WritePin>

	  		FOC_Running = 0;
 8001b90:	4b06      	ldr	r3, [pc, #24]	; (8001bac <main+0x96c>)
 8001b92:	2200      	movs	r2, #0
 8001b94:	701a      	strb	r2, [r3, #0]
	  if(RCR==0 && FOC_Running==0)	// on correct RCR and FOC algorithm isnt running,
 8001b96:	e443      	b.n	8001420 <main+0x1e0>
 8001b98:	200002c0 	.word	0x200002c0
 8001b9c:	3fe00000 	.word	0x3fe00000
 8001ba0:	3f6ed917 	.word	0x3f6ed917
 8001ba4:	3d872b02 	.word	0x3d872b02
 8001ba8:	48000400 	.word	0x48000400
 8001bac:	20000098 	.word	0x20000098

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b094      	sub	sp, #80	; 0x50
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	2238      	movs	r2, #56	; 0x38
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f006 fd12 	bl	80085e8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001bd2:	2000      	movs	r0, #0
 8001bd4:	f003 fb32 	bl	800523c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd8:	2301      	movs	r3, #1
 8001bda:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bdc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001be0:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be2:	2302      	movs	r3, #2
 8001be4:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be6:	2303      	movs	r3, #3
 8001be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001bea:	2303      	movs	r3, #3
 8001bec:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001bee:	2355      	movs	r3, #85	; 0x55
 8001bf0:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001bf2:	2302      	movs	r3, #2
 8001bf4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001bf6:	2302      	movs	r3, #2
 8001bf8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001bfa:	2302      	movs	r3, #2
 8001bfc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bfe:	f107 0318 	add.w	r3, r7, #24
 8001c02:	4618      	mov	r0, r3
 8001c04:	f003 fbce 	bl	80053a4 <HAL_RCC_OscConfig>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001c0e:	f000 fb3e 	bl	800228e <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2303      	movs	r3, #3
 8001c18:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c22:	2300      	movs	r3, #0
 8001c24:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001c26:	1d3b      	adds	r3, r7, #4
 8001c28:	2104      	movs	r1, #4
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f003 fed2 	bl	80059d4 <HAL_RCC_ClockConfig>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001c36:	f000 fb2a 	bl	800228e <Error_Handler>
  }
}
 8001c3a:	bf00      	nop
 8001c3c:	3750      	adds	r7, #80	; 0x50
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bd80      	pop	{r7, pc}
	...

08001c44 <ADC_Get_Raw>:

/* USER CODE BEGIN 4 */

// Read ADCs
void  ADC_Get_Raw    (int16_t*i_a_Raw, int16_t*i_b_Raw, int16_t*PVDD_Raw, int16_t*Temp_Raw)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b084      	sub	sp, #16
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	60f8      	str	r0, [r7, #12]
 8001c4c:	60b9      	str	r1, [r7, #8]
 8001c4e:	607a      	str	r2, [r7, #4]
 8001c50:	603b      	str	r3, [r7, #0]
	HAL_ADC_Start(&hadc1);
 8001c52:	4811      	ldr	r0, [pc, #68]	; (8001c98 <ADC_Get_Raw+0x54>)
 8001c54:	f001 fa18 	bl	8003088 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001c58:	2101      	movs	r1, #1
 8001c5a:	480f      	ldr	r0, [pc, #60]	; (8001c98 <ADC_Get_Raw+0x54>)
 8001c5c:	f001 fad0 	bl	8003200 <HAL_ADC_PollForConversion>

	*i_a_Raw	= HAL_ADC_GetValue(&hadc1);
 8001c60:	480d      	ldr	r0, [pc, #52]	; (8001c98 <ADC_Get_Raw+0x54>)
 8001c62:	f001 fc59 	bl	8003518 <HAL_ADC_GetValue>
 8001c66:	4603      	mov	r3, r0
 8001c68:	b21a      	sxth	r2, r3
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	801a      	strh	r2, [r3, #0]
	*i_b_Raw	= HAL_ADC_GetValue(&hadc2);
 8001c6e:	480b      	ldr	r0, [pc, #44]	; (8001c9c <ADC_Get_Raw+0x58>)
 8001c70:	f001 fc52 	bl	8003518 <HAL_ADC_GetValue>
 8001c74:	4603      	mov	r3, r0
 8001c76:	b21a      	sxth	r2, r3
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	801a      	strh	r2, [r3, #0]
	*PVDD_Raw	= adc.ADC1_DMA_Buff[0];
 8001c7c:	4b08      	ldr	r3, [pc, #32]	; (8001ca0 <ADC_Get_Raw+0x5c>)
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	b21a      	sxth	r2, r3
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	801a      	strh	r2, [r3, #0]
	*Temp_Raw	= adc.ADC2_DMA_Buff[0];
 8001c86:	4b06      	ldr	r3, [pc, #24]	; (8001ca0 <ADC_Get_Raw+0x5c>)
 8001c88:	68db      	ldr	r3, [r3, #12]
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	683b      	ldr	r3, [r7, #0]
 8001c8e:	801a      	strh	r2, [r3, #0]
}
 8001c90:	bf00      	nop
 8001c92:	3710      	adds	r7, #16
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	20000114 	.word	0x20000114
 8001c9c:	200000a8 	.word	0x200000a8
 8001ca0:	2000031c 	.word	0x2000031c

08001ca4 <ADC_Filter_Curr>:
void  ADC_Filter_Curr(int16_t i_a_Raw, int16_t i_b_Raw, int16_t*i_a_Fil, int16_t*i_b_Fil)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	60ba      	str	r2, [r7, #8]
 8001cac:	607b      	str	r3, [r7, #4]
 8001cae:	4603      	mov	r3, r0
 8001cb0:	81fb      	strh	r3, [r7, #14]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	81bb      	strh	r3, [r7, #12]
	// Filter
	*i_a_Fil = fil.i_k[0]*i_a_Raw + fil.i_k[0]*fil.i_a_Pre + fil.i_k[1]*fil.i_a_Pre_Fil;
 8001cb6:	4b39      	ldr	r3, [pc, #228]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001cb8:	ed93 7a00 	vldr	s14, [r3]
 8001cbc:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001cc0:	ee07 3a90 	vmov	s15, r3
 8001cc4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cc8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ccc:	4b33      	ldr	r3, [pc, #204]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001cce:	edd3 6a00 	vldr	s13, [r3]
 8001cd2:	4b32      	ldr	r3, [pc, #200]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001cd4:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001cd8:	ee07 3a90 	vmov	s15, r3
 8001cdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ce0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ce4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001ce8:	4b2c      	ldr	r3, [pc, #176]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001cea:	edd3 6a01 	vldr	s13, [r3, #4]
 8001cee:	4b2b      	ldr	r3, [pc, #172]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001cf0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001cf4:	ee07 3a90 	vmov	s15, r3
 8001cf8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001cfc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d08:	ee17 3a90 	vmov	r3, s15
 8001d0c:	b21a      	sxth	r2, r3
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	801a      	strh	r2, [r3, #0]
	*i_b_Fil = fil.i_k[0]*i_b_Raw + fil.i_k[0]*fil.i_b_Pre + fil.i_k[1]*fil.i_b_Pre_Fil;
 8001d12:	4b22      	ldr	r3, [pc, #136]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d14:	ed93 7a00 	vldr	s14, [r3]
 8001d18:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d1c:	ee07 3a90 	vmov	s15, r3
 8001d20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d24:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d28:	4b1c      	ldr	r3, [pc, #112]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d2a:	edd3 6a00 	vldr	s13, [r3]
 8001d2e:	4b1b      	ldr	r3, [pc, #108]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d30:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001d34:	ee07 3a90 	vmov	s15, r3
 8001d38:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d40:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d44:	4b15      	ldr	r3, [pc, #84]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d46:	edd3 6a01 	vldr	s13, [r3, #4]
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d4c:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001d50:	ee07 3a90 	vmov	s15, r3
 8001d54:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d64:	ee17 3a90 	vmov	r3, s15
 8001d68:	b21a      	sxth	r2, r3
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.i_a_Pre = i_a_Raw;
 8001d6e:	4a0b      	ldr	r2, [pc, #44]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d70:	89fb      	ldrh	r3, [r7, #14]
 8001d72:	8213      	strh	r3, [r2, #16]
	fil.i_b_Pre = i_b_Raw;
 8001d74:	4a09      	ldr	r2, [pc, #36]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d76:	89bb      	ldrh	r3, [r7, #12]
 8001d78:	8293      	strh	r3, [r2, #20]

	fil.i_a_Pre_Fil = *i_a_Fil;
 8001d7a:	68bb      	ldr	r3, [r7, #8]
 8001d7c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d80:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d82:	825a      	strh	r2, [r3, #18]
	fil.i_b_Pre_Fil = *i_b_Fil;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001d8a:	4b04      	ldr	r3, [pc, #16]	; (8001d9c <ADC_Filter_Curr+0xf8>)
 8001d8c:	82da      	strh	r2, [r3, #22]
}
 8001d8e:	bf00      	nop
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop
 8001d9c:	200003e4 	.word	0x200003e4

08001da0 <ADC_Norm_Curr>:
void  ADC_Norm_Curr  (int16_t i_a_Fil, int16_t i_b_Fil, float*i_a, float*i_b)
{
 8001da0:	b480      	push	{r7}
 8001da2:	b085      	sub	sp, #20
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	60ba      	str	r2, [r7, #8]
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	4603      	mov	r3, r0
 8001dac:	81fb      	strh	r3, [r7, #14]
 8001dae:	460b      	mov	r3, r1
 8001db0:	81bb      	strh	r3, [r7, #12]
	*i_a = (((float)(i_a_Fil-adc.SO_A_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 8001db2:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001db6:	4a25      	ldr	r2, [pc, #148]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001db8:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 8001dbc:	1a9b      	subs	r3, r3, r2
 8001dbe:	ee07 3a90 	vmov	s15, r3
 8001dc2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001dc6:	4b21      	ldr	r3, [pc, #132]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001dc8:	edd3 7a00 	vldr	s15, [r3]
 8001dcc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001dd0:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001e50 <ADC_Norm_Curr+0xb0>
 8001dd4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001dd8:	4b1c      	ldr	r3, [pc, #112]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	ee07 3a90 	vmov	s15, r3
 8001de0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001de4:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001de8:	4b18      	ldr	r3, [pc, #96]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001dea:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001dee:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001df2:	68bb      	ldr	r3, [r7, #8]
 8001df4:	edc3 7a00 	vstr	s15, [r3]
	*i_b = (((float)(i_b_Fil-adc.SO_B_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 8001df8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001dfc:	4a13      	ldr	r2, [pc, #76]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001dfe:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 8001e02:	1a9b      	subs	r3, r3, r2
 8001e04:	ee07 3a90 	vmov	s15, r3
 8001e08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e0c:	4b0f      	ldr	r3, [pc, #60]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001e16:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001e50 <ADC_Norm_Curr+0xb0>
 8001e1a:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001e1e:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e22:	ee07 3a90 	vmov	s15, r3
 8001e26:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e2a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001e2e:	4b07      	ldr	r3, [pc, #28]	; (8001e4c <ADC_Norm_Curr+0xac>)
 8001e30:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001e34:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
}
 8001e3e:	bf00      	nop
 8001e40:	3714      	adds	r7, #20
 8001e42:	46bd      	mov	sp, r7
 8001e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e48:	4770      	bx	lr
 8001e4a:	bf00      	nop
 8001e4c:	2000031c 	.word	0x2000031c
 8001e50:	457ff000 	.word	0x457ff000

08001e54 <ENC_Read_Ang>:
	*PVDD = (float)PVDD_Fil*adc.VDDA/4095.0f / adc.V_bat_R_Bot * (adc.V_bat_R_Bot+adc.V_bat_R_Top);
	*Temp = (((float)Temp_Fil*adc.VDDA/4095.0f)-adc.Temp_V_Offset)/adc.Temp_Slope;
}
// Encoder
void  ENC_Read_Ang(float*Angle)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
	uint8_t ENC_ASK_POS   [2] = {0b10000000,0b00100001};	// Command for asking position
 8001e5c:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001e60:	823b      	strh	r3, [r7, #16]
	uint8_t SPI_BUFF[2] = {0,0};
 8001e62:	2300      	movs	r3, #0
 8001e64:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001e66:	2200      	movs	r2, #0
 8001e68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e70:	f003 f9a8 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_ASK_POS, 2, 10);	// Ask for data
 8001e74:	f107 0110 	add.w	r1, r7, #16
 8001e78:	230a      	movs	r3, #10
 8001e7a:	2202      	movs	r2, #2
 8001e7c:	481d      	ldr	r0, [pc, #116]	; (8001ef4 <ENC_Read_Ang+0xa0>)
 8001e7e:	f004 fa28 	bl	80062d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF    , 2, 10);	// Receive 4 bytes of data
 8001e82:	f107 010c 	add.w	r1, r7, #12
 8001e86:	230a      	movs	r3, #10
 8001e88:	2202      	movs	r2, #2
 8001e8a:	481a      	ldr	r0, [pc, #104]	; (8001ef4 <ENC_Read_Ang+0xa0>)
 8001e8c:	f004 fb8f 	bl	80065ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001e90:	2201      	movs	r2, #1
 8001e92:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001e96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001e9a:	f003 f993 	bl	80051c4 <HAL_GPIO_WritePin>

	int16_t SPI_ANG = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
 8001e9e:	7b3b      	ldrb	r3, [r7, #12]
 8001ea0:	021b      	lsls	r3, r3, #8
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	7b7b      	ldrb	r3, [r7, #13]
 8001ea6:	b21b      	sxth	r3, r3
 8001ea8:	4313      	orrs	r3, r2
 8001eaa:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001eac:	8afb      	ldrh	r3, [r7, #22]
 8001eae:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001eb2:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001eb4:	8aba      	ldrh	r2, [r7, #20]
 8001eb6:	8afb      	ldrh	r3, [r7, #22]
 8001eb8:	0b9b      	lsrs	r3, r3, #14
 8001eba:	b29b      	uxth	r3, r3
 8001ebc:	f003 0301 	and.w	r3, r3, #1
 8001ec0:	b29b      	uxth	r3, r3
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	0049      	lsls	r1, r1, #1
 8001ec6:	440b      	add	r3, r1
 8001ec8:	039b      	lsls	r3, r3, #14
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	1ad3      	subs	r3, r2, r3
 8001ece:	b29b      	uxth	r3, r3
 8001ed0:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0f/32768.0f * ANG_VAL;
 8001ed2:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001ed6:	ee07 3a90 	vmov	s15, r3
 8001eda:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ede:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001ef8 <ENC_Read_Ang+0xa4>
 8001ee2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	edc3 7a00 	vstr	s15, [r3]
}
 8001eec:	bf00      	nop
 8001eee:	3718      	adds	r7, #24
 8001ef0:	46bd      	mov	sp, r7
 8001ef2:	bd80      	pop	{r7, pc}
 8001ef4:	20000404 	.word	0x20000404
 8001ef8:	3c340000 	.word	0x3c340000

08001efc <ENC_Write>:
	int16_t SPI_VEL = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
	int16_t VEL_VAL = (0b0011111111111111 & SPI_VEL);			// keep last 14 bits
	*Velocity = 360.0f/32768.0f * VEL_VAL / 2.0f / 0.0000427f;
}
void  ENC_Write(uint8_t com1, uint8_t com2, uint8_t data1, uint8_t data2, uint8_t mask1, uint8_t mask2)
{
 8001efc:	b590      	push	{r4, r7, lr}
 8001efe:	b087      	sub	sp, #28
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	4604      	mov	r4, r0
 8001f04:	4608      	mov	r0, r1
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	4623      	mov	r3, r4
 8001f0c:	71fb      	strb	r3, [r7, #7]
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71bb      	strb	r3, [r7, #6]
 8001f12:	460b      	mov	r3, r1
 8001f14:	717b      	strb	r3, [r7, #5]
 8001f16:	4613      	mov	r3, r2
 8001f18:	713b      	strb	r3, [r7, #4]
	uint8_t ADDR = (com2>>4)&0b00001111;
 8001f1a:	79bb      	ldrb	r3, [r7, #6]
 8001f1c:	091b      	lsrs	r3, r3, #4
 8001f1e:	75fb      	strb	r3, [r7, #23]
	printf("\tRegister 0x%02X... ",ADDR);
 8001f20:	7dfb      	ldrb	r3, [r7, #23]
 8001f22:	4619      	mov	r1, r3
 8001f24:	4855      	ldr	r0, [pc, #340]	; (800207c <ENC_Write+0x180>)
 8001f26:	f006 fb67 	bl	80085f8 <iprintf>

	// read
	uint8_t ENC_R_COM [2] = {com1|0b1000000,								// make into read command
 8001f2a:	79fb      	ldrb	r3, [r7, #7]
 8001f2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	753b      	strb	r3, [r7, #20]
 8001f34:	79bb      	ldrb	r3, [r7, #6]
 8001f36:	757b      	strb	r3, [r7, #21]
							 com2};
	uint8_t SPI_BUFF[2] = {0,0};
 8001f38:	2300      	movs	r3, #0
 8001f3a:	823b      	strh	r3, [r7, #16]

//	printf("\n");
//	printf("\t\tTX: %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_R_COM[0]), BYTE_TO_BINARY(ENC_R_COM[1]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f46:	f003 f93d 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8001f4a:	f107 0114 	add.w	r1, r7, #20
 8001f4e:	230a      	movs	r3, #10
 8001f50:	2202      	movs	r2, #2
 8001f52:	484b      	ldr	r0, [pc, #300]	; (8002080 <ENC_Write+0x184>)
 8001f54:	f004 f9bd 	bl	80062d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001f58:	f107 0110 	add.w	r1, r7, #16
 8001f5c:	230a      	movs	r3, #10
 8001f5e:	2202      	movs	r2, #2
 8001f60:	4847      	ldr	r0, [pc, #284]	; (8002080 <ENC_Write+0x184>)
 8001f62:	f004 fb24 	bl	80065ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001f66:	2201      	movs	r2, #1
 8001f68:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001f6c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f70:	f003 f928 	bl	80051c4 <HAL_GPIO_WritePin>
//	printf("\t\tRead  : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	// write
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8001f74:	79fb      	ldrb	r3, [r7, #7]
 8001f76:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001f7a:	b2db      	uxtb	r3, r3
 8001f7c:	733b      	strb	r3, [r7, #12]
 8001f7e:	79bb      	ldrb	r3, [r7, #6]
 8001f80:	737b      	strb	r3, [r7, #13]
						     com2,											// same
							 (SPI_BUFF[0] & (~mask1)) | (data1 & mask1),	// keep read when mask=0, keep data when mask=1
 8001f82:	7c3b      	ldrb	r3, [r7, #16]
 8001f84:	b25a      	sxtb	r2, r3
 8001f86:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	b25b      	sxtb	r3, r3
 8001f8e:	4013      	ands	r3, r2
 8001f90:	b25a      	sxtb	r2, r3
 8001f92:	7979      	ldrb	r1, [r7, #5]
 8001f94:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f98:	400b      	ands	r3, r1
 8001f9a:	b2db      	uxtb	r3, r3
 8001f9c:	b25b      	sxtb	r3, r3
 8001f9e:	4313      	orrs	r3, r2
 8001fa0:	b25b      	sxtb	r3, r3
 8001fa2:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8001fa4:	73bb      	strb	r3, [r7, #14]
							 (SPI_BUFF[1] & (~mask2)) | (data2 & mask2)};	// keep read when mask=0, keep data when mask=1
 8001fa6:	7c7b      	ldrb	r3, [r7, #17]
 8001fa8:	b25a      	sxtb	r2, r3
 8001faa:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	b25b      	sxtb	r3, r3
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b25a      	sxtb	r2, r3
 8001fb6:	7939      	ldrb	r1, [r7, #4]
 8001fb8:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001fbc:	400b      	ands	r3, r1
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	b25b      	sxtb	r3, r3
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	b25b      	sxtb	r3, r3
 8001fc6:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8001fc8:	73fb      	strb	r3, [r7, #15]

//	printf("\t\tTX    : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_W_EOM[0]), BYTE_TO_BINARY(ENC_W_EOM[1]), BYTE_TO_BINARY(ENC_W_EOM[2]), BYTE_TO_BINARY(ENC_W_EOM[3]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fd0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fd4:	f003 f8f6 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_W_EOM, 4, 10);		// Write to register
 8001fd8:	f107 010c 	add.w	r1, r7, #12
 8001fdc:	230a      	movs	r3, #10
 8001fde:	2204      	movs	r2, #4
 8001fe0:	4827      	ldr	r0, [pc, #156]	; (8002080 <ENC_Write+0x184>)
 8001fe2:	f004 f976 	bl	80062d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001fe6:	f107 0110 	add.w	r1, r7, #16
 8001fea:	230a      	movs	r3, #10
 8001fec:	2202      	movs	r2, #2
 8001fee:	4824      	ldr	r0, [pc, #144]	; (8002080 <ENC_Write+0x184>)
 8001ff0:	f004 fadd 	bl	80065ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ffa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ffe:	f003 f8e1 	bl	80051c4 <HAL_GPIO_WritePin>
//		if(ERR_4==0){printf("\t\t\tErr 4: Invalid angle value!\n");}
//		Error_Handler();
//	}

	// check if written
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8002002:	2200      	movs	r2, #0
 8002004:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002008:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800200c:	f003 f8da 	bl	80051c4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8002010:	f107 0114 	add.w	r1, r7, #20
 8002014:	230a      	movs	r3, #10
 8002016:	2202      	movs	r2, #2
 8002018:	4819      	ldr	r0, [pc, #100]	; (8002080 <ENC_Write+0x184>)
 800201a:	f004 f95a 	bl	80062d2 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 800201e:	f107 0110 	add.w	r1, r7, #16
 8002022:	230a      	movs	r3, #10
 8002024:	2202      	movs	r2, #2
 8002026:	4816      	ldr	r0, [pc, #88]	; (8002080 <ENC_Write+0x184>)
 8002028:	f004 fac1 	bl	80065ae <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800202c:	2201      	movs	r2, #1
 800202e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002032:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002036:	f003 f8c5 	bl	80051c4 <HAL_GPIO_WritePin>
//	printf("\t\tNew   : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	if(((data1&mask1) != (SPI_BUFF[0]&mask1)) || (data2&mask2) != (SPI_BUFF[1]&mask2))
 800203a:	7c3a      	ldrb	r2, [r7, #16]
 800203c:	797b      	ldrb	r3, [r7, #5]
 800203e:	4053      	eors	r3, r2
 8002040:	b2da      	uxtb	r2, r3
 8002042:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002046:	4013      	ands	r3, r2
 8002048:	b2db      	uxtb	r3, r3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d109      	bne.n	8002062 <ENC_Write+0x166>
 800204e:	7c7a      	ldrb	r2, [r7, #17]
 8002050:	793b      	ldrb	r3, [r7, #4]
 8002052:	4053      	eors	r3, r2
 8002054:	b2da      	uxtb	r2, r3
 8002056:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 800205a:	4013      	ands	r3, r2
 800205c:	b2db      	uxtb	r3, r3
 800205e:	2b00      	cmp	r3, #0
 8002060:	d004      	beq.n	800206c <ENC_Write+0x170>
	{
		printf("Error Writing\n");
 8002062:	4808      	ldr	r0, [pc, #32]	; (8002084 <ENC_Write+0x188>)
 8002064:	f006 fb64 	bl	8008730 <puts>
		Error_Handler();
 8002068:	f000 f911 	bl	800228e <Error_Handler>
	}

	printf("Good\n");
 800206c:	4806      	ldr	r0, [pc, #24]	; (8002088 <ENC_Write+0x18c>)
 800206e:	f006 fb5f 	bl	8008730 <puts>
}
 8002072:	bf00      	nop
 8002074:	371c      	adds	r7, #28
 8002076:	46bd      	mov	sp, r7
 8002078:	bd90      	pop	{r4, r7, pc}
 800207a:	bf00      	nop
 800207c:	08009944 	.word	0x08009944
 8002080:	20000404 	.word	0x20000404
 8002084:	0800995c 	.word	0x0800995c
 8002088:	080098f8 	.word	0x080098f8

0800208c <ENC_Interrupt>:
void  ENC_Interrupt(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	b082      	sub	sp, #8
 8002090:	af00      	add	r7, sp, #0
 8002092:	6078      	str	r0, [r7, #4]
 8002094:	460b      	mov	r3, r1
 8002096:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 8002098:	887b      	ldrh	r3, [r7, #2]
 800209a:	4619      	mov	r1, r3
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f003 f879 	bl	8005194 <HAL_GPIO_ReadPin>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d009      	beq.n	80020bc <ENC_Interrupt+0x30>
		enc.IIF_Counter++;		// If high, increment
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <ENC_Interrupt+0x70>)
 80020aa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020ae:	b29b      	uxth	r3, r3
 80020b0:	3301      	adds	r3, #1
 80020b2:	b29b      	uxth	r3, r3
 80020b4:	b21a      	sxth	r2, r3
 80020b6:	4b11      	ldr	r3, [pc, #68]	; (80020fc <ENC_Interrupt+0x70>)
 80020b8:	809a      	strh	r2, [r3, #4]
 80020ba:	e008      	b.n	80020ce <ENC_Interrupt+0x42>
	else
		enc.IIF_Counter--;		// If low , decrement
 80020bc:	4b0f      	ldr	r3, [pc, #60]	; (80020fc <ENC_Interrupt+0x70>)
 80020be:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020c2:	b29b      	uxth	r3, r3
 80020c4:	3b01      	subs	r3, #1
 80020c6:	b29b      	uxth	r3, r3
 80020c8:	b21a      	sxth	r2, r3
 80020ca:	4b0c      	ldr	r3, [pc, #48]	; (80020fc <ENC_Interrupt+0x70>)
 80020cc:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 80020ce:	4b0b      	ldr	r3, [pc, #44]	; (80020fc <ENC_Interrupt+0x70>)
 80020d0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80020d8:	db02      	blt.n	80020e0 <ENC_Interrupt+0x54>
		enc.IIF_Counter = 0;		// Set to 0
 80020da:	4b08      	ldr	r3, [pc, #32]	; (80020fc <ENC_Interrupt+0x70>)
 80020dc:	2200      	movs	r2, #0
 80020de:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter<0)		// If underflow
 80020e0:	4b06      	ldr	r3, [pc, #24]	; (80020fc <ENC_Interrupt+0x70>)
 80020e2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	da03      	bge.n	80020f2 <ENC_Interrupt+0x66>
		enc.IIF_Counter = 4095;		// Set to 4095
 80020ea:	4b04      	ldr	r3, [pc, #16]	; (80020fc <ENC_Interrupt+0x70>)
 80020ec:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020f0:	809a      	strh	r2, [r3, #4]
}
 80020f2:	bf00      	nop
 80020f4:	3708      	adds	r7, #8
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	200002a8 	.word	0x200002a8

08002100 <Set_PWM3>:
// FOC stuff
void  Set_PWM3(float DC_1, float DC_2, float DC_3)
{
 8002100:	b480      	push	{r7}
 8002102:	b085      	sub	sp, #20
 8002104:	af00      	add	r7, sp, #0
 8002106:	ed87 0a03 	vstr	s0, [r7, #12]
 800210a:	edc7 0a02 	vstr	s1, [r7, #8]
 800210e:	ed87 1a01 	vstr	s2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,Phase_A_Ch,foc.PWM_Reg_Max*DC_1);	// Set PWM channels
 8002112:	4b1e      	ldr	r3, [pc, #120]	; (800218c <Set_PWM3+0x8c>)
 8002114:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002118:	ee07 3a90 	vmov	s15, r3
 800211c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002120:	edd7 7a03 	vldr	s15, [r7, #12]
 8002124:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002128:	4b19      	ldr	r3, [pc, #100]	; (8002190 <Set_PWM3+0x90>)
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002130:	ee17 2a90 	vmov	r2, s15
 8002134:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,Phase_B_Ch,foc.PWM_Reg_Max*DC_2);
 8002136:	4b15      	ldr	r3, [pc, #84]	; (800218c <Set_PWM3+0x8c>)
 8002138:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 800213c:	ee07 3a90 	vmov	s15, r3
 8002140:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002144:	edd7 7a02 	vldr	s15, [r7, #8]
 8002148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800214c:	4b10      	ldr	r3, [pc, #64]	; (8002190 <Set_PWM3+0x90>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002154:	ee17 2a90 	vmov	r2, s15
 8002158:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,Phase_C_Ch,foc.PWM_Reg_Max*DC_3);
 800215a:	4b0c      	ldr	r3, [pc, #48]	; (800218c <Set_PWM3+0x8c>)
 800215c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8002160:	ee07 3a90 	vmov	s15, r3
 8002164:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002168:	edd7 7a01 	vldr	s15, [r7, #4]
 800216c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002170:	4b07      	ldr	r3, [pc, #28]	; (8002190 <Set_PWM3+0x90>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002178:	ee17 2a90 	vmov	r2, s15
 800217c:	635a      	str	r2, [r3, #52]	; 0x34
}
 800217e:	bf00      	nop
 8002180:	3714      	adds	r7, #20
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr
 800218a:	bf00      	nop
 800218c:	200002c0 	.word	0x200002c0
 8002190:	20000468 	.word	0x20000468

08002194 <_sin>:
float _sin(float theta)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b082      	sub	sp, #8
 8002198:	af00      	add	r7, sp, #0
 800219a:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(theta)];
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7fe fb1c 	bl	80007dc <__aeabi_f2d>
 80021a4:	4602      	mov	r2, r0
 80021a6:	460b      	mov	r3, r1
 80021a8:	ec43 2b10 	vmov	d0, r2, r3
 80021ac:	f007 fa50 	bl	8009650 <floor>
 80021b0:	ec53 2b10 	vmov	r2, r3, d0
 80021b4:	4610      	mov	r0, r2
 80021b6:	4619      	mov	r1, r3
 80021b8:	f7fe fbf0 	bl	800099c <__aeabi_d2iz>
 80021bc:	4603      	mov	r3, r0
 80021be:	4a05      	ldr	r2, [pc, #20]	; (80021d4 <_sin+0x40>)
 80021c0:	009b      	lsls	r3, r3, #2
 80021c2:	4413      	add	r3, r2
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	ee07 3a90 	vmov	s15, r3
}
 80021ca:	eeb0 0a67 	vmov.f32	s0, s15
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	0800996c 	.word	0x0800996c

080021d8 <_cos>:
float _cos(float theta)
{
 80021d8:	b580      	push	{r7, lr}
 80021da:	b082      	sub	sp, #8
 80021dc:	af00      	add	r7, sp, #0
 80021de:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
 80021e2:	edd7 7a01 	vldr	s15, [r7, #4]
 80021e6:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002234 <_cos+0x5c>
 80021ea:	ee77 7a87 	vadd.f32	s15, s15, s14
 80021ee:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002238 <_cos+0x60>
 80021f2:	eeb0 0a67 	vmov.f32	s0, s15
 80021f6:	f007 faab 	bl	8009750 <fmodf>
 80021fa:	ee10 3a10 	vmov	r3, s0
 80021fe:	4618      	mov	r0, r3
 8002200:	f7fe faec 	bl	80007dc <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	ec43 2b10 	vmov	d0, r2, r3
 800220c:	f007 fa20 	bl	8009650 <floor>
 8002210:	ec53 2b10 	vmov	r2, r3, d0
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fbc0 	bl	800099c <__aeabi_d2iz>
 800221c:	4603      	mov	r3, r0
 800221e:	4a07      	ldr	r2, [pc, #28]	; (800223c <_cos+0x64>)
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	4413      	add	r3, r2
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	ee07 3a90 	vmov	s15, r3
}
 800222a:	eeb0 0a67 	vmov.f32	s0, s15
 800222e:	3708      	adds	r7, #8
 8002230:	46bd      	mov	sp, r7
 8002232:	bd80      	pop	{r7, pc}
 8002234:	43870000 	.word	0x43870000
 8002238:	43b40000 	.word	0x43b40000
 800223c:	0800996c 	.word	0x0800996c

08002240 <FOC_Interrupt>:
// Timer Interrupts
void  FOC_Interrupt(void)
{
 8002240:	b480      	push	{r7}
 8002242:	af00      	add	r7, sp, #0
	RCR++;					// increment
 8002244:	4b0c      	ldr	r3, [pc, #48]	; (8002278 <FOC_Interrupt+0x38>)
 8002246:	f993 3000 	ldrsb.w	r3, [r3]
 800224a:	b2db      	uxtb	r3, r3
 800224c:	3301      	adds	r3, #1
 800224e:	b2db      	uxtb	r3, r3
 8002250:	b25a      	sxtb	r2, r3
 8002252:	4b09      	ldr	r3, [pc, #36]	; (8002278 <FOC_Interrupt+0x38>)
 8002254:	701a      	strb	r2, [r3, #0]
	if(RCR>RCR_N){RCR=0;}	// overflow
 8002256:	4b08      	ldr	r3, [pc, #32]	; (8002278 <FOC_Interrupt+0x38>)
 8002258:	f993 3000 	ldrsb.w	r3, [r3]
 800225c:	461a      	mov	r2, r3
 800225e:	4b07      	ldr	r3, [pc, #28]	; (800227c <FOC_Interrupt+0x3c>)
 8002260:	781b      	ldrb	r3, [r3, #0]
 8002262:	429a      	cmp	r2, r3
 8002264:	dd02      	ble.n	800226c <FOC_Interrupt+0x2c>
 8002266:	4b04      	ldr	r3, [pc, #16]	; (8002278 <FOC_Interrupt+0x38>)
 8002268:	2200      	movs	r2, #0
 800226a:	701a      	strb	r2, [r3, #0]


}
 800226c:	bf00      	nop
 800226e:	46bd      	mov	sp, r7
 8002270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002274:	4770      	bx	lr
 8002276:	bf00      	nop
 8002278:	20000099 	.word	0x20000099
 800227c:	20000000 	.word	0x20000000

08002280 <CAN_Interrupt>:
void  CAN_Interrupt(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
//	{
//		// unpack and update target values
//	}
//
//	can.timeout = 0;	// reset timeout timer
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr

0800228e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800228e:	b480      	push	{r7}
 8002290:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002292:	b672      	cpsid	i
}
 8002294:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002296:	e7fe      	b.n	8002296 <Error_Handler+0x8>

08002298 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800229c:	4b1b      	ldr	r3, [pc, #108]	; (800230c <MX_SPI3_Init+0x74>)
 800229e:	4a1c      	ldr	r2, [pc, #112]	; (8002310 <MX_SPI3_Init+0x78>)
 80022a0:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022a2:	4b1a      	ldr	r3, [pc, #104]	; (800230c <MX_SPI3_Init+0x74>)
 80022a4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022a8:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80022aa:	4b18      	ldr	r3, [pc, #96]	; (800230c <MX_SPI3_Init+0x74>)
 80022ac:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022b0:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022b2:	4b16      	ldr	r3, [pc, #88]	; (800230c <MX_SPI3_Init+0x74>)
 80022b4:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022b8:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022ba:	4b14      	ldr	r3, [pc, #80]	; (800230c <MX_SPI3_Init+0x74>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022c0:	4b12      	ldr	r3, [pc, #72]	; (800230c <MX_SPI3_Init+0x74>)
 80022c2:	2201      	movs	r2, #1
 80022c4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022c6:	4b11      	ldr	r3, [pc, #68]	; (800230c <MX_SPI3_Init+0x74>)
 80022c8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80022cc:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80022ce:	4b0f      	ldr	r3, [pc, #60]	; (800230c <MX_SPI3_Init+0x74>)
 80022d0:	2220      	movs	r2, #32
 80022d2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80022d4:	4b0d      	ldr	r3, [pc, #52]	; (800230c <MX_SPI3_Init+0x74>)
 80022d6:	2200      	movs	r2, #0
 80022d8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80022da:	4b0c      	ldr	r3, [pc, #48]	; (800230c <MX_SPI3_Init+0x74>)
 80022dc:	2200      	movs	r2, #0
 80022de:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80022e0:	4b0a      	ldr	r3, [pc, #40]	; (800230c <MX_SPI3_Init+0x74>)
 80022e2:	2200      	movs	r2, #0
 80022e4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80022e6:	4b09      	ldr	r3, [pc, #36]	; (800230c <MX_SPI3_Init+0x74>)
 80022e8:	2207      	movs	r2, #7
 80022ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80022ec:	4b07      	ldr	r3, [pc, #28]	; (800230c <MX_SPI3_Init+0x74>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80022f2:	4b06      	ldr	r3, [pc, #24]	; (800230c <MX_SPI3_Init+0x74>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80022f8:	4804      	ldr	r0, [pc, #16]	; (800230c <MX_SPI3_Init+0x74>)
 80022fa:	f003 ff3f 	bl	800617c <HAL_SPI_Init>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d001      	beq.n	8002308 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002304:	f7ff ffc3 	bl	800228e <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002308:	bf00      	nop
 800230a:	bd80      	pop	{r7, pc}
 800230c:	20000404 	.word	0x20000404
 8002310:	40003c00 	.word	0x40003c00

08002314 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b08a      	sub	sp, #40	; 0x28
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0314 	add.w	r3, r7, #20
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
 800232a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	4a25      	ldr	r2, [pc, #148]	; (80023c8 <HAL_SPI_MspInit+0xb4>)
 8002332:	4293      	cmp	r3, r2
 8002334:	d144      	bne.n	80023c0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002336:	4b25      	ldr	r3, [pc, #148]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002338:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800233a:	4a24      	ldr	r2, [pc, #144]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800233c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002340:	6593      	str	r3, [r2, #88]	; 0x58
 8002342:	4b22      	ldr	r3, [pc, #136]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002344:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002346:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800234a:	613b      	str	r3, [r7, #16]
 800234c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800234e:	4b1f      	ldr	r3, [pc, #124]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002350:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002352:	4a1e      	ldr	r2, [pc, #120]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002354:	f043 0304 	orr.w	r3, r3, #4
 8002358:	64d3      	str	r3, [r2, #76]	; 0x4c
 800235a:	4b1c      	ldr	r3, [pc, #112]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800235c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800235e:	f003 0304 	and.w	r3, r3, #4
 8002362:	60fb      	str	r3, [r7, #12]
 8002364:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002366:	4b19      	ldr	r3, [pc, #100]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002368:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800236a:	4a18      	ldr	r2, [pc, #96]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 800236c:	f043 0302 	orr.w	r3, r3, #2
 8002370:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002372:	4b16      	ldr	r3, [pc, #88]	; (80023cc <HAL_SPI_MspInit+0xb8>)
 8002374:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002376:	f003 0302 	and.w	r3, r3, #2
 800237a:	60bb      	str	r3, [r7, #8]
 800237c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 800237e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002382:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002384:	2302      	movs	r3, #2
 8002386:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800238c:	2300      	movs	r3, #0
 800238e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002390:	2306      	movs	r3, #6
 8002392:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8002394:	f107 0314 	add.w	r3, r7, #20
 8002398:	4619      	mov	r1, r3
 800239a:	480d      	ldr	r0, [pc, #52]	; (80023d0 <HAL_SPI_MspInit+0xbc>)
 800239c:	f002 fd78 	bl	8004e90 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 80023a0:	2320      	movs	r3, #32
 80023a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a4:	2302      	movs	r3, #2
 80023a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a8:	2300      	movs	r3, #0
 80023aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ac:	2300      	movs	r3, #0
 80023ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023b0:	2306      	movs	r3, #6
 80023b2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023b4:	f107 0314 	add.w	r3, r7, #20
 80023b8:	4619      	mov	r1, r3
 80023ba:	4806      	ldr	r0, [pc, #24]	; (80023d4 <HAL_SPI_MspInit+0xc0>)
 80023bc:	f002 fd68 	bl	8004e90 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80023c0:	bf00      	nop
 80023c2:	3728      	adds	r7, #40	; 0x28
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bd80      	pop	{r7, pc}
 80023c8:	40003c00 	.word	0x40003c00
 80023cc:	40021000 	.word	0x40021000
 80023d0:	48000800 	.word	0x48000800
 80023d4:	48000400 	.word	0x48000400

080023d8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80023de:	4b0f      	ldr	r3, [pc, #60]	; (800241c <HAL_MspInit+0x44>)
 80023e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023e2:	4a0e      	ldr	r2, [pc, #56]	; (800241c <HAL_MspInit+0x44>)
 80023e4:	f043 0301 	orr.w	r3, r3, #1
 80023e8:	6613      	str	r3, [r2, #96]	; 0x60
 80023ea:	4b0c      	ldr	r3, [pc, #48]	; (800241c <HAL_MspInit+0x44>)
 80023ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023ee:	f003 0301 	and.w	r3, r3, #1
 80023f2:	607b      	str	r3, [r7, #4]
 80023f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023f6:	4b09      	ldr	r3, [pc, #36]	; (800241c <HAL_MspInit+0x44>)
 80023f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023fa:	4a08      	ldr	r2, [pc, #32]	; (800241c <HAL_MspInit+0x44>)
 80023fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002400:	6593      	str	r3, [r2, #88]	; 0x58
 8002402:	4b06      	ldr	r3, [pc, #24]	; (800241c <HAL_MspInit+0x44>)
 8002404:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002406:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800240a:	603b      	str	r3, [r7, #0]
 800240c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 800240e:	f002 ffb9 	bl	8005384 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002412:	bf00      	nop
 8002414:	3708      	adds	r7, #8
 8002416:	46bd      	mov	sp, r7
 8002418:	bd80      	pop	{r7, pc}
 800241a:	bf00      	nop
 800241c:	40021000 	.word	0x40021000

08002420 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002424:	e7fe      	b.n	8002424 <NMI_Handler+0x4>

08002426 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002426:	b480      	push	{r7}
 8002428:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800242a:	e7fe      	b.n	800242a <HardFault_Handler+0x4>

0800242c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002430:	e7fe      	b.n	8002430 <MemManage_Handler+0x4>

08002432 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002432:	b480      	push	{r7}
 8002434:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002436:	e7fe      	b.n	8002436 <BusFault_Handler+0x4>

08002438 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800243c:	e7fe      	b.n	800243c <UsageFault_Handler+0x4>

0800243e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800243e:	b480      	push	{r7}
 8002440:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002442:	bf00      	nop
 8002444:	46bd      	mov	sp, r7
 8002446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800244a:	4770      	bx	lr

0800244c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800244c:	b480      	push	{r7}
 800244e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002450:	bf00      	nop
 8002452:	46bd      	mov	sp, r7
 8002454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002458:	4770      	bx	lr

0800245a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800245a:	b480      	push	{r7}
 800245c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800245e:	bf00      	nop
 8002460:	46bd      	mov	sp, r7
 8002462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002466:	4770      	bx	lr

08002468 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800246c:	f000 fa34 	bl	80028d8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002470:	bf00      	nop
 8002472:	bd80      	pop	{r7, pc}

08002474 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002474:	b580      	push	{r7, lr}
 8002476:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002478:	4802      	ldr	r0, [pc, #8]	; (8002484 <DMA1_Channel1_IRQHandler+0x10>)
 800247a:	f002 f85c 	bl	8004536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800247e:	bf00      	nop
 8002480:	bd80      	pop	{r7, pc}
 8002482:	bf00      	nop
 8002484:	20000180 	.word	0x20000180

08002488 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002488:	b580      	push	{r7, lr}
 800248a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 800248c:	4803      	ldr	r0, [pc, #12]	; (800249c <FDCAN1_IT0_IRQHandler+0x14>)
 800248e:	f002 fafb 	bl	8004a88 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_Interrupt();
 8002492:	f7ff fef5 	bl	8002280 <CAN_Interrupt>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	bd80      	pop	{r7, pc}
 800249a:	bf00      	nop
 800249c:	20000240 	.word	0x20000240

080024a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IF_A_Pin);
 80024a4:	2020      	movs	r0, #32
 80024a6:	f002 fea5 	bl	80051f4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ENC_Interrupt(IF_B_GPIO_Port, IF_B_Pin);
 80024aa:	2140      	movs	r1, #64	; 0x40
 80024ac:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024b0:	f7ff fdec 	bl	800208c <ENC_Interrupt>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024b4:	bf00      	nop
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80024bc:	4803      	ldr	r0, [pc, #12]	; (80024cc <TIM2_IRQHandler+0x14>)
 80024be:	f004 ff99 	bl	80073f4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  FOC_Interrupt();
 80024c2:	f7ff febd 	bl	8002240 <FOC_Interrupt>
  /* USER CODE END TIM2_IRQn 1 */
}
 80024c6:	bf00      	nop
 80024c8:	bd80      	pop	{r7, pc}
 80024ca:	bf00      	nop
 80024cc:	20000468 	.word	0x20000468

080024d0 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80024d4:	4802      	ldr	r0, [pc, #8]	; (80024e0 <DMA2_Channel1_IRQHandler+0x10>)
 80024d6:	f002 f82e 	bl	8004536 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 80024da:	bf00      	nop
 80024dc:	bd80      	pop	{r7, pc}
 80024de:	bf00      	nop
 80024e0:	200001e0 	.word	0x200001e0

080024e4 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80024e4:	b580      	push	{r7, lr}
 80024e6:	b086      	sub	sp, #24
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	60f8      	str	r0, [r7, #12]
 80024ec:	60b9      	str	r1, [r7, #8]
 80024ee:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024f0:	2300      	movs	r3, #0
 80024f2:	617b      	str	r3, [r7, #20]
 80024f4:	e00a      	b.n	800250c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80024f6:	f3af 8000 	nop.w
 80024fa:	4601      	mov	r1, r0
 80024fc:	68bb      	ldr	r3, [r7, #8]
 80024fe:	1c5a      	adds	r2, r3, #1
 8002500:	60ba      	str	r2, [r7, #8]
 8002502:	b2ca      	uxtb	r2, r1
 8002504:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	3301      	adds	r3, #1
 800250a:	617b      	str	r3, [r7, #20]
 800250c:	697a      	ldr	r2, [r7, #20]
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	429a      	cmp	r2, r3
 8002512:	dbf0      	blt.n	80024f6 <_read+0x12>
	}

return len;
 8002514:	687b      	ldr	r3, [r7, #4]
}
 8002516:	4618      	mov	r0, r3
 8002518:	3718      	adds	r7, #24
 800251a:	46bd      	mov	sp, r7
 800251c:	bd80      	pop	{r7, pc}

0800251e <_close>:
	}
	return len;
}

int _close(int file)
{
 800251e:	b480      	push	{r7}
 8002520:	b083      	sub	sp, #12
 8002522:	af00      	add	r7, sp, #0
 8002524:	6078      	str	r0, [r7, #4]
	return -1;
 8002526:	f04f 33ff 	mov.w	r3, #4294967295
}
 800252a:	4618      	mov	r0, r3
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr

08002536 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002536:	b480      	push	{r7}
 8002538:	b083      	sub	sp, #12
 800253a:	af00      	add	r7, sp, #0
 800253c:	6078      	str	r0, [r7, #4]
 800253e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002540:	683b      	ldr	r3, [r7, #0]
 8002542:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002546:	605a      	str	r2, [r3, #4]
	return 0;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002554:	4770      	bx	lr

08002556 <_isatty>:

int _isatty(int file)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	return 1;
 800255e:	2301      	movs	r3, #1
}
 8002560:	4618      	mov	r0, r3
 8002562:	370c      	adds	r7, #12
 8002564:	46bd      	mov	sp, r7
 8002566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256a:	4770      	bx	lr

0800256c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800256c:	b480      	push	{r7}
 800256e:	b085      	sub	sp, #20
 8002570:	af00      	add	r7, sp, #0
 8002572:	60f8      	str	r0, [r7, #12]
 8002574:	60b9      	str	r1, [r7, #8]
 8002576:	607a      	str	r2, [r7, #4]
	return 0;
 8002578:	2300      	movs	r3, #0
}
 800257a:	4618      	mov	r0, r3
 800257c:	3714      	adds	r7, #20
 800257e:	46bd      	mov	sp, r7
 8002580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002584:	4770      	bx	lr
	...

08002588 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b086      	sub	sp, #24
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002590:	4a14      	ldr	r2, [pc, #80]	; (80025e4 <_sbrk+0x5c>)
 8002592:	4b15      	ldr	r3, [pc, #84]	; (80025e8 <_sbrk+0x60>)
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002598:	697b      	ldr	r3, [r7, #20]
 800259a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <_sbrk+0x64>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	d102      	bne.n	80025aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025a4:	4b11      	ldr	r3, [pc, #68]	; (80025ec <_sbrk+0x64>)
 80025a6:	4a12      	ldr	r2, [pc, #72]	; (80025f0 <_sbrk+0x68>)
 80025a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <_sbrk+0x64>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	4413      	add	r3, r2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	429a      	cmp	r2, r3
 80025b6:	d207      	bcs.n	80025c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025b8:	f005 ffec 	bl	8008594 <__errno>
 80025bc:	4603      	mov	r3, r0
 80025be:	220c      	movs	r2, #12
 80025c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025c2:	f04f 33ff 	mov.w	r3, #4294967295
 80025c6:	e009      	b.n	80025dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80025c8:	4b08      	ldr	r3, [pc, #32]	; (80025ec <_sbrk+0x64>)
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80025ce:	4b07      	ldr	r3, [pc, #28]	; (80025ec <_sbrk+0x64>)
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	4413      	add	r3, r2
 80025d6:	4a05      	ldr	r2, [pc, #20]	; (80025ec <_sbrk+0x64>)
 80025d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025da:	68fb      	ldr	r3, [r7, #12]
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	20008000 	.word	0x20008000
 80025e8:	00000400 	.word	0x00000400
 80025ec:	2000009c 	.word	0x2000009c
 80025f0:	200004c8 	.word	0x200004c8

080025f4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80025f8:	4b06      	ldr	r3, [pc, #24]	; (8002614 <SystemInit+0x20>)
 80025fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fe:	4a05      	ldr	r2, [pc, #20]	; (8002614 <SystemInit+0x20>)
 8002600:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002604:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002608:	bf00      	nop
 800260a:	46bd      	mov	sp, r7
 800260c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002610:	4770      	bx	lr
 8002612:	bf00      	nop
 8002614:	e000ed00 	.word	0xe000ed00

08002618 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	b08e      	sub	sp, #56	; 0x38
 800261c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800261e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
 8002626:	605a      	str	r2, [r3, #4]
 8002628:	609a      	str	r2, [r3, #8]
 800262a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800262c:	f107 031c 	add.w	r3, r7, #28
 8002630:	2200      	movs	r2, #0
 8002632:	601a      	str	r2, [r3, #0]
 8002634:	605a      	str	r2, [r3, #4]
 8002636:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002638:	463b      	mov	r3, r7
 800263a:	2200      	movs	r2, #0
 800263c:	601a      	str	r2, [r3, #0]
 800263e:	605a      	str	r2, [r3, #4]
 8002640:	609a      	str	r2, [r3, #8]
 8002642:	60da      	str	r2, [r3, #12]
 8002644:	611a      	str	r2, [r3, #16]
 8002646:	615a      	str	r2, [r3, #20]
 8002648:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800264a:	4b38      	ldr	r3, [pc, #224]	; (800272c <MX_TIM2_Init+0x114>)
 800264c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002650:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002652:	4b36      	ldr	r3, [pc, #216]	; (800272c <MX_TIM2_Init+0x114>)
 8002654:	2200      	movs	r2, #0
 8002656:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002658:	4b34      	ldr	r3, [pc, #208]	; (800272c <MX_TIM2_Init+0x114>)
 800265a:	2220      	movs	r2, #32
 800265c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2124;
 800265e:	4b33      	ldr	r3, [pc, #204]	; (800272c <MX_TIM2_Init+0x114>)
 8002660:	f640 024c 	movw	r2, #2124	; 0x84c
 8002664:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002666:	4b31      	ldr	r3, [pc, #196]	; (800272c <MX_TIM2_Init+0x114>)
 8002668:	2200      	movs	r2, #0
 800266a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800266c:	4b2f      	ldr	r3, [pc, #188]	; (800272c <MX_TIM2_Init+0x114>)
 800266e:	2280      	movs	r2, #128	; 0x80
 8002670:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002672:	482e      	ldr	r0, [pc, #184]	; (800272c <MX_TIM2_Init+0x114>)
 8002674:	f004 fc9a 	bl	8006fac <HAL_TIM_Base_Init>
 8002678:	4603      	mov	r3, r0
 800267a:	2b00      	cmp	r3, #0
 800267c:	d001      	beq.n	8002682 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800267e:	f7ff fe06 	bl	800228e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002682:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002686:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002688:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800268c:	4619      	mov	r1, r3
 800268e:	4827      	ldr	r0, [pc, #156]	; (800272c <MX_TIM2_Init+0x114>)
 8002690:	f005 f944 	bl	800791c <HAL_TIM_ConfigClockSource>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800269a:	f7ff fdf8 	bl	800228e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800269e:	4823      	ldr	r0, [pc, #140]	; (800272c <MX_TIM2_Init+0x114>)
 80026a0:	f004 fd46 	bl	8007130 <HAL_TIM_PWM_Init>
 80026a4:	4603      	mov	r3, r0
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d001      	beq.n	80026ae <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026aa:	f7ff fdf0 	bl	800228e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026ae:	2300      	movs	r3, #0
 80026b0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026b6:	f107 031c 	add.w	r3, r7, #28
 80026ba:	4619      	mov	r1, r3
 80026bc:	481b      	ldr	r0, [pc, #108]	; (800272c <MX_TIM2_Init+0x114>)
 80026be:	f005 fea1 	bl	8008404 <HAL_TIMEx_MasterConfigSynchronization>
 80026c2:	4603      	mov	r3, r0
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d001      	beq.n	80026cc <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80026c8:	f7ff fde1 	bl	800228e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80026cc:	2370      	movs	r3, #112	; 0x70
 80026ce:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80026d0:	2300      	movs	r3, #0
 80026d2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80026d4:	2302      	movs	r3, #2
 80026d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80026dc:	463b      	mov	r3, r7
 80026de:	2200      	movs	r2, #0
 80026e0:	4619      	mov	r1, r3
 80026e2:	4812      	ldr	r0, [pc, #72]	; (800272c <MX_TIM2_Init+0x114>)
 80026e4:	f005 f806 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 80026e8:	4603      	mov	r3, r0
 80026ea:	2b00      	cmp	r3, #0
 80026ec:	d001      	beq.n	80026f2 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80026ee:	f7ff fdce 	bl	800228e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80026f2:	463b      	mov	r3, r7
 80026f4:	2208      	movs	r2, #8
 80026f6:	4619      	mov	r1, r3
 80026f8:	480c      	ldr	r0, [pc, #48]	; (800272c <MX_TIM2_Init+0x114>)
 80026fa:	f004 fffb 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 80026fe:	4603      	mov	r3, r0
 8002700:	2b00      	cmp	r3, #0
 8002702:	d001      	beq.n	8002708 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002704:	f7ff fdc3 	bl	800228e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002708:	463b      	mov	r3, r7
 800270a:	220c      	movs	r2, #12
 800270c:	4619      	mov	r1, r3
 800270e:	4807      	ldr	r0, [pc, #28]	; (800272c <MX_TIM2_Init+0x114>)
 8002710:	f004 fff0 	bl	80076f4 <HAL_TIM_PWM_ConfigChannel>
 8002714:	4603      	mov	r3, r0
 8002716:	2b00      	cmp	r3, #0
 8002718:	d001      	beq.n	800271e <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 800271a:	f7ff fdb8 	bl	800228e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800271e:	4803      	ldr	r0, [pc, #12]	; (800272c <MX_TIM2_Init+0x114>)
 8002720:	f000 f82a 	bl	8002778 <HAL_TIM_MspPostInit>

}
 8002724:	bf00      	nop
 8002726:	3738      	adds	r7, #56	; 0x38
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000468 	.word	0x20000468

08002730 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b084      	sub	sp, #16
 8002734:	af00      	add	r7, sp, #0
 8002736:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002740:	d113      	bne.n	800276a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002742:	4b0c      	ldr	r3, [pc, #48]	; (8002774 <HAL_TIM_Base_MspInit+0x44>)
 8002744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002746:	4a0b      	ldr	r2, [pc, #44]	; (8002774 <HAL_TIM_Base_MspInit+0x44>)
 8002748:	f043 0301 	orr.w	r3, r3, #1
 800274c:	6593      	str	r3, [r2, #88]	; 0x58
 800274e:	4b09      	ldr	r3, [pc, #36]	; (8002774 <HAL_TIM_Base_MspInit+0x44>)
 8002750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002752:	f003 0301 	and.w	r3, r3, #1
 8002756:	60fb      	str	r3, [r7, #12]
 8002758:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800275a:	2200      	movs	r2, #0
 800275c:	2100      	movs	r1, #0
 800275e:	201c      	movs	r0, #28
 8002760:	f001 fd91 	bl	8004286 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002764:	201c      	movs	r0, #28
 8002766:	f001 fda8 	bl	80042ba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 800276a:	bf00      	nop
 800276c:	3710      	adds	r7, #16
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}
 8002772:	bf00      	nop
 8002774:	40021000 	.word	0x40021000

08002778 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002780:	f107 030c 	add.w	r3, r7, #12
 8002784:	2200      	movs	r2, #0
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	605a      	str	r2, [r3, #4]
 800278a:	609a      	str	r2, [r3, #8]
 800278c:	60da      	str	r2, [r3, #12]
 800278e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002798:	d11c      	bne.n	80027d4 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279a:	4b10      	ldr	r3, [pc, #64]	; (80027dc <HAL_TIM_MspPostInit+0x64>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4a0f      	ldr	r2, [pc, #60]	; (80027dc <HAL_TIM_MspPostInit+0x64>)
 80027a0:	f043 0301 	orr.w	r3, r3, #1
 80027a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80027a6:	4b0d      	ldr	r3, [pc, #52]	; (80027dc <HAL_TIM_MspPostInit+0x64>)
 80027a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027aa:	f003 0301 	and.w	r3, r3, #1
 80027ae:	60bb      	str	r3, [r7, #8]
 80027b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_C_Pin|PWM_B_Pin|PWM_A_Pin;
 80027b2:	230d      	movs	r3, #13
 80027b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b6:	2302      	movs	r3, #2
 80027b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027ba:	2300      	movs	r3, #0
 80027bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027be:	2300      	movs	r3, #0
 80027c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80027c2:	2301      	movs	r3, #1
 80027c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c6:	f107 030c 	add.w	r3, r7, #12
 80027ca:	4619      	mov	r1, r3
 80027cc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80027d0:	f002 fb5e 	bl	8004e90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80027d4:	bf00      	nop
 80027d6:	3720      	adds	r7, #32
 80027d8:	46bd      	mov	sp, r7
 80027da:	bd80      	pop	{r7, pc}
 80027dc:	40021000 	.word	0x40021000

080027e0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80027e0:	480d      	ldr	r0, [pc, #52]	; (8002818 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80027e2:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80027e4:	480d      	ldr	r0, [pc, #52]	; (800281c <LoopForever+0x6>)
  ldr r1, =_edata
 80027e6:	490e      	ldr	r1, [pc, #56]	; (8002820 <LoopForever+0xa>)
  ldr r2, =_sidata
 80027e8:	4a0e      	ldr	r2, [pc, #56]	; (8002824 <LoopForever+0xe>)
  movs r3, #0
 80027ea:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80027ec:	e002      	b.n	80027f4 <LoopCopyDataInit>

080027ee <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80027ee:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80027f0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80027f2:	3304      	adds	r3, #4

080027f4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027f4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027f6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027f8:	d3f9      	bcc.n	80027ee <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027fa:	4a0b      	ldr	r2, [pc, #44]	; (8002828 <LoopForever+0x12>)
  ldr r4, =_ebss
 80027fc:	4c0b      	ldr	r4, [pc, #44]	; (800282c <LoopForever+0x16>)
  movs r3, #0
 80027fe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002800:	e001      	b.n	8002806 <LoopFillZerobss>

08002802 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002802:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002804:	3204      	adds	r2, #4

08002806 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002806:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002808:	d3fb      	bcc.n	8002802 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800280a:	f7ff fef3 	bl	80025f4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800280e:	f005 fec7 	bl	80085a0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002812:	f7fe fd15 	bl	8001240 <main>

08002816 <LoopForever>:

LoopForever:
    b LoopForever
 8002816:	e7fe      	b.n	8002816 <LoopForever>
  ldr   r0, =_estack
 8002818:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800281c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002820:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8002824:	08009fc4 	.word	0x08009fc4
  ldr r2, =_sbss
 8002828:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 800282c:	200004c8 	.word	0x200004c8

08002830 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002830:	e7fe      	b.n	8002830 <ADC1_2_IRQHandler>

08002832 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002832:	b580      	push	{r7, lr}
 8002834:	b082      	sub	sp, #8
 8002836:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002838:	2300      	movs	r3, #0
 800283a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800283c:	2003      	movs	r0, #3
 800283e:	f001 fd17 	bl	8004270 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002842:	2000      	movs	r0, #0
 8002844:	f000 f80e 	bl	8002864 <HAL_InitTick>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d002      	beq.n	8002854 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800284e:	2301      	movs	r3, #1
 8002850:	71fb      	strb	r3, [r7, #7]
 8002852:	e001      	b.n	8002858 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002854:	f7ff fdc0 	bl	80023d8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002858:	79fb      	ldrb	r3, [r7, #7]

}
 800285a:	4618      	mov	r0, r3
 800285c:	3708      	adds	r7, #8
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
	...

08002864 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b084      	sub	sp, #16
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 800286c:	2300      	movs	r3, #0
 800286e:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002870:	4b16      	ldr	r3, [pc, #88]	; (80028cc <HAL_InitTick+0x68>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2b00      	cmp	r3, #0
 8002876:	d022      	beq.n	80028be <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002878:	4b15      	ldr	r3, [pc, #84]	; (80028d0 <HAL_InitTick+0x6c>)
 800287a:	681a      	ldr	r2, [r3, #0]
 800287c:	4b13      	ldr	r3, [pc, #76]	; (80028cc <HAL_InitTick+0x68>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002884:	fbb1 f3f3 	udiv	r3, r1, r3
 8002888:	fbb2 f3f3 	udiv	r3, r2, r3
 800288c:	4618      	mov	r0, r3
 800288e:	f001 fd22 	bl	80042d6 <HAL_SYSTICK_Config>
 8002892:	4603      	mov	r3, r0
 8002894:	2b00      	cmp	r3, #0
 8002896:	d10f      	bne.n	80028b8 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	2b0f      	cmp	r3, #15
 800289c:	d809      	bhi.n	80028b2 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800289e:	2200      	movs	r2, #0
 80028a0:	6879      	ldr	r1, [r7, #4]
 80028a2:	f04f 30ff 	mov.w	r0, #4294967295
 80028a6:	f001 fcee 	bl	8004286 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <HAL_InitTick+0x70>)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6013      	str	r3, [r2, #0]
 80028b0:	e007      	b.n	80028c2 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	73fb      	strb	r3, [r7, #15]
 80028b6:	e004      	b.n	80028c2 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	73fb      	strb	r3, [r7, #15]
 80028bc:	e001      	b.n	80028c2 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80028be:	2301      	movs	r3, #1
 80028c0:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80028c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80028c4:	4618      	mov	r0, r3
 80028c6:	3710      	adds	r7, #16
 80028c8:	46bd      	mov	sp, r7
 80028ca:	bd80      	pop	{r7, pc}
 80028cc:	2000000c 	.word	0x2000000c
 80028d0:	20000004 	.word	0x20000004
 80028d4:	20000008 	.word	0x20000008

080028d8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028d8:	b480      	push	{r7}
 80028da:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028dc:	4b05      	ldr	r3, [pc, #20]	; (80028f4 <HAL_IncTick+0x1c>)
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_IncTick+0x20>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	4413      	add	r3, r2
 80028e6:	4a03      	ldr	r2, [pc, #12]	; (80028f4 <HAL_IncTick+0x1c>)
 80028e8:	6013      	str	r3, [r2, #0]
}
 80028ea:	bf00      	nop
 80028ec:	46bd      	mov	sp, r7
 80028ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f2:	4770      	bx	lr
 80028f4:	200004b4 	.word	0x200004b4
 80028f8:	2000000c 	.word	0x2000000c

080028fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028fc:	b480      	push	{r7}
 80028fe:	af00      	add	r7, sp, #0
  return uwTick;
 8002900:	4b03      	ldr	r3, [pc, #12]	; (8002910 <HAL_GetTick+0x14>)
 8002902:	681b      	ldr	r3, [r3, #0]
}
 8002904:	4618      	mov	r0, r3
 8002906:	46bd      	mov	sp, r7
 8002908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290c:	4770      	bx	lr
 800290e:	bf00      	nop
 8002910:	200004b4 	.word	0x200004b4

08002914 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <LL_ADC_SetOffset+0x44>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	03fff000 	.word	0x03fff000

080029c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3360      	adds	r3, #96	; 0x60
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	615a      	str	r2, [r3, #20]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3330      	adds	r3, #48	; 0x30
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	4413      	add	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	211f      	movs	r1, #31
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	f003 011f 	and.w	r1, r3, #31
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3314      	adds	r3, #20
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	0e5b      	lsrs	r3, r3, #25
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0d1b      	lsrs	r3, r3, #20
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2107      	movs	r1, #7
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10a      	bne.n	8002bb6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	407f0000 	.word	0x407f0000

08002bdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002c08:	4618      	mov	r0, r3
 8002c0a:	370c      	adds	r7, #12
 8002c0c:	46bd      	mov	sp, r7
 8002c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c12:	4770      	bx	lr

08002c14 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b083      	sub	sp, #12
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689b      	ldr	r3, [r3, #8]
 8002c20:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c24:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c28:	687a      	ldr	r2, [r7, #4]
 8002c2a:	6093      	str	r3, [r2, #8]
}
 8002c2c:	bf00      	nop
 8002c2e:	370c      	adds	r7, #12
 8002c30:	46bd      	mov	sp, r7
 8002c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c36:	4770      	bx	lr

08002c38 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c48:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c70:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c74:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c98:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c9c:	d101      	bne.n	8002ca2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e000      	b.n	8002ca4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002ca2:	2300      	movs	r3, #0
}
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002cc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cc4:	f043 0201 	orr.w	r2, r3, #1
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ccc:	bf00      	nop
 8002cce:	370c      	adds	r7, #12
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr

08002cd8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002cd8:	b480      	push	{r7}
 8002cda:	b083      	sub	sp, #12
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	f003 0301 	and.w	r3, r3, #1
 8002ce8:	2b01      	cmp	r3, #1
 8002cea:	d101      	bne.n	8002cf0 <LL_ADC_IsEnabled+0x18>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <LL_ADC_IsEnabled+0x1a>
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr

08002cfe <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002cfe:	b480      	push	{r7}
 8002d00:	b083      	sub	sp, #12
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	689b      	ldr	r3, [r3, #8]
 8002d0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d0e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d12:	f043 0204 	orr.w	r2, r3, #4
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d1a:	bf00      	nop
 8002d1c:	370c      	adds	r7, #12
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d24:	4770      	bx	lr

08002d26 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d26:	b480      	push	{r7}
 8002d28:	b083      	sub	sp, #12
 8002d2a:	af00      	add	r7, sp, #0
 8002d2c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	689b      	ldr	r3, [r3, #8]
 8002d32:	f003 0304 	and.w	r3, r3, #4
 8002d36:	2b04      	cmp	r3, #4
 8002d38:	d101      	bne.n	8002d3e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e000      	b.n	8002d40 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d3e:	2300      	movs	r3, #0
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	370c      	adds	r7, #12
 8002d44:	46bd      	mov	sp, r7
 8002d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d4a:	4770      	bx	lr

08002d4c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	689b      	ldr	r3, [r3, #8]
 8002d58:	f003 0308 	and.w	r3, r3, #8
 8002d5c:	2b08      	cmp	r3, #8
 8002d5e:	d101      	bne.n	8002d64 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d64:	2300      	movs	r3, #0
}
 8002d66:	4618      	mov	r0, r3
 8002d68:	370c      	adds	r7, #12
 8002d6a:	46bd      	mov	sp, r7
 8002d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d70:	4770      	bx	lr
	...

08002d74 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002d74:	b590      	push	{r4, r7, lr}
 8002d76:	b089      	sub	sp, #36	; 0x24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002d7c:	2300      	movs	r3, #0
 8002d7e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002d80:	2300      	movs	r3, #0
 8002d82:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d101      	bne.n	8002d8e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002d8a:	2301      	movs	r3, #1
 8002d8c:	e16d      	b.n	800306a <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	695b      	ldr	r3, [r3, #20]
 8002d92:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d109      	bne.n	8002db0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002d9c:	6878      	ldr	r0, [r7, #4]
 8002d9e:	f7fd ff73 	bl	8000c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	2200      	movs	r2, #0
 8002da6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2200      	movs	r2, #0
 8002dac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f7ff ff3f 	bl	8002c38 <LL_ADC_IsDeepPowerDownEnabled>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d004      	beq.n	8002dca <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4618      	mov	r0, r3
 8002dc6:	f7ff ff25 	bl	8002c14 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7ff ff5a 	bl	8002c88 <LL_ADC_IsInternalRegulatorEnabled>
 8002dd4:	4603      	mov	r3, r0
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d115      	bne.n	8002e06 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff ff3e 	bl	8002c60 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002de4:	4ba3      	ldr	r3, [pc, #652]	; (8003074 <HAL_ADC_Init+0x300>)
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	099b      	lsrs	r3, r3, #6
 8002dea:	4aa3      	ldr	r2, [pc, #652]	; (8003078 <HAL_ADC_Init+0x304>)
 8002dec:	fba2 2303 	umull	r2, r3, r2, r3
 8002df0:	099b      	lsrs	r3, r3, #6
 8002df2:	3301      	adds	r3, #1
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002df8:	e002      	b.n	8002e00 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002dfa:	68bb      	ldr	r3, [r7, #8]
 8002dfc:	3b01      	subs	r3, #1
 8002dfe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e00:	68bb      	ldr	r3, [r7, #8]
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d1f9      	bne.n	8002dfa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f7ff ff3c 	bl	8002c88 <LL_ADC_IsInternalRegulatorEnabled>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d10d      	bne.n	8002e32 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e1a:	f043 0210 	orr.w	r2, r3, #16
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e26:	f043 0201 	orr.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7ff ff75 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 8002e3c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e42:	f003 0310 	and.w	r3, r3, #16
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	f040 8106 	bne.w	8003058 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	f040 8102 	bne.w	8003058 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e58:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e5c:	f043 0202 	orr.w	r2, r3, #2
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f7ff ff35 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002e6e:	4603      	mov	r3, r0
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d111      	bne.n	8002e98 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e74:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e78:	f7ff ff2e 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002e7c:	4604      	mov	r4, r0
 8002e7e:	487f      	ldr	r0, [pc, #508]	; (800307c <HAL_ADC_Init+0x308>)
 8002e80:	f7ff ff2a 	bl	8002cd8 <LL_ADC_IsEnabled>
 8002e84:	4603      	mov	r3, r0
 8002e86:	4323      	orrs	r3, r4
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d105      	bne.n	8002e98 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	4619      	mov	r1, r3
 8002e92:	487b      	ldr	r0, [pc, #492]	; (8003080 <HAL_ADC_Init+0x30c>)
 8002e94:	f7ff fd3e 	bl	8002914 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	7f5b      	ldrb	r3, [r3, #29]
 8002e9c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ea2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002ea8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002eae:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002eb6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d106      	bne.n	8002ed4 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eca:	3b01      	subs	r3, #1
 8002ecc:	045b      	lsls	r3, r3, #17
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	4313      	orrs	r3, r2
 8002ed2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d009      	beq.n	8002ef0 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ee0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ee8:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002eea:	69ba      	ldr	r2, [r7, #24]
 8002eec:	4313      	orrs	r3, r2
 8002eee:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	68da      	ldr	r2, [r3, #12]
 8002ef6:	4b63      	ldr	r3, [pc, #396]	; (8003084 <HAL_ADC_Init+0x310>)
 8002ef8:	4013      	ands	r3, r2
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	6812      	ldr	r2, [r2, #0]
 8002efe:	69b9      	ldr	r1, [r7, #24]
 8002f00:	430b      	orrs	r3, r1
 8002f02:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	691b      	ldr	r3, [r3, #16]
 8002f0a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	430a      	orrs	r2, r1
 8002f18:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff01 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 8002f24:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	f7ff ff0e 	bl	8002d4c <LL_ADC_INJ_IsConversionOngoing>
 8002f30:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d16d      	bne.n	8003014 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d16a      	bne.n	8003014 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f42:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f4a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f5a:	f023 0302 	bic.w	r3, r3, #2
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	6812      	ldr	r2, [r2, #0]
 8002f62:	69b9      	ldr	r1, [r7, #24]
 8002f64:	430b      	orrs	r3, r1
 8002f66:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	691b      	ldr	r3, [r3, #16]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d017      	beq.n	8002fa0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	691a      	ldr	r2, [r3, #16]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002f7e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002f88:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002f8c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002f90:	687a      	ldr	r2, [r7, #4]
 8002f92:	6911      	ldr	r1, [r2, #16]
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	6812      	ldr	r2, [r2, #0]
 8002f98:	430b      	orrs	r3, r1
 8002f9a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002f9e:	e013      	b.n	8002fc8 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	691a      	ldr	r2, [r3, #16]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002fae:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002fb8:	687a      	ldr	r2, [r7, #4]
 8002fba:	6812      	ldr	r2, [r2, #0]
 8002fbc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002fc0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002fc4:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002fce:	2b01      	cmp	r3, #1
 8002fd0:	d118      	bne.n	8003004 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	691b      	ldr	r3, [r3, #16]
 8002fd8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002fdc:	f023 0304 	bic.w	r3, r3, #4
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002fe4:	687a      	ldr	r2, [r7, #4]
 8002fe6:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002fe8:	4311      	orrs	r1, r2
 8002fea:	687a      	ldr	r2, [r7, #4]
 8002fec:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002fee:	4311      	orrs	r1, r2
 8002ff0:	687a      	ldr	r2, [r7, #4]
 8002ff2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ff4:	430a      	orrs	r2, r1
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f042 0201 	orr.w	r2, r2, #1
 8003000:	611a      	str	r2, [r3, #16]
 8003002:	e007      	b.n	8003014 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	691a      	ldr	r2, [r3, #16]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f022 0201 	bic.w	r2, r2, #1
 8003012:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	695b      	ldr	r3, [r3, #20]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d10c      	bne.n	8003036 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003022:	f023 010f 	bic.w	r1, r3, #15
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6a1b      	ldr	r3, [r3, #32]
 800302a:	1e5a      	subs	r2, r3, #1
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	430a      	orrs	r2, r1
 8003032:	631a      	str	r2, [r3, #48]	; 0x30
 8003034:	e007      	b.n	8003046 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 020f 	bic.w	r2, r2, #15
 8003044:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800304a:	f023 0303 	bic.w	r3, r3, #3
 800304e:	f043 0201 	orr.w	r2, r3, #1
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	65da      	str	r2, [r3, #92]	; 0x5c
 8003056:	e007      	b.n	8003068 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800305c:	f043 0210 	orr.w	r2, r3, #16
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003068:	7ffb      	ldrb	r3, [r7, #31]
}
 800306a:	4618      	mov	r0, r3
 800306c:	3724      	adds	r7, #36	; 0x24
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
 8003072:	bf00      	nop
 8003074:	20000004 	.word	0x20000004
 8003078:	053e2d63 	.word	0x053e2d63
 800307c:	50000100 	.word	0x50000100
 8003080:	50000300 	.word	0x50000300
 8003084:	fff04007 	.word	0xfff04007

08003088 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003088:	b580      	push	{r7, lr}
 800308a:	b086      	sub	sp, #24
 800308c:	af00      	add	r7, sp, #0
 800308e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003090:	4859      	ldr	r0, [pc, #356]	; (80031f8 <HAL_ADC_Start+0x170>)
 8003092:	f7ff fda3 	bl	8002bdc <LL_ADC_GetMultimode>
 8003096:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7ff fe42 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 80030a2:	4603      	mov	r3, r0
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	f040 809f 	bne.w	80031e8 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d101      	bne.n	80030b8 <HAL_ADC_Start+0x30>
 80030b4:	2302      	movs	r3, #2
 80030b6:	e09a      	b.n	80031ee <HAL_ADC_Start+0x166>
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2201      	movs	r2, #1
 80030bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80030c0:	6878      	ldr	r0, [r7, #4]
 80030c2:	f000 fe45 	bl	8003d50 <ADC_Enable>
 80030c6:	4603      	mov	r3, r0
 80030c8:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80030ca:	7dfb      	ldrb	r3, [r7, #23]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f040 8086 	bne.w	80031de <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030d6:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80030da:	f023 0301 	bic.w	r3, r3, #1
 80030de:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a44      	ldr	r2, [pc, #272]	; (80031fc <HAL_ADC_Start+0x174>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d002      	beq.n	80030f6 <HAL_ADC_Start+0x6e>
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	e001      	b.n	80030fa <HAL_ADC_Start+0x72>
 80030f6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80030fa:	687a      	ldr	r2, [r7, #4]
 80030fc:	6812      	ldr	r2, [r2, #0]
 80030fe:	4293      	cmp	r3, r2
 8003100:	d002      	beq.n	8003108 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d105      	bne.n	8003114 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800310c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003118:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003120:	d106      	bne.n	8003130 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003126:	f023 0206 	bic.w	r2, r3, #6
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	661a      	str	r2, [r3, #96]	; 0x60
 800312e:	e002      	b.n	8003136 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	2200      	movs	r2, #0
 8003134:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	221c      	movs	r2, #28
 800313c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a2c      	ldr	r2, [pc, #176]	; (80031fc <HAL_ADC_Start+0x174>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d002      	beq.n	8003156 <HAL_ADC_Start+0xce>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	e001      	b.n	800315a <HAL_ADC_Start+0xd2>
 8003156:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800315a:	687a      	ldr	r2, [r7, #4]
 800315c:	6812      	ldr	r2, [r2, #0]
 800315e:	4293      	cmp	r3, r2
 8003160:	d008      	beq.n	8003174 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003168:	693b      	ldr	r3, [r7, #16]
 800316a:	2b05      	cmp	r3, #5
 800316c:	d002      	beq.n	8003174 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	2b09      	cmp	r3, #9
 8003172:	d114      	bne.n	800319e <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	68db      	ldr	r3, [r3, #12]
 800317a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d007      	beq.n	8003192 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003186:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800318a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	4618      	mov	r0, r3
 8003198:	f7ff fdb1 	bl	8002cfe <LL_ADC_REG_StartConversion>
 800319c:	e026      	b.n	80031ec <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031a2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a13      	ldr	r2, [pc, #76]	; (80031fc <HAL_ADC_Start+0x174>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d002      	beq.n	80031ba <HAL_ADC_Start+0x132>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	e001      	b.n	80031be <HAL_ADC_Start+0x136>
 80031ba:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031be:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00f      	beq.n	80031ec <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031d0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031d4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	65da      	str	r2, [r3, #92]	; 0x5c
 80031dc:	e006      	b.n	80031ec <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	2200      	movs	r2, #0
 80031e2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80031e6:	e001      	b.n	80031ec <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80031e8:	2302      	movs	r3, #2
 80031ea:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80031ec:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ee:	4618      	mov	r0, r3
 80031f0:	3718      	adds	r7, #24
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	50000300 	.word	0x50000300
 80031fc:	50000100 	.word	0x50000100

08003200 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800320a:	4867      	ldr	r0, [pc, #412]	; (80033a8 <HAL_ADC_PollForConversion+0x1a8>)
 800320c:	f7ff fce6 	bl	8002bdc <LL_ADC_GetMultimode>
 8003210:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	699b      	ldr	r3, [r3, #24]
 8003216:	2b08      	cmp	r3, #8
 8003218:	d102      	bne.n	8003220 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800321a:	2308      	movs	r3, #8
 800321c:	61fb      	str	r3, [r7, #28]
 800321e:	e02a      	b.n	8003276 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d005      	beq.n	8003232 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003226:	697b      	ldr	r3, [r7, #20]
 8003228:	2b05      	cmp	r3, #5
 800322a:	d002      	beq.n	8003232 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	2b09      	cmp	r3, #9
 8003230:	d111      	bne.n	8003256 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	f003 0301 	and.w	r3, r3, #1
 800323c:	2b00      	cmp	r3, #0
 800323e:	d007      	beq.n	8003250 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003244:	f043 0220 	orr.w	r2, r3, #32
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800324c:	2301      	movs	r3, #1
 800324e:	e0a6      	b.n	800339e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003250:	2304      	movs	r3, #4
 8003252:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003254:	e00f      	b.n	8003276 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003256:	4854      	ldr	r0, [pc, #336]	; (80033a8 <HAL_ADC_PollForConversion+0x1a8>)
 8003258:	f7ff fcce 	bl	8002bf8 <LL_ADC_GetMultiDMATransfer>
 800325c:	4603      	mov	r3, r0
 800325e:	2b00      	cmp	r3, #0
 8003260:	d007      	beq.n	8003272 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003266:	f043 0220 	orr.w	r2, r3, #32
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e095      	b.n	800339e <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003272:	2304      	movs	r3, #4
 8003274:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003276:	f7ff fb41 	bl	80028fc <HAL_GetTick>
 800327a:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800327c:	e021      	b.n	80032c2 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800327e:	683b      	ldr	r3, [r7, #0]
 8003280:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003284:	d01d      	beq.n	80032c2 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003286:	f7ff fb39 	bl	80028fc <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	683a      	ldr	r2, [r7, #0]
 8003292:	429a      	cmp	r2, r3
 8003294:	d302      	bcc.n	800329c <HAL_ADC_PollForConversion+0x9c>
 8003296:	683b      	ldr	r3, [r7, #0]
 8003298:	2b00      	cmp	r3, #0
 800329a:	d112      	bne.n	80032c2 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	681a      	ldr	r2, [r3, #0]
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	4013      	ands	r3, r2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10b      	bne.n	80032c2 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032ae:	f043 0204 	orr.w	r2, r3, #4
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2200      	movs	r2, #0
 80032ba:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80032be:	2303      	movs	r3, #3
 80032c0:	e06d      	b.n	800339e <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d0d6      	beq.n	800327e <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032d4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	4618      	mov	r0, r3
 80032e2:	f7ff fbe9 	bl	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d01c      	beq.n	8003326 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	7f5b      	ldrb	r3, [r3, #29]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d118      	bne.n	8003326 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0308 	and.w	r3, r3, #8
 80032fe:	2b08      	cmp	r3, #8
 8003300:	d111      	bne.n	8003326 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003306:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003312:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003316:	2b00      	cmp	r3, #0
 8003318:	d105      	bne.n	8003326 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a20      	ldr	r2, [pc, #128]	; (80033ac <HAL_ADC_PollForConversion+0x1ac>)
 800332c:	4293      	cmp	r3, r2
 800332e:	d002      	beq.n	8003336 <HAL_ADC_PollForConversion+0x136>
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e001      	b.n	800333a <HAL_ADC_PollForConversion+0x13a>
 8003336:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800333a:	687a      	ldr	r2, [r7, #4]
 800333c:	6812      	ldr	r2, [r2, #0]
 800333e:	4293      	cmp	r3, r2
 8003340:	d008      	beq.n	8003354 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	2b00      	cmp	r3, #0
 8003346:	d005      	beq.n	8003354 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003348:	697b      	ldr	r3, [r7, #20]
 800334a:	2b05      	cmp	r3, #5
 800334c:	d002      	beq.n	8003354 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	2b09      	cmp	r3, #9
 8003352:	d104      	bne.n	800335e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	68db      	ldr	r3, [r3, #12]
 800335a:	61bb      	str	r3, [r7, #24]
 800335c:	e00d      	b.n	800337a <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4a12      	ldr	r2, [pc, #72]	; (80033ac <HAL_ADC_PollForConversion+0x1ac>)
 8003364:	4293      	cmp	r3, r2
 8003366:	d002      	beq.n	800336e <HAL_ADC_PollForConversion+0x16e>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	e001      	b.n	8003372 <HAL_ADC_PollForConversion+0x172>
 800336e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003372:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 800337a:	69fb      	ldr	r3, [r7, #28]
 800337c:	2b08      	cmp	r3, #8
 800337e:	d104      	bne.n	800338a <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	2208      	movs	r2, #8
 8003386:	601a      	str	r2, [r3, #0]
 8003388:	e008      	b.n	800339c <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003390:	2b00      	cmp	r3, #0
 8003392:	d103      	bne.n	800339c <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	220c      	movs	r2, #12
 800339a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3720      	adds	r7, #32
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	50000300 	.word	0x50000300
 80033ac:	50000100 	.word	0x50000100

080033b0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80033b0:	b580      	push	{r7, lr}
 80033b2:	b086      	sub	sp, #24
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	60f8      	str	r0, [r7, #12]
 80033b8:	60b9      	str	r1, [r7, #8]
 80033ba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80033bc:	4851      	ldr	r0, [pc, #324]	; (8003504 <HAL_ADC_Start_DMA+0x154>)
 80033be:	f7ff fc0d 	bl	8002bdc <LL_ADC_GetMultimode>
 80033c2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4618      	mov	r0, r3
 80033ca:	f7ff fcac 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 80033ce:	4603      	mov	r3, r0
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	f040 808f 	bne.w	80034f4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80033dc:	2b01      	cmp	r3, #1
 80033de:	d101      	bne.n	80033e4 <HAL_ADC_Start_DMA+0x34>
 80033e0:	2302      	movs	r3, #2
 80033e2:	e08a      	b.n	80034fa <HAL_ADC_Start_DMA+0x14a>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	2201      	movs	r2, #1
 80033e8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80033ec:	693b      	ldr	r3, [r7, #16]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d005      	beq.n	80033fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80033f2:	693b      	ldr	r3, [r7, #16]
 80033f4:	2b05      	cmp	r3, #5
 80033f6:	d002      	beq.n	80033fe <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	2b09      	cmp	r3, #9
 80033fc:	d173      	bne.n	80034e6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80033fe:	68f8      	ldr	r0, [r7, #12]
 8003400:	f000 fca6 	bl	8003d50 <ADC_Enable>
 8003404:	4603      	mov	r3, r0
 8003406:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003408:	7dfb      	ldrb	r3, [r7, #23]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d166      	bne.n	80034dc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003412:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003416:	f023 0301 	bic.w	r3, r3, #1
 800341a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	4a38      	ldr	r2, [pc, #224]	; (8003508 <HAL_ADC_Start_DMA+0x158>)
 8003428:	4293      	cmp	r3, r2
 800342a:	d002      	beq.n	8003432 <HAL_ADC_Start_DMA+0x82>
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	e001      	b.n	8003436 <HAL_ADC_Start_DMA+0x86>
 8003432:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	6812      	ldr	r2, [r2, #0]
 800343a:	4293      	cmp	r3, r2
 800343c:	d002      	beq.n	8003444 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800343e:	693b      	ldr	r3, [r7, #16]
 8003440:	2b00      	cmp	r3, #0
 8003442:	d105      	bne.n	8003450 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003448:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003460:	f023 0206 	bic.w	r2, r3, #6
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	661a      	str	r2, [r3, #96]	; 0x60
 8003468:	e002      	b.n	8003470 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	2200      	movs	r2, #0
 800346e:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003474:	4a25      	ldr	r2, [pc, #148]	; (800350c <HAL_ADC_Start_DMA+0x15c>)
 8003476:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347c:	4a24      	ldr	r2, [pc, #144]	; (8003510 <HAL_ADC_Start_DMA+0x160>)
 800347e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003484:	4a23      	ldr	r2, [pc, #140]	; (8003514 <HAL_ADC_Start_DMA+0x164>)
 8003486:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	221c      	movs	r2, #28
 800348e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	685a      	ldr	r2, [r3, #4]
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f042 0210 	orr.w	r2, r2, #16
 80034a6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68da      	ldr	r2, [r3, #12]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f042 0201 	orr.w	r2, r2, #1
 80034b6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	3340      	adds	r3, #64	; 0x40
 80034c2:	4619      	mov	r1, r3
 80034c4:	68ba      	ldr	r2, [r7, #8]
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	f000 ffba 	bl	8004440 <HAL_DMA_Start_IT>
 80034cc:	4603      	mov	r3, r0
 80034ce:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	4618      	mov	r0, r3
 80034d6:	f7ff fc12 	bl	8002cfe <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80034da:	e00d      	b.n	80034f8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80034e4:	e008      	b.n	80034f8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80034e6:	2301      	movs	r3, #1
 80034e8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	2200      	movs	r2, #0
 80034ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80034f2:	e001      	b.n	80034f8 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80034f4:	2302      	movs	r3, #2
 80034f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80034f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80034fa:	4618      	mov	r0, r3
 80034fc:	3718      	adds	r7, #24
 80034fe:	46bd      	mov	sp, r7
 8003500:	bd80      	pop	{r7, pc}
 8003502:	bf00      	nop
 8003504:	50000300 	.word	0x50000300
 8003508:	50000100 	.word	0x50000100
 800350c:	08003e15 	.word	0x08003e15
 8003510:	08003eed 	.word	0x08003eed
 8003514:	08003f09 	.word	0x08003f09

08003518 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003518:	b480      	push	{r7}
 800351a:	b083      	sub	sp, #12
 800351c:	af00      	add	r7, sp, #0
 800351e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003526:	4618      	mov	r0, r3
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800353a:	bf00      	nop
 800353c:	370c      	adds	r7, #12
 800353e:	46bd      	mov	sp, r7
 8003540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003544:	4770      	bx	lr

08003546 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003546:	b480      	push	{r7}
 8003548:	b083      	sub	sp, #12
 800354a:	af00      	add	r7, sp, #0
 800354c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800354e:	bf00      	nop
 8003550:	370c      	adds	r7, #12
 8003552:	46bd      	mov	sp, r7
 8003554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003558:	4770      	bx	lr

0800355a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800355a:	b480      	push	{r7}
 800355c:	b083      	sub	sp, #12
 800355e:	af00      	add	r7, sp, #0
 8003560:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003562:	bf00      	nop
 8003564:	370c      	adds	r7, #12
 8003566:	46bd      	mov	sp, r7
 8003568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356c:	4770      	bx	lr
	...

08003570 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003570:	b580      	push	{r7, lr}
 8003572:	b0b6      	sub	sp, #216	; 0xd8
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800357a:	2300      	movs	r3, #0
 800357c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003580:	2300      	movs	r3, #0
 8003582:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800358a:	2b01      	cmp	r3, #1
 800358c:	d101      	bne.n	8003592 <HAL_ADC_ConfigChannel+0x22>
 800358e:	2302      	movs	r3, #2
 8003590:	e3c8      	b.n	8003d24 <HAL_ADC_ConfigChannel+0x7b4>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	2201      	movs	r2, #1
 8003596:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4618      	mov	r0, r3
 80035a0:	f7ff fbc1 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 80035a4:	4603      	mov	r3, r0
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	f040 83ad 	bne.w	8003d06 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6818      	ldr	r0, [r3, #0]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	6859      	ldr	r1, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	461a      	mov	r2, r3
 80035ba:	f7ff fa90 	bl	8002ade <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	4618      	mov	r0, r3
 80035c4:	f7ff fbaf 	bl	8002d26 <LL_ADC_REG_IsConversionOngoing>
 80035c8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff fbbb 	bl	8002d4c <LL_ADC_INJ_IsConversionOngoing>
 80035d6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80035da:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80035de:	2b00      	cmp	r3, #0
 80035e0:	f040 81d9 	bne.w	8003996 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80035e4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f040 81d4 	bne.w	8003996 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80035ee:	683b      	ldr	r3, [r7, #0]
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80035f6:	d10f      	bne.n	8003618 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6818      	ldr	r0, [r3, #0]
 80035fc:	683b      	ldr	r3, [r7, #0]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	2200      	movs	r2, #0
 8003602:	4619      	mov	r1, r3
 8003604:	f7ff fa97 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003610:	4618      	mov	r0, r3
 8003612:	f7ff fa3e 	bl	8002a92 <LL_ADC_SetSamplingTimeCommonConfig>
 8003616:	e00e      	b.n	8003636 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	6818      	ldr	r0, [r3, #0]
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	6819      	ldr	r1, [r3, #0]
 8003620:	683b      	ldr	r3, [r7, #0]
 8003622:	689b      	ldr	r3, [r3, #8]
 8003624:	461a      	mov	r2, r3
 8003626:	f7ff fa86 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	2100      	movs	r1, #0
 8003630:	4618      	mov	r0, r3
 8003632:	f7ff fa2e 	bl	8002a92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	695a      	ldr	r2, [r3, #20]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	08db      	lsrs	r3, r3, #3
 8003642:	f003 0303 	and.w	r3, r3, #3
 8003646:	005b      	lsls	r3, r3, #1
 8003648:	fa02 f303 	lsl.w	r3, r2, r3
 800364c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	691b      	ldr	r3, [r3, #16]
 8003654:	2b04      	cmp	r3, #4
 8003656:	d022      	beq.n	800369e <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	6818      	ldr	r0, [r3, #0]
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6919      	ldr	r1, [r3, #16]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003668:	f7ff f988 	bl	800297c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	6919      	ldr	r1, [r3, #16]
 8003674:	683b      	ldr	r3, [r7, #0]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	461a      	mov	r2, r3
 800367a:	f7ff f9d4 	bl	8002a26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	683b      	ldr	r3, [r7, #0]
 8003684:	6919      	ldr	r1, [r3, #16]
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	7f1b      	ldrb	r3, [r3, #28]
 800368a:	2b01      	cmp	r3, #1
 800368c:	d102      	bne.n	8003694 <HAL_ADC_ConfigChannel+0x124>
 800368e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003692:	e000      	b.n	8003696 <HAL_ADC_ConfigChannel+0x126>
 8003694:	2300      	movs	r3, #0
 8003696:	461a      	mov	r2, r3
 8003698:	f7ff f9e0 	bl	8002a5c <LL_ADC_SetOffsetSaturation>
 800369c:	e17b      	b.n	8003996 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2100      	movs	r1, #0
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff f98d 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80036aa:	4603      	mov	r3, r0
 80036ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d10a      	bne.n	80036ca <HAL_ADC_ConfigChannel+0x15a>
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	2100      	movs	r1, #0
 80036ba:	4618      	mov	r0, r3
 80036bc:	f7ff f982 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80036c0:	4603      	mov	r3, r0
 80036c2:	0e9b      	lsrs	r3, r3, #26
 80036c4:	f003 021f 	and.w	r2, r3, #31
 80036c8:	e01e      	b.n	8003708 <HAL_ADC_ConfigChannel+0x198>
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2100      	movs	r1, #0
 80036d0:	4618      	mov	r0, r3
 80036d2:	f7ff f977 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80036d6:	4603      	mov	r3, r0
 80036d8:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036dc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80036e0:	fa93 f3a3 	rbit	r3, r3
 80036e4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80036e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80036ec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80036f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d101      	bne.n	80036fc <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80036f8:	2320      	movs	r3, #32
 80036fa:	e004      	b.n	8003706 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80036fc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003700:	fab3 f383 	clz	r3, r3
 8003704:	b2db      	uxtb	r3, r3
 8003706:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003710:	2b00      	cmp	r3, #0
 8003712:	d105      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x1b0>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	0e9b      	lsrs	r3, r3, #26
 800371a:	f003 031f 	and.w	r3, r3, #31
 800371e:	e018      	b.n	8003752 <HAL_ADC_ConfigChannel+0x1e2>
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003728:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800372c:	fa93 f3a3 	rbit	r3, r3
 8003730:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003734:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003738:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800373c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003740:	2b00      	cmp	r3, #0
 8003742:	d101      	bne.n	8003748 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003744:	2320      	movs	r3, #32
 8003746:	e004      	b.n	8003752 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003748:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800374c:	fab3 f383 	clz	r3, r3
 8003750:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003752:	429a      	cmp	r2, r3
 8003754:	d106      	bne.n	8003764 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	2200      	movs	r2, #0
 800375c:	2100      	movs	r1, #0
 800375e:	4618      	mov	r0, r3
 8003760:	f7ff f946 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	2101      	movs	r1, #1
 800376a:	4618      	mov	r0, r3
 800376c:	f7ff f92a 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003770:	4603      	mov	r3, r0
 8003772:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003776:	2b00      	cmp	r3, #0
 8003778:	d10a      	bne.n	8003790 <HAL_ADC_ConfigChannel+0x220>
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2101      	movs	r1, #1
 8003780:	4618      	mov	r0, r3
 8003782:	f7ff f91f 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003786:	4603      	mov	r3, r0
 8003788:	0e9b      	lsrs	r3, r3, #26
 800378a:	f003 021f 	and.w	r2, r3, #31
 800378e:	e01e      	b.n	80037ce <HAL_ADC_ConfigChannel+0x25e>
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	2101      	movs	r1, #1
 8003796:	4618      	mov	r0, r3
 8003798:	f7ff f914 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800379c:	4603      	mov	r3, r0
 800379e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037a2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80037a6:	fa93 f3a3 	rbit	r3, r3
 80037aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80037ae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80037b2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80037b6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80037be:	2320      	movs	r3, #32
 80037c0:	e004      	b.n	80037cc <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80037c2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80037c6:	fab3 f383 	clz	r3, r3
 80037ca:	b2db      	uxtb	r3, r3
 80037cc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d105      	bne.n	80037e6 <HAL_ADC_ConfigChannel+0x276>
 80037da:	683b      	ldr	r3, [r7, #0]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	0e9b      	lsrs	r3, r3, #26
 80037e0:	f003 031f 	and.w	r3, r3, #31
 80037e4:	e018      	b.n	8003818 <HAL_ADC_ConfigChannel+0x2a8>
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037ee:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80037f2:	fa93 f3a3 	rbit	r3, r3
 80037f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80037fa:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80037fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003802:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003806:	2b00      	cmp	r3, #0
 8003808:	d101      	bne.n	800380e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800380a:	2320      	movs	r3, #32
 800380c:	e004      	b.n	8003818 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800380e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003812:	fab3 f383 	clz	r3, r3
 8003816:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003818:	429a      	cmp	r2, r3
 800381a:	d106      	bne.n	800382a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2200      	movs	r2, #0
 8003822:	2101      	movs	r1, #1
 8003824:	4618      	mov	r0, r3
 8003826:	f7ff f8e3 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	2102      	movs	r1, #2
 8003830:	4618      	mov	r0, r3
 8003832:	f7ff f8c7 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003836:	4603      	mov	r3, r0
 8003838:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800383c:	2b00      	cmp	r3, #0
 800383e:	d10a      	bne.n	8003856 <HAL_ADC_ConfigChannel+0x2e6>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	2102      	movs	r1, #2
 8003846:	4618      	mov	r0, r3
 8003848:	f7ff f8bc 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800384c:	4603      	mov	r3, r0
 800384e:	0e9b      	lsrs	r3, r3, #26
 8003850:	f003 021f 	and.w	r2, r3, #31
 8003854:	e01e      	b.n	8003894 <HAL_ADC_ConfigChannel+0x324>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	2102      	movs	r1, #2
 800385c:	4618      	mov	r0, r3
 800385e:	f7ff f8b1 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003862:	4603      	mov	r3, r0
 8003864:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003874:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003878:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800387c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8003888:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800389c:	2b00      	cmp	r3, #0
 800389e:	d105      	bne.n	80038ac <HAL_ADC_ConfigChannel+0x33c>
 80038a0:	683b      	ldr	r3, [r7, #0]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	0e9b      	lsrs	r3, r3, #26
 80038a6:	f003 031f 	and.w	r3, r3, #31
 80038aa:	e016      	b.n	80038da <HAL_ADC_ConfigChannel+0x36a>
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038b4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80038b8:	fa93 f3a3 	rbit	r3, r3
 80038bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80038be:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80038c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80038c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d101      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80038cc:	2320      	movs	r3, #32
 80038ce:	e004      	b.n	80038da <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80038d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80038d4:	fab3 f383 	clz	r3, r3
 80038d8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80038da:	429a      	cmp	r2, r3
 80038dc:	d106      	bne.n	80038ec <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	2200      	movs	r2, #0
 80038e4:	2102      	movs	r1, #2
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7ff f882 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	2103      	movs	r1, #3
 80038f2:	4618      	mov	r0, r3
 80038f4:	f7ff f866 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d10a      	bne.n	8003918 <HAL_ADC_ConfigChannel+0x3a8>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2103      	movs	r1, #3
 8003908:	4618      	mov	r0, r3
 800390a:	f7ff f85b 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800390e:	4603      	mov	r3, r0
 8003910:	0e9b      	lsrs	r3, r3, #26
 8003912:	f003 021f 	and.w	r2, r3, #31
 8003916:	e017      	b.n	8003948 <HAL_ADC_ConfigChannel+0x3d8>
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	2103      	movs	r1, #3
 800391e:	4618      	mov	r0, r3
 8003920:	f7ff f850 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003924:	4603      	mov	r3, r0
 8003926:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800392a:	fa93 f3a3 	rbit	r3, r3
 800392e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003930:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003932:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003934:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003936:	2b00      	cmp	r3, #0
 8003938:	d101      	bne.n	800393e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 800393a:	2320      	movs	r3, #32
 800393c:	e003      	b.n	8003946 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800393e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003940:	fab3 f383 	clz	r3, r3
 8003944:	b2db      	uxtb	r3, r3
 8003946:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003950:	2b00      	cmp	r3, #0
 8003952:	d105      	bne.n	8003960 <HAL_ADC_ConfigChannel+0x3f0>
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	0e9b      	lsrs	r3, r3, #26
 800395a:	f003 031f 	and.w	r3, r3, #31
 800395e:	e011      	b.n	8003984 <HAL_ADC_ConfigChannel+0x414>
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003966:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003968:	fa93 f3a3 	rbit	r3, r3
 800396c:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800396e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003970:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003972:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003974:	2b00      	cmp	r3, #0
 8003976:	d101      	bne.n	800397c <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003978:	2320      	movs	r3, #32
 800397a:	e003      	b.n	8003984 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 800397c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800397e:	fab3 f383 	clz	r3, r3
 8003982:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003984:	429a      	cmp	r2, r3
 8003986:	d106      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2200      	movs	r2, #0
 800398e:	2103      	movs	r1, #3
 8003990:	4618      	mov	r0, r3
 8003992:	f7ff f82d 	bl	80029f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	4618      	mov	r0, r3
 800399c:	f7ff f99c 	bl	8002cd8 <LL_ADC_IsEnabled>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	f040 8140 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	6818      	ldr	r0, [r3, #0]
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	6819      	ldr	r1, [r3, #0]
 80039b0:	683b      	ldr	r3, [r7, #0]
 80039b2:	68db      	ldr	r3, [r3, #12]
 80039b4:	461a      	mov	r2, r3
 80039b6:	f7ff f8e9 	bl	8002b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	4a8f      	ldr	r2, [pc, #572]	; (8003bfc <HAL_ADC_ConfigChannel+0x68c>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	f040 8131 	bne.w	8003c28 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d10b      	bne.n	80039ee <HAL_ADC_ConfigChannel+0x47e>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	0e9b      	lsrs	r3, r3, #26
 80039dc:	3301      	adds	r3, #1
 80039de:	f003 031f 	and.w	r3, r3, #31
 80039e2:	2b09      	cmp	r3, #9
 80039e4:	bf94      	ite	ls
 80039e6:	2301      	movls	r3, #1
 80039e8:	2300      	movhi	r3, #0
 80039ea:	b2db      	uxtb	r3, r3
 80039ec:	e019      	b.n	8003a22 <HAL_ADC_ConfigChannel+0x4b2>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80039f6:	fa93 f3a3 	rbit	r3, r3
 80039fa:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80039fc:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80039fe:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003a00:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d101      	bne.n	8003a0a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003a06:	2320      	movs	r3, #32
 8003a08:	e003      	b.n	8003a12 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003a0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003a0c:	fab3 f383 	clz	r3, r3
 8003a10:	b2db      	uxtb	r3, r3
 8003a12:	3301      	adds	r3, #1
 8003a14:	f003 031f 	and.w	r3, r3, #31
 8003a18:	2b09      	cmp	r3, #9
 8003a1a:	bf94      	ite	ls
 8003a1c:	2301      	movls	r3, #1
 8003a1e:	2300      	movhi	r3, #0
 8003a20:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d079      	beq.n	8003b1a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003a26:	683b      	ldr	r3, [r7, #0]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d107      	bne.n	8003a42 <HAL_ADC_ConfigChannel+0x4d2>
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	0e9b      	lsrs	r3, r3, #26
 8003a38:	3301      	adds	r3, #1
 8003a3a:	069b      	lsls	r3, r3, #26
 8003a3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a40:	e015      	b.n	8003a6e <HAL_ADC_ConfigChannel+0x4fe>
 8003a42:	683b      	ldr	r3, [r7, #0]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003a4a:	fa93 f3a3 	rbit	r3, r3
 8003a4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003a50:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a52:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003a54:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d101      	bne.n	8003a5e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003a5a:	2320      	movs	r3, #32
 8003a5c:	e003      	b.n	8003a66 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003a5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003a60:	fab3 f383 	clz	r3, r3
 8003a64:	b2db      	uxtb	r3, r3
 8003a66:	3301      	adds	r3, #1
 8003a68:	069b      	lsls	r3, r3, #26
 8003a6a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d109      	bne.n	8003a8e <HAL_ADC_ConfigChannel+0x51e>
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	0e9b      	lsrs	r3, r3, #26
 8003a80:	3301      	adds	r3, #1
 8003a82:	f003 031f 	and.w	r3, r3, #31
 8003a86:	2101      	movs	r1, #1
 8003a88:	fa01 f303 	lsl.w	r3, r1, r3
 8003a8c:	e017      	b.n	8003abe <HAL_ADC_ConfigChannel+0x54e>
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a96:	fa93 f3a3 	rbit	r3, r3
 8003a9a:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003a9c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003a9e:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003aa0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d101      	bne.n	8003aaa <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003aa6:	2320      	movs	r3, #32
 8003aa8:	e003      	b.n	8003ab2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003aaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003aac:	fab3 f383 	clz	r3, r3
 8003ab0:	b2db      	uxtb	r3, r3
 8003ab2:	3301      	adds	r3, #1
 8003ab4:	f003 031f 	and.w	r3, r3, #31
 8003ab8:	2101      	movs	r1, #1
 8003aba:	fa01 f303 	lsl.w	r3, r1, r3
 8003abe:	ea42 0103 	orr.w	r1, r2, r3
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d10a      	bne.n	8003ae4 <HAL_ADC_ConfigChannel+0x574>
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	0e9b      	lsrs	r3, r3, #26
 8003ad4:	3301      	adds	r3, #1
 8003ad6:	f003 021f 	and.w	r2, r3, #31
 8003ada:	4613      	mov	r3, r2
 8003adc:	005b      	lsls	r3, r3, #1
 8003ade:	4413      	add	r3, r2
 8003ae0:	051b      	lsls	r3, r3, #20
 8003ae2:	e018      	b.n	8003b16 <HAL_ADC_ConfigChannel+0x5a6>
 8003ae4:	683b      	ldr	r3, [r7, #0]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003aec:	fa93 f3a3 	rbit	r3, r3
 8003af0:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003af2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003af6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d101      	bne.n	8003b00 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003afc:	2320      	movs	r3, #32
 8003afe:	e003      	b.n	8003b08 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b02:	fab3 f383 	clz	r3, r3
 8003b06:	b2db      	uxtb	r3, r3
 8003b08:	3301      	adds	r3, #1
 8003b0a:	f003 021f 	and.w	r2, r3, #31
 8003b0e:	4613      	mov	r3, r2
 8003b10:	005b      	lsls	r3, r3, #1
 8003b12:	4413      	add	r3, r2
 8003b14:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b16:	430b      	orrs	r3, r1
 8003b18:	e081      	b.n	8003c1e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d107      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x5c6>
 8003b26:	683b      	ldr	r3, [r7, #0]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	0e9b      	lsrs	r3, r3, #26
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	069b      	lsls	r3, r3, #26
 8003b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b34:	e015      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x5f2>
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	fa93 f3a3 	rbit	r3, r3
 8003b42:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003b44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b46:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003b48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003b4e:	2320      	movs	r3, #32
 8003b50:	e003      	b.n	8003b5a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003b52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b54:	fab3 f383 	clz	r3, r3
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	3301      	adds	r3, #1
 8003b5c:	069b      	lsls	r3, r3, #26
 8003b5e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b62:	683b      	ldr	r3, [r7, #0]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d109      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x612>
 8003b6e:	683b      	ldr	r3, [r7, #0]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	0e9b      	lsrs	r3, r3, #26
 8003b74:	3301      	adds	r3, #1
 8003b76:	f003 031f 	and.w	r3, r3, #31
 8003b7a:	2101      	movs	r1, #1
 8003b7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003b80:	e017      	b.n	8003bb2 <HAL_ADC_ConfigChannel+0x642>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6a3b      	ldr	r3, [r7, #32]
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	61fb      	str	r3, [r7, #28]
  return result;
 8003b90:	69fb      	ldr	r3, [r7, #28]
 8003b92:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e003      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	f003 031f 	and.w	r3, r3, #31
 8003bac:	2101      	movs	r1, #1
 8003bae:	fa01 f303 	lsl.w	r3, r1, r3
 8003bb2:	ea42 0103 	orr.w	r1, r2, r3
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d10d      	bne.n	8003bde <HAL_ADC_ConfigChannel+0x66e>
 8003bc2:	683b      	ldr	r3, [r7, #0]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	0e9b      	lsrs	r3, r3, #26
 8003bc8:	3301      	adds	r3, #1
 8003bca:	f003 021f 	and.w	r2, r3, #31
 8003bce:	4613      	mov	r3, r2
 8003bd0:	005b      	lsls	r3, r3, #1
 8003bd2:	4413      	add	r3, r2
 8003bd4:	3b1e      	subs	r3, #30
 8003bd6:	051b      	lsls	r3, r3, #20
 8003bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003bdc:	e01e      	b.n	8003c1c <HAL_ADC_ConfigChannel+0x6ac>
 8003bde:	683b      	ldr	r3, [r7, #0]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003be4:	697b      	ldr	r3, [r7, #20]
 8003be6:	fa93 f3a3 	rbit	r3, r3
 8003bea:	613b      	str	r3, [r7, #16]
  return result;
 8003bec:	693b      	ldr	r3, [r7, #16]
 8003bee:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003bf0:	69bb      	ldr	r3, [r7, #24]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d104      	bne.n	8003c00 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003bf6:	2320      	movs	r3, #32
 8003bf8:	e006      	b.n	8003c08 <HAL_ADC_ConfigChannel+0x698>
 8003bfa:	bf00      	nop
 8003bfc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003c00:	69bb      	ldr	r3, [r7, #24]
 8003c02:	fab3 f383 	clz	r3, r3
 8003c06:	b2db      	uxtb	r3, r3
 8003c08:	3301      	adds	r3, #1
 8003c0a:	f003 021f 	and.w	r2, r3, #31
 8003c0e:	4613      	mov	r3, r2
 8003c10:	005b      	lsls	r3, r3, #1
 8003c12:	4413      	add	r3, r2
 8003c14:	3b1e      	subs	r3, #30
 8003c16:	051b      	lsls	r3, r3, #20
 8003c18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c1c:	430b      	orrs	r3, r1
 8003c1e:	683a      	ldr	r2, [r7, #0]
 8003c20:	6892      	ldr	r2, [r2, #8]
 8003c22:	4619      	mov	r1, r3
 8003c24:	f7fe ff87 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	4b3f      	ldr	r3, [pc, #252]	; (8003d2c <HAL_ADC_ConfigChannel+0x7bc>)
 8003c2e:	4013      	ands	r3, r2
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d071      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003c34:	483e      	ldr	r0, [pc, #248]	; (8003d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c36:	f7fe fe93 	bl	8002960 <LL_ADC_GetCommonPathInternalCh>
 8003c3a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	4a3c      	ldr	r2, [pc, #240]	; (8003d34 <HAL_ADC_ConfigChannel+0x7c4>)
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d004      	beq.n	8003c52 <HAL_ADC_ConfigChannel+0x6e2>
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a3a      	ldr	r2, [pc, #232]	; (8003d38 <HAL_ADC_ConfigChannel+0x7c8>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d127      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003c52:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c56:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d121      	bne.n	8003ca2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003c66:	d157      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003c68:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003c6c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003c70:	4619      	mov	r1, r3
 8003c72:	482f      	ldr	r0, [pc, #188]	; (8003d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003c74:	f7fe fe61 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003c78:	4b30      	ldr	r3, [pc, #192]	; (8003d3c <HAL_ADC_ConfigChannel+0x7cc>)
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	4a30      	ldr	r2, [pc, #192]	; (8003d40 <HAL_ADC_ConfigChannel+0x7d0>)
 8003c80:	fba2 2303 	umull	r2, r3, r2, r3
 8003c84:	099b      	lsrs	r3, r3, #6
 8003c86:	1c5a      	adds	r2, r3, #1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	005b      	lsls	r3, r3, #1
 8003c8c:	4413      	add	r3, r2
 8003c8e:	009b      	lsls	r3, r3, #2
 8003c90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c92:	e002      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	3b01      	subs	r3, #1
 8003c98:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d1f9      	bne.n	8003c94 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003ca0:	e03a      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	4a27      	ldr	r2, [pc, #156]	; (8003d44 <HAL_ADC_ConfigChannel+0x7d4>)
 8003ca8:	4293      	cmp	r3, r2
 8003caa:	d113      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x764>
 8003cac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cb0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10d      	bne.n	8003cd4 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	4a22      	ldr	r2, [pc, #136]	; (8003d48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cbe:	4293      	cmp	r3, r2
 8003cc0:	d02a      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cc2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cc6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003cca:	4619      	mov	r1, r3
 8003ccc:	4818      	ldr	r0, [pc, #96]	; (8003d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003cce:	f7fe fe34 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003cd2:	e021      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003cd4:	683b      	ldr	r3, [r7, #0]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	4a1c      	ldr	r2, [pc, #112]	; (8003d4c <HAL_ADC_ConfigChannel+0x7dc>)
 8003cda:	4293      	cmp	r3, r2
 8003cdc:	d11c      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003cde:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ce2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d116      	bne.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a16      	ldr	r2, [pc, #88]	; (8003d48 <HAL_ADC_ConfigChannel+0x7d8>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d011      	beq.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003cf4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003cf8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003cfc:	4619      	mov	r1, r3
 8003cfe:	480c      	ldr	r0, [pc, #48]	; (8003d30 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d00:	f7fe fe1b 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
 8003d04:	e008      	b.n	8003d18 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0a:	f043 0220 	orr.w	r2, r3, #32
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003d12:	2301      	movs	r3, #1
 8003d14:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003d20:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	37d8      	adds	r7, #216	; 0xd8
 8003d28:	46bd      	mov	sp, r7
 8003d2a:	bd80      	pop	{r7, pc}
 8003d2c:	80080000 	.word	0x80080000
 8003d30:	50000300 	.word	0x50000300
 8003d34:	c3210000 	.word	0xc3210000
 8003d38:	90c00010 	.word	0x90c00010
 8003d3c:	20000004 	.word	0x20000004
 8003d40:	053e2d63 	.word	0x053e2d63
 8003d44:	c7520000 	.word	0xc7520000
 8003d48:	50000100 	.word	0x50000100
 8003d4c:	cb840000 	.word	0xcb840000

08003d50 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe ffbb 	bl	8002cd8 <LL_ADC_IsEnabled>
 8003d62:	4603      	mov	r3, r0
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d14d      	bne.n	8003e04 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	4b28      	ldr	r3, [pc, #160]	; (8003e10 <ADC_Enable+0xc0>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d7a:	f043 0210 	orr.w	r2, r3, #16
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d86:	f043 0201 	orr.w	r2, r3, #1
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e039      	b.n	8003e06 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	4618      	mov	r0, r3
 8003d98:	f7fe ff8a 	bl	8002cb0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003d9c:	f7fe fdae 	bl	80028fc <HAL_GetTick>
 8003da0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003da2:	e028      	b.n	8003df6 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	681b      	ldr	r3, [r3, #0]
 8003da8:	4618      	mov	r0, r3
 8003daa:	f7fe ff95 	bl	8002cd8 <LL_ADC_IsEnabled>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d104      	bne.n	8003dbe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4618      	mov	r0, r3
 8003dba:	f7fe ff79 	bl	8002cb0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003dbe:	f7fe fd9d 	bl	80028fc <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d914      	bls.n	8003df6 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0301 	and.w	r3, r3, #1
 8003dd6:	2b01      	cmp	r3, #1
 8003dd8:	d00d      	beq.n	8003df6 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003dde:	f043 0210 	orr.w	r2, r3, #16
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003dea:	f043 0201 	orr.w	r2, r3, #1
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003df2:	2301      	movs	r3, #1
 8003df4:	e007      	b.n	8003e06 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f003 0301 	and.w	r3, r3, #1
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d1cf      	bne.n	8003da4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003e04:	2300      	movs	r3, #0
}
 8003e06:	4618      	mov	r0, r3
 8003e08:	3710      	adds	r7, #16
 8003e0a:	46bd      	mov	sp, r7
 8003e0c:	bd80      	pop	{r7, pc}
 8003e0e:	bf00      	nop
 8003e10:	8000003f 	.word	0x8000003f

08003e14 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b084      	sub	sp, #16
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e20:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e26:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d14b      	bne.n	8003ec6 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e32:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	f003 0308 	and.w	r3, r3, #8
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d021      	beq.n	8003e8c <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	f7fe fe33 	bl	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d032      	beq.n	8003ebe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d12b      	bne.n	8003ebe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e6a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e76:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d11f      	bne.n	8003ebe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e82:	f043 0201 	orr.w	r2, r3, #1
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	65da      	str	r2, [r3, #92]	; 0x5c
 8003e8a:	e018      	b.n	8003ebe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	f003 0302 	and.w	r3, r3, #2
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d111      	bne.n	8003ebe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eaa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d105      	bne.n	8003ebe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eb6:	f043 0201 	orr.w	r2, r3, #1
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f7ff fb37 	bl	8003532 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003ec4:	e00e      	b.n	8003ee4 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eca:	f003 0310 	and.w	r3, r3, #16
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d003      	beq.n	8003eda <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003ed2:	68f8      	ldr	r0, [r7, #12]
 8003ed4:	f7ff fb41 	bl	800355a <HAL_ADC_ErrorCallback>
}
 8003ed8:	e004      	b.n	8003ee4 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
}
 8003ee4:	bf00      	nop
 8003ee6:	3710      	adds	r7, #16
 8003ee8:	46bd      	mov	sp, r7
 8003eea:	bd80      	pop	{r7, pc}

08003eec <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003eec:	b580      	push	{r7, lr}
 8003eee:	b084      	sub	sp, #16
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ef8:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003efa:	68f8      	ldr	r0, [r7, #12]
 8003efc:	f7ff fb23 	bl	8003546 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f00:	bf00      	nop
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}

08003f08 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003f08:	b580      	push	{r7, lr}
 8003f0a:	b084      	sub	sp, #16
 8003f0c:	af00      	add	r7, sp, #0
 8003f0e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f26:	f043 0204 	orr.w	r2, r3, #4
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f7ff fb13 	bl	800355a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003f34:	bf00      	nop
 8003f36:	3710      	adds	r7, #16
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	bd80      	pop	{r7, pc}

08003f3c <LL_ADC_IsEnabled>:
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b083      	sub	sp, #12
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	f003 0301 	and.w	r3, r3, #1
 8003f4c:	2b01      	cmp	r3, #1
 8003f4e:	d101      	bne.n	8003f54 <LL_ADC_IsEnabled+0x18>
 8003f50:	2301      	movs	r3, #1
 8003f52:	e000      	b.n	8003f56 <LL_ADC_IsEnabled+0x1a>
 8003f54:	2300      	movs	r3, #0
}
 8003f56:	4618      	mov	r0, r3
 8003f58:	370c      	adds	r7, #12
 8003f5a:	46bd      	mov	sp, r7
 8003f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f60:	4770      	bx	lr

08003f62 <LL_ADC_REG_IsConversionOngoing>:
{
 8003f62:	b480      	push	{r7}
 8003f64:	b083      	sub	sp, #12
 8003f66:	af00      	add	r7, sp, #0
 8003f68:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f003 0304 	and.w	r3, r3, #4
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d101      	bne.n	8003f7a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003f76:	2301      	movs	r3, #1
 8003f78:	e000      	b.n	8003f7c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003f7a:	2300      	movs	r3, #0
}
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	370c      	adds	r7, #12
 8003f80:	46bd      	mov	sp, r7
 8003f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f86:	4770      	bx	lr

08003f88 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b0a1      	sub	sp, #132	; 0x84
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003f9e:	2b01      	cmp	r3, #1
 8003fa0:	d101      	bne.n	8003fa6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fa2:	2302      	movs	r3, #2
 8003fa4:	e08b      	b.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2201      	movs	r2, #1
 8003faa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fbe:	d102      	bne.n	8003fc6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fc0:	4b41      	ldr	r3, [pc, #260]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8003fc2:	60bb      	str	r3, [r7, #8]
 8003fc4:	e001      	b.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fca:	68bb      	ldr	r3, [r7, #8]
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d10b      	bne.n	8003fe8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd4:	f043 0220 	orr.w	r2, r3, #32
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003fe4:	2301      	movs	r3, #1
 8003fe6:	e06a      	b.n	80040be <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7ff ffb9 	bl	8003f62 <LL_ADC_REG_IsConversionOngoing>
 8003ff0:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	f7ff ffb3 	bl	8003f62 <LL_ADC_REG_IsConversionOngoing>
 8003ffc:	4603      	mov	r3, r0
 8003ffe:	2b00      	cmp	r3, #0
 8004000:	d14c      	bne.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004002:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004004:	2b00      	cmp	r3, #0
 8004006:	d149      	bne.n	800409c <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004008:	4b30      	ldr	r3, [pc, #192]	; (80040cc <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800400a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d028      	beq.n	8004066 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004016:	689b      	ldr	r3, [r3, #8]
 8004018:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800401c:	683b      	ldr	r3, [r7, #0]
 800401e:	6859      	ldr	r1, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004026:	035b      	lsls	r3, r3, #13
 8004028:	430b      	orrs	r3, r1
 800402a:	431a      	orrs	r2, r3
 800402c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800402e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004030:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004034:	f7ff ff82 	bl	8003f3c <LL_ADC_IsEnabled>
 8004038:	4604      	mov	r4, r0
 800403a:	4823      	ldr	r0, [pc, #140]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800403c:	f7ff ff7e 	bl	8003f3c <LL_ADC_IsEnabled>
 8004040:	4603      	mov	r3, r0
 8004042:	4323      	orrs	r3, r4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d133      	bne.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004048:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004050:	f023 030f 	bic.w	r3, r3, #15
 8004054:	683a      	ldr	r2, [r7, #0]
 8004056:	6811      	ldr	r1, [r2, #0]
 8004058:	683a      	ldr	r2, [r7, #0]
 800405a:	6892      	ldr	r2, [r2, #8]
 800405c:	430a      	orrs	r2, r1
 800405e:	431a      	orrs	r2, r3
 8004060:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004062:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004064:	e024      	b.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004066:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004068:	689b      	ldr	r3, [r3, #8]
 800406a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800406e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004070:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004072:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004076:	f7ff ff61 	bl	8003f3c <LL_ADC_IsEnabled>
 800407a:	4604      	mov	r4, r0
 800407c:	4812      	ldr	r0, [pc, #72]	; (80040c8 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800407e:	f7ff ff5d 	bl	8003f3c <LL_ADC_IsEnabled>
 8004082:	4603      	mov	r3, r0
 8004084:	4323      	orrs	r3, r4
 8004086:	2b00      	cmp	r3, #0
 8004088:	d112      	bne.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800408a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800408c:	689b      	ldr	r3, [r3, #8]
 800408e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004092:	f023 030f 	bic.w	r3, r3, #15
 8004096:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004098:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800409a:	e009      	b.n	80040b0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a0:	f043 0220 	orr.w	r2, r3, #32
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80040a8:	2301      	movs	r3, #1
 80040aa:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80040ae:	e000      	b.n	80040b2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040b0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2200      	movs	r2, #0
 80040b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80040ba:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80040be:	4618      	mov	r0, r3
 80040c0:	3784      	adds	r7, #132	; 0x84
 80040c2:	46bd      	mov	sp, r7
 80040c4:	bd90      	pop	{r4, r7, pc}
 80040c6:	bf00      	nop
 80040c8:	50000100 	.word	0x50000100
 80040cc:	50000300 	.word	0x50000300

080040d0 <__NVIC_SetPriorityGrouping>:
{
 80040d0:	b480      	push	{r7}
 80040d2:	b085      	sub	sp, #20
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f003 0307 	and.w	r3, r3, #7
 80040de:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80040e0:	4b0c      	ldr	r3, [pc, #48]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 80040e2:	68db      	ldr	r3, [r3, #12]
 80040e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80040e6:	68ba      	ldr	r2, [r7, #8]
 80040e8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80040ec:	4013      	ands	r3, r2
 80040ee:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80040f8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80040fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004100:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004102:	4a04      	ldr	r2, [pc, #16]	; (8004114 <__NVIC_SetPriorityGrouping+0x44>)
 8004104:	68bb      	ldr	r3, [r7, #8]
 8004106:	60d3      	str	r3, [r2, #12]
}
 8004108:	bf00      	nop
 800410a:	3714      	adds	r7, #20
 800410c:	46bd      	mov	sp, r7
 800410e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004112:	4770      	bx	lr
 8004114:	e000ed00 	.word	0xe000ed00

08004118 <__NVIC_GetPriorityGrouping>:
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800411c:	4b04      	ldr	r3, [pc, #16]	; (8004130 <__NVIC_GetPriorityGrouping+0x18>)
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	0a1b      	lsrs	r3, r3, #8
 8004122:	f003 0307 	and.w	r3, r3, #7
}
 8004126:	4618      	mov	r0, r3
 8004128:	46bd      	mov	sp, r7
 800412a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412e:	4770      	bx	lr
 8004130:	e000ed00 	.word	0xe000ed00

08004134 <__NVIC_EnableIRQ>:
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
 800413a:	4603      	mov	r3, r0
 800413c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800413e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004142:	2b00      	cmp	r3, #0
 8004144:	db0b      	blt.n	800415e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004146:	79fb      	ldrb	r3, [r7, #7]
 8004148:	f003 021f 	and.w	r2, r3, #31
 800414c:	4907      	ldr	r1, [pc, #28]	; (800416c <__NVIC_EnableIRQ+0x38>)
 800414e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004152:	095b      	lsrs	r3, r3, #5
 8004154:	2001      	movs	r0, #1
 8004156:	fa00 f202 	lsl.w	r2, r0, r2
 800415a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800415e:	bf00      	nop
 8004160:	370c      	adds	r7, #12
 8004162:	46bd      	mov	sp, r7
 8004164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004168:	4770      	bx	lr
 800416a:	bf00      	nop
 800416c:	e000e100 	.word	0xe000e100

08004170 <__NVIC_SetPriority>:
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	4603      	mov	r3, r0
 8004178:	6039      	str	r1, [r7, #0]
 800417a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800417c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004180:	2b00      	cmp	r3, #0
 8004182:	db0a      	blt.n	800419a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004184:	683b      	ldr	r3, [r7, #0]
 8004186:	b2da      	uxtb	r2, r3
 8004188:	490c      	ldr	r1, [pc, #48]	; (80041bc <__NVIC_SetPriority+0x4c>)
 800418a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418e:	0112      	lsls	r2, r2, #4
 8004190:	b2d2      	uxtb	r2, r2
 8004192:	440b      	add	r3, r1
 8004194:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004198:	e00a      	b.n	80041b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	b2da      	uxtb	r2, r3
 800419e:	4908      	ldr	r1, [pc, #32]	; (80041c0 <__NVIC_SetPriority+0x50>)
 80041a0:	79fb      	ldrb	r3, [r7, #7]
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	3b04      	subs	r3, #4
 80041a8:	0112      	lsls	r2, r2, #4
 80041aa:	b2d2      	uxtb	r2, r2
 80041ac:	440b      	add	r3, r1
 80041ae:	761a      	strb	r2, [r3, #24]
}
 80041b0:	bf00      	nop
 80041b2:	370c      	adds	r7, #12
 80041b4:	46bd      	mov	sp, r7
 80041b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ba:	4770      	bx	lr
 80041bc:	e000e100 	.word	0xe000e100
 80041c0:	e000ed00 	.word	0xe000ed00

080041c4 <NVIC_EncodePriority>:
{
 80041c4:	b480      	push	{r7}
 80041c6:	b089      	sub	sp, #36	; 0x24
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	60f8      	str	r0, [r7, #12]
 80041cc:	60b9      	str	r1, [r7, #8]
 80041ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	f003 0307 	and.w	r3, r3, #7
 80041d6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80041d8:	69fb      	ldr	r3, [r7, #28]
 80041da:	f1c3 0307 	rsb	r3, r3, #7
 80041de:	2b04      	cmp	r3, #4
 80041e0:	bf28      	it	cs
 80041e2:	2304      	movcs	r3, #4
 80041e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80041e6:	69fb      	ldr	r3, [r7, #28]
 80041e8:	3304      	adds	r3, #4
 80041ea:	2b06      	cmp	r3, #6
 80041ec:	d902      	bls.n	80041f4 <NVIC_EncodePriority+0x30>
 80041ee:	69fb      	ldr	r3, [r7, #28]
 80041f0:	3b03      	subs	r3, #3
 80041f2:	e000      	b.n	80041f6 <NVIC_EncodePriority+0x32>
 80041f4:	2300      	movs	r3, #0
 80041f6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80041f8:	f04f 32ff 	mov.w	r2, #4294967295
 80041fc:	69bb      	ldr	r3, [r7, #24]
 80041fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004202:	43da      	mvns	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	401a      	ands	r2, r3
 8004208:	697b      	ldr	r3, [r7, #20]
 800420a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800420c:	f04f 31ff 	mov.w	r1, #4294967295
 8004210:	697b      	ldr	r3, [r7, #20]
 8004212:	fa01 f303 	lsl.w	r3, r1, r3
 8004216:	43d9      	mvns	r1, r3
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800421c:	4313      	orrs	r3, r2
}
 800421e:	4618      	mov	r0, r3
 8004220:	3724      	adds	r7, #36	; 0x24
 8004222:	46bd      	mov	sp, r7
 8004224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004228:	4770      	bx	lr
	...

0800422c <SysTick_Config>:
{
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
 8004232:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	3b01      	subs	r3, #1
 8004238:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800423c:	d301      	bcc.n	8004242 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800423e:	2301      	movs	r3, #1
 8004240:	e00f      	b.n	8004262 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004242:	4a0a      	ldr	r2, [pc, #40]	; (800426c <SysTick_Config+0x40>)
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3b01      	subs	r3, #1
 8004248:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800424a:	210f      	movs	r1, #15
 800424c:	f04f 30ff 	mov.w	r0, #4294967295
 8004250:	f7ff ff8e 	bl	8004170 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004254:	4b05      	ldr	r3, [pc, #20]	; (800426c <SysTick_Config+0x40>)
 8004256:	2200      	movs	r2, #0
 8004258:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800425a:	4b04      	ldr	r3, [pc, #16]	; (800426c <SysTick_Config+0x40>)
 800425c:	2207      	movs	r2, #7
 800425e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004260:	2300      	movs	r3, #0
}
 8004262:	4618      	mov	r0, r3
 8004264:	3708      	adds	r7, #8
 8004266:	46bd      	mov	sp, r7
 8004268:	bd80      	pop	{r7, pc}
 800426a:	bf00      	nop
 800426c:	e000e010 	.word	0xe000e010

08004270 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004270:	b580      	push	{r7, lr}
 8004272:	b082      	sub	sp, #8
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	f7ff ff29 	bl	80040d0 <__NVIC_SetPriorityGrouping>
}
 800427e:	bf00      	nop
 8004280:	3708      	adds	r7, #8
 8004282:	46bd      	mov	sp, r7
 8004284:	bd80      	pop	{r7, pc}

08004286 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004286:	b580      	push	{r7, lr}
 8004288:	b086      	sub	sp, #24
 800428a:	af00      	add	r7, sp, #0
 800428c:	4603      	mov	r3, r0
 800428e:	60b9      	str	r1, [r7, #8]
 8004290:	607a      	str	r2, [r7, #4]
 8004292:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004294:	f7ff ff40 	bl	8004118 <__NVIC_GetPriorityGrouping>
 8004298:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	68b9      	ldr	r1, [r7, #8]
 800429e:	6978      	ldr	r0, [r7, #20]
 80042a0:	f7ff ff90 	bl	80041c4 <NVIC_EncodePriority>
 80042a4:	4602      	mov	r2, r0
 80042a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80042aa:	4611      	mov	r1, r2
 80042ac:	4618      	mov	r0, r3
 80042ae:	f7ff ff5f 	bl	8004170 <__NVIC_SetPriority>
}
 80042b2:	bf00      	nop
 80042b4:	3718      	adds	r7, #24
 80042b6:	46bd      	mov	sp, r7
 80042b8:	bd80      	pop	{r7, pc}

080042ba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042ba:	b580      	push	{r7, lr}
 80042bc:	b082      	sub	sp, #8
 80042be:	af00      	add	r7, sp, #0
 80042c0:	4603      	mov	r3, r0
 80042c2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80042c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c8:	4618      	mov	r0, r3
 80042ca:	f7ff ff33 	bl	8004134 <__NVIC_EnableIRQ>
}
 80042ce:	bf00      	nop
 80042d0:	3708      	adds	r7, #8
 80042d2:	46bd      	mov	sp, r7
 80042d4:	bd80      	pop	{r7, pc}

080042d6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80042d6:	b580      	push	{r7, lr}
 80042d8:	b082      	sub	sp, #8
 80042da:	af00      	add	r7, sp, #0
 80042dc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80042de:	6878      	ldr	r0, [r7, #4]
 80042e0:	f7ff ffa4 	bl	800422c <SysTick_Config>
 80042e4:	4603      	mov	r3, r0
}
 80042e6:	4618      	mov	r0, r3
 80042e8:	3708      	adds	r7, #8
 80042ea:	46bd      	mov	sp, r7
 80042ec:	bd80      	pop	{r7, pc}
	...

080042f0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80042f0:	b580      	push	{r7, lr}
 80042f2:	b084      	sub	sp, #16
 80042f4:	af00      	add	r7, sp, #0
 80042f6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d101      	bne.n	8004302 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80042fe:	2301      	movs	r3, #1
 8004300:	e08d      	b.n	800441e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	461a      	mov	r2, r3
 8004308:	4b47      	ldr	r3, [pc, #284]	; (8004428 <HAL_DMA_Init+0x138>)
 800430a:	429a      	cmp	r2, r3
 800430c:	d80f      	bhi.n	800432e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	461a      	mov	r2, r3
 8004314:	4b45      	ldr	r3, [pc, #276]	; (800442c <HAL_DMA_Init+0x13c>)
 8004316:	4413      	add	r3, r2
 8004318:	4a45      	ldr	r2, [pc, #276]	; (8004430 <HAL_DMA_Init+0x140>)
 800431a:	fba2 2303 	umull	r2, r3, r2, r3
 800431e:	091b      	lsrs	r3, r3, #4
 8004320:	009a      	lsls	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4a42      	ldr	r2, [pc, #264]	; (8004434 <HAL_DMA_Init+0x144>)
 800432a:	641a      	str	r2, [r3, #64]	; 0x40
 800432c:	e00e      	b.n	800434c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	461a      	mov	r2, r3
 8004334:	4b40      	ldr	r3, [pc, #256]	; (8004438 <HAL_DMA_Init+0x148>)
 8004336:	4413      	add	r3, r2
 8004338:	4a3d      	ldr	r2, [pc, #244]	; (8004430 <HAL_DMA_Init+0x140>)
 800433a:	fba2 2303 	umull	r2, r3, r2, r3
 800433e:	091b      	lsrs	r3, r3, #4
 8004340:	009a      	lsls	r2, r3, #2
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	4a3c      	ldr	r2, [pc, #240]	; (800443c <HAL_DMA_Init+0x14c>)
 800434a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2202      	movs	r2, #2
 8004350:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004362:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004366:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004370:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	691b      	ldr	r3, [r3, #16]
 8004376:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800437c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004388:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68fa      	ldr	r2, [r7, #12]
 800439c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800439e:	6878      	ldr	r0, [r7, #4]
 80043a0:	f000 f9b6 	bl	8004710 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80043ac:	d102      	bne.n	80043b4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2200      	movs	r2, #0
 80043b2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	685a      	ldr	r2, [r3, #4]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043bc:	b2d2      	uxtb	r2, r2
 80043be:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043c4:	687a      	ldr	r2, [r7, #4]
 80043c6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80043c8:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d010      	beq.n	80043f4 <HAL_DMA_Init+0x104>
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	d80c      	bhi.n	80043f4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f000 f9d6 	bl	800478c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043e4:	2200      	movs	r2, #0
 80043e6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043ec:	687a      	ldr	r2, [r7, #4]
 80043ee:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80043f0:	605a      	str	r2, [r3, #4]
 80043f2:	e008      	b.n	8004406 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2200      	movs	r2, #0
 80043f8:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2200      	movs	r2, #0
 80043fe:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	2200      	movs	r2, #0
 8004404:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	2200      	movs	r2, #0
 800440a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2200      	movs	r2, #0
 8004418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800441c:	2300      	movs	r3, #0
}
 800441e:	4618      	mov	r0, r3
 8004420:	3710      	adds	r7, #16
 8004422:	46bd      	mov	sp, r7
 8004424:	bd80      	pop	{r7, pc}
 8004426:	bf00      	nop
 8004428:	40020407 	.word	0x40020407
 800442c:	bffdfff8 	.word	0xbffdfff8
 8004430:	cccccccd 	.word	0xcccccccd
 8004434:	40020000 	.word	0x40020000
 8004438:	bffdfbf8 	.word	0xbffdfbf8
 800443c:	40020400 	.word	0x40020400

08004440 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004440:	b580      	push	{r7, lr}
 8004442:	b086      	sub	sp, #24
 8004444:	af00      	add	r7, sp, #0
 8004446:	60f8      	str	r0, [r7, #12]
 8004448:	60b9      	str	r1, [r7, #8]
 800444a:	607a      	str	r2, [r7, #4]
 800444c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800444e:	2300      	movs	r3, #0
 8004450:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004452:	68fb      	ldr	r3, [r7, #12]
 8004454:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004458:	2b01      	cmp	r3, #1
 800445a:	d101      	bne.n	8004460 <HAL_DMA_Start_IT+0x20>
 800445c:	2302      	movs	r3, #2
 800445e:	e066      	b.n	800452e <HAL_DMA_Start_IT+0xee>
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2201      	movs	r2, #1
 8004464:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004468:	68fb      	ldr	r3, [r7, #12]
 800446a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800446e:	b2db      	uxtb	r3, r3
 8004470:	2b01      	cmp	r3, #1
 8004472:	d155      	bne.n	8004520 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	2202      	movs	r2, #2
 8004478:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	2200      	movs	r2, #0
 8004480:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	687a      	ldr	r2, [r7, #4]
 8004496:	68b9      	ldr	r1, [r7, #8]
 8004498:	68f8      	ldr	r0, [r7, #12]
 800449a:	f000 f8fb 	bl	8004694 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d008      	beq.n	80044b8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681a      	ldr	r2, [r3, #0]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f042 020e 	orr.w	r2, r2, #14
 80044b4:	601a      	str	r2, [r3, #0]
 80044b6:	e00f      	b.n	80044d8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	f022 0204 	bic.w	r2, r2, #4
 80044c6:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f042 020a 	orr.w	r2, r2, #10
 80044d6:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d007      	beq.n	80044f6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80044f4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004508:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800450c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
 800451e:	e005      	b.n	800452c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004520:	68fb      	ldr	r3, [r7, #12]
 8004522:	2200      	movs	r2, #0
 8004524:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004528:	2302      	movs	r3, #2
 800452a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800452c:	7dfb      	ldrb	r3, [r7, #23]
}
 800452e:	4618      	mov	r0, r3
 8004530:	3718      	adds	r7, #24
 8004532:	46bd      	mov	sp, r7
 8004534:	bd80      	pop	{r7, pc}

08004536 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004536:	b580      	push	{r7, lr}
 8004538:	b084      	sub	sp, #16
 800453a:	af00      	add	r7, sp, #0
 800453c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004552:	f003 031f 	and.w	r3, r3, #31
 8004556:	2204      	movs	r2, #4
 8004558:	409a      	lsls	r2, r3
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	4013      	ands	r3, r2
 800455e:	2b00      	cmp	r3, #0
 8004560:	d026      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x7a>
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	f003 0304 	and.w	r3, r3, #4
 8004568:	2b00      	cmp	r3, #0
 800456a:	d021      	beq.n	80045b0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f003 0320 	and.w	r3, r3, #32
 8004576:	2b00      	cmp	r3, #0
 8004578:	d107      	bne.n	800458a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f022 0204 	bic.w	r2, r2, #4
 8004588:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800458e:	f003 021f 	and.w	r2, r3, #31
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004596:	2104      	movs	r1, #4
 8004598:	fa01 f202 	lsl.w	r2, r1, r2
 800459c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d071      	beq.n	800468a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045aa:	6878      	ldr	r0, [r7, #4]
 80045ac:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045ae:	e06c      	b.n	800468a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045b4:	f003 031f 	and.w	r3, r3, #31
 80045b8:	2202      	movs	r2, #2
 80045ba:	409a      	lsls	r2, r3
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4013      	ands	r3, r2
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d02e      	beq.n	8004622 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045c4:	68bb      	ldr	r3, [r7, #8]
 80045c6:	f003 0302 	and.w	r3, r3, #2
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d029      	beq.n	8004622 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	f003 0320 	and.w	r3, r3, #32
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d10b      	bne.n	80045f4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 020a 	bic.w	r2, r2, #10
 80045ea:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004600:	2102      	movs	r1, #2
 8004602:	fa01 f202 	lsl.w	r2, r1, r2
 8004606:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2200      	movs	r2, #0
 800460c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004614:	2b00      	cmp	r3, #0
 8004616:	d038      	beq.n	800468a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800461c:	6878      	ldr	r0, [r7, #4]
 800461e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004620:	e033      	b.n	800468a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2208      	movs	r2, #8
 800462c:	409a      	lsls	r2, r3
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	4013      	ands	r3, r2
 8004632:	2b00      	cmp	r3, #0
 8004634:	d02a      	beq.n	800468c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004636:	68bb      	ldr	r3, [r7, #8]
 8004638:	f003 0308 	and.w	r3, r3, #8
 800463c:	2b00      	cmp	r3, #0
 800463e:	d025      	beq.n	800468c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	681b      	ldr	r3, [r3, #0]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	f022 020e 	bic.w	r2, r2, #14
 800464e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004654:	f003 021f 	and.w	r2, r3, #31
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800465c:	2101      	movs	r1, #1
 800465e:	fa01 f202 	lsl.w	r2, r1, r2
 8004662:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2201      	movs	r2, #1
 8004668:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2201      	movs	r2, #1
 800466e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2200      	movs	r2, #0
 8004676:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800467e:	2b00      	cmp	r3, #0
 8004680:	d004      	beq.n	800468c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	6878      	ldr	r0, [r7, #4]
 8004688:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800468a:	bf00      	nop
 800468c:	bf00      	nop
}
 800468e:	3710      	adds	r7, #16
 8004690:	46bd      	mov	sp, r7
 8004692:	bd80      	pop	{r7, pc}

08004694 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004694:	b480      	push	{r7}
 8004696:	b085      	sub	sp, #20
 8004698:	af00      	add	r7, sp, #0
 800469a:	60f8      	str	r0, [r7, #12]
 800469c:	60b9      	str	r1, [r7, #8]
 800469e:	607a      	str	r2, [r7, #4]
 80046a0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046a6:	68fa      	ldr	r2, [r7, #12]
 80046a8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046aa:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046b0:	2b00      	cmp	r3, #0
 80046b2:	d004      	beq.n	80046be <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046bc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046c2:	f003 021f 	and.w	r2, r3, #31
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ca:	2101      	movs	r1, #1
 80046cc:	fa01 f202 	lsl.w	r2, r1, r2
 80046d0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	683a      	ldr	r2, [r7, #0]
 80046d8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	689b      	ldr	r3, [r3, #8]
 80046de:	2b10      	cmp	r3, #16
 80046e0:	d108      	bne.n	80046f4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68ba      	ldr	r2, [r7, #8]
 80046f0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80046f2:	e007      	b.n	8004704 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68ba      	ldr	r2, [r7, #8]
 80046fa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	60da      	str	r2, [r3, #12]
}
 8004704:	bf00      	nop
 8004706:	3714      	adds	r7, #20
 8004708:	46bd      	mov	sp, r7
 800470a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800470e:	4770      	bx	lr

08004710 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004710:	b480      	push	{r7}
 8004712:	b087      	sub	sp, #28
 8004714:	af00      	add	r7, sp, #0
 8004716:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	461a      	mov	r2, r3
 800471e:	4b16      	ldr	r3, [pc, #88]	; (8004778 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004720:	429a      	cmp	r2, r3
 8004722:	d802      	bhi.n	800472a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004724:	4b15      	ldr	r3, [pc, #84]	; (800477c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004726:	617b      	str	r3, [r7, #20]
 8004728:	e001      	b.n	800472e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800472a:	4b15      	ldr	r3, [pc, #84]	; (8004780 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800472c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	b2db      	uxtb	r3, r3
 8004738:	3b08      	subs	r3, #8
 800473a:	4a12      	ldr	r2, [pc, #72]	; (8004784 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800473c:	fba2 2303 	umull	r2, r3, r2, r3
 8004740:	091b      	lsrs	r3, r3, #4
 8004742:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004748:	089b      	lsrs	r3, r3, #2
 800474a:	009a      	lsls	r2, r3, #2
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	4413      	add	r3, r2
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a0b      	ldr	r2, [pc, #44]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800475a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f003 031f 	and.w	r3, r3, #31
 8004762:	2201      	movs	r2, #1
 8004764:	409a      	lsls	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	651a      	str	r2, [r3, #80]	; 0x50
}
 800476a:	bf00      	nop
 800476c:	371c      	adds	r7, #28
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr
 8004776:	bf00      	nop
 8004778:	40020407 	.word	0x40020407
 800477c:	40020800 	.word	0x40020800
 8004780:	40020820 	.word	0x40020820
 8004784:	cccccccd 	.word	0xcccccccd
 8004788:	40020880 	.word	0x40020880

0800478c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	685b      	ldr	r3, [r3, #4]
 8004798:	b2db      	uxtb	r3, r3
 800479a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800479c:	68fa      	ldr	r2, [r7, #12]
 800479e:	4b0b      	ldr	r3, [pc, #44]	; (80047cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	461a      	mov	r2, r3
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	4a08      	ldr	r2, [pc, #32]	; (80047d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047ae:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	3b01      	subs	r3, #1
 80047b4:	f003 031f 	and.w	r3, r3, #31
 80047b8:	2201      	movs	r2, #1
 80047ba:	409a      	lsls	r2, r3
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047c0:	bf00      	nop
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr
 80047cc:	1000823f 	.word	0x1000823f
 80047d0:	40020940 	.word	0x40020940

080047d4 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d101      	bne.n	80047e6 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e147      	b.n	8004a76 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80047ec:	b2db      	uxtb	r3, r3
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d106      	bne.n	8004800 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 80047fa:	6878      	ldr	r0, [r7, #4]
 80047fc:	f7fc fbe4 	bl	8000fc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	699a      	ldr	r2, [r3, #24]
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	f022 0210 	bic.w	r2, r2, #16
 800480e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004810:	f7fe f874 	bl	80028fc <HAL_GetTick>
 8004814:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004816:	e012      	b.n	800483e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004818:	f7fe f870 	bl	80028fc <HAL_GetTick>
 800481c:	4602      	mov	r2, r0
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	1ad3      	subs	r3, r2, r3
 8004822:	2b0a      	cmp	r3, #10
 8004824:	d90b      	bls.n	800483e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800482a:	f043 0201 	orr.w	r2, r3, #1
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2203      	movs	r2, #3
 8004836:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e11b      	b.n	8004a76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	699b      	ldr	r3, [r3, #24]
 8004844:	f003 0308 	and.w	r3, r3, #8
 8004848:	2b08      	cmp	r3, #8
 800484a:	d0e5      	beq.n	8004818 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	699a      	ldr	r2, [r3, #24]
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	f042 0201 	orr.w	r2, r2, #1
 800485a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800485c:	f7fe f84e 	bl	80028fc <HAL_GetTick>
 8004860:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8004862:	e012      	b.n	800488a <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004864:	f7fe f84a 	bl	80028fc <HAL_GetTick>
 8004868:	4602      	mov	r2, r0
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	1ad3      	subs	r3, r2, r3
 800486e:	2b0a      	cmp	r3, #10
 8004870:	d90b      	bls.n	800488a <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004876:	f043 0201 	orr.w	r2, r3, #1
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2203      	movs	r2, #3
 8004882:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8004886:	2301      	movs	r3, #1
 8004888:	e0f5      	b.n	8004a76 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	699b      	ldr	r3, [r3, #24]
 8004890:	f003 0301 	and.w	r3, r3, #1
 8004894:	2b00      	cmp	r3, #0
 8004896:	d0e5      	beq.n	8004864 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	699a      	ldr	r2, [r3, #24]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0202 	orr.w	r2, r2, #2
 80048a6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a74      	ldr	r2, [pc, #464]	; (8004a80 <HAL_FDCAN_Init+0x2ac>)
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d103      	bne.n	80048ba <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80048b2:	4a74      	ldr	r2, [pc, #464]	; (8004a84 <HAL_FDCAN_Init+0x2b0>)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	7c1b      	ldrb	r3, [r3, #16]
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d108      	bne.n	80048d4 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	699a      	ldr	r2, [r3, #24]
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80048d0:	619a      	str	r2, [r3, #24]
 80048d2:	e007      	b.n	80048e4 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	699a      	ldr	r2, [r3, #24]
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80048e2:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	7c5b      	ldrb	r3, [r3, #17]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d108      	bne.n	80048fe <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	699a      	ldr	r2, [r3, #24]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80048fa:	619a      	str	r2, [r3, #24]
 80048fc:	e007      	b.n	800490e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	699a      	ldr	r2, [r3, #24]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800490c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	7c9b      	ldrb	r3, [r3, #18]
 8004912:	2b01      	cmp	r3, #1
 8004914:	d108      	bne.n	8004928 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	699a      	ldr	r2, [r3, #24]
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004924:	619a      	str	r2, [r3, #24]
 8004926:	e007      	b.n	8004938 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	699a      	ldr	r2, [r3, #24]
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004936:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	699b      	ldr	r3, [r3, #24]
 800493e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	430a      	orrs	r2, r1
 800494c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	699a      	ldr	r2, [r3, #24]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 800495c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	691a      	ldr	r2, [r3, #16]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f022 0210 	bic.w	r2, r2, #16
 800496c:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	68db      	ldr	r3, [r3, #12]
 8004972:	2b01      	cmp	r3, #1
 8004974:	d108      	bne.n	8004988 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	f042 0204 	orr.w	r2, r2, #4
 8004984:	619a      	str	r2, [r3, #24]
 8004986:	e02c      	b.n	80049e2 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	68db      	ldr	r3, [r3, #12]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d028      	beq.n	80049e2 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	68db      	ldr	r3, [r3, #12]
 8004994:	2b02      	cmp	r3, #2
 8004996:	d01c      	beq.n	80049d2 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	699a      	ldr	r2, [r3, #24]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80049a6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	691a      	ldr	r2, [r3, #16]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	f042 0210 	orr.w	r2, r2, #16
 80049b6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	2b03      	cmp	r3, #3
 80049be:	d110      	bne.n	80049e2 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	699a      	ldr	r2, [r3, #24]
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0220 	orr.w	r2, r2, #32
 80049ce:	619a      	str	r2, [r3, #24]
 80049d0:	e007      	b.n	80049e2 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	699a      	ldr	r2, [r3, #24]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f042 0220 	orr.w	r2, r2, #32
 80049e0:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	699b      	ldr	r3, [r3, #24]
 80049e6:	3b01      	subs	r3, #1
 80049e8:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	69db      	ldr	r3, [r3, #28]
 80049ee:	3b01      	subs	r3, #1
 80049f0:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80049f2:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a1b      	ldr	r3, [r3, #32]
 80049f8:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80049fa:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	695b      	ldr	r3, [r3, #20]
 8004a02:	3b01      	subs	r3, #1
 8004a04:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004a0a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004a0c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	689b      	ldr	r3, [r3, #8]
 8004a12:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a16:	d115      	bne.n	8004a44 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a1c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a22:	3b01      	subs	r3, #1
 8004a24:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a26:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a2c:	3b01      	subs	r3, #1
 8004a2e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004a30:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004a40:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004a42:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	430a      	orrs	r2, r1
 8004a56:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004a5a:	6878      	ldr	r0, [r7, #4]
 8004a5c:	f000 f9c2 	bl	8004de4 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2200      	movs	r2, #0
 8004a64:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2200      	movs	r2, #0
 8004a6a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3710      	adds	r7, #16
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	40006400 	.word	0x40006400
 8004a84:	40006500 	.word	0x40006500

08004a88 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	; 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a96:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004a9a:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aa2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004aa4:	4013      	ands	r3, r2
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004aae:	f003 0307 	and.w	r3, r3, #7
 8004ab2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aba:	6a3a      	ldr	r2, [r7, #32]
 8004abc:	4013      	ands	r3, r2
 8004abe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004aca:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad2:	69fa      	ldr	r2, [r7, #28]
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ade:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004ae2:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004aea:	69ba      	ldr	r2, [r7, #24]
 8004aec:	4013      	ands	r3, r2
 8004aee:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004af6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004afa:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4013      	ands	r3, r2
 8004b06:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00d      	beq.n	8004b32 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	d006      	beq.n	8004b32 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	2240      	movs	r2, #64	; 0x40
 8004b2a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004b2c:	6878      	ldr	r0, [r7, #4]
 8004b2e:	f000 f939 	bl	8004da4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d01b      	beq.n	8004b78 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d014      	beq.n	8004b78 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004b56:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4013      	ands	r3, r2
 8004b64:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004b6e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004b70:	6939      	ldr	r1, [r7, #16]
 8004b72:	6878      	ldr	r0, [r7, #4]
 8004b74:	f000 f8f7 	bl	8004d66 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004b78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d007      	beq.n	8004b8e <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004b86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004b88:	6878      	ldr	r0, [r7, #4]
 8004b8a:	f000 f8b6 	bl	8004cfa <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004b8e:	6a3b      	ldr	r3, [r7, #32]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d007      	beq.n	8004ba4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004b9c:	6a39      	ldr	r1, [r7, #32]
 8004b9e:	6878      	ldr	r0, [r7, #4]
 8004ba0:	f000 f8b6 	bl	8004d10 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ba4:	69fb      	ldr	r3, [r7, #28]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d007      	beq.n	8004bba <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	69fa      	ldr	r2, [r7, #28]
 8004bb0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004bb2:	69f9      	ldr	r1, [r7, #28]
 8004bb4:	6878      	ldr	r0, [r7, #4]
 8004bb6:	f000 f8b6 	bl	8004d26 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bc0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d00e      	beq.n	8004be6 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bce:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d007      	beq.n	8004be6 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004bde:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004be0:	6878      	ldr	r0, [r7, #4]
 8004be2:	f000 f8ab 	bl	8004d3c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d01a      	beq.n	8004c2a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d013      	beq.n	8004c2a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004c0a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004c14:	68fa      	ldr	r2, [r7, #12]
 8004c16:	4013      	ands	r3, r2
 8004c18:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	2280      	movs	r2, #128	; 0x80
 8004c20:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004c22:	68f9      	ldr	r1, [r7, #12]
 8004c24:	6878      	ldr	r0, [r7, #4]
 8004c26:	f000 f893 	bl	8004d50 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d00e      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c3e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d007      	beq.n	8004c56 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004c4e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004c50:	6878      	ldr	r0, [r7, #4]
 8004c52:	f000 f893 	bl	8004d7c <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c5c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d00e      	beq.n	8004c82 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c6a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d007      	beq.n	8004c82 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004c7c:	6878      	ldr	r0, [r7, #4]
 8004c7e:	f000 f887 	bl	8004d90 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c88:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d011      	beq.n	8004cb4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d00a      	beq.n	8004cb4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004ca6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004cac:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d007      	beq.n	8004cca <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	697a      	ldr	r2, [r7, #20]
 8004cc0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004cc2:	6979      	ldr	r1, [r7, #20]
 8004cc4:	6878      	ldr	r0, [r7, #4]
 8004cc6:	f000 f881 	bl	8004dcc <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004cca:	69bb      	ldr	r3, [r7, #24]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d009      	beq.n	8004ce4 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	69ba      	ldr	r2, [r7, #24]
 8004cd6:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004cdc:	69bb      	ldr	r3, [r7, #24]
 8004cde:	431a      	orrs	r2, r3
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d002      	beq.n	8004cf2 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004cec:	6878      	ldr	r0, [r7, #4]
 8004cee:	f000 f863 	bl	8004db8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004cf2:	bf00      	nop
 8004cf4:	3728      	adds	r7, #40	; 0x28
 8004cf6:	46bd      	mov	sp, r7
 8004cf8:	bd80      	pop	{r7, pc}

08004cfa <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004cfa:	b480      	push	{r7}
 8004cfc:	b083      	sub	sp, #12
 8004cfe:	af00      	add	r7, sp, #0
 8004d00:	6078      	str	r0, [r7, #4]
 8004d02:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004d04:	bf00      	nop
 8004d06:	370c      	adds	r7, #12
 8004d08:	46bd      	mov	sp, r7
 8004d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0e:	4770      	bx	lr

08004d10 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004d10:	b480      	push	{r7}
 8004d12:	b083      	sub	sp, #12
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	6078      	str	r0, [r7, #4]
 8004d18:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004d1a:	bf00      	nop
 8004d1c:	370c      	adds	r7, #12
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d24:	4770      	bx	lr

08004d26 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004d26:	b480      	push	{r7}
 8004d28:	b083      	sub	sp, #12
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	6078      	str	r0, [r7, #4]
 8004d2e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004d30:	bf00      	nop
 8004d32:	370c      	adds	r7, #12
 8004d34:	46bd      	mov	sp, r7
 8004d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3a:	4770      	bx	lr

08004d3c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b083      	sub	sp, #12
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004d44:	bf00      	nop
 8004d46:	370c      	adds	r7, #12
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr

08004d50 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b083      	sub	sp, #12
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
 8004d58:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004d5a:	bf00      	nop
 8004d5c:	370c      	adds	r7, #12
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b083      	sub	sp, #12
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
 8004d6e:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004d70:	bf00      	nop
 8004d72:	370c      	adds	r7, #12
 8004d74:	46bd      	mov	sp, r7
 8004d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7a:	4770      	bx	lr

08004d7c <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b083      	sub	sp, #12
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004d84:	bf00      	nop
 8004d86:	370c      	adds	r7, #12
 8004d88:	46bd      	mov	sp, r7
 8004d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8e:	4770      	bx	lr

08004d90 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004d98:	bf00      	nop
 8004d9a:	370c      	adds	r7, #12
 8004d9c:	46bd      	mov	sp, r7
 8004d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da2:	4770      	bx	lr

08004da4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004da4:	b480      	push	{r7}
 8004da6:	b083      	sub	sp, #12
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b083      	sub	sp, #12
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004dc0:	bf00      	nop
 8004dc2:	370c      	adds	r7, #12
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dca:	4770      	bx	lr

08004dcc <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004dcc:	b480      	push	{r7}
 8004dce:	b083      	sub	sp, #12
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
 8004dd4:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004dd6:	bf00      	nop
 8004dd8:	370c      	adds	r7, #12
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
	...

08004de4 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004de4:	b480      	push	{r7}
 8004de6:	b085      	sub	sp, #20
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004dec:	4b27      	ldr	r3, [pc, #156]	; (8004e8c <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004dee:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	68ba      	ldr	r2, [r7, #8]
 8004df4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dfe:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e06:	041a      	lsls	r2, r3, #16
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	430a      	orrs	r2, r1
 8004e0e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004e12:	68bb      	ldr	r3, [r7, #8]
 8004e14:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e24:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e2c:	061a      	lsls	r2, r3, #24
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	430a      	orrs	r2, r1
 8004e34:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e60:	68bb      	ldr	r3, [r7, #8]
 8004e62:	60fb      	str	r3, [r7, #12]
 8004e64:	e005      	b.n	8004e72 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	2200      	movs	r2, #0
 8004e6a:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	3304      	adds	r3, #4
 8004e70:	60fb      	str	r3, [r7, #12]
 8004e72:	68bb      	ldr	r3, [r7, #8]
 8004e74:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	429a      	cmp	r2, r3
 8004e7c:	d3f3      	bcc.n	8004e66 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004e7e:	bf00      	nop
 8004e80:	bf00      	nop
 8004e82:	3714      	adds	r7, #20
 8004e84:	46bd      	mov	sp, r7
 8004e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8a:	4770      	bx	lr
 8004e8c:	4000a400 	.word	0x4000a400

08004e90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b087      	sub	sp, #28
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004e9e:	e15a      	b.n	8005156 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004ea0:	683b      	ldr	r3, [r7, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	2101      	movs	r1, #1
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	fa01 f303 	lsl.w	r3, r1, r3
 8004eac:	4013      	ands	r3, r2
 8004eae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	f000 814c 	beq.w	8005150 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	685b      	ldr	r3, [r3, #4]
 8004ebc:	f003 0303 	and.w	r3, r3, #3
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d005      	beq.n	8004ed0 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	685b      	ldr	r3, [r3, #4]
 8004ec8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ecc:	2b02      	cmp	r3, #2
 8004ece:	d130      	bne.n	8004f32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	005b      	lsls	r3, r3, #1
 8004eda:	2203      	movs	r2, #3
 8004edc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ee0:	43db      	mvns	r3, r3
 8004ee2:	693a      	ldr	r2, [r7, #16]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	68da      	ldr	r2, [r3, #12]
 8004eec:	697b      	ldr	r3, [r7, #20]
 8004eee:	005b      	lsls	r3, r3, #1
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	693a      	ldr	r2, [r7, #16]
 8004ef6:	4313      	orrs	r3, r2
 8004ef8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	693a      	ldr	r2, [r7, #16]
 8004efe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004f06:	2201      	movs	r2, #1
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0e:	43db      	mvns	r3, r3
 8004f10:	693a      	ldr	r2, [r7, #16]
 8004f12:	4013      	ands	r3, r2
 8004f14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	685b      	ldr	r3, [r3, #4]
 8004f1a:	091b      	lsrs	r3, r3, #4
 8004f1c:	f003 0201 	and.w	r2, r3, #1
 8004f20:	697b      	ldr	r3, [r7, #20]
 8004f22:	fa02 f303 	lsl.w	r3, r2, r3
 8004f26:	693a      	ldr	r2, [r7, #16]
 8004f28:	4313      	orrs	r3, r2
 8004f2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	693a      	ldr	r2, [r7, #16]
 8004f30:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	f003 0303 	and.w	r3, r3, #3
 8004f3a:	2b03      	cmp	r3, #3
 8004f3c:	d017      	beq.n	8004f6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	68db      	ldr	r3, [r3, #12]
 8004f42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	005b      	lsls	r3, r3, #1
 8004f48:	2203      	movs	r2, #3
 8004f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004f4e:	43db      	mvns	r3, r3
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	4013      	ands	r3, r2
 8004f54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	689a      	ldr	r2, [r3, #8]
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	005b      	lsls	r3, r3, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	693a      	ldr	r2, [r7, #16]
 8004f64:	4313      	orrs	r3, r2
 8004f66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	693a      	ldr	r2, [r7, #16]
 8004f6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	685b      	ldr	r3, [r3, #4]
 8004f72:	f003 0303 	and.w	r3, r3, #3
 8004f76:	2b02      	cmp	r3, #2
 8004f78:	d123      	bne.n	8004fc2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f7a:	697b      	ldr	r3, [r7, #20]
 8004f7c:	08da      	lsrs	r2, r3, #3
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	3208      	adds	r2, #8
 8004f82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	220f      	movs	r2, #15
 8004f92:	fa02 f303 	lsl.w	r3, r2, r3
 8004f96:	43db      	mvns	r3, r3
 8004f98:	693a      	ldr	r2, [r7, #16]
 8004f9a:	4013      	ands	r3, r2
 8004f9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004f9e:	683b      	ldr	r3, [r7, #0]
 8004fa0:	691a      	ldr	r2, [r3, #16]
 8004fa2:	697b      	ldr	r3, [r7, #20]
 8004fa4:	f003 0307 	and.w	r3, r3, #7
 8004fa8:	009b      	lsls	r3, r3, #2
 8004faa:	fa02 f303 	lsl.w	r3, r2, r3
 8004fae:	693a      	ldr	r2, [r7, #16]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	08da      	lsrs	r2, r3, #3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	3208      	adds	r2, #8
 8004fbc:	6939      	ldr	r1, [r7, #16]
 8004fbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	2203      	movs	r2, #3
 8004fce:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd2:	43db      	mvns	r3, r3
 8004fd4:	693a      	ldr	r2, [r7, #16]
 8004fd6:	4013      	ands	r3, r2
 8004fd8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	685b      	ldr	r3, [r3, #4]
 8004fde:	f003 0203 	and.w	r2, r3, #3
 8004fe2:	697b      	ldr	r3, [r7, #20]
 8004fe4:	005b      	lsls	r3, r3, #1
 8004fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8004fea:	693a      	ldr	r2, [r7, #16]
 8004fec:	4313      	orrs	r3, r2
 8004fee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	693a      	ldr	r2, [r7, #16]
 8004ff4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	685b      	ldr	r3, [r3, #4]
 8004ffa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f000 80a6 	beq.w	8005150 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005004:	4b5b      	ldr	r3, [pc, #364]	; (8005174 <HAL_GPIO_Init+0x2e4>)
 8005006:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005008:	4a5a      	ldr	r2, [pc, #360]	; (8005174 <HAL_GPIO_Init+0x2e4>)
 800500a:	f043 0301 	orr.w	r3, r3, #1
 800500e:	6613      	str	r3, [r2, #96]	; 0x60
 8005010:	4b58      	ldr	r3, [pc, #352]	; (8005174 <HAL_GPIO_Init+0x2e4>)
 8005012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005014:	f003 0301 	and.w	r3, r3, #1
 8005018:	60bb      	str	r3, [r7, #8]
 800501a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800501c:	4a56      	ldr	r2, [pc, #344]	; (8005178 <HAL_GPIO_Init+0x2e8>)
 800501e:	697b      	ldr	r3, [r7, #20]
 8005020:	089b      	lsrs	r3, r3, #2
 8005022:	3302      	adds	r3, #2
 8005024:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005028:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800502a:	697b      	ldr	r3, [r7, #20]
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	009b      	lsls	r3, r3, #2
 8005032:	220f      	movs	r2, #15
 8005034:	fa02 f303 	lsl.w	r3, r2, r3
 8005038:	43db      	mvns	r3, r3
 800503a:	693a      	ldr	r2, [r7, #16]
 800503c:	4013      	ands	r3, r2
 800503e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005046:	d01f      	beq.n	8005088 <HAL_GPIO_Init+0x1f8>
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	4a4c      	ldr	r2, [pc, #304]	; (800517c <HAL_GPIO_Init+0x2ec>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d019      	beq.n	8005084 <HAL_GPIO_Init+0x1f4>
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	4a4b      	ldr	r2, [pc, #300]	; (8005180 <HAL_GPIO_Init+0x2f0>)
 8005054:	4293      	cmp	r3, r2
 8005056:	d013      	beq.n	8005080 <HAL_GPIO_Init+0x1f0>
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	4a4a      	ldr	r2, [pc, #296]	; (8005184 <HAL_GPIO_Init+0x2f4>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d00d      	beq.n	800507c <HAL_GPIO_Init+0x1ec>
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	4a49      	ldr	r2, [pc, #292]	; (8005188 <HAL_GPIO_Init+0x2f8>)
 8005064:	4293      	cmp	r3, r2
 8005066:	d007      	beq.n	8005078 <HAL_GPIO_Init+0x1e8>
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	4a48      	ldr	r2, [pc, #288]	; (800518c <HAL_GPIO_Init+0x2fc>)
 800506c:	4293      	cmp	r3, r2
 800506e:	d101      	bne.n	8005074 <HAL_GPIO_Init+0x1e4>
 8005070:	2305      	movs	r3, #5
 8005072:	e00a      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 8005074:	2306      	movs	r3, #6
 8005076:	e008      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 8005078:	2304      	movs	r3, #4
 800507a:	e006      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 800507c:	2303      	movs	r3, #3
 800507e:	e004      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 8005080:	2302      	movs	r3, #2
 8005082:	e002      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 8005084:	2301      	movs	r3, #1
 8005086:	e000      	b.n	800508a <HAL_GPIO_Init+0x1fa>
 8005088:	2300      	movs	r3, #0
 800508a:	697a      	ldr	r2, [r7, #20]
 800508c:	f002 0203 	and.w	r2, r2, #3
 8005090:	0092      	lsls	r2, r2, #2
 8005092:	4093      	lsls	r3, r2
 8005094:	693a      	ldr	r2, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800509a:	4937      	ldr	r1, [pc, #220]	; (8005178 <HAL_GPIO_Init+0x2e8>)
 800509c:	697b      	ldr	r3, [r7, #20]
 800509e:	089b      	lsrs	r3, r3, #2
 80050a0:	3302      	adds	r3, #2
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80050a8:	4b39      	ldr	r3, [pc, #228]	; (8005190 <HAL_GPIO_Init+0x300>)
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	43db      	mvns	r3, r3
 80050b2:	693a      	ldr	r2, [r7, #16]
 80050b4:	4013      	ands	r3, r2
 80050b6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050b8:	683b      	ldr	r3, [r7, #0]
 80050ba:	685b      	ldr	r3, [r3, #4]
 80050bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d003      	beq.n	80050cc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80050c4:	693a      	ldr	r2, [r7, #16]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	4313      	orrs	r3, r2
 80050ca:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80050cc:	4a30      	ldr	r2, [pc, #192]	; (8005190 <HAL_GPIO_Init+0x300>)
 80050ce:	693b      	ldr	r3, [r7, #16]
 80050d0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80050d2:	4b2f      	ldr	r3, [pc, #188]	; (8005190 <HAL_GPIO_Init+0x300>)
 80050d4:	68db      	ldr	r3, [r3, #12]
 80050d6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	43db      	mvns	r3, r3
 80050dc:	693a      	ldr	r2, [r7, #16]
 80050de:	4013      	ands	r3, r2
 80050e0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	685b      	ldr	r3, [r3, #4]
 80050e6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d003      	beq.n	80050f6 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	4313      	orrs	r3, r2
 80050f4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80050f6:	4a26      	ldr	r2, [pc, #152]	; (8005190 <HAL_GPIO_Init+0x300>)
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80050fc:	4b24      	ldr	r3, [pc, #144]	; (8005190 <HAL_GPIO_Init+0x300>)
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	43db      	mvns	r3, r3
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	4013      	ands	r3, r2
 800510a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800510c:	683b      	ldr	r3, [r7, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005114:	2b00      	cmp	r3, #0
 8005116:	d003      	beq.n	8005120 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005118:	693a      	ldr	r2, [r7, #16]
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005120:	4a1b      	ldr	r2, [pc, #108]	; (8005190 <HAL_GPIO_Init+0x300>)
 8005122:	693b      	ldr	r3, [r7, #16]
 8005124:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005126:	4b1a      	ldr	r3, [pc, #104]	; (8005190 <HAL_GPIO_Init+0x300>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	43db      	mvns	r3, r3
 8005130:	693a      	ldr	r2, [r7, #16]
 8005132:	4013      	ands	r3, r2
 8005134:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800513e:	2b00      	cmp	r3, #0
 8005140:	d003      	beq.n	800514a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005142:	693a      	ldr	r2, [r7, #16]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	4313      	orrs	r3, r2
 8005148:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800514a:	4a11      	ldr	r2, [pc, #68]	; (8005190 <HAL_GPIO_Init+0x300>)
 800514c:	693b      	ldr	r3, [r7, #16]
 800514e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005150:	697b      	ldr	r3, [r7, #20]
 8005152:	3301      	adds	r3, #1
 8005154:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005156:	683b      	ldr	r3, [r7, #0]
 8005158:	681a      	ldr	r2, [r3, #0]
 800515a:	697b      	ldr	r3, [r7, #20]
 800515c:	fa22 f303 	lsr.w	r3, r2, r3
 8005160:	2b00      	cmp	r3, #0
 8005162:	f47f ae9d 	bne.w	8004ea0 <HAL_GPIO_Init+0x10>
  }
}
 8005166:	bf00      	nop
 8005168:	bf00      	nop
 800516a:	371c      	adds	r7, #28
 800516c:	46bd      	mov	sp, r7
 800516e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005172:	4770      	bx	lr
 8005174:	40021000 	.word	0x40021000
 8005178:	40010000 	.word	0x40010000
 800517c:	48000400 	.word	0x48000400
 8005180:	48000800 	.word	0x48000800
 8005184:	48000c00 	.word	0x48000c00
 8005188:	48001000 	.word	0x48001000
 800518c:	48001400 	.word	0x48001400
 8005190:	40010400 	.word	0x40010400

08005194 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005194:	b480      	push	{r7}
 8005196:	b085      	sub	sp, #20
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	460b      	mov	r3, r1
 800519e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	691a      	ldr	r2, [r3, #16]
 80051a4:	887b      	ldrh	r3, [r7, #2]
 80051a6:	4013      	ands	r3, r2
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d002      	beq.n	80051b2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051ac:	2301      	movs	r3, #1
 80051ae:	73fb      	strb	r3, [r7, #15]
 80051b0:	e001      	b.n	80051b6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051b2:	2300      	movs	r3, #0
 80051b4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051b8:	4618      	mov	r0, r3
 80051ba:	3714      	adds	r7, #20
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
 80051cc:	460b      	mov	r3, r1
 80051ce:	807b      	strh	r3, [r7, #2]
 80051d0:	4613      	mov	r3, r2
 80051d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80051d4:	787b      	ldrb	r3, [r7, #1]
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d003      	beq.n	80051e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80051da:	887a      	ldrh	r2, [r7, #2]
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80051e0:	e002      	b.n	80051e8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80051e8:	bf00      	nop
 80051ea:	370c      	adds	r7, #12
 80051ec:	46bd      	mov	sp, r7
 80051ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f2:	4770      	bx	lr

080051f4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b082      	sub	sp, #8
 80051f8:	af00      	add	r7, sp, #0
 80051fa:	4603      	mov	r3, r0
 80051fc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80051fe:	4b08      	ldr	r3, [pc, #32]	; (8005220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005200:	695a      	ldr	r2, [r3, #20]
 8005202:	88fb      	ldrh	r3, [r7, #6]
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d006      	beq.n	8005218 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800520a:	4a05      	ldr	r2, [pc, #20]	; (8005220 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800520c:	88fb      	ldrh	r3, [r7, #6]
 800520e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005210:	88fb      	ldrh	r3, [r7, #6]
 8005212:	4618      	mov	r0, r3
 8005214:	f000 f806 	bl	8005224 <HAL_GPIO_EXTI_Callback>
  }
}
 8005218:	bf00      	nop
 800521a:	3708      	adds	r7, #8
 800521c:	46bd      	mov	sp, r7
 800521e:	bd80      	pop	{r7, pc}
 8005220:	40010400 	.word	0x40010400

08005224 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005224:	b480      	push	{r7}
 8005226:	b083      	sub	sp, #12
 8005228:	af00      	add	r7, sp, #0
 800522a:	4603      	mov	r3, r0
 800522c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800522e:	bf00      	nop
 8005230:	370c      	adds	r7, #12
 8005232:	46bd      	mov	sp, r7
 8005234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005238:	4770      	bx	lr
	...

0800523c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800523c:	b480      	push	{r7}
 800523e:	b085      	sub	sp, #20
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d141      	bne.n	80052ce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800524a:	4b4b      	ldr	r3, [pc, #300]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005252:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005256:	d131      	bne.n	80052bc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005258:	4b47      	ldr	r3, [pc, #284]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800525a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800525e:	4a46      	ldr	r2, [pc, #280]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005264:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005268:	4b43      	ldr	r3, [pc, #268]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005270:	4a41      	ldr	r2, [pc, #260]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005276:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005278:	4b40      	ldr	r3, [pc, #256]	; (800537c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	2232      	movs	r2, #50	; 0x32
 800527e:	fb02 f303 	mul.w	r3, r2, r3
 8005282:	4a3f      	ldr	r2, [pc, #252]	; (8005380 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005284:	fba2 2303 	umull	r2, r3, r2, r3
 8005288:	0c9b      	lsrs	r3, r3, #18
 800528a:	3301      	adds	r3, #1
 800528c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800528e:	e002      	b.n	8005296 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	3b01      	subs	r3, #1
 8005294:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005296:	4b38      	ldr	r3, [pc, #224]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005298:	695b      	ldr	r3, [r3, #20]
 800529a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800529e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052a2:	d102      	bne.n	80052aa <HAL_PWREx_ControlVoltageScaling+0x6e>
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d1f2      	bne.n	8005290 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80052aa:	4b33      	ldr	r3, [pc, #204]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ac:	695b      	ldr	r3, [r3, #20]
 80052ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052b6:	d158      	bne.n	800536a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80052b8:	2303      	movs	r3, #3
 80052ba:	e057      	b.n	800536c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052bc:	4b2e      	ldr	r3, [pc, #184]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052be:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052c2:	4a2d      	ldr	r2, [pc, #180]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052c4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80052c8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80052cc:	e04d      	b.n	800536a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d4:	d141      	bne.n	800535a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80052d6:	4b28      	ldr	r3, [pc, #160]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80052de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052e2:	d131      	bne.n	8005348 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80052e4:	4b24      	ldr	r3, [pc, #144]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80052ea:	4a23      	ldr	r2, [pc, #140]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80052f4:	4b20      	ldr	r3, [pc, #128]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80052fc:	4a1e      	ldr	r2, [pc, #120]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80052fe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005302:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005304:	4b1d      	ldr	r3, [pc, #116]	; (800537c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	2232      	movs	r2, #50	; 0x32
 800530a:	fb02 f303 	mul.w	r3, r2, r3
 800530e:	4a1c      	ldr	r2, [pc, #112]	; (8005380 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005310:	fba2 2303 	umull	r2, r3, r2, r3
 8005314:	0c9b      	lsrs	r3, r3, #18
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800531a:	e002      	b.n	8005322 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	3b01      	subs	r3, #1
 8005320:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005324:	695b      	ldr	r3, [r3, #20]
 8005326:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800532a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800532e:	d102      	bne.n	8005336 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d1f2      	bne.n	800531c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005336:	4b10      	ldr	r3, [pc, #64]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005338:	695b      	ldr	r3, [r3, #20]
 800533a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800533e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005342:	d112      	bne.n	800536a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005344:	2303      	movs	r3, #3
 8005346:	e011      	b.n	800536c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005348:	4b0b      	ldr	r3, [pc, #44]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800534a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800534e:	4a0a      	ldr	r2, [pc, #40]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005354:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005358:	e007      	b.n	800536a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800535a:	4b07      	ldr	r3, [pc, #28]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005362:	4a05      	ldr	r2, [pc, #20]	; (8005378 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005364:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005368:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 800536a:	2300      	movs	r3, #0
}
 800536c:	4618      	mov	r0, r3
 800536e:	3714      	adds	r7, #20
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	40007000 	.word	0x40007000
 800537c:	20000004 	.word	0x20000004
 8005380:	431bde83 	.word	0x431bde83

08005384 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005384:	b480      	push	{r7}
 8005386:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005388:	4b05      	ldr	r3, [pc, #20]	; (80053a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	4a04      	ldr	r2, [pc, #16]	; (80053a0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800538e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005392:	6093      	str	r3, [r2, #8]
}
 8005394:	bf00      	nop
 8005396:	46bd      	mov	sp, r7
 8005398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539c:	4770      	bx	lr
 800539e:	bf00      	nop
 80053a0:	40007000 	.word	0x40007000

080053a4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80053a4:	b580      	push	{r7, lr}
 80053a6:	b088      	sub	sp, #32
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d101      	bne.n	80053b6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80053b2:	2301      	movs	r3, #1
 80053b4:	e308      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	f003 0301 	and.w	r3, r3, #1
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d075      	beq.n	80054ae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80053c2:	4ba3      	ldr	r3, [pc, #652]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	f003 030c 	and.w	r3, r3, #12
 80053ca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80053cc:	4ba0      	ldr	r3, [pc, #640]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0303 	and.w	r3, r3, #3
 80053d4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80053d6:	69bb      	ldr	r3, [r7, #24]
 80053d8:	2b0c      	cmp	r3, #12
 80053da:	d102      	bne.n	80053e2 <HAL_RCC_OscConfig+0x3e>
 80053dc:	697b      	ldr	r3, [r7, #20]
 80053de:	2b03      	cmp	r3, #3
 80053e0:	d002      	beq.n	80053e8 <HAL_RCC_OscConfig+0x44>
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	2b08      	cmp	r3, #8
 80053e6:	d10b      	bne.n	8005400 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053e8:	4b99      	ldr	r3, [pc, #612]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d05b      	beq.n	80054ac <HAL_RCC_OscConfig+0x108>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d157      	bne.n	80054ac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053fc:	2301      	movs	r3, #1
 80053fe:	e2e3      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	685b      	ldr	r3, [r3, #4]
 8005404:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005408:	d106      	bne.n	8005418 <HAL_RCC_OscConfig+0x74>
 800540a:	4b91      	ldr	r3, [pc, #580]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a90      	ldr	r2, [pc, #576]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e01d      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	685b      	ldr	r3, [r3, #4]
 800541c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005420:	d10c      	bne.n	800543c <HAL_RCC_OscConfig+0x98>
 8005422:	4b8b      	ldr	r3, [pc, #556]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	4a8a      	ldr	r2, [pc, #552]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800542c:	6013      	str	r3, [r2, #0]
 800542e:	4b88      	ldr	r3, [pc, #544]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	4a87      	ldr	r2, [pc, #540]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005434:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005438:	6013      	str	r3, [r2, #0]
 800543a:	e00b      	b.n	8005454 <HAL_RCC_OscConfig+0xb0>
 800543c:	4b84      	ldr	r3, [pc, #528]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	4a83      	ldr	r2, [pc, #524]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005442:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005446:	6013      	str	r3, [r2, #0]
 8005448:	4b81      	ldr	r3, [pc, #516]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a80      	ldr	r2, [pc, #512]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800544e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005452:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	685b      	ldr	r3, [r3, #4]
 8005458:	2b00      	cmp	r3, #0
 800545a:	d013      	beq.n	8005484 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800545c:	f7fd fa4e 	bl	80028fc <HAL_GetTick>
 8005460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005462:	e008      	b.n	8005476 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005464:	f7fd fa4a 	bl	80028fc <HAL_GetTick>
 8005468:	4602      	mov	r2, r0
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	1ad3      	subs	r3, r2, r3
 800546e:	2b64      	cmp	r3, #100	; 0x64
 8005470:	d901      	bls.n	8005476 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005472:	2303      	movs	r3, #3
 8005474:	e2a8      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005476:	4b76      	ldr	r3, [pc, #472]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800547e:	2b00      	cmp	r3, #0
 8005480:	d0f0      	beq.n	8005464 <HAL_RCC_OscConfig+0xc0>
 8005482:	e014      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005484:	f7fd fa3a 	bl	80028fc <HAL_GetTick>
 8005488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800548a:	e008      	b.n	800549e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800548c:	f7fd fa36 	bl	80028fc <HAL_GetTick>
 8005490:	4602      	mov	r2, r0
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	1ad3      	subs	r3, r2, r3
 8005496:	2b64      	cmp	r3, #100	; 0x64
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e294      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800549e:	4b6c      	ldr	r3, [pc, #432]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d1f0      	bne.n	800548c <HAL_RCC_OscConfig+0xe8>
 80054aa:	e000      	b.n	80054ae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80054ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f003 0302 	and.w	r3, r3, #2
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d075      	beq.n	80055a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80054ba:	4b65      	ldr	r3, [pc, #404]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80054bc:	689b      	ldr	r3, [r3, #8]
 80054be:	f003 030c 	and.w	r3, r3, #12
 80054c2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80054c4:	4b62      	ldr	r3, [pc, #392]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80054c6:	68db      	ldr	r3, [r3, #12]
 80054c8:	f003 0303 	and.w	r3, r3, #3
 80054cc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80054ce:	69bb      	ldr	r3, [r7, #24]
 80054d0:	2b0c      	cmp	r3, #12
 80054d2:	d102      	bne.n	80054da <HAL_RCC_OscConfig+0x136>
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	2b02      	cmp	r3, #2
 80054d8:	d002      	beq.n	80054e0 <HAL_RCC_OscConfig+0x13c>
 80054da:	69bb      	ldr	r3, [r7, #24]
 80054dc:	2b04      	cmp	r3, #4
 80054de:	d11f      	bne.n	8005520 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80054e0:	4b5b      	ldr	r3, [pc, #364]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d005      	beq.n	80054f8 <HAL_RCC_OscConfig+0x154>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d101      	bne.n	80054f8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80054f4:	2301      	movs	r3, #1
 80054f6:	e267      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054f8:	4b55      	ldr	r3, [pc, #340]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80054fa:	685b      	ldr	r3, [r3, #4]
 80054fc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	061b      	lsls	r3, r3, #24
 8005506:	4952      	ldr	r1, [pc, #328]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005508:	4313      	orrs	r3, r2
 800550a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800550c:	4b51      	ldr	r3, [pc, #324]	; (8005654 <HAL_RCC_OscConfig+0x2b0>)
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4618      	mov	r0, r3
 8005512:	f7fd f9a7 	bl	8002864 <HAL_InitTick>
 8005516:	4603      	mov	r3, r0
 8005518:	2b00      	cmp	r3, #0
 800551a:	d043      	beq.n	80055a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800551c:	2301      	movs	r3, #1
 800551e:	e253      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	2b00      	cmp	r3, #0
 8005526:	d023      	beq.n	8005570 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005528:	4b49      	ldr	r3, [pc, #292]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	4a48      	ldr	r2, [pc, #288]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800552e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005532:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005534:	f7fd f9e2 	bl	80028fc <HAL_GetTick>
 8005538:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800553a:	e008      	b.n	800554e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800553c:	f7fd f9de 	bl	80028fc <HAL_GetTick>
 8005540:	4602      	mov	r2, r0
 8005542:	693b      	ldr	r3, [r7, #16]
 8005544:	1ad3      	subs	r3, r2, r3
 8005546:	2b02      	cmp	r3, #2
 8005548:	d901      	bls.n	800554e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800554a:	2303      	movs	r3, #3
 800554c:	e23c      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800554e:	4b40      	ldr	r3, [pc, #256]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005556:	2b00      	cmp	r3, #0
 8005558:	d0f0      	beq.n	800553c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800555a:	4b3d      	ldr	r3, [pc, #244]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	691b      	ldr	r3, [r3, #16]
 8005566:	061b      	lsls	r3, r3, #24
 8005568:	4939      	ldr	r1, [pc, #228]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 800556a:	4313      	orrs	r3, r2
 800556c:	604b      	str	r3, [r1, #4]
 800556e:	e01a      	b.n	80055a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005570:	4b37      	ldr	r3, [pc, #220]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	4a36      	ldr	r2, [pc, #216]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005576:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800557a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800557c:	f7fd f9be 	bl	80028fc <HAL_GetTick>
 8005580:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005582:	e008      	b.n	8005596 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005584:	f7fd f9ba 	bl	80028fc <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	693b      	ldr	r3, [r7, #16]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	2b02      	cmp	r3, #2
 8005590:	d901      	bls.n	8005596 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005592:	2303      	movs	r3, #3
 8005594:	e218      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005596:	4b2e      	ldr	r3, [pc, #184]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d1f0      	bne.n	8005584 <HAL_RCC_OscConfig+0x1e0>
 80055a2:	e000      	b.n	80055a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80055a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f003 0308 	and.w	r3, r3, #8
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d03c      	beq.n	800562c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	695b      	ldr	r3, [r3, #20]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d01c      	beq.n	80055f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80055ba:	4b25      	ldr	r3, [pc, #148]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80055bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055c0:	4a23      	ldr	r2, [pc, #140]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80055c2:	f043 0301 	orr.w	r3, r3, #1
 80055c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80055ca:	f7fd f997 	bl	80028fc <HAL_GetTick>
 80055ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055d0:	e008      	b.n	80055e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80055d2:	f7fd f993 	bl	80028fc <HAL_GetTick>
 80055d6:	4602      	mov	r2, r0
 80055d8:	693b      	ldr	r3, [r7, #16]
 80055da:	1ad3      	subs	r3, r2, r3
 80055dc:	2b02      	cmp	r3, #2
 80055de:	d901      	bls.n	80055e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80055e0:	2303      	movs	r3, #3
 80055e2:	e1f1      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80055e4:	4b1a      	ldr	r3, [pc, #104]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80055e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055ea:	f003 0302 	and.w	r3, r3, #2
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d0ef      	beq.n	80055d2 <HAL_RCC_OscConfig+0x22e>
 80055f2:	e01b      	b.n	800562c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055f4:	4b16      	ldr	r3, [pc, #88]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80055f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80055fa:	4a15      	ldr	r2, [pc, #84]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	f023 0301 	bic.w	r3, r3, #1
 8005600:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005604:	f7fd f97a 	bl	80028fc <HAL_GetTick>
 8005608:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800560a:	e008      	b.n	800561e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800560c:	f7fd f976 	bl	80028fc <HAL_GetTick>
 8005610:	4602      	mov	r2, r0
 8005612:	693b      	ldr	r3, [r7, #16]
 8005614:	1ad3      	subs	r3, r2, r3
 8005616:	2b02      	cmp	r3, #2
 8005618:	d901      	bls.n	800561e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800561a:	2303      	movs	r3, #3
 800561c:	e1d4      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800561e:	4b0c      	ldr	r3, [pc, #48]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005620:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005624:	f003 0302 	and.w	r3, r3, #2
 8005628:	2b00      	cmp	r3, #0
 800562a:	d1ef      	bne.n	800560c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	f003 0304 	and.w	r3, r3, #4
 8005634:	2b00      	cmp	r3, #0
 8005636:	f000 80ab 	beq.w	8005790 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800563a:	2300      	movs	r3, #0
 800563c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800563e:	4b04      	ldr	r3, [pc, #16]	; (8005650 <HAL_RCC_OscConfig+0x2ac>)
 8005640:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005646:	2b00      	cmp	r3, #0
 8005648:	d106      	bne.n	8005658 <HAL_RCC_OscConfig+0x2b4>
 800564a:	2301      	movs	r3, #1
 800564c:	e005      	b.n	800565a <HAL_RCC_OscConfig+0x2b6>
 800564e:	bf00      	nop
 8005650:	40021000 	.word	0x40021000
 8005654:	20000008 	.word	0x20000008
 8005658:	2300      	movs	r3, #0
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00d      	beq.n	800567a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800565e:	4baf      	ldr	r3, [pc, #700]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005660:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005662:	4aae      	ldr	r2, [pc, #696]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005664:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005668:	6593      	str	r3, [r2, #88]	; 0x58
 800566a:	4bac      	ldr	r3, [pc, #688]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800566c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800566e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005672:	60fb      	str	r3, [r7, #12]
 8005674:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005676:	2301      	movs	r3, #1
 8005678:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800567a:	4ba9      	ldr	r3, [pc, #676]	; (8005920 <HAL_RCC_OscConfig+0x57c>)
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005682:	2b00      	cmp	r3, #0
 8005684:	d118      	bne.n	80056b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005686:	4ba6      	ldr	r3, [pc, #664]	; (8005920 <HAL_RCC_OscConfig+0x57c>)
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	4aa5      	ldr	r2, [pc, #660]	; (8005920 <HAL_RCC_OscConfig+0x57c>)
 800568c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005690:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005692:	f7fd f933 	bl	80028fc <HAL_GetTick>
 8005696:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005698:	e008      	b.n	80056ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800569a:	f7fd f92f 	bl	80028fc <HAL_GetTick>
 800569e:	4602      	mov	r2, r0
 80056a0:	693b      	ldr	r3, [r7, #16]
 80056a2:	1ad3      	subs	r3, r2, r3
 80056a4:	2b02      	cmp	r3, #2
 80056a6:	d901      	bls.n	80056ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80056a8:	2303      	movs	r3, #3
 80056aa:	e18d      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80056ac:	4b9c      	ldr	r3, [pc, #624]	; (8005920 <HAL_RCC_OscConfig+0x57c>)
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0f0      	beq.n	800569a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	689b      	ldr	r3, [r3, #8]
 80056bc:	2b01      	cmp	r3, #1
 80056be:	d108      	bne.n	80056d2 <HAL_RCC_OscConfig+0x32e>
 80056c0:	4b96      	ldr	r3, [pc, #600]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056c6:	4a95      	ldr	r2, [pc, #596]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056c8:	f043 0301 	orr.w	r3, r3, #1
 80056cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056d0:	e024      	b.n	800571c <HAL_RCC_OscConfig+0x378>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	689b      	ldr	r3, [r3, #8]
 80056d6:	2b05      	cmp	r3, #5
 80056d8:	d110      	bne.n	80056fc <HAL_RCC_OscConfig+0x358>
 80056da:	4b90      	ldr	r3, [pc, #576]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056e0:	4a8e      	ldr	r2, [pc, #568]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056e2:	f043 0304 	orr.w	r3, r3, #4
 80056e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056ea:	4b8c      	ldr	r3, [pc, #560]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f0:	4a8a      	ldr	r2, [pc, #552]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056f2:	f043 0301 	orr.w	r3, r3, #1
 80056f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80056fa:	e00f      	b.n	800571c <HAL_RCC_OscConfig+0x378>
 80056fc:	4b87      	ldr	r3, [pc, #540]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80056fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005702:	4a86      	ldr	r2, [pc, #536]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005704:	f023 0301 	bic.w	r3, r3, #1
 8005708:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800570c:	4b83      	ldr	r3, [pc, #524]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800570e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005712:	4a82      	ldr	r2, [pc, #520]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005714:	f023 0304 	bic.w	r3, r3, #4
 8005718:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	689b      	ldr	r3, [r3, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d016      	beq.n	8005752 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005724:	f7fd f8ea 	bl	80028fc <HAL_GetTick>
 8005728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800572a:	e00a      	b.n	8005742 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800572c:	f7fd f8e6 	bl	80028fc <HAL_GetTick>
 8005730:	4602      	mov	r2, r0
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	1ad3      	subs	r3, r2, r3
 8005736:	f241 3288 	movw	r2, #5000	; 0x1388
 800573a:	4293      	cmp	r3, r2
 800573c:	d901      	bls.n	8005742 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800573e:	2303      	movs	r3, #3
 8005740:	e142      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005742:	4b76      	ldr	r3, [pc, #472]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005744:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005748:	f003 0302 	and.w	r3, r3, #2
 800574c:	2b00      	cmp	r3, #0
 800574e:	d0ed      	beq.n	800572c <HAL_RCC_OscConfig+0x388>
 8005750:	e015      	b.n	800577e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005752:	f7fd f8d3 	bl	80028fc <HAL_GetTick>
 8005756:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005758:	e00a      	b.n	8005770 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800575a:	f7fd f8cf 	bl	80028fc <HAL_GetTick>
 800575e:	4602      	mov	r2, r0
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	1ad3      	subs	r3, r2, r3
 8005764:	f241 3288 	movw	r2, #5000	; 0x1388
 8005768:	4293      	cmp	r3, r2
 800576a:	d901      	bls.n	8005770 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800576c:	2303      	movs	r3, #3
 800576e:	e12b      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005770:	4b6a      	ldr	r3, [pc, #424]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005772:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005776:	f003 0302 	and.w	r3, r3, #2
 800577a:	2b00      	cmp	r3, #0
 800577c:	d1ed      	bne.n	800575a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800577e:	7ffb      	ldrb	r3, [r7, #31]
 8005780:	2b01      	cmp	r3, #1
 8005782:	d105      	bne.n	8005790 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005784:	4b65      	ldr	r3, [pc, #404]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005788:	4a64      	ldr	r2, [pc, #400]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800578a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800578e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	681b      	ldr	r3, [r3, #0]
 8005794:	f003 0320 	and.w	r3, r3, #32
 8005798:	2b00      	cmp	r3, #0
 800579a:	d03c      	beq.n	8005816 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	699b      	ldr	r3, [r3, #24]
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d01c      	beq.n	80057de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80057a4:	4b5d      	ldr	r3, [pc, #372]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80057a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057aa:	4a5c      	ldr	r2, [pc, #368]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80057ac:	f043 0301 	orr.w	r3, r3, #1
 80057b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057b4:	f7fd f8a2 	bl	80028fc <HAL_GetTick>
 80057b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ba:	e008      	b.n	80057ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057bc:	f7fd f89e 	bl	80028fc <HAL_GetTick>
 80057c0:	4602      	mov	r2, r0
 80057c2:	693b      	ldr	r3, [r7, #16]
 80057c4:	1ad3      	subs	r3, r2, r3
 80057c6:	2b02      	cmp	r3, #2
 80057c8:	d901      	bls.n	80057ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80057ca:	2303      	movs	r3, #3
 80057cc:	e0fc      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80057ce:	4b53      	ldr	r3, [pc, #332]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80057d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057d4:	f003 0302 	and.w	r3, r3, #2
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d0ef      	beq.n	80057bc <HAL_RCC_OscConfig+0x418>
 80057dc:	e01b      	b.n	8005816 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80057de:	4b4f      	ldr	r3, [pc, #316]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80057e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80057e4:	4a4d      	ldr	r2, [pc, #308]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80057e6:	f023 0301 	bic.w	r3, r3, #1
 80057ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057ee:	f7fd f885 	bl	80028fc <HAL_GetTick>
 80057f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80057f4:	e008      	b.n	8005808 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80057f6:	f7fd f881 	bl	80028fc <HAL_GetTick>
 80057fa:	4602      	mov	r2, r0
 80057fc:	693b      	ldr	r3, [r7, #16]
 80057fe:	1ad3      	subs	r3, r2, r3
 8005800:	2b02      	cmp	r3, #2
 8005802:	d901      	bls.n	8005808 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e0df      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005808:	4b44      	ldr	r3, [pc, #272]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800580a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800580e:	f003 0302 	and.w	r3, r3, #2
 8005812:	2b00      	cmp	r3, #0
 8005814:	d1ef      	bne.n	80057f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	69db      	ldr	r3, [r3, #28]
 800581a:	2b00      	cmp	r3, #0
 800581c:	f000 80d3 	beq.w	80059c6 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005820:	4b3e      	ldr	r3, [pc, #248]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f003 030c 	and.w	r3, r3, #12
 8005828:	2b0c      	cmp	r3, #12
 800582a:	f000 808d 	beq.w	8005948 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	69db      	ldr	r3, [r3, #28]
 8005832:	2b02      	cmp	r3, #2
 8005834:	d15a      	bne.n	80058ec <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005836:	4b39      	ldr	r3, [pc, #228]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	4a38      	ldr	r2, [pc, #224]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800583c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005840:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005842:	f7fd f85b 	bl	80028fc <HAL_GetTick>
 8005846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005848:	e008      	b.n	800585c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584a:	f7fd f857 	bl	80028fc <HAL_GetTick>
 800584e:	4602      	mov	r2, r0
 8005850:	693b      	ldr	r3, [r7, #16]
 8005852:	1ad3      	subs	r3, r2, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d901      	bls.n	800585c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005858:	2303      	movs	r3, #3
 800585a:	e0b5      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800585c:	4b2f      	ldr	r3, [pc, #188]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1f0      	bne.n	800584a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005868:	4b2c      	ldr	r3, [pc, #176]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800586a:	68da      	ldr	r2, [r3, #12]
 800586c:	4b2d      	ldr	r3, [pc, #180]	; (8005924 <HAL_RCC_OscConfig+0x580>)
 800586e:	4013      	ands	r3, r2
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	6a11      	ldr	r1, [r2, #32]
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005878:	3a01      	subs	r2, #1
 800587a:	0112      	lsls	r2, r2, #4
 800587c:	4311      	orrs	r1, r2
 800587e:	687a      	ldr	r2, [r7, #4]
 8005880:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8005882:	0212      	lsls	r2, r2, #8
 8005884:	4311      	orrs	r1, r2
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800588a:	0852      	lsrs	r2, r2, #1
 800588c:	3a01      	subs	r2, #1
 800588e:	0552      	lsls	r2, r2, #21
 8005890:	4311      	orrs	r1, r2
 8005892:	687a      	ldr	r2, [r7, #4]
 8005894:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8005896:	0852      	lsrs	r2, r2, #1
 8005898:	3a01      	subs	r2, #1
 800589a:	0652      	lsls	r2, r2, #25
 800589c:	4311      	orrs	r1, r2
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80058a2:	06d2      	lsls	r2, r2, #27
 80058a4:	430a      	orrs	r2, r1
 80058a6:	491d      	ldr	r1, [pc, #116]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058a8:	4313      	orrs	r3, r2
 80058aa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058ac:	4b1b      	ldr	r3, [pc, #108]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	4a1a      	ldr	r2, [pc, #104]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058b6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058b8:	4b18      	ldr	r3, [pc, #96]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058ba:	68db      	ldr	r3, [r3, #12]
 80058bc:	4a17      	ldr	r2, [pc, #92]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80058c2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c4:	f7fd f81a 	bl	80028fc <HAL_GetTick>
 80058c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ca:	e008      	b.n	80058de <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058cc:	f7fd f816 	bl	80028fc <HAL_GetTick>
 80058d0:	4602      	mov	r2, r0
 80058d2:	693b      	ldr	r3, [r7, #16]
 80058d4:	1ad3      	subs	r3, r2, r3
 80058d6:	2b02      	cmp	r3, #2
 80058d8:	d901      	bls.n	80058de <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e074      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058de:	4b0f      	ldr	r3, [pc, #60]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d0f0      	beq.n	80058cc <HAL_RCC_OscConfig+0x528>
 80058ea:	e06c      	b.n	80059c6 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058ec:	4b0b      	ldr	r3, [pc, #44]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a0a      	ldr	r2, [pc, #40]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058f2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80058f6:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80058f8:	4b08      	ldr	r3, [pc, #32]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058fa:	68db      	ldr	r3, [r3, #12]
 80058fc:	4a07      	ldr	r2, [pc, #28]	; (800591c <HAL_RCC_OscConfig+0x578>)
 80058fe:	f023 0303 	bic.w	r3, r3, #3
 8005902:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005904:	4b05      	ldr	r3, [pc, #20]	; (800591c <HAL_RCC_OscConfig+0x578>)
 8005906:	68db      	ldr	r3, [r3, #12]
 8005908:	4a04      	ldr	r2, [pc, #16]	; (800591c <HAL_RCC_OscConfig+0x578>)
 800590a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800590e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005912:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005914:	f7fc fff2 	bl	80028fc <HAL_GetTick>
 8005918:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800591a:	e00e      	b.n	800593a <HAL_RCC_OscConfig+0x596>
 800591c:	40021000 	.word	0x40021000
 8005920:	40007000 	.word	0x40007000
 8005924:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005928:	f7fc ffe8 	bl	80028fc <HAL_GetTick>
 800592c:	4602      	mov	r2, r0
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	1ad3      	subs	r3, r2, r3
 8005932:	2b02      	cmp	r3, #2
 8005934:	d901      	bls.n	800593a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005936:	2303      	movs	r3, #3
 8005938:	e046      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800593a:	4b25      	ldr	r3, [pc, #148]	; (80059d0 <HAL_RCC_OscConfig+0x62c>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1f0      	bne.n	8005928 <HAL_RCC_OscConfig+0x584>
 8005946:	e03e      	b.n	80059c6 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	69db      	ldr	r3, [r3, #28]
 800594c:	2b01      	cmp	r3, #1
 800594e:	d101      	bne.n	8005954 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005950:	2301      	movs	r3, #1
 8005952:	e039      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005954:	4b1e      	ldr	r3, [pc, #120]	; (80059d0 <HAL_RCC_OscConfig+0x62c>)
 8005956:	68db      	ldr	r3, [r3, #12]
 8005958:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800595a:	697b      	ldr	r3, [r7, #20]
 800595c:	f003 0203 	and.w	r2, r3, #3
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a1b      	ldr	r3, [r3, #32]
 8005964:	429a      	cmp	r2, r3
 8005966:	d12c      	bne.n	80059c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005968:	697b      	ldr	r3, [r7, #20]
 800596a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005972:	3b01      	subs	r3, #1
 8005974:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005976:	429a      	cmp	r2, r3
 8005978:	d123      	bne.n	80059c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800597a:	697b      	ldr	r3, [r7, #20]
 800597c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005984:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005986:	429a      	cmp	r2, r3
 8005988:	d11b      	bne.n	80059c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800598a:	697b      	ldr	r3, [r7, #20]
 800598c:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005994:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005996:	429a      	cmp	r2, r3
 8005998:	d113      	bne.n	80059c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800599a:	697b      	ldr	r3, [r7, #20]
 800599c:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059a4:	085b      	lsrs	r3, r3, #1
 80059a6:	3b01      	subs	r3, #1
 80059a8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059aa:	429a      	cmp	r2, r3
 80059ac:	d109      	bne.n	80059c2 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059ae:	697b      	ldr	r3, [r7, #20]
 80059b0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b8:	085b      	lsrs	r3, r3, #1
 80059ba:	3b01      	subs	r3, #1
 80059bc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059be:	429a      	cmp	r2, r3
 80059c0:	d001      	beq.n	80059c6 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e000      	b.n	80059c8 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80059c6:	2300      	movs	r3, #0
}
 80059c8:	4618      	mov	r0, r3
 80059ca:	3720      	adds	r7, #32
 80059cc:	46bd      	mov	sp, r7
 80059ce:	bd80      	pop	{r7, pc}
 80059d0:	40021000 	.word	0x40021000

080059d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059d4:	b580      	push	{r7, lr}
 80059d6:	b086      	sub	sp, #24
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
 80059dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059de:	2300      	movs	r3, #0
 80059e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d101      	bne.n	80059ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e11e      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80059ec:	4b91      	ldr	r3, [pc, #580]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	f003 030f 	and.w	r3, r3, #15
 80059f4:	683a      	ldr	r2, [r7, #0]
 80059f6:	429a      	cmp	r2, r3
 80059f8:	d910      	bls.n	8005a1c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80059fa:	4b8e      	ldr	r3, [pc, #568]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f023 020f 	bic.w	r2, r3, #15
 8005a02:	498c      	ldr	r1, [pc, #560]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	4313      	orrs	r3, r2
 8005a08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a0a:	4b8a      	ldr	r3, [pc, #552]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	f003 030f 	and.w	r3, r3, #15
 8005a12:	683a      	ldr	r2, [r7, #0]
 8005a14:	429a      	cmp	r2, r3
 8005a16:	d001      	beq.n	8005a1c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005a18:	2301      	movs	r3, #1
 8005a1a:	e106      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	f003 0301 	and.w	r3, r3, #1
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d073      	beq.n	8005b10 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	685b      	ldr	r3, [r3, #4]
 8005a2c:	2b03      	cmp	r3, #3
 8005a2e:	d129      	bne.n	8005a84 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a30:	4b81      	ldr	r3, [pc, #516]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d101      	bne.n	8005a40 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005a3c:	2301      	movs	r3, #1
 8005a3e:	e0f4      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005a40:	f000 f966 	bl	8005d10 <RCC_GetSysClockFreqFromPLLSource>
 8005a44:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005a46:	693b      	ldr	r3, [r7, #16]
 8005a48:	4a7c      	ldr	r2, [pc, #496]	; (8005c3c <HAL_RCC_ClockConfig+0x268>)
 8005a4a:	4293      	cmp	r3, r2
 8005a4c:	d93f      	bls.n	8005ace <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a4e:	4b7a      	ldr	r3, [pc, #488]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a50:	689b      	ldr	r3, [r3, #8]
 8005a52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d009      	beq.n	8005a6e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d033      	beq.n	8005ace <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d12f      	bne.n	8005ace <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005a6e:	4b72      	ldr	r3, [pc, #456]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a70:	689b      	ldr	r3, [r3, #8]
 8005a72:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005a76:	4a70      	ldr	r2, [pc, #448]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a78:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a7c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005a7e:	2380      	movs	r3, #128	; 0x80
 8005a80:	617b      	str	r3, [r7, #20]
 8005a82:	e024      	b.n	8005ace <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	685b      	ldr	r3, [r3, #4]
 8005a88:	2b02      	cmp	r3, #2
 8005a8a:	d107      	bne.n	8005a9c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005a8c:	4b6a      	ldr	r3, [pc, #424]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d109      	bne.n	8005aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e0c6      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005a9c:	4b66      	ldr	r3, [pc, #408]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d101      	bne.n	8005aac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005aa8:	2301      	movs	r3, #1
 8005aaa:	e0be      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005aac:	f000 f8ce 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8005ab0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005ab2:	693b      	ldr	r3, [r7, #16]
 8005ab4:	4a61      	ldr	r2, [pc, #388]	; (8005c3c <HAL_RCC_ClockConfig+0x268>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d909      	bls.n	8005ace <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005aba:	4b5f      	ldr	r3, [pc, #380]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005abc:	689b      	ldr	r3, [r3, #8]
 8005abe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ac2:	4a5d      	ldr	r2, [pc, #372]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005ac4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005ac8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005aca:	2380      	movs	r3, #128	; 0x80
 8005acc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005ace:	4b5a      	ldr	r3, [pc, #360]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	f023 0203 	bic.w	r2, r3, #3
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	685b      	ldr	r3, [r3, #4]
 8005ada:	4957      	ldr	r1, [pc, #348]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005adc:	4313      	orrs	r3, r2
 8005ade:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005ae0:	f7fc ff0c 	bl	80028fc <HAL_GetTick>
 8005ae4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005ae6:	e00a      	b.n	8005afe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ae8:	f7fc ff08 	bl	80028fc <HAL_GetTick>
 8005aec:	4602      	mov	r2, r0
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	1ad3      	subs	r3, r2, r3
 8005af2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d901      	bls.n	8005afe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005afa:	2303      	movs	r3, #3
 8005afc:	e095      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005afe:	4b4e      	ldr	r3, [pc, #312]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b00:	689b      	ldr	r3, [r3, #8]
 8005b02:	f003 020c 	and.w	r2, r3, #12
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	685b      	ldr	r3, [r3, #4]
 8005b0a:	009b      	lsls	r3, r3, #2
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d1eb      	bne.n	8005ae8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	2b00      	cmp	r3, #0
 8005b1a:	d023      	beq.n	8005b64 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	f003 0304 	and.w	r3, r3, #4
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d005      	beq.n	8005b34 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005b28:	4b43      	ldr	r3, [pc, #268]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b2a:	689b      	ldr	r3, [r3, #8]
 8005b2c:	4a42      	ldr	r2, [pc, #264]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b2e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b32:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	f003 0308 	and.w	r3, r3, #8
 8005b3c:	2b00      	cmp	r3, #0
 8005b3e:	d007      	beq.n	8005b50 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005b40:	4b3d      	ldr	r3, [pc, #244]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005b48:	4a3b      	ldr	r2, [pc, #236]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b4a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005b4e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005b50:	4b39      	ldr	r3, [pc, #228]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b52:	689b      	ldr	r3, [r3, #8]
 8005b54:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	689b      	ldr	r3, [r3, #8]
 8005b5c:	4936      	ldr	r1, [pc, #216]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b5e:	4313      	orrs	r3, r2
 8005b60:	608b      	str	r3, [r1, #8]
 8005b62:	e008      	b.n	8005b76 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005b64:	697b      	ldr	r3, [r7, #20]
 8005b66:	2b80      	cmp	r3, #128	; 0x80
 8005b68:	d105      	bne.n	8005b76 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005b6a:	4b33      	ldr	r3, [pc, #204]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4a32      	ldr	r2, [pc, #200]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005b70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b74:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005b76:	4b2f      	ldr	r3, [pc, #188]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f003 030f 	and.w	r3, r3, #15
 8005b7e:	683a      	ldr	r2, [r7, #0]
 8005b80:	429a      	cmp	r2, r3
 8005b82:	d21d      	bcs.n	8005bc0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b84:	4b2b      	ldr	r3, [pc, #172]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	f023 020f 	bic.w	r2, r3, #15
 8005b8c:	4929      	ldr	r1, [pc, #164]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	4313      	orrs	r3, r2
 8005b92:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005b94:	f7fc feb2 	bl	80028fc <HAL_GetTick>
 8005b98:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b9a:	e00a      	b.n	8005bb2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b9c:	f7fc feae 	bl	80028fc <HAL_GetTick>
 8005ba0:	4602      	mov	r2, r0
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	1ad3      	subs	r3, r2, r3
 8005ba6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005baa:	4293      	cmp	r3, r2
 8005bac:	d901      	bls.n	8005bb2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005bae:	2303      	movs	r3, #3
 8005bb0:	e03b      	b.n	8005c2a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005bb2:	4b20      	ldr	r3, [pc, #128]	; (8005c34 <HAL_RCC_ClockConfig+0x260>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	f003 030f 	and.w	r3, r3, #15
 8005bba:	683a      	ldr	r2, [r7, #0]
 8005bbc:	429a      	cmp	r2, r3
 8005bbe:	d1ed      	bne.n	8005b9c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 0304 	and.w	r3, r3, #4
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d008      	beq.n	8005bde <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005bcc:	4b1a      	ldr	r3, [pc, #104]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	4917      	ldr	r1, [pc, #92]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005bda:	4313      	orrs	r3, r2
 8005bdc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f003 0308 	and.w	r3, r3, #8
 8005be6:	2b00      	cmp	r3, #0
 8005be8:	d009      	beq.n	8005bfe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005bea:	4b13      	ldr	r3, [pc, #76]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005bec:	689b      	ldr	r3, [r3, #8]
 8005bee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	00db      	lsls	r3, r3, #3
 8005bf8:	490f      	ldr	r1, [pc, #60]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005bfa:	4313      	orrs	r3, r2
 8005bfc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005bfe:	f000 f825 	bl	8005c4c <HAL_RCC_GetSysClockFreq>
 8005c02:	4602      	mov	r2, r0
 8005c04:	4b0c      	ldr	r3, [pc, #48]	; (8005c38 <HAL_RCC_ClockConfig+0x264>)
 8005c06:	689b      	ldr	r3, [r3, #8]
 8005c08:	091b      	lsrs	r3, r3, #4
 8005c0a:	f003 030f 	and.w	r3, r3, #15
 8005c0e:	490c      	ldr	r1, [pc, #48]	; (8005c40 <HAL_RCC_ClockConfig+0x26c>)
 8005c10:	5ccb      	ldrb	r3, [r1, r3]
 8005c12:	f003 031f 	and.w	r3, r3, #31
 8005c16:	fa22 f303 	lsr.w	r3, r2, r3
 8005c1a:	4a0a      	ldr	r2, [pc, #40]	; (8005c44 <HAL_RCC_ClockConfig+0x270>)
 8005c1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005c1e:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <HAL_RCC_ClockConfig+0x274>)
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	4618      	mov	r0, r3
 8005c24:	f7fc fe1e 	bl	8002864 <HAL_InitTick>
 8005c28:	4603      	mov	r3, r0
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3718      	adds	r7, #24
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	bd80      	pop	{r7, pc}
 8005c32:	bf00      	nop
 8005c34:	40022000 	.word	0x40022000
 8005c38:	40021000 	.word	0x40021000
 8005c3c:	04c4b400 	.word	0x04c4b400
 8005c40:	08009f0c 	.word	0x08009f0c
 8005c44:	20000004 	.word	0x20000004
 8005c48:	20000008 	.word	0x20000008

08005c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005c4c:	b480      	push	{r7}
 8005c4e:	b087      	sub	sp, #28
 8005c50:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005c52:	4b2c      	ldr	r3, [pc, #176]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c54:	689b      	ldr	r3, [r3, #8]
 8005c56:	f003 030c 	and.w	r3, r3, #12
 8005c5a:	2b04      	cmp	r3, #4
 8005c5c:	d102      	bne.n	8005c64 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005c5e:	4b2a      	ldr	r3, [pc, #168]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005c60:	613b      	str	r3, [r7, #16]
 8005c62:	e047      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005c64:	4b27      	ldr	r3, [pc, #156]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c66:	689b      	ldr	r3, [r3, #8]
 8005c68:	f003 030c 	and.w	r3, r3, #12
 8005c6c:	2b08      	cmp	r3, #8
 8005c6e:	d102      	bne.n	8005c76 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005c70:	4b26      	ldr	r3, [pc, #152]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005c72:	613b      	str	r3, [r7, #16]
 8005c74:	e03e      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005c76:	4b23      	ldr	r3, [pc, #140]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c78:	689b      	ldr	r3, [r3, #8]
 8005c7a:	f003 030c 	and.w	r3, r3, #12
 8005c7e:	2b0c      	cmp	r3, #12
 8005c80:	d136      	bne.n	8005cf0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005c82:	4b20      	ldr	r3, [pc, #128]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	f003 0303 	and.w	r3, r3, #3
 8005c8a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005c8c:	4b1d      	ldr	r3, [pc, #116]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005c8e:	68db      	ldr	r3, [r3, #12]
 8005c90:	091b      	lsrs	r3, r3, #4
 8005c92:	f003 030f 	and.w	r3, r3, #15
 8005c96:	3301      	adds	r3, #1
 8005c98:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2b03      	cmp	r3, #3
 8005c9e:	d10c      	bne.n	8005cba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005ca0:	4a1a      	ldr	r2, [pc, #104]	; (8005d0c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ca8:	4a16      	ldr	r2, [pc, #88]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005caa:	68d2      	ldr	r2, [r2, #12]
 8005cac:	0a12      	lsrs	r2, r2, #8
 8005cae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005cb2:	fb02 f303 	mul.w	r3, r2, r3
 8005cb6:	617b      	str	r3, [r7, #20]
      break;
 8005cb8:	e00c      	b.n	8005cd4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005cba:	4a13      	ldr	r2, [pc, #76]	; (8005d08 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005cbc:	68bb      	ldr	r3, [r7, #8]
 8005cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cc4:	68d2      	ldr	r2, [r2, #12]
 8005cc6:	0a12      	lsrs	r2, r2, #8
 8005cc8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ccc:	fb02 f303 	mul.w	r3, r2, r3
 8005cd0:	617b      	str	r3, [r7, #20]
      break;
 8005cd2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005cd4:	4b0b      	ldr	r3, [pc, #44]	; (8005d04 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	0e5b      	lsrs	r3, r3, #25
 8005cda:	f003 0303 	and.w	r3, r3, #3
 8005cde:	3301      	adds	r3, #1
 8005ce0:	005b      	lsls	r3, r3, #1
 8005ce2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005ce4:	697a      	ldr	r2, [r7, #20]
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	613b      	str	r3, [r7, #16]
 8005cee:	e001      	b.n	8005cf4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005cf4:	693b      	ldr	r3, [r7, #16]
}
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	371c      	adds	r7, #28
 8005cfa:	46bd      	mov	sp, r7
 8005cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d00:	4770      	bx	lr
 8005d02:	bf00      	nop
 8005d04:	40021000 	.word	0x40021000
 8005d08:	00f42400 	.word	0x00f42400
 8005d0c:	00b71b00 	.word	0x00b71b00

08005d10 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005d10:	b480      	push	{r7}
 8005d12:	b087      	sub	sp, #28
 8005d14:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005d16:	4b1e      	ldr	r3, [pc, #120]	; (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	f003 0303 	and.w	r3, r3, #3
 8005d1e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005d20:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d22:	68db      	ldr	r3, [r3, #12]
 8005d24:	091b      	lsrs	r3, r3, #4
 8005d26:	f003 030f 	and.w	r3, r3, #15
 8005d2a:	3301      	adds	r3, #1
 8005d2c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005d2e:	693b      	ldr	r3, [r7, #16]
 8005d30:	2b03      	cmp	r3, #3
 8005d32:	d10c      	bne.n	8005d4e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d34:	4a17      	ldr	r2, [pc, #92]	; (8005d94 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d3c:	4a14      	ldr	r2, [pc, #80]	; (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d3e:	68d2      	ldr	r2, [r2, #12]
 8005d40:	0a12      	lsrs	r2, r2, #8
 8005d42:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d46:	fb02 f303 	mul.w	r3, r2, r3
 8005d4a:	617b      	str	r3, [r7, #20]
    break;
 8005d4c:	e00c      	b.n	8005d68 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005d4e:	4a12      	ldr	r2, [pc, #72]	; (8005d98 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d56:	4a0e      	ldr	r2, [pc, #56]	; (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d58:	68d2      	ldr	r2, [r2, #12]
 8005d5a:	0a12      	lsrs	r2, r2, #8
 8005d5c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005d60:	fb02 f303 	mul.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]
    break;
 8005d66:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005d68:	4b09      	ldr	r3, [pc, #36]	; (8005d90 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005d6a:	68db      	ldr	r3, [r3, #12]
 8005d6c:	0e5b      	lsrs	r3, r3, #25
 8005d6e:	f003 0303 	and.w	r3, r3, #3
 8005d72:	3301      	adds	r3, #1
 8005d74:	005b      	lsls	r3, r3, #1
 8005d76:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005d78:	697a      	ldr	r2, [r7, #20]
 8005d7a:	68bb      	ldr	r3, [r7, #8]
 8005d7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d80:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005d82:	687b      	ldr	r3, [r7, #4]
}
 8005d84:	4618      	mov	r0, r3
 8005d86:	371c      	adds	r7, #28
 8005d88:	46bd      	mov	sp, r7
 8005d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8e:	4770      	bx	lr
 8005d90:	40021000 	.word	0x40021000
 8005d94:	00b71b00 	.word	0x00b71b00
 8005d98:	00f42400 	.word	0x00f42400

08005d9c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	b086      	sub	sp, #24
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005da4:	2300      	movs	r3, #0
 8005da6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005da8:	2300      	movs	r3, #0
 8005daa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	f000 8098 	beq.w	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dbe:	4b43      	ldr	r3, [pc, #268]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d10d      	bne.n	8005de6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dca:	4b40      	ldr	r3, [pc, #256]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dce:	4a3f      	ldr	r2, [pc, #252]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	6593      	str	r3, [r2, #88]	; 0x58
 8005dd6:	4b3d      	ldr	r3, [pc, #244]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005dd8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de2:	2301      	movs	r3, #1
 8005de4:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005de6:	4b3a      	ldr	r3, [pc, #232]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	4a39      	ldr	r2, [pc, #228]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005df0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005df2:	f7fc fd83 	bl	80028fc <HAL_GetTick>
 8005df6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005df8:	e009      	b.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005dfa:	f7fc fd7f 	bl	80028fc <HAL_GetTick>
 8005dfe:	4602      	mov	r2, r0
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	1ad3      	subs	r3, r2, r3
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d902      	bls.n	8005e0e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005e08:	2303      	movs	r3, #3
 8005e0a:	74fb      	strb	r3, [r7, #19]
        break;
 8005e0c:	e005      	b.n	8005e1a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005e0e:	4b30      	ldr	r3, [pc, #192]	; (8005ed0 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d0ef      	beq.n	8005dfa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005e1a:	7cfb      	ldrb	r3, [r7, #19]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d159      	bne.n	8005ed4 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005e20:	4b2a      	ldr	r3, [pc, #168]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e2a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005e2c:	697b      	ldr	r3, [r7, #20]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d01e      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	429a      	cmp	r2, r3
 8005e3a:	d019      	beq.n	8005e70 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005e3c:	4b23      	ldr	r3, [pc, #140]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e46:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005e48:	4b20      	ldr	r3, [pc, #128]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e4e:	4a1f      	ldr	r2, [pc, #124]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005e58:	4b1c      	ldr	r3, [pc, #112]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005e5e:	4a1b      	ldr	r2, [pc, #108]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e60:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e64:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005e68:	4a18      	ldr	r2, [pc, #96]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e6a:	697b      	ldr	r3, [r7, #20]
 8005e6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f003 0301 	and.w	r3, r3, #1
 8005e76:	2b00      	cmp	r3, #0
 8005e78:	d016      	beq.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e7a:	f7fc fd3f 	bl	80028fc <HAL_GetTick>
 8005e7e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e80:	e00b      	b.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005e82:	f7fc fd3b 	bl	80028fc <HAL_GetTick>
 8005e86:	4602      	mov	r2, r0
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	1ad3      	subs	r3, r2, r3
 8005e8c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e90:	4293      	cmp	r3, r2
 8005e92:	d902      	bls.n	8005e9a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005e94:	2303      	movs	r3, #3
 8005e96:	74fb      	strb	r3, [r7, #19]
            break;
 8005e98:	e006      	b.n	8005ea8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005e9a:	4b0c      	ldr	r3, [pc, #48]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005e9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ea0:	f003 0302 	and.w	r3, r3, #2
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0ec      	beq.n	8005e82 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005ea8:	7cfb      	ldrb	r3, [r7, #19]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10b      	bne.n	8005ec6 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005eae:	4b07      	ldr	r3, [pc, #28]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005eb0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eb4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ebc:	4903      	ldr	r1, [pc, #12]	; (8005ecc <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005ec4:	e008      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005ec6:	7cfb      	ldrb	r3, [r7, #19]
 8005ec8:	74bb      	strb	r3, [r7, #18]
 8005eca:	e005      	b.n	8005ed8 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005ecc:	40021000 	.word	0x40021000
 8005ed0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005ed4:	7cfb      	ldrb	r3, [r7, #19]
 8005ed6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed8:	7c7b      	ldrb	r3, [r7, #17]
 8005eda:	2b01      	cmp	r3, #1
 8005edc:	d105      	bne.n	8005eea <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ede:	4ba6      	ldr	r3, [pc, #664]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ee2:	4aa5      	ldr	r2, [pc, #660]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ee4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	f003 0301 	and.w	r3, r3, #1
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d00a      	beq.n	8005f0c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005ef6:	4ba0      	ldr	r3, [pc, #640]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ef8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005efc:	f023 0203 	bic.w	r2, r3, #3
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	685b      	ldr	r3, [r3, #4]
 8005f04:	499c      	ldr	r1, [pc, #624]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f06:	4313      	orrs	r3, r2
 8005f08:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f003 0302 	and.w	r3, r3, #2
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d00a      	beq.n	8005f2e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005f18:	4b97      	ldr	r3, [pc, #604]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f1e:	f023 020c 	bic.w	r2, r3, #12
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	689b      	ldr	r3, [r3, #8]
 8005f26:	4994      	ldr	r1, [pc, #592]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	681b      	ldr	r3, [r3, #0]
 8005f32:	f003 0304 	and.w	r3, r3, #4
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d00a      	beq.n	8005f50 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005f3a:	4b8f      	ldr	r3, [pc, #572]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f3c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f40:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	498b      	ldr	r1, [pc, #556]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f4a:	4313      	orrs	r3, r2
 8005f4c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f003 0308 	and.w	r3, r3, #8
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00a      	beq.n	8005f72 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005f5c:	4b86      	ldr	r3, [pc, #536]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f62:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	691b      	ldr	r3, [r3, #16]
 8005f6a:	4983      	ldr	r1, [pc, #524]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	f003 0320 	and.w	r3, r3, #32
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00a      	beq.n	8005f94 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005f7e:	4b7e      	ldr	r3, [pc, #504]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005f84:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	695b      	ldr	r3, [r3, #20]
 8005f8c:	497a      	ldr	r1, [pc, #488]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005f8e:	4313      	orrs	r3, r2
 8005f90:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d00a      	beq.n	8005fb6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005fa0:	4b75      	ldr	r3, [pc, #468]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fa2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fa6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	699b      	ldr	r3, [r3, #24]
 8005fae:	4972      	ldr	r1, [pc, #456]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fb0:	4313      	orrs	r3, r2
 8005fb2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00a      	beq.n	8005fd8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005fc2:	4b6d      	ldr	r3, [pc, #436]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fc8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	69db      	ldr	r3, [r3, #28]
 8005fd0:	4969      	ldr	r1, [pc, #420]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	d00a      	beq.n	8005ffa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005fe4:	4b64      	ldr	r3, [pc, #400]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005fe6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fea:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
 8005ff2:	4961      	ldr	r1, [pc, #388]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006002:	2b00      	cmp	r3, #0
 8006004:	d00a      	beq.n	800601c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006006:	4b5c      	ldr	r3, [pc, #368]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006008:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800600c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	4958      	ldr	r1, [pc, #352]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006016:	4313      	orrs	r3, r2
 8006018:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006024:	2b00      	cmp	r3, #0
 8006026:	d015      	beq.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006028:	4b53      	ldr	r3, [pc, #332]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800602a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800602e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006036:	4950      	ldr	r1, [pc, #320]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006038:	4313      	orrs	r3, r2
 800603a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006042:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006046:	d105      	bne.n	8006054 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006048:	4b4b      	ldr	r3, [pc, #300]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604a:	68db      	ldr	r3, [r3, #12]
 800604c:	4a4a      	ldr	r2, [pc, #296]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800604e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006052:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800605c:	2b00      	cmp	r3, #0
 800605e:	d015      	beq.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8006060:	4b45      	ldr	r3, [pc, #276]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006062:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006066:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800606e:	4942      	ldr	r1, [pc, #264]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006070:	4313      	orrs	r3, r2
 8006072:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800607a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800607e:	d105      	bne.n	800608c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006080:	4b3d      	ldr	r3, [pc, #244]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006082:	68db      	ldr	r3, [r3, #12]
 8006084:	4a3c      	ldr	r2, [pc, #240]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006086:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800608a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006094:	2b00      	cmp	r3, #0
 8006096:	d015      	beq.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006098:	4b37      	ldr	r3, [pc, #220]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800609e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	4934      	ldr	r1, [pc, #208]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060a8:	4313      	orrs	r3, r2
 80060aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80060b6:	d105      	bne.n	80060c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060b8:	4b2f      	ldr	r3, [pc, #188]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ba:	68db      	ldr	r3, [r3, #12]
 80060bc:	4a2e      	ldr	r2, [pc, #184]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060c2:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d015      	beq.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80060d0:	4b29      	ldr	r3, [pc, #164]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060de:	4926      	ldr	r1, [pc, #152]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e0:	4313      	orrs	r3, r2
 80060e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060ee:	d105      	bne.n	80060fc <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80060f0:	4b21      	ldr	r3, [pc, #132]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	4a20      	ldr	r2, [pc, #128]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80060fa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006104:	2b00      	cmp	r3, #0
 8006106:	d015      	beq.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006108:	4b1b      	ldr	r3, [pc, #108]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800610a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800610e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006116:	4918      	ldr	r1, [pc, #96]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006118:	4313      	orrs	r3, r2
 800611a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006126:	d105      	bne.n	8006134 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006128:	4b13      	ldr	r3, [pc, #76]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	4a12      	ldr	r2, [pc, #72]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800612e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006132:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800613c:	2b00      	cmp	r3, #0
 800613e:	d015      	beq.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006140:	4b0d      	ldr	r3, [pc, #52]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006142:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006146:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	490a      	ldr	r1, [pc, #40]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006150:	4313      	orrs	r3, r2
 8006152:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800615a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800615e:	d105      	bne.n	800616c <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8006160:	4b05      	ldr	r3, [pc, #20]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	4a04      	ldr	r2, [pc, #16]	; (8006178 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006166:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800616a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800616c:	7cbb      	ldrb	r3, [r7, #18]
}
 800616e:	4618      	mov	r0, r3
 8006170:	3718      	adds	r7, #24
 8006172:	46bd      	mov	sp, r7
 8006174:	bd80      	pop	{r7, pc}
 8006176:	bf00      	nop
 8006178:	40021000 	.word	0x40021000

0800617c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800617c:	b580      	push	{r7, lr}
 800617e:	b084      	sub	sp, #16
 8006180:	af00      	add	r7, sp, #0
 8006182:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d101      	bne.n	800618e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800618a:	2301      	movs	r3, #1
 800618c:	e09d      	b.n	80062ca <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006192:	2b00      	cmp	r3, #0
 8006194:	d108      	bne.n	80061a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	685b      	ldr	r3, [r3, #4]
 800619a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800619e:	d009      	beq.n	80061b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2200      	movs	r2, #0
 80061a4:	61da      	str	r2, [r3, #28]
 80061a6:	e005      	b.n	80061b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	2200      	movs	r2, #0
 80061b2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	2200      	movs	r2, #0
 80061b8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80061c0:	b2db      	uxtb	r3, r3
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d106      	bne.n	80061d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2200      	movs	r2, #0
 80061ca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f7fc f8a0 	bl	8002314 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2202      	movs	r2, #2
 80061d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	681a      	ldr	r2, [r3, #0]
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80061ea:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	68db      	ldr	r3, [r3, #12]
 80061f0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80061f4:	d902      	bls.n	80061fc <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80061f6:	2300      	movs	r3, #0
 80061f8:	60fb      	str	r3, [r7, #12]
 80061fa:	e002      	b.n	8006202 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80061fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006200:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	68db      	ldr	r3, [r3, #12]
 8006206:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800620a:	d007      	beq.n	800621c <HAL_SPI_Init+0xa0>
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	68db      	ldr	r3, [r3, #12]
 8006210:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006214:	d002      	beq.n	800621c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	2200      	movs	r2, #0
 800621a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800622c:	431a      	orrs	r2, r3
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	691b      	ldr	r3, [r3, #16]
 8006232:	f003 0302 	and.w	r3, r3, #2
 8006236:	431a      	orrs	r2, r3
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	695b      	ldr	r3, [r3, #20]
 800623c:	f003 0301 	and.w	r3, r3, #1
 8006240:	431a      	orrs	r2, r3
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	699b      	ldr	r3, [r3, #24]
 8006246:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800624a:	431a      	orrs	r2, r3
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	69db      	ldr	r3, [r3, #28]
 8006250:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006254:	431a      	orrs	r2, r3
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	6a1b      	ldr	r3, [r3, #32]
 800625a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800625e:	ea42 0103 	orr.w	r1, r2, r3
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006266:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	430a      	orrs	r2, r1
 8006270:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	699b      	ldr	r3, [r3, #24]
 8006276:	0c1b      	lsrs	r3, r3, #16
 8006278:	f003 0204 	and.w	r2, r3, #4
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006280:	f003 0310 	and.w	r3, r3, #16
 8006284:	431a      	orrs	r2, r3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800628a:	f003 0308 	and.w	r3, r3, #8
 800628e:	431a      	orrs	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	68db      	ldr	r3, [r3, #12]
 8006294:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006298:	ea42 0103 	orr.w	r1, r2, r3
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	430a      	orrs	r2, r1
 80062a8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	69da      	ldr	r2, [r3, #28]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062b8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2201      	movs	r2, #1
 80062c4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80062c8:	2300      	movs	r3, #0
}
 80062ca:	4618      	mov	r0, r3
 80062cc:	3710      	adds	r7, #16
 80062ce:	46bd      	mov	sp, r7
 80062d0:	bd80      	pop	{r7, pc}

080062d2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80062d2:	b580      	push	{r7, lr}
 80062d4:	b088      	sub	sp, #32
 80062d6:	af00      	add	r7, sp, #0
 80062d8:	60f8      	str	r0, [r7, #12]
 80062da:	60b9      	str	r1, [r7, #8]
 80062dc:	603b      	str	r3, [r7, #0]
 80062de:	4613      	mov	r3, r2
 80062e0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80062e2:	2300      	movs	r3, #0
 80062e4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80062ec:	2b01      	cmp	r3, #1
 80062ee:	d101      	bne.n	80062f4 <HAL_SPI_Transmit+0x22>
 80062f0:	2302      	movs	r3, #2
 80062f2:	e158      	b.n	80065a6 <HAL_SPI_Transmit+0x2d4>
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2201      	movs	r2, #1
 80062f8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80062fc:	f7fc fafe 	bl	80028fc <HAL_GetTick>
 8006300:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006302:	88fb      	ldrh	r3, [r7, #6]
 8006304:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800630c:	b2db      	uxtb	r3, r3
 800630e:	2b01      	cmp	r3, #1
 8006310:	d002      	beq.n	8006318 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006312:	2302      	movs	r3, #2
 8006314:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006316:	e13d      	b.n	8006594 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	2b00      	cmp	r3, #0
 800631c:	d002      	beq.n	8006324 <HAL_SPI_Transmit+0x52>
 800631e:	88fb      	ldrh	r3, [r7, #6]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d102      	bne.n	800632a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006324:	2301      	movs	r3, #1
 8006326:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006328:	e134      	b.n	8006594 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	2203      	movs	r2, #3
 800632e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	2200      	movs	r2, #0
 8006336:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800633e:	68fb      	ldr	r3, [r7, #12]
 8006340:	88fa      	ldrh	r2, [r7, #6]
 8006342:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006344:	68fb      	ldr	r3, [r7, #12]
 8006346:	88fa      	ldrh	r2, [r7, #6]
 8006348:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	2200      	movs	r2, #0
 800634e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	2200      	movs	r2, #0
 8006354:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	2200      	movs	r2, #0
 800635c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	2200      	movs	r2, #0
 8006364:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2200      	movs	r2, #0
 800636a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006374:	d10f      	bne.n	8006396 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	681a      	ldr	r2, [r3, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006384:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	681a      	ldr	r2, [r3, #0]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006394:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a0:	2b40      	cmp	r3, #64	; 0x40
 80063a2:	d007      	beq.n	80063b4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	681a      	ldr	r2, [r3, #0]
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80063bc:	d94b      	bls.n	8006456 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	2b00      	cmp	r3, #0
 80063c4:	d002      	beq.n	80063cc <HAL_SPI_Transmit+0xfa>
 80063c6:	8afb      	ldrh	r3, [r7, #22]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d13e      	bne.n	800644a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063d0:	881a      	ldrh	r2, [r3, #0]
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063dc:	1c9a      	adds	r2, r3, #2
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	3b01      	subs	r3, #1
 80063ea:	b29a      	uxth	r2, r3
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80063f0:	e02b      	b.n	800644a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80063f2:	68fb      	ldr	r3, [r7, #12]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	689b      	ldr	r3, [r3, #8]
 80063f8:	f003 0302 	and.w	r3, r3, #2
 80063fc:	2b02      	cmp	r3, #2
 80063fe:	d112      	bne.n	8006426 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006404:	881a      	ldrh	r2, [r3, #0]
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800640c:	68fb      	ldr	r3, [r7, #12]
 800640e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006410:	1c9a      	adds	r2, r3, #2
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800641a:	b29b      	uxth	r3, r3
 800641c:	3b01      	subs	r3, #1
 800641e:	b29a      	uxth	r2, r3
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006424:	e011      	b.n	800644a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006426:	f7fc fa69 	bl	80028fc <HAL_GetTick>
 800642a:	4602      	mov	r2, r0
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	1ad3      	subs	r3, r2, r3
 8006430:	683a      	ldr	r2, [r7, #0]
 8006432:	429a      	cmp	r2, r3
 8006434:	d803      	bhi.n	800643e <HAL_SPI_Transmit+0x16c>
 8006436:	683b      	ldr	r3, [r7, #0]
 8006438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643c:	d102      	bne.n	8006444 <HAL_SPI_Transmit+0x172>
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d102      	bne.n	800644a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006444:	2303      	movs	r3, #3
 8006446:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006448:	e0a4      	b.n	8006594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800644a:	68fb      	ldr	r3, [r7, #12]
 800644c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800644e:	b29b      	uxth	r3, r3
 8006450:	2b00      	cmp	r3, #0
 8006452:	d1ce      	bne.n	80063f2 <HAL_SPI_Transmit+0x120>
 8006454:	e07c      	b.n	8006550 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_SPI_Transmit+0x192>
 800645e:	8afb      	ldrh	r3, [r7, #22]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d170      	bne.n	8006546 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006468:	b29b      	uxth	r3, r3
 800646a:	2b01      	cmp	r3, #1
 800646c:	d912      	bls.n	8006494 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006472:	881a      	ldrh	r2, [r3, #0]
 8006474:	68fb      	ldr	r3, [r7, #12]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800647e:	1c9a      	adds	r2, r3, #2
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006488:	b29b      	uxth	r3, r3
 800648a:	3b02      	subs	r3, #2
 800648c:	b29a      	uxth	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006492:	e058      	b.n	8006546 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	330c      	adds	r3, #12
 800649e:	7812      	ldrb	r2, [r2, #0]
 80064a0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064a6:	1c5a      	adds	r2, r3, #1
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064b0:	b29b      	uxth	r3, r3
 80064b2:	3b01      	subs	r3, #1
 80064b4:	b29a      	uxth	r2, r3
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80064ba:	e044      	b.n	8006546 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	689b      	ldr	r3, [r3, #8]
 80064c2:	f003 0302 	and.w	r3, r3, #2
 80064c6:	2b02      	cmp	r3, #2
 80064c8:	d12b      	bne.n	8006522 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ce:	b29b      	uxth	r3, r3
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d912      	bls.n	80064fa <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064d8:	881a      	ldrh	r2, [r3, #0]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e4:	1c9a      	adds	r2, r3, #2
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80064ee:	b29b      	uxth	r3, r3
 80064f0:	3b02      	subs	r3, #2
 80064f2:	b29a      	uxth	r2, r3
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80064f8:	e025      	b.n	8006546 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	681b      	ldr	r3, [r3, #0]
 8006502:	330c      	adds	r3, #12
 8006504:	7812      	ldrb	r2, [r2, #0]
 8006506:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800650c:	1c5a      	adds	r2, r3, #1
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006516:	b29b      	uxth	r3, r3
 8006518:	3b01      	subs	r3, #1
 800651a:	b29a      	uxth	r2, r3
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006520:	e011      	b.n	8006546 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006522:	f7fc f9eb 	bl	80028fc <HAL_GetTick>
 8006526:	4602      	mov	r2, r0
 8006528:	69bb      	ldr	r3, [r7, #24]
 800652a:	1ad3      	subs	r3, r2, r3
 800652c:	683a      	ldr	r2, [r7, #0]
 800652e:	429a      	cmp	r2, r3
 8006530:	d803      	bhi.n	800653a <HAL_SPI_Transmit+0x268>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006538:	d102      	bne.n	8006540 <HAL_SPI_Transmit+0x26e>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d102      	bne.n	8006546 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006540:	2303      	movs	r3, #3
 8006542:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006544:	e026      	b.n	8006594 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800654a:	b29b      	uxth	r3, r3
 800654c:	2b00      	cmp	r3, #0
 800654e:	d1b5      	bne.n	80064bc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006550:	69ba      	ldr	r2, [r7, #24]
 8006552:	6839      	ldr	r1, [r7, #0]
 8006554:	68f8      	ldr	r0, [r7, #12]
 8006556:	f000 fce3 	bl	8006f20 <SPI_EndRxTxTransaction>
 800655a:	4603      	mov	r3, r0
 800655c:	2b00      	cmp	r3, #0
 800655e:	d002      	beq.n	8006566 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	2220      	movs	r2, #32
 8006564:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	689b      	ldr	r3, [r3, #8]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10a      	bne.n	8006584 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800656e:	2300      	movs	r3, #0
 8006570:	613b      	str	r3, [r7, #16]
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	613b      	str	r3, [r7, #16]
 800657a:	68fb      	ldr	r3, [r7, #12]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	689b      	ldr	r3, [r3, #8]
 8006580:	613b      	str	r3, [r7, #16]
 8006582:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006588:	2b00      	cmp	r3, #0
 800658a:	d002      	beq.n	8006592 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 800658c:	2301      	movs	r3, #1
 800658e:	77fb      	strb	r3, [r7, #31]
 8006590:	e000      	b.n	8006594 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006592:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	2201      	movs	r2, #1
 8006598:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	2200      	movs	r2, #0
 80065a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80065a4:	7ffb      	ldrb	r3, [r7, #31]
}
 80065a6:	4618      	mov	r0, r3
 80065a8:	3720      	adds	r7, #32
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b088      	sub	sp, #32
 80065b2:	af02      	add	r7, sp, #8
 80065b4:	60f8      	str	r0, [r7, #12]
 80065b6:	60b9      	str	r1, [r7, #8]
 80065b8:	603b      	str	r3, [r7, #0]
 80065ba:	4613      	mov	r3, r2
 80065bc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80065be:	2300      	movs	r3, #0
 80065c0:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	685b      	ldr	r3, [r3, #4]
 80065c6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80065ca:	d112      	bne.n	80065f2 <HAL_SPI_Receive+0x44>
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	689b      	ldr	r3, [r3, #8]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d10e      	bne.n	80065f2 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2204      	movs	r2, #4
 80065d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80065dc:	88fa      	ldrh	r2, [r7, #6]
 80065de:	683b      	ldr	r3, [r7, #0]
 80065e0:	9300      	str	r3, [sp, #0]
 80065e2:	4613      	mov	r3, r2
 80065e4:	68ba      	ldr	r2, [r7, #8]
 80065e6:	68b9      	ldr	r1, [r7, #8]
 80065e8:	68f8      	ldr	r0, [r7, #12]
 80065ea:	f000 f910 	bl	800680e <HAL_SPI_TransmitReceive>
 80065ee:	4603      	mov	r3, r0
 80065f0:	e109      	b.n	8006806 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d101      	bne.n	8006600 <HAL_SPI_Receive+0x52>
 80065fc:	2302      	movs	r3, #2
 80065fe:	e102      	b.n	8006806 <HAL_SPI_Receive+0x258>
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	2201      	movs	r2, #1
 8006604:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006608:	f7fc f978 	bl	80028fc <HAL_GetTick>
 800660c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b01      	cmp	r3, #1
 8006618:	d002      	beq.n	8006620 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800661a:	2302      	movs	r3, #2
 800661c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800661e:	e0e9      	b.n	80067f4 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006620:	68bb      	ldr	r3, [r7, #8]
 8006622:	2b00      	cmp	r3, #0
 8006624:	d002      	beq.n	800662c <HAL_SPI_Receive+0x7e>
 8006626:	88fb      	ldrh	r3, [r7, #6]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d102      	bne.n	8006632 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800662c:	2301      	movs	r3, #1
 800662e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006630:	e0e0      	b.n	80067f4 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2204      	movs	r2, #4
 8006636:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	68ba      	ldr	r2, [r7, #8]
 8006644:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	88fa      	ldrh	r2, [r7, #6]
 800664a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	88fa      	ldrh	r2, [r7, #6]
 8006652:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	2200      	movs	r2, #0
 800665a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	2200      	movs	r2, #0
 8006660:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	2200      	movs	r2, #0
 8006666:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	2200      	movs	r2, #0
 800666c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	2200      	movs	r2, #0
 8006672:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	68db      	ldr	r3, [r3, #12]
 8006678:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800667c:	d908      	bls.n	8006690 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	685a      	ldr	r2, [r3, #4]
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800668c:	605a      	str	r2, [r3, #4]
 800668e:	e007      	b.n	80066a0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	685a      	ldr	r2, [r3, #4]
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800669e:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80066a8:	d10f      	bne.n	80066ca <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	681b      	ldr	r3, [r3, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80066b8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	681a      	ldr	r2, [r3, #0]
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80066c8:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	681b      	ldr	r3, [r3, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80066d4:	2b40      	cmp	r3, #64	; 0x40
 80066d6:	d007      	beq.n	80066e8 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	681a      	ldr	r2, [r3, #0]
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80066e6:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	68db      	ldr	r3, [r3, #12]
 80066ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80066f0:	d867      	bhi.n	80067c2 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80066f2:	e030      	b.n	8006756 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	689b      	ldr	r3, [r3, #8]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b01      	cmp	r3, #1
 8006700:	d117      	bne.n	8006732 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f103 020c 	add.w	r2, r3, #12
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	7812      	ldrb	r2, [r2, #0]
 8006710:	b2d2      	uxtb	r2, r2
 8006712:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006718:	1c5a      	adds	r2, r3, #1
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006724:	b29b      	uxth	r3, r3
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006730:	e011      	b.n	8006756 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006732:	f7fc f8e3 	bl	80028fc <HAL_GetTick>
 8006736:	4602      	mov	r2, r0
 8006738:	693b      	ldr	r3, [r7, #16]
 800673a:	1ad3      	subs	r3, r2, r3
 800673c:	683a      	ldr	r2, [r7, #0]
 800673e:	429a      	cmp	r2, r3
 8006740:	d803      	bhi.n	800674a <HAL_SPI_Receive+0x19c>
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d102      	bne.n	8006750 <HAL_SPI_Receive+0x1a2>
 800674a:	683b      	ldr	r3, [r7, #0]
 800674c:	2b00      	cmp	r3, #0
 800674e:	d102      	bne.n	8006756 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006750:	2303      	movs	r3, #3
 8006752:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006754:	e04e      	b.n	80067f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800675c:	b29b      	uxth	r3, r3
 800675e:	2b00      	cmp	r3, #0
 8006760:	d1c8      	bne.n	80066f4 <HAL_SPI_Receive+0x146>
 8006762:	e034      	b.n	80067ce <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	689b      	ldr	r3, [r3, #8]
 800676a:	f003 0301 	and.w	r3, r3, #1
 800676e:	2b01      	cmp	r3, #1
 8006770:	d115      	bne.n	800679e <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	68da      	ldr	r2, [r3, #12]
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800677c:	b292      	uxth	r2, r2
 800677e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006784:	1c9a      	adds	r2, r3, #2
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006790:	b29b      	uxth	r3, r3
 8006792:	3b01      	subs	r3, #1
 8006794:	b29a      	uxth	r2, r3
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800679c:	e011      	b.n	80067c2 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800679e:	f7fc f8ad 	bl	80028fc <HAL_GetTick>
 80067a2:	4602      	mov	r2, r0
 80067a4:	693b      	ldr	r3, [r7, #16]
 80067a6:	1ad3      	subs	r3, r2, r3
 80067a8:	683a      	ldr	r2, [r7, #0]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d803      	bhi.n	80067b6 <HAL_SPI_Receive+0x208>
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067b4:	d102      	bne.n	80067bc <HAL_SPI_Receive+0x20e>
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d102      	bne.n	80067c2 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80067bc:	2303      	movs	r3, #3
 80067be:	75fb      	strb	r3, [r7, #23]
          goto error;
 80067c0:	e018      	b.n	80067f4 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80067c8:	b29b      	uxth	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d1ca      	bne.n	8006764 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80067ce:	693a      	ldr	r2, [r7, #16]
 80067d0:	6839      	ldr	r1, [r7, #0]
 80067d2:	68f8      	ldr	r0, [r7, #12]
 80067d4:	f000 fb4c 	bl	8006e70 <SPI_EndRxTransaction>
 80067d8:	4603      	mov	r3, r0
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d002      	beq.n	80067e4 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80067de:	68fb      	ldr	r3, [r7, #12]
 80067e0:	2220      	movs	r2, #32
 80067e2:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80067e8:	2b00      	cmp	r3, #0
 80067ea:	d002      	beq.n	80067f2 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 80067ec:	2301      	movs	r3, #1
 80067ee:	75fb      	strb	r3, [r7, #23]
 80067f0:	e000      	b.n	80067f4 <HAL_SPI_Receive+0x246>
  }

error :
 80067f2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	2200      	movs	r2, #0
 8006800:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006804:	7dfb      	ldrb	r3, [r7, #23]
}
 8006806:	4618      	mov	r0, r3
 8006808:	3718      	adds	r7, #24
 800680a:	46bd      	mov	sp, r7
 800680c:	bd80      	pop	{r7, pc}

0800680e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800680e:	b580      	push	{r7, lr}
 8006810:	b08a      	sub	sp, #40	; 0x28
 8006812:	af00      	add	r7, sp, #0
 8006814:	60f8      	str	r0, [r7, #12]
 8006816:	60b9      	str	r1, [r7, #8]
 8006818:	607a      	str	r2, [r7, #4]
 800681a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800681c:	2301      	movs	r3, #1
 800681e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006820:	2300      	movs	r3, #0
 8006822:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800682c:	2b01      	cmp	r3, #1
 800682e:	d101      	bne.n	8006834 <HAL_SPI_TransmitReceive+0x26>
 8006830:	2302      	movs	r3, #2
 8006832:	e1fb      	b.n	8006c2c <HAL_SPI_TransmitReceive+0x41e>
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800683c:	f7fc f85e 	bl	80028fc <HAL_GetTick>
 8006840:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006848:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	685b      	ldr	r3, [r3, #4]
 800684e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006850:	887b      	ldrh	r3, [r7, #2]
 8006852:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006854:	887b      	ldrh	r3, [r7, #2]
 8006856:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006858:	7efb      	ldrb	r3, [r7, #27]
 800685a:	2b01      	cmp	r3, #1
 800685c:	d00e      	beq.n	800687c <HAL_SPI_TransmitReceive+0x6e>
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006864:	d106      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	689b      	ldr	r3, [r3, #8]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d102      	bne.n	8006874 <HAL_SPI_TransmitReceive+0x66>
 800686e:	7efb      	ldrb	r3, [r7, #27]
 8006870:	2b04      	cmp	r3, #4
 8006872:	d003      	beq.n	800687c <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8006874:	2302      	movs	r3, #2
 8006876:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 800687a:	e1cd      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800687c:	68bb      	ldr	r3, [r7, #8]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d005      	beq.n	800688e <HAL_SPI_TransmitReceive+0x80>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <HAL_SPI_TransmitReceive+0x80>
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d103      	bne.n	8006896 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8006894:	e1c0      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800689c:	b2db      	uxtb	r3, r3
 800689e:	2b04      	cmp	r3, #4
 80068a0:	d003      	beq.n	80068aa <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	2205      	movs	r2, #5
 80068a6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2200      	movs	r2, #0
 80068ae:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	687a      	ldr	r2, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	887a      	ldrh	r2, [r7, #2]
 80068ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	887a      	ldrh	r2, [r7, #2]
 80068c2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	68ba      	ldr	r2, [r7, #8]
 80068ca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	887a      	ldrh	r2, [r7, #2]
 80068d6:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	2200      	movs	r2, #0
 80068e2:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80068ec:	d802      	bhi.n	80068f4 <HAL_SPI_TransmitReceive+0xe6>
 80068ee:	8a3b      	ldrh	r3, [r7, #16]
 80068f0:	2b01      	cmp	r3, #1
 80068f2:	d908      	bls.n	8006906 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	685a      	ldr	r2, [r3, #4]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006902:	605a      	str	r2, [r3, #4]
 8006904:	e007      	b.n	8006916 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006906:	68fb      	ldr	r3, [r7, #12]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	685a      	ldr	r2, [r3, #4]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006914:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006916:	68fb      	ldr	r3, [r7, #12]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006920:	2b40      	cmp	r3, #64	; 0x40
 8006922:	d007      	beq.n	8006934 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	681a      	ldr	r2, [r3, #0]
 800692a:	68fb      	ldr	r3, [r7, #12]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006932:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800693c:	d97c      	bls.n	8006a38 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	2b00      	cmp	r3, #0
 8006944:	d002      	beq.n	800694c <HAL_SPI_TransmitReceive+0x13e>
 8006946:	8a7b      	ldrh	r3, [r7, #18]
 8006948:	2b01      	cmp	r3, #1
 800694a:	d169      	bne.n	8006a20 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006950:	881a      	ldrh	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800695c:	1c9a      	adds	r2, r3, #2
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006966:	b29b      	uxth	r3, r3
 8006968:	3b01      	subs	r3, #1
 800696a:	b29a      	uxth	r2, r3
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006970:	e056      	b.n	8006a20 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0302 	and.w	r3, r3, #2
 800697c:	2b02      	cmp	r3, #2
 800697e:	d11b      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x1aa>
 8006980:	68fb      	ldr	r3, [r7, #12]
 8006982:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006984:	b29b      	uxth	r3, r3
 8006986:	2b00      	cmp	r3, #0
 8006988:	d016      	beq.n	80069b8 <HAL_SPI_TransmitReceive+0x1aa>
 800698a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800698c:	2b01      	cmp	r3, #1
 800698e:	d113      	bne.n	80069b8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006990:	68fb      	ldr	r3, [r7, #12]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	881a      	ldrh	r2, [r3, #0]
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069a0:	1c9a      	adds	r2, r3, #2
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80069aa:	b29b      	uxth	r3, r3
 80069ac:	3b01      	subs	r3, #1
 80069ae:	b29a      	uxth	r2, r3
 80069b0:	68fb      	ldr	r3, [r7, #12]
 80069b2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80069b4:	2300      	movs	r3, #0
 80069b6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	f003 0301 	and.w	r3, r3, #1
 80069c2:	2b01      	cmp	r3, #1
 80069c4:	d11c      	bne.n	8006a00 <HAL_SPI_TransmitReceive+0x1f2>
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069cc:	b29b      	uxth	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d016      	beq.n	8006a00 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80069d2:	68fb      	ldr	r3, [r7, #12]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	68da      	ldr	r2, [r3, #12]
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069dc:	b292      	uxth	r2, r2
 80069de:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80069e0:	68fb      	ldr	r3, [r7, #12]
 80069e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069e4:	1c9a      	adds	r2, r3, #2
 80069e6:	68fb      	ldr	r3, [r7, #12]
 80069e8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80069f0:	b29b      	uxth	r3, r3
 80069f2:	3b01      	subs	r3, #1
 80069f4:	b29a      	uxth	r2, r3
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80069fc:	2301      	movs	r3, #1
 80069fe:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006a00:	f7fb ff7c 	bl	80028fc <HAL_GetTick>
 8006a04:	4602      	mov	r2, r0
 8006a06:	69fb      	ldr	r3, [r7, #28]
 8006a08:	1ad3      	subs	r3, r2, r3
 8006a0a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006a0c:	429a      	cmp	r2, r3
 8006a0e:	d807      	bhi.n	8006a20 <HAL_SPI_TransmitReceive+0x212>
 8006a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a16:	d003      	beq.n	8006a20 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006a18:	2303      	movs	r3, #3
 8006a1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006a1e:	e0fb      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1a3      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x164>
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006a30:	b29b      	uxth	r3, r3
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d19d      	bne.n	8006972 <HAL_SPI_TransmitReceive+0x164>
 8006a36:	e0df      	b.n	8006bf8 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d003      	beq.n	8006a48 <HAL_SPI_TransmitReceive+0x23a>
 8006a40:	8a7b      	ldrh	r3, [r7, #18]
 8006a42:	2b01      	cmp	r3, #1
 8006a44:	f040 80cb 	bne.w	8006bde <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b01      	cmp	r3, #1
 8006a50:	d912      	bls.n	8006a78 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a56:	881a      	ldrh	r2, [r3, #0]
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a62:	1c9a      	adds	r2, r3, #2
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a6c:	b29b      	uxth	r3, r3
 8006a6e:	3b02      	subs	r3, #2
 8006a70:	b29a      	uxth	r2, r3
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006a76:	e0b2      	b.n	8006bde <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006a78:	68fb      	ldr	r3, [r7, #12]
 8006a7a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	330c      	adds	r3, #12
 8006a82:	7812      	ldrb	r2, [r2, #0]
 8006a84:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8a:	1c5a      	adds	r2, r3, #1
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006a94:	b29b      	uxth	r3, r3
 8006a96:	3b01      	subs	r3, #1
 8006a98:	b29a      	uxth	r2, r3
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006a9e:	e09e      	b.n	8006bde <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	689b      	ldr	r3, [r3, #8]
 8006aa6:	f003 0302 	and.w	r3, r3, #2
 8006aaa:	2b02      	cmp	r3, #2
 8006aac:	d134      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x30a>
 8006aae:	68fb      	ldr	r3, [r7, #12]
 8006ab0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d02f      	beq.n	8006b18 <HAL_SPI_TransmitReceive+0x30a>
 8006ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aba:	2b01      	cmp	r3, #1
 8006abc:	d12c      	bne.n	8006b18 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac2:	b29b      	uxth	r3, r3
 8006ac4:	2b01      	cmp	r3, #1
 8006ac6:	d912      	bls.n	8006aee <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006acc:	881a      	ldrh	r2, [r3, #0]
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006ad4:	68fb      	ldr	r3, [r7, #12]
 8006ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad8:	1c9a      	adds	r2, r3, #2
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006ade:	68fb      	ldr	r3, [r7, #12]
 8006ae0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	3b02      	subs	r3, #2
 8006ae6:	b29a      	uxth	r2, r3
 8006ae8:	68fb      	ldr	r3, [r7, #12]
 8006aea:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006aec:	e012      	b.n	8006b14 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	681b      	ldr	r3, [r3, #0]
 8006af6:	330c      	adds	r3, #12
 8006af8:	7812      	ldrb	r2, [r2, #0]
 8006afa:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b00:	1c5a      	adds	r2, r3, #1
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b0a:	b29b      	uxth	r3, r3
 8006b0c:	3b01      	subs	r3, #1
 8006b0e:	b29a      	uxth	r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006b14:	2300      	movs	r3, #0
 8006b16:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	689b      	ldr	r3, [r3, #8]
 8006b1e:	f003 0301 	and.w	r3, r3, #1
 8006b22:	2b01      	cmp	r3, #1
 8006b24:	d148      	bne.n	8006bb8 <HAL_SPI_TransmitReceive+0x3aa>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	d042      	beq.n	8006bb8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b38:	b29b      	uxth	r3, r3
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d923      	bls.n	8006b86 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	68da      	ldr	r2, [r3, #12]
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b48:	b292      	uxth	r2, r2
 8006b4a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b50:	1c9a      	adds	r2, r3, #2
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b5c:	b29b      	uxth	r3, r3
 8006b5e:	3b02      	subs	r3, #2
 8006b60:	b29a      	uxth	r2, r3
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b6e:	b29b      	uxth	r3, r3
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d81f      	bhi.n	8006bb4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	685a      	ldr	r2, [r3, #4]
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006b82:	605a      	str	r2, [r3, #4]
 8006b84:	e016      	b.n	8006bb4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	f103 020c 	add.w	r2, r3, #12
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b92:	7812      	ldrb	r2, [r2, #0]
 8006b94:	b2d2      	uxtb	r2, r2
 8006b96:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9c:	1c5a      	adds	r2, r3, #1
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ba8:	b29b      	uxth	r3, r3
 8006baa:	3b01      	subs	r3, #1
 8006bac:	b29a      	uxth	r2, r3
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006bb8:	f7fb fea0 	bl	80028fc <HAL_GetTick>
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	69fb      	ldr	r3, [r7, #28]
 8006bc0:	1ad3      	subs	r3, r2, r3
 8006bc2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006bc4:	429a      	cmp	r2, r3
 8006bc6:	d803      	bhi.n	8006bd0 <HAL_SPI_TransmitReceive+0x3c2>
 8006bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bce:	d102      	bne.n	8006bd6 <HAL_SPI_TransmitReceive+0x3c8>
 8006bd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d103      	bne.n	8006bde <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006bd6:	2303      	movs	r3, #3
 8006bd8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006bdc:	e01c      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006be2:	b29b      	uxth	r3, r3
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f47f af5b 	bne.w	8006aa0 <HAL_SPI_TransmitReceive+0x292>
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006bf0:	b29b      	uxth	r3, r3
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	f47f af54 	bne.w	8006aa0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006bf8:	69fa      	ldr	r2, [r7, #28]
 8006bfa:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006bfc:	68f8      	ldr	r0, [r7, #12]
 8006bfe:	f000 f98f 	bl	8006f20 <SPI_EndRxTxTransaction>
 8006c02:	4603      	mov	r3, r0
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d006      	beq.n	8006c16 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006c08:	2301      	movs	r3, #1
 8006c0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2220      	movs	r2, #32
 8006c12:	661a      	str	r2, [r3, #96]	; 0x60
 8006c14:	e000      	b.n	8006c18 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006c16:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006c20:	68fb      	ldr	r3, [r7, #12]
 8006c22:	2200      	movs	r2, #0
 8006c24:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006c28:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006c2c:	4618      	mov	r0, r3
 8006c2e:	3728      	adds	r7, #40	; 0x28
 8006c30:	46bd      	mov	sp, r7
 8006c32:	bd80      	pop	{r7, pc}

08006c34 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	60f8      	str	r0, [r7, #12]
 8006c3c:	60b9      	str	r1, [r7, #8]
 8006c3e:	603b      	str	r3, [r7, #0]
 8006c40:	4613      	mov	r3, r2
 8006c42:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006c44:	f7fb fe5a 	bl	80028fc <HAL_GetTick>
 8006c48:	4602      	mov	r2, r0
 8006c4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c4c:	1a9b      	subs	r3, r3, r2
 8006c4e:	683a      	ldr	r2, [r7, #0]
 8006c50:	4413      	add	r3, r2
 8006c52:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006c54:	f7fb fe52 	bl	80028fc <HAL_GetTick>
 8006c58:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006c5a:	4b39      	ldr	r3, [pc, #228]	; (8006d40 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006c5c:	681b      	ldr	r3, [r3, #0]
 8006c5e:	015b      	lsls	r3, r3, #5
 8006c60:	0d1b      	lsrs	r3, r3, #20
 8006c62:	69fa      	ldr	r2, [r7, #28]
 8006c64:	fb02 f303 	mul.w	r3, r2, r3
 8006c68:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006c6a:	e054      	b.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c72:	d050      	beq.n	8006d16 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006c74:	f7fb fe42 	bl	80028fc <HAL_GetTick>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	1ad3      	subs	r3, r2, r3
 8006c7e:	69fa      	ldr	r2, [r7, #28]
 8006c80:	429a      	cmp	r2, r3
 8006c82:	d902      	bls.n	8006c8a <SPI_WaitFlagStateUntilTimeout+0x56>
 8006c84:	69fb      	ldr	r3, [r7, #28]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d13d      	bne.n	8006d06 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	685a      	ldr	r2, [r3, #4]
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006c98:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ca2:	d111      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	689b      	ldr	r3, [r3, #8]
 8006ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cac:	d004      	beq.n	8006cb8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	689b      	ldr	r3, [r3, #8]
 8006cb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006cb6:	d107      	bne.n	8006cc8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	681b      	ldr	r3, [r3, #0]
 8006cc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006cc6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ccc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006cd0:	d10f      	bne.n	8006cf2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006cd2:	68fb      	ldr	r3, [r7, #12]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	681a      	ldr	r2, [r3, #0]
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006ce0:	601a      	str	r2, [r3, #0]
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006cf0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006d02:	2303      	movs	r3, #3
 8006d04:	e017      	b.n	8006d36 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006d10:	697b      	ldr	r3, [r7, #20]
 8006d12:	3b01      	subs	r3, #1
 8006d14:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	689a      	ldr	r2, [r3, #8]
 8006d1c:	68bb      	ldr	r3, [r7, #8]
 8006d1e:	4013      	ands	r3, r2
 8006d20:	68ba      	ldr	r2, [r7, #8]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	bf0c      	ite	eq
 8006d26:	2301      	moveq	r3, #1
 8006d28:	2300      	movne	r3, #0
 8006d2a:	b2db      	uxtb	r3, r3
 8006d2c:	461a      	mov	r2, r3
 8006d2e:	79fb      	ldrb	r3, [r7, #7]
 8006d30:	429a      	cmp	r2, r3
 8006d32:	d19b      	bne.n	8006c6c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006d34:	2300      	movs	r3, #0
}
 8006d36:	4618      	mov	r0, r3
 8006d38:	3720      	adds	r7, #32
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	bd80      	pop	{r7, pc}
 8006d3e:	bf00      	nop
 8006d40:	20000004 	.word	0x20000004

08006d44 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b08a      	sub	sp, #40	; 0x28
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	60f8      	str	r0, [r7, #12]
 8006d4c:	60b9      	str	r1, [r7, #8]
 8006d4e:	607a      	str	r2, [r7, #4]
 8006d50:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006d52:	2300      	movs	r3, #0
 8006d54:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006d56:	f7fb fdd1 	bl	80028fc <HAL_GetTick>
 8006d5a:	4602      	mov	r2, r0
 8006d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d5e:	1a9b      	subs	r3, r3, r2
 8006d60:	683a      	ldr	r2, [r7, #0]
 8006d62:	4413      	add	r3, r2
 8006d64:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006d66:	f7fb fdc9 	bl	80028fc <HAL_GetTick>
 8006d6a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	330c      	adds	r3, #12
 8006d72:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006d74:	4b3d      	ldr	r3, [pc, #244]	; (8006e6c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006d76:	681a      	ldr	r2, [r3, #0]
 8006d78:	4613      	mov	r3, r2
 8006d7a:	009b      	lsls	r3, r3, #2
 8006d7c:	4413      	add	r3, r2
 8006d7e:	00da      	lsls	r2, r3, #3
 8006d80:	1ad3      	subs	r3, r2, r3
 8006d82:	0d1b      	lsrs	r3, r3, #20
 8006d84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006d86:	fb02 f303 	mul.w	r3, r2, r3
 8006d8a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006d8c:	e060      	b.n	8006e50 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006d8e:	68bb      	ldr	r3, [r7, #8]
 8006d90:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006d94:	d107      	bne.n	8006da6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d104      	bne.n	8006da6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006d9c:	69fb      	ldr	r3, [r7, #28]
 8006d9e:	781b      	ldrb	r3, [r3, #0]
 8006da0:	b2db      	uxtb	r3, r3
 8006da2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006da4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d050      	beq.n	8006e50 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006dae:	f7fb fda5 	bl	80028fc <HAL_GetTick>
 8006db2:	4602      	mov	r2, r0
 8006db4:	6a3b      	ldr	r3, [r7, #32]
 8006db6:	1ad3      	subs	r3, r2, r3
 8006db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006dba:	429a      	cmp	r2, r3
 8006dbc:	d902      	bls.n	8006dc4 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d13d      	bne.n	8006e40 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dc4:	68fb      	ldr	r3, [r7, #12]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	685b      	ldr	r3, [r3, #4]
 8006dd8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ddc:	d111      	bne.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de6:	d004      	beq.n	8006df2 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	689b      	ldr	r3, [r3, #8]
 8006dec:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df0:	d107      	bne.n	8006e02 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df2:	68fb      	ldr	r3, [r7, #12]
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	681a      	ldr	r2, [r3, #0]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e00:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e0a:	d10f      	bne.n	8006e2c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	681a      	ldr	r2, [r3, #0]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e1a:	601a      	str	r2, [r3, #0]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	681a      	ldr	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e2a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	2201      	movs	r2, #1
 8006e30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2200      	movs	r2, #0
 8006e38:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e3c:	2303      	movs	r3, #3
 8006e3e:	e010      	b.n	8006e62 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e40:	69bb      	ldr	r3, [r7, #24]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d101      	bne.n	8006e4a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006e46:	2300      	movs	r3, #0
 8006e48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006e4a:	69bb      	ldr	r3, [r7, #24]
 8006e4c:	3b01      	subs	r3, #1
 8006e4e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	689a      	ldr	r2, [r3, #8]
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	4013      	ands	r3, r2
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d196      	bne.n	8006d8e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006e60:	2300      	movs	r3, #0
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3728      	adds	r7, #40	; 0x28
 8006e66:	46bd      	mov	sp, r7
 8006e68:	bd80      	pop	{r7, pc}
 8006e6a:	bf00      	nop
 8006e6c:	20000004 	.word	0x20000004

08006e70 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b086      	sub	sp, #24
 8006e74:	af02      	add	r7, sp, #8
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006e7c:	68fb      	ldr	r3, [r7, #12]
 8006e7e:	685b      	ldr	r3, [r3, #4]
 8006e80:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006e84:	d111      	bne.n	8006eaa <SPI_EndRxTransaction+0x3a>
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	689b      	ldr	r3, [r3, #8]
 8006e8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006e8e:	d004      	beq.n	8006e9a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	689b      	ldr	r3, [r3, #8]
 8006e94:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006e98:	d107      	bne.n	8006eaa <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ea8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	9300      	str	r3, [sp, #0]
 8006eae:	68bb      	ldr	r3, [r7, #8]
 8006eb0:	2200      	movs	r2, #0
 8006eb2:	2180      	movs	r1, #128	; 0x80
 8006eb4:	68f8      	ldr	r0, [r7, #12]
 8006eb6:	f7ff febd 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006eba:	4603      	mov	r3, r0
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d007      	beq.n	8006ed0 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ec4:	f043 0220 	orr.w	r2, r3, #32
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006ecc:	2303      	movs	r3, #3
 8006ece:	e023      	b.n	8006f18 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	685b      	ldr	r3, [r3, #4]
 8006ed4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006ed8:	d11d      	bne.n	8006f16 <SPI_EndRxTransaction+0xa6>
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	689b      	ldr	r3, [r3, #8]
 8006ede:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006ee2:	d004      	beq.n	8006eee <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006eec:	d113      	bne.n	8006f16 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	9300      	str	r3, [sp, #0]
 8006ef2:	68bb      	ldr	r3, [r7, #8]
 8006ef4:	2200      	movs	r2, #0
 8006ef6:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006efa:	68f8      	ldr	r0, [r7, #12]
 8006efc:	f7ff ff22 	bl	8006d44 <SPI_WaitFifoStateUntilTimeout>
 8006f00:	4603      	mov	r3, r0
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d007      	beq.n	8006f16 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f0a:	f043 0220 	orr.w	r2, r3, #32
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8006f12:	2303      	movs	r3, #3
 8006f14:	e000      	b.n	8006f18 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8006f16:	2300      	movs	r3, #0
}
 8006f18:	4618      	mov	r0, r3
 8006f1a:	3710      	adds	r7, #16
 8006f1c:	46bd      	mov	sp, r7
 8006f1e:	bd80      	pop	{r7, pc}

08006f20 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006f20:	b580      	push	{r7, lr}
 8006f22:	b086      	sub	sp, #24
 8006f24:	af02      	add	r7, sp, #8
 8006f26:	60f8      	str	r0, [r7, #12]
 8006f28:	60b9      	str	r1, [r7, #8]
 8006f2a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	9300      	str	r3, [sp, #0]
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8006f38:	68f8      	ldr	r0, [r7, #12]
 8006f3a:	f7ff ff03 	bl	8006d44 <SPI_WaitFifoStateUntilTimeout>
 8006f3e:	4603      	mov	r3, r0
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d007      	beq.n	8006f54 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f48:	f043 0220 	orr.w	r2, r3, #32
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f50:	2303      	movs	r3, #3
 8006f52:	e027      	b.n	8006fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	9300      	str	r3, [sp, #0]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	2200      	movs	r2, #0
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	68f8      	ldr	r0, [r7, #12]
 8006f60:	f7ff fe68 	bl	8006c34 <SPI_WaitFlagStateUntilTimeout>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d007      	beq.n	8006f7a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f6e:	f043 0220 	orr.w	r2, r3, #32
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f76:	2303      	movs	r3, #3
 8006f78:	e014      	b.n	8006fa4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	9300      	str	r3, [sp, #0]
 8006f7e:	68bb      	ldr	r3, [r7, #8]
 8006f80:	2200      	movs	r2, #0
 8006f82:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8006f86:	68f8      	ldr	r0, [r7, #12]
 8006f88:	f7ff fedc 	bl	8006d44 <SPI_WaitFifoStateUntilTimeout>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f96:	f043 0220 	orr.w	r2, r3, #32
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8006f9e:	2303      	movs	r3, #3
 8006fa0:	e000      	b.n	8006fa4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8006fa2:	2300      	movs	r3, #0
}
 8006fa4:	4618      	mov	r0, r3
 8006fa6:	3710      	adds	r7, #16
 8006fa8:	46bd      	mov	sp, r7
 8006faa:	bd80      	pop	{r7, pc}

08006fac <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b082      	sub	sp, #8
 8006fb0:	af00      	add	r7, sp, #0
 8006fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	2b00      	cmp	r3, #0
 8006fb8:	d101      	bne.n	8006fbe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fba:	2301      	movs	r3, #1
 8006fbc:	e049      	b.n	8007052 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fc4:	b2db      	uxtb	r3, r3
 8006fc6:	2b00      	cmp	r3, #0
 8006fc8:	d106      	bne.n	8006fd8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	2200      	movs	r2, #0
 8006fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f7fb fbac 	bl	8002730 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681a      	ldr	r2, [r3, #0]
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	3304      	adds	r3, #4
 8006fe8:	4619      	mov	r1, r3
 8006fea:	4610      	mov	r0, r2
 8006fec:	f000 fdc2 	bl	8007b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2201      	movs	r2, #1
 800704c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007050:	2300      	movs	r3, #0
}
 8007052:	4618      	mov	r0, r3
 8007054:	3708      	adds	r7, #8
 8007056:	46bd      	mov	sp, r7
 8007058:	bd80      	pop	{r7, pc}
	...

0800705c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800705c:	b480      	push	{r7}
 800705e:	b085      	sub	sp, #20
 8007060:	af00      	add	r7, sp, #0
 8007062:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800706a:	b2db      	uxtb	r3, r3
 800706c:	2b01      	cmp	r3, #1
 800706e:	d001      	beq.n	8007074 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007070:	2301      	movs	r3, #1
 8007072:	e04a      	b.n	800710a <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2202      	movs	r2, #2
 8007078:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	68da      	ldr	r2, [r3, #12]
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	f042 0201 	orr.w	r2, r2, #1
 800708a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a21      	ldr	r2, [pc, #132]	; (8007118 <HAL_TIM_Base_Start_IT+0xbc>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d018      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x6c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d013      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x6c>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <HAL_TIM_Base_Start_IT+0xc0>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d00e      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x6c>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <HAL_TIM_Base_Start_IT+0xc4>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d009      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x6c>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_TIM_Base_Start_IT+0xc8>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d004      	beq.n	80070c8 <HAL_TIM_Base_Start_IT+0x6c>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a19      	ldr	r2, [pc, #100]	; (8007128 <HAL_TIM_Base_Start_IT+0xcc>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d115      	bne.n	80070f4 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689a      	ldr	r2, [r3, #8]
 80070ce:	4b17      	ldr	r3, [pc, #92]	; (800712c <HAL_TIM_Base_Start_IT+0xd0>)
 80070d0:	4013      	ands	r3, r2
 80070d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	2b06      	cmp	r3, #6
 80070d8:	d015      	beq.n	8007106 <HAL_TIM_Base_Start_IT+0xaa>
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80070e0:	d011      	beq.n	8007106 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	681a      	ldr	r2, [r3, #0]
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	f042 0201 	orr.w	r2, r2, #1
 80070f0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070f2:	e008      	b.n	8007106 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	681a      	ldr	r2, [r3, #0]
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f042 0201 	orr.w	r2, r2, #1
 8007102:	601a      	str	r2, [r3, #0]
 8007104:	e000      	b.n	8007108 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007106:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3714      	adds	r7, #20
 800710e:	46bd      	mov	sp, r7
 8007110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop
 8007118:	40012c00 	.word	0x40012c00
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40013400 	.word	0x40013400
 8007128:	40014000 	.word	0x40014000
 800712c:	00010007 	.word	0x00010007

08007130 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2b00      	cmp	r3, #0
 800713c:	d101      	bne.n	8007142 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	e049      	b.n	80071d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007148:	b2db      	uxtb	r3, r3
 800714a:	2b00      	cmp	r3, #0
 800714c:	d106      	bne.n	800715c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	2200      	movs	r2, #0
 8007152:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007156:	6878      	ldr	r0, [r7, #4]
 8007158:	f000 f841 	bl	80071de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2202      	movs	r2, #2
 8007160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681a      	ldr	r2, [r3, #0]
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	3304      	adds	r3, #4
 800716c:	4619      	mov	r1, r3
 800716e:	4610      	mov	r0, r2
 8007170:	f000 fd00 	bl	8007b74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2201      	movs	r2, #1
 8007178:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2201      	movs	r2, #1
 8007180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2201      	movs	r2, #1
 8007188:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	2201      	movs	r2, #1
 8007190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2201      	movs	r2, #1
 8007198:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2201      	movs	r2, #1
 80071a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	2201      	movs	r2, #1
 80071a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2201      	movs	r2, #1
 80071b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2201      	movs	r2, #1
 80071c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80071cc:	687b      	ldr	r3, [r7, #4]
 80071ce:	2201      	movs	r2, #1
 80071d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80071d4:	2300      	movs	r3, #0
}
 80071d6:	4618      	mov	r0, r3
 80071d8:	3708      	adds	r7, #8
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}

080071de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80071de:	b480      	push	{r7}
 80071e0:	b083      	sub	sp, #12
 80071e2:	af00      	add	r7, sp, #0
 80071e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80071e6:	bf00      	nop
 80071e8:	370c      	adds	r7, #12
 80071ea:	46bd      	mov	sp, r7
 80071ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071f0:	4770      	bx	lr
	...

080071f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b084      	sub	sp, #16
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
 80071fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071fe:	683b      	ldr	r3, [r7, #0]
 8007200:	2b00      	cmp	r3, #0
 8007202:	d109      	bne.n	8007218 <HAL_TIM_PWM_Start+0x24>
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800720a:	b2db      	uxtb	r3, r3
 800720c:	2b01      	cmp	r3, #1
 800720e:	bf14      	ite	ne
 8007210:	2301      	movne	r3, #1
 8007212:	2300      	moveq	r3, #0
 8007214:	b2db      	uxtb	r3, r3
 8007216:	e03c      	b.n	8007292 <HAL_TIM_PWM_Start+0x9e>
 8007218:	683b      	ldr	r3, [r7, #0]
 800721a:	2b04      	cmp	r3, #4
 800721c:	d109      	bne.n	8007232 <HAL_TIM_PWM_Start+0x3e>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007224:	b2db      	uxtb	r3, r3
 8007226:	2b01      	cmp	r3, #1
 8007228:	bf14      	ite	ne
 800722a:	2301      	movne	r3, #1
 800722c:	2300      	moveq	r3, #0
 800722e:	b2db      	uxtb	r3, r3
 8007230:	e02f      	b.n	8007292 <HAL_TIM_PWM_Start+0x9e>
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	2b08      	cmp	r3, #8
 8007236:	d109      	bne.n	800724c <HAL_TIM_PWM_Start+0x58>
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800723e:	b2db      	uxtb	r3, r3
 8007240:	2b01      	cmp	r3, #1
 8007242:	bf14      	ite	ne
 8007244:	2301      	movne	r3, #1
 8007246:	2300      	moveq	r3, #0
 8007248:	b2db      	uxtb	r3, r3
 800724a:	e022      	b.n	8007292 <HAL_TIM_PWM_Start+0x9e>
 800724c:	683b      	ldr	r3, [r7, #0]
 800724e:	2b0c      	cmp	r3, #12
 8007250:	d109      	bne.n	8007266 <HAL_TIM_PWM_Start+0x72>
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007258:	b2db      	uxtb	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	bf14      	ite	ne
 800725e:	2301      	movne	r3, #1
 8007260:	2300      	moveq	r3, #0
 8007262:	b2db      	uxtb	r3, r3
 8007264:	e015      	b.n	8007292 <HAL_TIM_PWM_Start+0x9e>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	2b10      	cmp	r3, #16
 800726a:	d109      	bne.n	8007280 <HAL_TIM_PWM_Start+0x8c>
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007272:	b2db      	uxtb	r3, r3
 8007274:	2b01      	cmp	r3, #1
 8007276:	bf14      	ite	ne
 8007278:	2301      	movne	r3, #1
 800727a:	2300      	moveq	r3, #0
 800727c:	b2db      	uxtb	r3, r3
 800727e:	e008      	b.n	8007292 <HAL_TIM_PWM_Start+0x9e>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	2b00      	cmp	r3, #0
 8007294:	d001      	beq.n	800729a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007296:	2301      	movs	r3, #1
 8007298:	e097      	b.n	80073ca <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	2b00      	cmp	r3, #0
 800729e:	d104      	bne.n	80072aa <HAL_TIM_PWM_Start+0xb6>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	2202      	movs	r2, #2
 80072a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072a8:	e023      	b.n	80072f2 <HAL_TIM_PWM_Start+0xfe>
 80072aa:	683b      	ldr	r3, [r7, #0]
 80072ac:	2b04      	cmp	r3, #4
 80072ae:	d104      	bne.n	80072ba <HAL_TIM_PWM_Start+0xc6>
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	2202      	movs	r2, #2
 80072b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072b8:	e01b      	b.n	80072f2 <HAL_TIM_PWM_Start+0xfe>
 80072ba:	683b      	ldr	r3, [r7, #0]
 80072bc:	2b08      	cmp	r3, #8
 80072be:	d104      	bne.n	80072ca <HAL_TIM_PWM_Start+0xd6>
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2202      	movs	r2, #2
 80072c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072c8:	e013      	b.n	80072f2 <HAL_TIM_PWM_Start+0xfe>
 80072ca:	683b      	ldr	r3, [r7, #0]
 80072cc:	2b0c      	cmp	r3, #12
 80072ce:	d104      	bne.n	80072da <HAL_TIM_PWM_Start+0xe6>
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2202      	movs	r2, #2
 80072d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80072d8:	e00b      	b.n	80072f2 <HAL_TIM_PWM_Start+0xfe>
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	2b10      	cmp	r3, #16
 80072de:	d104      	bne.n	80072ea <HAL_TIM_PWM_Start+0xf6>
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2202      	movs	r2, #2
 80072e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80072e8:	e003      	b.n	80072f2 <HAL_TIM_PWM_Start+0xfe>
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	2202      	movs	r2, #2
 80072ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	2201      	movs	r2, #1
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	4618      	mov	r0, r3
 80072fc:	f001 f85c 	bl	80083b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a33      	ldr	r2, [pc, #204]	; (80073d4 <HAL_TIM_PWM_Start+0x1e0>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d013      	beq.n	8007332 <HAL_TIM_PWM_Start+0x13e>
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	4a32      	ldr	r2, [pc, #200]	; (80073d8 <HAL_TIM_PWM_Start+0x1e4>)
 8007310:	4293      	cmp	r3, r2
 8007312:	d00e      	beq.n	8007332 <HAL_TIM_PWM_Start+0x13e>
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a30      	ldr	r2, [pc, #192]	; (80073dc <HAL_TIM_PWM_Start+0x1e8>)
 800731a:	4293      	cmp	r3, r2
 800731c:	d009      	beq.n	8007332 <HAL_TIM_PWM_Start+0x13e>
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	4a2f      	ldr	r2, [pc, #188]	; (80073e0 <HAL_TIM_PWM_Start+0x1ec>)
 8007324:	4293      	cmp	r3, r2
 8007326:	d004      	beq.n	8007332 <HAL_TIM_PWM_Start+0x13e>
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a2d      	ldr	r2, [pc, #180]	; (80073e4 <HAL_TIM_PWM_Start+0x1f0>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d101      	bne.n	8007336 <HAL_TIM_PWM_Start+0x142>
 8007332:	2301      	movs	r3, #1
 8007334:	e000      	b.n	8007338 <HAL_TIM_PWM_Start+0x144>
 8007336:	2300      	movs	r3, #0
 8007338:	2b00      	cmp	r3, #0
 800733a:	d007      	beq.n	800734c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800734a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	4a20      	ldr	r2, [pc, #128]	; (80073d4 <HAL_TIM_PWM_Start+0x1e0>)
 8007352:	4293      	cmp	r3, r2
 8007354:	d018      	beq.n	8007388 <HAL_TIM_PWM_Start+0x194>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800735e:	d013      	beq.n	8007388 <HAL_TIM_PWM_Start+0x194>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <HAL_TIM_PWM_Start+0x1f4>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d00e      	beq.n	8007388 <HAL_TIM_PWM_Start+0x194>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a1f      	ldr	r2, [pc, #124]	; (80073ec <HAL_TIM_PWM_Start+0x1f8>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d009      	beq.n	8007388 <HAL_TIM_PWM_Start+0x194>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a17      	ldr	r2, [pc, #92]	; (80073d8 <HAL_TIM_PWM_Start+0x1e4>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d004      	beq.n	8007388 <HAL_TIM_PWM_Start+0x194>
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	4a16      	ldr	r2, [pc, #88]	; (80073dc <HAL_TIM_PWM_Start+0x1e8>)
 8007384:	4293      	cmp	r3, r2
 8007386:	d115      	bne.n	80073b4 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	689a      	ldr	r2, [r3, #8]
 800738e:	4b18      	ldr	r3, [pc, #96]	; (80073f0 <HAL_TIM_PWM_Start+0x1fc>)
 8007390:	4013      	ands	r3, r2
 8007392:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	2b06      	cmp	r3, #6
 8007398:	d015      	beq.n	80073c6 <HAL_TIM_PWM_Start+0x1d2>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80073a0:	d011      	beq.n	80073c6 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0201 	orr.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073b2:	e008      	b.n	80073c6 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	681a      	ldr	r2, [r3, #0]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f042 0201 	orr.w	r2, r2, #1
 80073c2:	601a      	str	r2, [r3, #0]
 80073c4:	e000      	b.n	80073c8 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073c6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80073c8:	2300      	movs	r3, #0
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	40012c00 	.word	0x40012c00
 80073d8:	40013400 	.word	0x40013400
 80073dc:	40014000 	.word	0x40014000
 80073e0:	40014400 	.word	0x40014400
 80073e4:	40014800 	.word	0x40014800
 80073e8:	40000400 	.word	0x40000400
 80073ec:	40000800 	.word	0x40000800
 80073f0:	00010007 	.word	0x00010007

080073f4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80073f4:	b580      	push	{r7, lr}
 80073f6:	b082      	sub	sp, #8
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	691b      	ldr	r3, [r3, #16]
 8007402:	f003 0302 	and.w	r3, r3, #2
 8007406:	2b02      	cmp	r3, #2
 8007408:	d122      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	68db      	ldr	r3, [r3, #12]
 8007410:	f003 0302 	and.w	r3, r3, #2
 8007414:	2b02      	cmp	r3, #2
 8007416:	d11b      	bne.n	8007450 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	681b      	ldr	r3, [r3, #0]
 800741c:	f06f 0202 	mvn.w	r2, #2
 8007420:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2201      	movs	r2, #1
 8007426:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	699b      	ldr	r3, [r3, #24]
 800742e:	f003 0303 	and.w	r3, r3, #3
 8007432:	2b00      	cmp	r3, #0
 8007434:	d003      	beq.n	800743e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007436:	6878      	ldr	r0, [r7, #4]
 8007438:	f000 fb7e 	bl	8007b38 <HAL_TIM_IC_CaptureCallback>
 800743c:	e005      	b.n	800744a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800743e:	6878      	ldr	r0, [r7, #4]
 8007440:	f000 fb70 	bl	8007b24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007444:	6878      	ldr	r0, [r7, #4]
 8007446:	f000 fb81 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	2200      	movs	r2, #0
 800744e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	691b      	ldr	r3, [r3, #16]
 8007456:	f003 0304 	and.w	r3, r3, #4
 800745a:	2b04      	cmp	r3, #4
 800745c:	d122      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	68db      	ldr	r3, [r3, #12]
 8007464:	f003 0304 	and.w	r3, r3, #4
 8007468:	2b04      	cmp	r3, #4
 800746a:	d11b      	bne.n	80074a4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f06f 0204 	mvn.w	r2, #4
 8007474:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	2202      	movs	r2, #2
 800747a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	699b      	ldr	r3, [r3, #24]
 8007482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007486:	2b00      	cmp	r3, #0
 8007488:	d003      	beq.n	8007492 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800748a:	6878      	ldr	r0, [r7, #4]
 800748c:	f000 fb54 	bl	8007b38 <HAL_TIM_IC_CaptureCallback>
 8007490:	e005      	b.n	800749e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fb46 	bl	8007b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fb57 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	2200      	movs	r2, #0
 80074a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	691b      	ldr	r3, [r3, #16]
 80074aa:	f003 0308 	and.w	r3, r3, #8
 80074ae:	2b08      	cmp	r3, #8
 80074b0:	d122      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	68db      	ldr	r3, [r3, #12]
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b08      	cmp	r3, #8
 80074be:	d11b      	bne.n	80074f8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	f06f 0208 	mvn.w	r2, #8
 80074c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	2204      	movs	r2, #4
 80074ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	69db      	ldr	r3, [r3, #28]
 80074d6:	f003 0303 	and.w	r3, r3, #3
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d003      	beq.n	80074e6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80074de:	6878      	ldr	r0, [r7, #4]
 80074e0:	f000 fb2a 	bl	8007b38 <HAL_TIM_IC_CaptureCallback>
 80074e4:	e005      	b.n	80074f2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80074e6:	6878      	ldr	r0, [r7, #4]
 80074e8:	f000 fb1c 	bl	8007b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80074ec:	6878      	ldr	r0, [r7, #4]
 80074ee:	f000 fb2d 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2200      	movs	r2, #0
 80074f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	691b      	ldr	r3, [r3, #16]
 80074fe:	f003 0310 	and.w	r3, r3, #16
 8007502:	2b10      	cmp	r3, #16
 8007504:	d122      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	68db      	ldr	r3, [r3, #12]
 800750c:	f003 0310 	and.w	r3, r3, #16
 8007510:	2b10      	cmp	r3, #16
 8007512:	d11b      	bne.n	800754c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f06f 0210 	mvn.w	r2, #16
 800751c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	2208      	movs	r2, #8
 8007522:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	69db      	ldr	r3, [r3, #28]
 800752a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800752e:	2b00      	cmp	r3, #0
 8007530:	d003      	beq.n	800753a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 fb00 	bl	8007b38 <HAL_TIM_IC_CaptureCallback>
 8007538:	e005      	b.n	8007546 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800753a:	6878      	ldr	r0, [r7, #4]
 800753c:	f000 faf2 	bl	8007b24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007540:	6878      	ldr	r0, [r7, #4]
 8007542:	f000 fb03 	bl	8007b4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	2200      	movs	r2, #0
 800754a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	691b      	ldr	r3, [r3, #16]
 8007552:	f003 0301 	and.w	r3, r3, #1
 8007556:	2b01      	cmp	r3, #1
 8007558:	d10e      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	68db      	ldr	r3, [r3, #12]
 8007560:	f003 0301 	and.w	r3, r3, #1
 8007564:	2b01      	cmp	r3, #1
 8007566:	d107      	bne.n	8007578 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f06f 0201 	mvn.w	r2, #1
 8007570:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 facc 	bl	8007b10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	691b      	ldr	r3, [r3, #16]
 800757e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007582:	2b80      	cmp	r3, #128	; 0x80
 8007584:	d10e      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	68db      	ldr	r3, [r3, #12]
 800758c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007590:	2b80      	cmp	r3, #128	; 0x80
 8007592:	d107      	bne.n	80075a4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800759c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 ffbc 	bl	800851c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	681b      	ldr	r3, [r3, #0]
 80075a8:	691b      	ldr	r3, [r3, #16]
 80075aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b2:	d10e      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	681b      	ldr	r3, [r3, #0]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80075be:	2b80      	cmp	r3, #128	; 0x80
 80075c0:	d107      	bne.n	80075d2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80075ca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80075cc:	6878      	ldr	r0, [r7, #4]
 80075ce:	f000 ffaf 	bl	8008530 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	691b      	ldr	r3, [r3, #16]
 80075d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075dc:	2b40      	cmp	r3, #64	; 0x40
 80075de:	d10e      	bne.n	80075fe <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	68db      	ldr	r3, [r3, #12]
 80075e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80075ea:	2b40      	cmp	r3, #64	; 0x40
 80075ec:	d107      	bne.n	80075fe <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80075f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80075f8:	6878      	ldr	r0, [r7, #4]
 80075fa:	f000 fab1 	bl	8007b60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	691b      	ldr	r3, [r3, #16]
 8007604:	f003 0320 	and.w	r3, r3, #32
 8007608:	2b20      	cmp	r3, #32
 800760a:	d10e      	bne.n	800762a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	68db      	ldr	r3, [r3, #12]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b20      	cmp	r3, #32
 8007618:	d107      	bne.n	800762a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f06f 0220 	mvn.w	r2, #32
 8007622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007624:	6878      	ldr	r0, [r7, #4]
 8007626:	f000 ff6f 	bl	8008508 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	691b      	ldr	r3, [r3, #16]
 8007630:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007634:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007638:	d10f      	bne.n	800765a <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007644:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007648:	d107      	bne.n	800765a <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007652:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007654:	6878      	ldr	r0, [r7, #4]
 8007656:	f000 ff75 	bl	8008544 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	681b      	ldr	r3, [r3, #0]
 800765e:	691b      	ldr	r3, [r3, #16]
 8007660:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007664:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007668:	d10f      	bne.n	800768a <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	68db      	ldr	r3, [r3, #12]
 8007670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007674:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007678:	d107      	bne.n	800768a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007682:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007684:	6878      	ldr	r0, [r7, #4]
 8007686:	f000 ff67 	bl	8008558 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	681b      	ldr	r3, [r3, #0]
 800768e:	691b      	ldr	r3, [r3, #16]
 8007690:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007694:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007698:	d10f      	bne.n	80076ba <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	68db      	ldr	r3, [r3, #12]
 80076a0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076a4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80076a8:	d107      	bne.n	80076ba <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80076b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80076b4:	6878      	ldr	r0, [r7, #4]
 80076b6:	f000 ff59 	bl	800856c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	691b      	ldr	r3, [r3, #16]
 80076c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076c4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076c8:	d10f      	bne.n	80076ea <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	68db      	ldr	r3, [r3, #12]
 80076d0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80076d4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80076d8:	d107      	bne.n	80076ea <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80076e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80076e4:	6878      	ldr	r0, [r7, #4]
 80076e6:	f000 ff4b 	bl	8008580 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80076ea:	bf00      	nop
 80076ec:	3708      	adds	r7, #8
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
	...

080076f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80076f4:	b580      	push	{r7, lr}
 80076f6:	b086      	sub	sp, #24
 80076f8:	af00      	add	r7, sp, #0
 80076fa:	60f8      	str	r0, [r7, #12]
 80076fc:	60b9      	str	r1, [r7, #8]
 80076fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007700:	2300      	movs	r3, #0
 8007702:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800770a:	2b01      	cmp	r3, #1
 800770c:	d101      	bne.n	8007712 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800770e:	2302      	movs	r3, #2
 8007710:	e0ff      	b.n	8007912 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2201      	movs	r2, #1
 8007716:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	2b14      	cmp	r3, #20
 800771e:	f200 80f0 	bhi.w	8007902 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007722:	a201      	add	r2, pc, #4	; (adr r2, 8007728 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007724:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007728:	0800777d 	.word	0x0800777d
 800772c:	08007903 	.word	0x08007903
 8007730:	08007903 	.word	0x08007903
 8007734:	08007903 	.word	0x08007903
 8007738:	080077bd 	.word	0x080077bd
 800773c:	08007903 	.word	0x08007903
 8007740:	08007903 	.word	0x08007903
 8007744:	08007903 	.word	0x08007903
 8007748:	080077ff 	.word	0x080077ff
 800774c:	08007903 	.word	0x08007903
 8007750:	08007903 	.word	0x08007903
 8007754:	08007903 	.word	0x08007903
 8007758:	0800783f 	.word	0x0800783f
 800775c:	08007903 	.word	0x08007903
 8007760:	08007903 	.word	0x08007903
 8007764:	08007903 	.word	0x08007903
 8007768:	08007881 	.word	0x08007881
 800776c:	08007903 	.word	0x08007903
 8007770:	08007903 	.word	0x08007903
 8007774:	08007903 	.word	0x08007903
 8007778:	080078c1 	.word	0x080078c1
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	68b9      	ldr	r1, [r7, #8]
 8007782:	4618      	mov	r0, r3
 8007784:	f000 fa86 	bl	8007c94 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	f042 0208 	orr.w	r2, r2, #8
 8007796:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	699a      	ldr	r2, [r3, #24]
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	f022 0204 	bic.w	r2, r2, #4
 80077a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80077a8:	68fb      	ldr	r3, [r7, #12]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	6999      	ldr	r1, [r3, #24]
 80077ae:	68bb      	ldr	r3, [r7, #8]
 80077b0:	691a      	ldr	r2, [r3, #16]
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	430a      	orrs	r2, r1
 80077b8:	619a      	str	r2, [r3, #24]
      break;
 80077ba:	e0a5      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	68b9      	ldr	r1, [r7, #8]
 80077c2:	4618      	mov	r0, r3
 80077c4:	f000 faf6 	bl	8007db4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	699a      	ldr	r2, [r3, #24]
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80077d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	699a      	ldr	r2, [r3, #24]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	681b      	ldr	r3, [r3, #0]
 80077e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80077e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	6999      	ldr	r1, [r3, #24]
 80077ee:	68bb      	ldr	r3, [r7, #8]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	021a      	lsls	r2, r3, #8
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	430a      	orrs	r2, r1
 80077fa:	619a      	str	r2, [r3, #24]
      break;
 80077fc:	e084      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80077fe:	68fb      	ldr	r3, [r7, #12]
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68b9      	ldr	r1, [r7, #8]
 8007804:	4618      	mov	r0, r3
 8007806:	f000 fb5f 	bl	8007ec8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	69da      	ldr	r2, [r3, #28]
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0208 	orr.w	r2, r2, #8
 8007818:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	69da      	ldr	r2, [r3, #28]
 8007820:	68fb      	ldr	r3, [r7, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	f022 0204 	bic.w	r2, r2, #4
 8007828:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800782a:	68fb      	ldr	r3, [r7, #12]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	69d9      	ldr	r1, [r3, #28]
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	691a      	ldr	r2, [r3, #16]
 8007834:	68fb      	ldr	r3, [r7, #12]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	430a      	orrs	r2, r1
 800783a:	61da      	str	r2, [r3, #28]
      break;
 800783c:	e064      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800783e:	68fb      	ldr	r3, [r7, #12]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68b9      	ldr	r1, [r7, #8]
 8007844:	4618      	mov	r0, r3
 8007846:	f000 fbc7 	bl	8007fd8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	69da      	ldr	r2, [r3, #28]
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007858:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	69da      	ldr	r2, [r3, #28]
 8007860:	68fb      	ldr	r3, [r7, #12]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007868:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	681b      	ldr	r3, [r3, #0]
 800786e:	69d9      	ldr	r1, [r3, #28]
 8007870:	68bb      	ldr	r3, [r7, #8]
 8007872:	691b      	ldr	r3, [r3, #16]
 8007874:	021a      	lsls	r2, r3, #8
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	430a      	orrs	r2, r1
 800787c:	61da      	str	r2, [r3, #28]
      break;
 800787e:	e043      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007880:	68fb      	ldr	r3, [r7, #12]
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	68b9      	ldr	r1, [r7, #8]
 8007886:	4618      	mov	r0, r3
 8007888:	f000 fc30 	bl	80080ec <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800788c:	68fb      	ldr	r3, [r7, #12]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	f042 0208 	orr.w	r2, r2, #8
 800789a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f022 0204 	bic.w	r2, r2, #4
 80078aa:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078b2:	68bb      	ldr	r3, [r7, #8]
 80078b4:	691a      	ldr	r2, [r3, #16]
 80078b6:	68fb      	ldr	r3, [r7, #12]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	430a      	orrs	r2, r1
 80078bc:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80078be:	e023      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	68b9      	ldr	r1, [r7, #8]
 80078c6:	4618      	mov	r0, r3
 80078c8:	f000 fc74 	bl	80081b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	681b      	ldr	r3, [r3, #0]
 80078d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80078da:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80078ea:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80078f2:	68bb      	ldr	r3, [r7, #8]
 80078f4:	691b      	ldr	r3, [r3, #16]
 80078f6:	021a      	lsls	r2, r3, #8
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	430a      	orrs	r2, r1
 80078fe:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007900:	e002      	b.n	8007908 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007902:	2301      	movs	r3, #1
 8007904:	75fb      	strb	r3, [r7, #23]
      break;
 8007906:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	2200      	movs	r2, #0
 800790c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007910:	7dfb      	ldrb	r3, [r7, #23]
}
 8007912:	4618      	mov	r0, r3
 8007914:	3718      	adds	r7, #24
 8007916:	46bd      	mov	sp, r7
 8007918:	bd80      	pop	{r7, pc}
 800791a:	bf00      	nop

0800791c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b084      	sub	sp, #16
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
 8007924:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007926:	2300      	movs	r3, #0
 8007928:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007930:	2b01      	cmp	r3, #1
 8007932:	d101      	bne.n	8007938 <HAL_TIM_ConfigClockSource+0x1c>
 8007934:	2302      	movs	r3, #2
 8007936:	e0de      	b.n	8007af6 <HAL_TIM_ConfigClockSource+0x1da>
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	2201      	movs	r2, #1
 800793c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	2202      	movs	r2, #2
 8007944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	689b      	ldr	r3, [r3, #8]
 800794e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007950:	68bb      	ldr	r3, [r7, #8]
 8007952:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007956:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800795a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800795c:	68bb      	ldr	r3, [r7, #8]
 800795e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007962:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	68ba      	ldr	r2, [r7, #8]
 800796a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800796c:	683b      	ldr	r3, [r7, #0]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	4a63      	ldr	r2, [pc, #396]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007972:	4293      	cmp	r3, r2
 8007974:	f000 80a9 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007978:	4a61      	ldr	r2, [pc, #388]	; (8007b00 <HAL_TIM_ConfigClockSource+0x1e4>)
 800797a:	4293      	cmp	r3, r2
 800797c:	f200 80ae 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 8007980:	4a60      	ldr	r2, [pc, #384]	; (8007b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	f000 80a1 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007988:	4a5e      	ldr	r2, [pc, #376]	; (8007b04 <HAL_TIM_ConfigClockSource+0x1e8>)
 800798a:	4293      	cmp	r3, r2
 800798c:	f200 80a6 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 8007990:	4a5d      	ldr	r2, [pc, #372]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 8007992:	4293      	cmp	r3, r2
 8007994:	f000 8099 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007998:	4a5b      	ldr	r2, [pc, #364]	; (8007b08 <HAL_TIM_ConfigClockSource+0x1ec>)
 800799a:	4293      	cmp	r3, r2
 800799c:	f200 809e 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079a0:	4a5a      	ldr	r2, [pc, #360]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1f0>)
 80079a2:	4293      	cmp	r3, r2
 80079a4:	f000 8091 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 80079a8:	4a58      	ldr	r2, [pc, #352]	; (8007b0c <HAL_TIM_ConfigClockSource+0x1f0>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	f200 8096 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079b0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079b4:	f000 8089 	beq.w	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 80079b8:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80079bc:	f200 808e 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079c4:	d03e      	beq.n	8007a44 <HAL_TIM_ConfigClockSource+0x128>
 80079c6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80079ca:	f200 8087 	bhi.w	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079d2:	f000 8086 	beq.w	8007ae2 <HAL_TIM_ConfigClockSource+0x1c6>
 80079d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079da:	d87f      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079dc:	2b70      	cmp	r3, #112	; 0x70
 80079de:	d01a      	beq.n	8007a16 <HAL_TIM_ConfigClockSource+0xfa>
 80079e0:	2b70      	cmp	r3, #112	; 0x70
 80079e2:	d87b      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079e4:	2b60      	cmp	r3, #96	; 0x60
 80079e6:	d050      	beq.n	8007a8a <HAL_TIM_ConfigClockSource+0x16e>
 80079e8:	2b60      	cmp	r3, #96	; 0x60
 80079ea:	d877      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079ec:	2b50      	cmp	r3, #80	; 0x50
 80079ee:	d03c      	beq.n	8007a6a <HAL_TIM_ConfigClockSource+0x14e>
 80079f0:	2b50      	cmp	r3, #80	; 0x50
 80079f2:	d873      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079f4:	2b40      	cmp	r3, #64	; 0x40
 80079f6:	d058      	beq.n	8007aaa <HAL_TIM_ConfigClockSource+0x18e>
 80079f8:	2b40      	cmp	r3, #64	; 0x40
 80079fa:	d86f      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 80079fc:	2b30      	cmp	r3, #48	; 0x30
 80079fe:	d064      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007a00:	2b30      	cmp	r3, #48	; 0x30
 8007a02:	d86b      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a04:	2b20      	cmp	r3, #32
 8007a06:	d060      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007a08:	2b20      	cmp	r3, #32
 8007a0a:	d867      	bhi.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d05c      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007a10:	2b10      	cmp	r3, #16
 8007a12:	d05a      	beq.n	8007aca <HAL_TIM_ConfigClockSource+0x1ae>
 8007a14:	e062      	b.n	8007adc <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	6818      	ldr	r0, [r3, #0]
 8007a1a:	683b      	ldr	r3, [r7, #0]
 8007a1c:	6899      	ldr	r1, [r3, #8]
 8007a1e:	683b      	ldr	r3, [r7, #0]
 8007a20:	685a      	ldr	r2, [r3, #4]
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	68db      	ldr	r3, [r3, #12]
 8007a26:	f000 fca7 	bl	8008378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	689b      	ldr	r3, [r3, #8]
 8007a30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a32:	68bb      	ldr	r3, [r7, #8]
 8007a34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68ba      	ldr	r2, [r7, #8]
 8007a40:	609a      	str	r2, [r3, #8]
      break;
 8007a42:	e04f      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	6818      	ldr	r0, [r3, #0]
 8007a48:	683b      	ldr	r3, [r7, #0]
 8007a4a:	6899      	ldr	r1, [r3, #8]
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	685a      	ldr	r2, [r3, #4]
 8007a50:	683b      	ldr	r3, [r7, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	f000 fc90 	bl	8008378 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	689a      	ldr	r2, [r3, #8]
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007a66:	609a      	str	r2, [r3, #8]
      break;
 8007a68:	e03c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6818      	ldr	r0, [r3, #0]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	6859      	ldr	r1, [r3, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	461a      	mov	r2, r3
 8007a78:	f000 fc02 	bl	8008280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	681b      	ldr	r3, [r3, #0]
 8007a80:	2150      	movs	r1, #80	; 0x50
 8007a82:	4618      	mov	r0, r3
 8007a84:	f000 fc5b 	bl	800833e <TIM_ITRx_SetConfig>
      break;
 8007a88:	e02c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6818      	ldr	r0, [r3, #0]
 8007a8e:	683b      	ldr	r3, [r7, #0]
 8007a90:	6859      	ldr	r1, [r3, #4]
 8007a92:	683b      	ldr	r3, [r7, #0]
 8007a94:	68db      	ldr	r3, [r3, #12]
 8007a96:	461a      	mov	r2, r3
 8007a98:	f000 fc21 	bl	80082de <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2160      	movs	r1, #96	; 0x60
 8007aa2:	4618      	mov	r0, r3
 8007aa4:	f000 fc4b 	bl	800833e <TIM_ITRx_SetConfig>
      break;
 8007aa8:	e01c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6818      	ldr	r0, [r3, #0]
 8007aae:	683b      	ldr	r3, [r7, #0]
 8007ab0:	6859      	ldr	r1, [r3, #4]
 8007ab2:	683b      	ldr	r3, [r7, #0]
 8007ab4:	68db      	ldr	r3, [r3, #12]
 8007ab6:	461a      	mov	r2, r3
 8007ab8:	f000 fbe2 	bl	8008280 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	2140      	movs	r1, #64	; 0x40
 8007ac2:	4618      	mov	r0, r3
 8007ac4:	f000 fc3b 	bl	800833e <TIM_ITRx_SetConfig>
      break;
 8007ac8:	e00c      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681a      	ldr	r2, [r3, #0]
 8007ace:	683b      	ldr	r3, [r7, #0]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	4619      	mov	r1, r3
 8007ad4:	4610      	mov	r0, r2
 8007ad6:	f000 fc32 	bl	800833e <TIM_ITRx_SetConfig>
      break;
 8007ada:	e003      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	73fb      	strb	r3, [r7, #15]
      break;
 8007ae0:	e000      	b.n	8007ae4 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ae2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2201      	movs	r2, #1
 8007ae8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2200      	movs	r2, #0
 8007af0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007af6:	4618      	mov	r0, r3
 8007af8:	3710      	adds	r7, #16
 8007afa:	46bd      	mov	sp, r7
 8007afc:	bd80      	pop	{r7, pc}
 8007afe:	bf00      	nop
 8007b00:	00100070 	.word	0x00100070
 8007b04:	00100040 	.word	0x00100040
 8007b08:	00100030 	.word	0x00100030
 8007b0c:	00100020 	.word	0x00100020

08007b10 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b10:	b480      	push	{r7}
 8007b12:	b083      	sub	sp, #12
 8007b14:	af00      	add	r7, sp, #0
 8007b16:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007b18:	bf00      	nop
 8007b1a:	370c      	adds	r7, #12
 8007b1c:	46bd      	mov	sp, r7
 8007b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b22:	4770      	bx	lr

08007b24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b24:	b480      	push	{r7}
 8007b26:	b083      	sub	sp, #12
 8007b28:	af00      	add	r7, sp, #0
 8007b2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b2c:	bf00      	nop
 8007b2e:	370c      	adds	r7, #12
 8007b30:	46bd      	mov	sp, r7
 8007b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b36:	4770      	bx	lr

08007b38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b083      	sub	sp, #12
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b40:	bf00      	nop
 8007b42:	370c      	adds	r7, #12
 8007b44:	46bd      	mov	sp, r7
 8007b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b4a:	4770      	bx	lr

08007b4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b085      	sub	sp, #20
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
 8007b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	4a3c      	ldr	r2, [pc, #240]	; (8007c78 <TIM_Base_SetConfig+0x104>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d00f      	beq.n	8007bac <TIM_Base_SetConfig+0x38>
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b92:	d00b      	beq.n	8007bac <TIM_Base_SetConfig+0x38>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	4a39      	ldr	r2, [pc, #228]	; (8007c7c <TIM_Base_SetConfig+0x108>)
 8007b98:	4293      	cmp	r3, r2
 8007b9a:	d007      	beq.n	8007bac <TIM_Base_SetConfig+0x38>
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	4a38      	ldr	r2, [pc, #224]	; (8007c80 <TIM_Base_SetConfig+0x10c>)
 8007ba0:	4293      	cmp	r3, r2
 8007ba2:	d003      	beq.n	8007bac <TIM_Base_SetConfig+0x38>
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	4a37      	ldr	r2, [pc, #220]	; (8007c84 <TIM_Base_SetConfig+0x110>)
 8007ba8:	4293      	cmp	r3, r2
 8007baa:	d108      	bne.n	8007bbe <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bb2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bb4:	683b      	ldr	r3, [r7, #0]
 8007bb6:	685b      	ldr	r3, [r3, #4]
 8007bb8:	68fa      	ldr	r2, [r7, #12]
 8007bba:	4313      	orrs	r3, r2
 8007bbc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	4a2d      	ldr	r2, [pc, #180]	; (8007c78 <TIM_Base_SetConfig+0x104>)
 8007bc2:	4293      	cmp	r3, r2
 8007bc4:	d01b      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bcc:	d017      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bce:	687b      	ldr	r3, [r7, #4]
 8007bd0:	4a2a      	ldr	r2, [pc, #168]	; (8007c7c <TIM_Base_SetConfig+0x108>)
 8007bd2:	4293      	cmp	r3, r2
 8007bd4:	d013      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	4a29      	ldr	r2, [pc, #164]	; (8007c80 <TIM_Base_SetConfig+0x10c>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d00f      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	4a28      	ldr	r2, [pc, #160]	; (8007c84 <TIM_Base_SetConfig+0x110>)
 8007be2:	4293      	cmp	r3, r2
 8007be4:	d00b      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a27      	ldr	r2, [pc, #156]	; (8007c88 <TIM_Base_SetConfig+0x114>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d007      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	4a26      	ldr	r2, [pc, #152]	; (8007c8c <TIM_Base_SetConfig+0x118>)
 8007bf2:	4293      	cmp	r3, r2
 8007bf4:	d003      	beq.n	8007bfe <TIM_Base_SetConfig+0x8a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a25      	ldr	r2, [pc, #148]	; (8007c90 <TIM_Base_SetConfig+0x11c>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d108      	bne.n	8007c10 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007bfe:	68fb      	ldr	r3, [r7, #12]
 8007c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c04:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c06:	683b      	ldr	r3, [r7, #0]
 8007c08:	68db      	ldr	r3, [r3, #12]
 8007c0a:	68fa      	ldr	r2, [r7, #12]
 8007c0c:	4313      	orrs	r3, r2
 8007c0e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c16:	683b      	ldr	r3, [r7, #0]
 8007c18:	695b      	ldr	r3, [r3, #20]
 8007c1a:	4313      	orrs	r3, r2
 8007c1c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	68fa      	ldr	r2, [r7, #12]
 8007c22:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c24:	683b      	ldr	r3, [r7, #0]
 8007c26:	689a      	ldr	r2, [r3, #8]
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c2c:	683b      	ldr	r3, [r7, #0]
 8007c2e:	681a      	ldr	r2, [r3, #0]
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	4a10      	ldr	r2, [pc, #64]	; (8007c78 <TIM_Base_SetConfig+0x104>)
 8007c38:	4293      	cmp	r3, r2
 8007c3a:	d00f      	beq.n	8007c5c <TIM_Base_SetConfig+0xe8>
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	4a11      	ldr	r2, [pc, #68]	; (8007c84 <TIM_Base_SetConfig+0x110>)
 8007c40:	4293      	cmp	r3, r2
 8007c42:	d00b      	beq.n	8007c5c <TIM_Base_SetConfig+0xe8>
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	4a10      	ldr	r2, [pc, #64]	; (8007c88 <TIM_Base_SetConfig+0x114>)
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d007      	beq.n	8007c5c <TIM_Base_SetConfig+0xe8>
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	4a0f      	ldr	r2, [pc, #60]	; (8007c8c <TIM_Base_SetConfig+0x118>)
 8007c50:	4293      	cmp	r3, r2
 8007c52:	d003      	beq.n	8007c5c <TIM_Base_SetConfig+0xe8>
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	4a0e      	ldr	r2, [pc, #56]	; (8007c90 <TIM_Base_SetConfig+0x11c>)
 8007c58:	4293      	cmp	r3, r2
 8007c5a:	d103      	bne.n	8007c64 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c5c:	683b      	ldr	r3, [r7, #0]
 8007c5e:	691a      	ldr	r2, [r3, #16]
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c64:	687b      	ldr	r3, [r7, #4]
 8007c66:	2201      	movs	r2, #1
 8007c68:	615a      	str	r2, [r3, #20]
}
 8007c6a:	bf00      	nop
 8007c6c:	3714      	adds	r7, #20
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	40012c00 	.word	0x40012c00
 8007c7c:	40000400 	.word	0x40000400
 8007c80:	40000800 	.word	0x40000800
 8007c84:	40013400 	.word	0x40013400
 8007c88:	40014000 	.word	0x40014000
 8007c8c:	40014400 	.word	0x40014400
 8007c90:	40014800 	.word	0x40014800

08007c94 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b087      	sub	sp, #28
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
 8007c9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6a1b      	ldr	r3, [r3, #32]
 8007ca2:	f023 0201 	bic.w	r2, r3, #1
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6a1b      	ldr	r3, [r3, #32]
 8007cae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	685b      	ldr	r3, [r3, #4]
 8007cb4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	699b      	ldr	r3, [r3, #24]
 8007cba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	f023 0303 	bic.w	r3, r3, #3
 8007cce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd0:	683b      	ldr	r3, [r7, #0]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	68fa      	ldr	r2, [r7, #12]
 8007cd6:	4313      	orrs	r3, r2
 8007cd8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cda:	697b      	ldr	r3, [r7, #20]
 8007cdc:	f023 0302 	bic.w	r3, r3, #2
 8007ce0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	689b      	ldr	r3, [r3, #8]
 8007ce6:	697a      	ldr	r2, [r7, #20]
 8007ce8:	4313      	orrs	r3, r2
 8007cea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	4a2c      	ldr	r2, [pc, #176]	; (8007da0 <TIM_OC1_SetConfig+0x10c>)
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d00f      	beq.n	8007d14 <TIM_OC1_SetConfig+0x80>
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	4a2b      	ldr	r2, [pc, #172]	; (8007da4 <TIM_OC1_SetConfig+0x110>)
 8007cf8:	4293      	cmp	r3, r2
 8007cfa:	d00b      	beq.n	8007d14 <TIM_OC1_SetConfig+0x80>
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	4a2a      	ldr	r2, [pc, #168]	; (8007da8 <TIM_OC1_SetConfig+0x114>)
 8007d00:	4293      	cmp	r3, r2
 8007d02:	d007      	beq.n	8007d14 <TIM_OC1_SetConfig+0x80>
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	4a29      	ldr	r2, [pc, #164]	; (8007dac <TIM_OC1_SetConfig+0x118>)
 8007d08:	4293      	cmp	r3, r2
 8007d0a:	d003      	beq.n	8007d14 <TIM_OC1_SetConfig+0x80>
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	4a28      	ldr	r2, [pc, #160]	; (8007db0 <TIM_OC1_SetConfig+0x11c>)
 8007d10:	4293      	cmp	r3, r2
 8007d12:	d10c      	bne.n	8007d2e <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007d14:	697b      	ldr	r3, [r7, #20]
 8007d16:	f023 0308 	bic.w	r3, r3, #8
 8007d1a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	68db      	ldr	r3, [r3, #12]
 8007d20:	697a      	ldr	r2, [r7, #20]
 8007d22:	4313      	orrs	r3, r2
 8007d24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d26:	697b      	ldr	r3, [r7, #20]
 8007d28:	f023 0304 	bic.w	r3, r3, #4
 8007d2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	4a1b      	ldr	r2, [pc, #108]	; (8007da0 <TIM_OC1_SetConfig+0x10c>)
 8007d32:	4293      	cmp	r3, r2
 8007d34:	d00f      	beq.n	8007d56 <TIM_OC1_SetConfig+0xc2>
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a1a      	ldr	r2, [pc, #104]	; (8007da4 <TIM_OC1_SetConfig+0x110>)
 8007d3a:	4293      	cmp	r3, r2
 8007d3c:	d00b      	beq.n	8007d56 <TIM_OC1_SetConfig+0xc2>
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	4a19      	ldr	r2, [pc, #100]	; (8007da8 <TIM_OC1_SetConfig+0x114>)
 8007d42:	4293      	cmp	r3, r2
 8007d44:	d007      	beq.n	8007d56 <TIM_OC1_SetConfig+0xc2>
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	4a18      	ldr	r2, [pc, #96]	; (8007dac <TIM_OC1_SetConfig+0x118>)
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d003      	beq.n	8007d56 <TIM_OC1_SetConfig+0xc2>
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	4a17      	ldr	r2, [pc, #92]	; (8007db0 <TIM_OC1_SetConfig+0x11c>)
 8007d52:	4293      	cmp	r3, r2
 8007d54:	d111      	bne.n	8007d7a <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d56:	693b      	ldr	r3, [r7, #16]
 8007d58:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d5c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d5e:	693b      	ldr	r3, [r7, #16]
 8007d60:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d64:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d66:	683b      	ldr	r3, [r7, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d70:	683b      	ldr	r3, [r7, #0]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	693a      	ldr	r2, [r7, #16]
 8007d76:	4313      	orrs	r3, r2
 8007d78:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	693a      	ldr	r2, [r7, #16]
 8007d7e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	68fa      	ldr	r2, [r7, #12]
 8007d84:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d86:	683b      	ldr	r3, [r7, #0]
 8007d88:	685a      	ldr	r2, [r3, #4]
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	697a      	ldr	r2, [r7, #20]
 8007d92:	621a      	str	r2, [r3, #32]
}
 8007d94:	bf00      	nop
 8007d96:	371c      	adds	r7, #28
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	40012c00 	.word	0x40012c00
 8007da4:	40013400 	.word	0x40013400
 8007da8:	40014000 	.word	0x40014000
 8007dac:	40014400 	.word	0x40014400
 8007db0:	40014800 	.word	0x40014800

08007db4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007db4:	b480      	push	{r7}
 8007db6:	b087      	sub	sp, #28
 8007db8:	af00      	add	r7, sp, #0
 8007dba:	6078      	str	r0, [r7, #4]
 8007dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	f023 0210 	bic.w	r2, r3, #16
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a1b      	ldr	r3, [r3, #32]
 8007dce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	685b      	ldr	r3, [r3, #4]
 8007dd4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	699b      	ldr	r3, [r3, #24]
 8007dda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007de2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007de6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007df0:	683b      	ldr	r3, [r7, #0]
 8007df2:	681b      	ldr	r3, [r3, #0]
 8007df4:	021b      	lsls	r3, r3, #8
 8007df6:	68fa      	ldr	r2, [r7, #12]
 8007df8:	4313      	orrs	r3, r2
 8007dfa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	f023 0320 	bic.w	r3, r3, #32
 8007e02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	689b      	ldr	r3, [r3, #8]
 8007e08:	011b      	lsls	r3, r3, #4
 8007e0a:	697a      	ldr	r2, [r7, #20]
 8007e0c:	4313      	orrs	r3, r2
 8007e0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	4a28      	ldr	r2, [pc, #160]	; (8007eb4 <TIM_OC2_SetConfig+0x100>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d003      	beq.n	8007e20 <TIM_OC2_SetConfig+0x6c>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4a27      	ldr	r2, [pc, #156]	; (8007eb8 <TIM_OC2_SetConfig+0x104>)
 8007e1c:	4293      	cmp	r3, r2
 8007e1e:	d10d      	bne.n	8007e3c <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e26:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	68db      	ldr	r3, [r3, #12]
 8007e2c:	011b      	lsls	r3, r3, #4
 8007e2e:	697a      	ldr	r2, [r7, #20]
 8007e30:	4313      	orrs	r3, r2
 8007e32:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007e34:	697b      	ldr	r3, [r7, #20]
 8007e36:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e3a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	4a1d      	ldr	r2, [pc, #116]	; (8007eb4 <TIM_OC2_SetConfig+0x100>)
 8007e40:	4293      	cmp	r3, r2
 8007e42:	d00f      	beq.n	8007e64 <TIM_OC2_SetConfig+0xb0>
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	4a1c      	ldr	r2, [pc, #112]	; (8007eb8 <TIM_OC2_SetConfig+0x104>)
 8007e48:	4293      	cmp	r3, r2
 8007e4a:	d00b      	beq.n	8007e64 <TIM_OC2_SetConfig+0xb0>
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	4a1b      	ldr	r2, [pc, #108]	; (8007ebc <TIM_OC2_SetConfig+0x108>)
 8007e50:	4293      	cmp	r3, r2
 8007e52:	d007      	beq.n	8007e64 <TIM_OC2_SetConfig+0xb0>
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	4a1a      	ldr	r2, [pc, #104]	; (8007ec0 <TIM_OC2_SetConfig+0x10c>)
 8007e58:	4293      	cmp	r3, r2
 8007e5a:	d003      	beq.n	8007e64 <TIM_OC2_SetConfig+0xb0>
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	4a19      	ldr	r2, [pc, #100]	; (8007ec4 <TIM_OC2_SetConfig+0x110>)
 8007e60:	4293      	cmp	r3, r2
 8007e62:	d113      	bne.n	8007e8c <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007e64:	693b      	ldr	r3, [r7, #16]
 8007e66:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007e6a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007e6c:	693b      	ldr	r3, [r7, #16]
 8007e6e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007e72:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007e74:	683b      	ldr	r3, [r7, #0]
 8007e76:	695b      	ldr	r3, [r3, #20]
 8007e78:	009b      	lsls	r3, r3, #2
 8007e7a:	693a      	ldr	r2, [r7, #16]
 8007e7c:	4313      	orrs	r3, r2
 8007e7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e80:	683b      	ldr	r3, [r7, #0]
 8007e82:	699b      	ldr	r3, [r3, #24]
 8007e84:	009b      	lsls	r3, r3, #2
 8007e86:	693a      	ldr	r2, [r7, #16]
 8007e88:	4313      	orrs	r3, r2
 8007e8a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	693a      	ldr	r2, [r7, #16]
 8007e90:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e92:	687b      	ldr	r3, [r7, #4]
 8007e94:	68fa      	ldr	r2, [r7, #12]
 8007e96:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e98:	683b      	ldr	r3, [r7, #0]
 8007e9a:	685a      	ldr	r2, [r3, #4]
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	697a      	ldr	r2, [r7, #20]
 8007ea4:	621a      	str	r2, [r3, #32]
}
 8007ea6:	bf00      	nop
 8007ea8:	371c      	adds	r7, #28
 8007eaa:	46bd      	mov	sp, r7
 8007eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb0:	4770      	bx	lr
 8007eb2:	bf00      	nop
 8007eb4:	40012c00 	.word	0x40012c00
 8007eb8:	40013400 	.word	0x40013400
 8007ebc:	40014000 	.word	0x40014000
 8007ec0:	40014400 	.word	0x40014400
 8007ec4:	40014800 	.word	0x40014800

08007ec8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ec8:	b480      	push	{r7}
 8007eca:	b087      	sub	sp, #28
 8007ecc:	af00      	add	r7, sp, #0
 8007ece:	6078      	str	r0, [r7, #4]
 8007ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a1b      	ldr	r3, [r3, #32]
 8007ed6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	6a1b      	ldr	r3, [r3, #32]
 8007ee2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	685b      	ldr	r3, [r3, #4]
 8007ee8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007ef0:	68fb      	ldr	r3, [r7, #12]
 8007ef2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ef6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007efa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	f023 0303 	bic.w	r3, r3, #3
 8007f02:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	68fa      	ldr	r2, [r7, #12]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f14:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	689b      	ldr	r3, [r3, #8]
 8007f1a:	021b      	lsls	r3, r3, #8
 8007f1c:	697a      	ldr	r2, [r7, #20]
 8007f1e:	4313      	orrs	r3, r2
 8007f20:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	4a27      	ldr	r2, [pc, #156]	; (8007fc4 <TIM_OC3_SetConfig+0xfc>)
 8007f26:	4293      	cmp	r3, r2
 8007f28:	d003      	beq.n	8007f32 <TIM_OC3_SetConfig+0x6a>
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	4a26      	ldr	r2, [pc, #152]	; (8007fc8 <TIM_OC3_SetConfig+0x100>)
 8007f2e:	4293      	cmp	r3, r2
 8007f30:	d10d      	bne.n	8007f4e <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f32:	697b      	ldr	r3, [r7, #20]
 8007f34:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f38:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	68db      	ldr	r3, [r3, #12]
 8007f3e:	021b      	lsls	r3, r3, #8
 8007f40:	697a      	ldr	r2, [r7, #20]
 8007f42:	4313      	orrs	r3, r2
 8007f44:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f46:	697b      	ldr	r3, [r7, #20]
 8007f48:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f4c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	4a1c      	ldr	r2, [pc, #112]	; (8007fc4 <TIM_OC3_SetConfig+0xfc>)
 8007f52:	4293      	cmp	r3, r2
 8007f54:	d00f      	beq.n	8007f76 <TIM_OC3_SetConfig+0xae>
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	4a1b      	ldr	r2, [pc, #108]	; (8007fc8 <TIM_OC3_SetConfig+0x100>)
 8007f5a:	4293      	cmp	r3, r2
 8007f5c:	d00b      	beq.n	8007f76 <TIM_OC3_SetConfig+0xae>
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	4a1a      	ldr	r2, [pc, #104]	; (8007fcc <TIM_OC3_SetConfig+0x104>)
 8007f62:	4293      	cmp	r3, r2
 8007f64:	d007      	beq.n	8007f76 <TIM_OC3_SetConfig+0xae>
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <TIM_OC3_SetConfig+0x108>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d003      	beq.n	8007f76 <TIM_OC3_SetConfig+0xae>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	4a18      	ldr	r2, [pc, #96]	; (8007fd4 <TIM_OC3_SetConfig+0x10c>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d113      	bne.n	8007f9e <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f76:	693b      	ldr	r3, [r7, #16]
 8007f78:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f7c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f7e:	693b      	ldr	r3, [r7, #16]
 8007f80:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f84:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007f86:	683b      	ldr	r3, [r7, #0]
 8007f88:	695b      	ldr	r3, [r3, #20]
 8007f8a:	011b      	lsls	r3, r3, #4
 8007f8c:	693a      	ldr	r2, [r7, #16]
 8007f8e:	4313      	orrs	r3, r2
 8007f90:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	699b      	ldr	r3, [r3, #24]
 8007f96:	011b      	lsls	r3, r3, #4
 8007f98:	693a      	ldr	r2, [r7, #16]
 8007f9a:	4313      	orrs	r3, r2
 8007f9c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	693a      	ldr	r2, [r7, #16]
 8007fa2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	68fa      	ldr	r2, [r7, #12]
 8007fa8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	685a      	ldr	r2, [r3, #4]
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	697a      	ldr	r2, [r7, #20]
 8007fb6:	621a      	str	r2, [r3, #32]
}
 8007fb8:	bf00      	nop
 8007fba:	371c      	adds	r7, #28
 8007fbc:	46bd      	mov	sp, r7
 8007fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc2:	4770      	bx	lr
 8007fc4:	40012c00 	.word	0x40012c00
 8007fc8:	40013400 	.word	0x40013400
 8007fcc:	40014000 	.word	0x40014000
 8007fd0:	40014400 	.word	0x40014400
 8007fd4:	40014800 	.word	0x40014800

08007fd8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b087      	sub	sp, #28
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
 8007fe0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	6a1b      	ldr	r3, [r3, #32]
 8007fe6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	685b      	ldr	r3, [r3, #4]
 8007ff8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	69db      	ldr	r3, [r3, #28]
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008006:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800800a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008012:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	021b      	lsls	r3, r3, #8
 800801a:	68fa      	ldr	r2, [r7, #12]
 800801c:	4313      	orrs	r3, r2
 800801e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008020:	697b      	ldr	r3, [r7, #20]
 8008022:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008026:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	689b      	ldr	r3, [r3, #8]
 800802c:	031b      	lsls	r3, r3, #12
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	4313      	orrs	r3, r2
 8008032:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008034:	687b      	ldr	r3, [r7, #4]
 8008036:	4a28      	ldr	r2, [pc, #160]	; (80080d8 <TIM_OC4_SetConfig+0x100>)
 8008038:	4293      	cmp	r3, r2
 800803a:	d003      	beq.n	8008044 <TIM_OC4_SetConfig+0x6c>
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a27      	ldr	r2, [pc, #156]	; (80080dc <TIM_OC4_SetConfig+0x104>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d10d      	bne.n	8008060 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800804a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	68db      	ldr	r3, [r3, #12]
 8008050:	031b      	lsls	r3, r3, #12
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008058:	697b      	ldr	r3, [r7, #20]
 800805a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800805e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a1d      	ldr	r2, [pc, #116]	; (80080d8 <TIM_OC4_SetConfig+0x100>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d00f      	beq.n	8008088 <TIM_OC4_SetConfig+0xb0>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	4a1c      	ldr	r2, [pc, #112]	; (80080dc <TIM_OC4_SetConfig+0x104>)
 800806c:	4293      	cmp	r3, r2
 800806e:	d00b      	beq.n	8008088 <TIM_OC4_SetConfig+0xb0>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a1b      	ldr	r2, [pc, #108]	; (80080e0 <TIM_OC4_SetConfig+0x108>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d007      	beq.n	8008088 <TIM_OC4_SetConfig+0xb0>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a1a      	ldr	r2, [pc, #104]	; (80080e4 <TIM_OC4_SetConfig+0x10c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d003      	beq.n	8008088 <TIM_OC4_SetConfig+0xb0>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a19      	ldr	r2, [pc, #100]	; (80080e8 <TIM_OC4_SetConfig+0x110>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d113      	bne.n	80080b0 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008088:	693b      	ldr	r3, [r7, #16]
 800808a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800808e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008090:	693b      	ldr	r3, [r7, #16]
 8008092:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008096:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	695b      	ldr	r3, [r3, #20]
 800809c:	019b      	lsls	r3, r3, #6
 800809e:	693a      	ldr	r2, [r7, #16]
 80080a0:	4313      	orrs	r3, r2
 80080a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80080a4:	683b      	ldr	r3, [r7, #0]
 80080a6:	699b      	ldr	r3, [r3, #24]
 80080a8:	019b      	lsls	r3, r3, #6
 80080aa:	693a      	ldr	r2, [r7, #16]
 80080ac:	4313      	orrs	r3, r2
 80080ae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	693a      	ldr	r2, [r7, #16]
 80080b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	685a      	ldr	r2, [r3, #4]
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	697a      	ldr	r2, [r7, #20]
 80080c8:	621a      	str	r2, [r3, #32]
}
 80080ca:	bf00      	nop
 80080cc:	371c      	adds	r7, #28
 80080ce:	46bd      	mov	sp, r7
 80080d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d4:	4770      	bx	lr
 80080d6:	bf00      	nop
 80080d8:	40012c00 	.word	0x40012c00
 80080dc:	40013400 	.word	0x40013400
 80080e0:	40014000 	.word	0x40014000
 80080e4:	40014400 	.word	0x40014400
 80080e8:	40014800 	.word	0x40014800

080080ec <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80080ec:	b480      	push	{r7}
 80080ee:	b087      	sub	sp, #28
 80080f0:	af00      	add	r7, sp, #0
 80080f2:	6078      	str	r0, [r7, #4]
 80080f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	6a1b      	ldr	r3, [r3, #32]
 80080fa:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008108:	687b      	ldr	r3, [r7, #4]
 800810a:	685b      	ldr	r3, [r3, #4]
 800810c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800811a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800811e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008120:	683b      	ldr	r3, [r7, #0]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	4313      	orrs	r3, r2
 8008128:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800812a:	693b      	ldr	r3, [r7, #16]
 800812c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008130:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008132:	683b      	ldr	r3, [r7, #0]
 8008134:	689b      	ldr	r3, [r3, #8]
 8008136:	041b      	lsls	r3, r3, #16
 8008138:	693a      	ldr	r2, [r7, #16]
 800813a:	4313      	orrs	r3, r2
 800813c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	4a17      	ldr	r2, [pc, #92]	; (80081a0 <TIM_OC5_SetConfig+0xb4>)
 8008142:	4293      	cmp	r3, r2
 8008144:	d00f      	beq.n	8008166 <TIM_OC5_SetConfig+0x7a>
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	4a16      	ldr	r2, [pc, #88]	; (80081a4 <TIM_OC5_SetConfig+0xb8>)
 800814a:	4293      	cmp	r3, r2
 800814c:	d00b      	beq.n	8008166 <TIM_OC5_SetConfig+0x7a>
 800814e:	687b      	ldr	r3, [r7, #4]
 8008150:	4a15      	ldr	r2, [pc, #84]	; (80081a8 <TIM_OC5_SetConfig+0xbc>)
 8008152:	4293      	cmp	r3, r2
 8008154:	d007      	beq.n	8008166 <TIM_OC5_SetConfig+0x7a>
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	4a14      	ldr	r2, [pc, #80]	; (80081ac <TIM_OC5_SetConfig+0xc0>)
 800815a:	4293      	cmp	r3, r2
 800815c:	d003      	beq.n	8008166 <TIM_OC5_SetConfig+0x7a>
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <TIM_OC5_SetConfig+0xc4>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d109      	bne.n	800817a <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008166:	697b      	ldr	r3, [r7, #20]
 8008168:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800816c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	695b      	ldr	r3, [r3, #20]
 8008172:	021b      	lsls	r3, r3, #8
 8008174:	697a      	ldr	r2, [r7, #20]
 8008176:	4313      	orrs	r3, r2
 8008178:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	697a      	ldr	r2, [r7, #20]
 800817e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	685a      	ldr	r2, [r3, #4]
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	621a      	str	r2, [r3, #32]
}
 8008194:	bf00      	nop
 8008196:	371c      	adds	r7, #28
 8008198:	46bd      	mov	sp, r7
 800819a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819e:	4770      	bx	lr
 80081a0:	40012c00 	.word	0x40012c00
 80081a4:	40013400 	.word	0x40013400
 80081a8:	40014000 	.word	0x40014000
 80081ac:	40014400 	.word	0x40014400
 80081b0:	40014800 	.word	0x40014800

080081b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80081b4:	b480      	push	{r7}
 80081b6:	b087      	sub	sp, #28
 80081b8:	af00      	add	r7, sp, #0
 80081ba:	6078      	str	r0, [r7, #4]
 80081bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80081be:	687b      	ldr	r3, [r7, #4]
 80081c0:	6a1b      	ldr	r3, [r3, #32]
 80081c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80081c6:	687b      	ldr	r3, [r7, #4]
 80081c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081d0:	687b      	ldr	r3, [r7, #4]
 80081d2:	685b      	ldr	r3, [r3, #4]
 80081d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80081e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80081e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	021b      	lsls	r3, r3, #8
 80081ee:	68fa      	ldr	r2, [r7, #12]
 80081f0:	4313      	orrs	r3, r2
 80081f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80081fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	051b      	lsls	r3, r3, #20
 8008202:	693a      	ldr	r2, [r7, #16]
 8008204:	4313      	orrs	r3, r2
 8008206:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	4a18      	ldr	r2, [pc, #96]	; (800826c <TIM_OC6_SetConfig+0xb8>)
 800820c:	4293      	cmp	r3, r2
 800820e:	d00f      	beq.n	8008230 <TIM_OC6_SetConfig+0x7c>
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	4a17      	ldr	r2, [pc, #92]	; (8008270 <TIM_OC6_SetConfig+0xbc>)
 8008214:	4293      	cmp	r3, r2
 8008216:	d00b      	beq.n	8008230 <TIM_OC6_SetConfig+0x7c>
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	4a16      	ldr	r2, [pc, #88]	; (8008274 <TIM_OC6_SetConfig+0xc0>)
 800821c:	4293      	cmp	r3, r2
 800821e:	d007      	beq.n	8008230 <TIM_OC6_SetConfig+0x7c>
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a15      	ldr	r2, [pc, #84]	; (8008278 <TIM_OC6_SetConfig+0xc4>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_OC6_SetConfig+0x7c>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a14      	ldr	r2, [pc, #80]	; (800827c <TIM_OC6_SetConfig+0xc8>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d109      	bne.n	8008244 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008230:	697b      	ldr	r3, [r7, #20]
 8008232:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008236:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	695b      	ldr	r3, [r3, #20]
 800823c:	029b      	lsls	r3, r3, #10
 800823e:	697a      	ldr	r2, [r7, #20]
 8008240:	4313      	orrs	r3, r2
 8008242:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	68fa      	ldr	r2, [r7, #12]
 800824e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	685a      	ldr	r2, [r3, #4]
 8008254:	687b      	ldr	r3, [r7, #4]
 8008256:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008258:	687b      	ldr	r3, [r7, #4]
 800825a:	693a      	ldr	r2, [r7, #16]
 800825c:	621a      	str	r2, [r3, #32]
}
 800825e:	bf00      	nop
 8008260:	371c      	adds	r7, #28
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
 800826a:	bf00      	nop
 800826c:	40012c00 	.word	0x40012c00
 8008270:	40013400 	.word	0x40013400
 8008274:	40014000 	.word	0x40014000
 8008278:	40014400 	.word	0x40014400
 800827c:	40014800 	.word	0x40014800

08008280 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008280:	b480      	push	{r7}
 8008282:	b087      	sub	sp, #28
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	6a1b      	ldr	r3, [r3, #32]
 8008290:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	6a1b      	ldr	r3, [r3, #32]
 8008296:	f023 0201 	bic.w	r2, r3, #1
 800829a:	68fb      	ldr	r3, [r7, #12]
 800829c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	699b      	ldr	r3, [r3, #24]
 80082a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082a4:	693b      	ldr	r3, [r7, #16]
 80082a6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082aa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	011b      	lsls	r3, r3, #4
 80082b0:	693a      	ldr	r2, [r7, #16]
 80082b2:	4313      	orrs	r3, r2
 80082b4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082b6:	697b      	ldr	r3, [r7, #20]
 80082b8:	f023 030a 	bic.w	r3, r3, #10
 80082bc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082be:	697a      	ldr	r2, [r7, #20]
 80082c0:	68bb      	ldr	r3, [r7, #8]
 80082c2:	4313      	orrs	r3, r2
 80082c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082c6:	68fb      	ldr	r3, [r7, #12]
 80082c8:	693a      	ldr	r2, [r7, #16]
 80082ca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	697a      	ldr	r2, [r7, #20]
 80082d0:	621a      	str	r2, [r3, #32]
}
 80082d2:	bf00      	nop
 80082d4:	371c      	adds	r7, #28
 80082d6:	46bd      	mov	sp, r7
 80082d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082dc:	4770      	bx	lr

080082de <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80082de:	b480      	push	{r7}
 80082e0:	b087      	sub	sp, #28
 80082e2:	af00      	add	r7, sp, #0
 80082e4:	60f8      	str	r0, [r7, #12]
 80082e6:	60b9      	str	r1, [r7, #8]
 80082e8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	6a1b      	ldr	r3, [r3, #32]
 80082ee:	f023 0210 	bic.w	r2, r3, #16
 80082f2:	68fb      	ldr	r3, [r7, #12]
 80082f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	699b      	ldr	r3, [r3, #24]
 80082fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	6a1b      	ldr	r3, [r3, #32]
 8008300:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008302:	697b      	ldr	r3, [r7, #20]
 8008304:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008308:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	031b      	lsls	r3, r3, #12
 800830e:	697a      	ldr	r2, [r7, #20]
 8008310:	4313      	orrs	r3, r2
 8008312:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008314:	693b      	ldr	r3, [r7, #16]
 8008316:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800831a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800831c:	68bb      	ldr	r3, [r7, #8]
 800831e:	011b      	lsls	r3, r3, #4
 8008320:	693a      	ldr	r2, [r7, #16]
 8008322:	4313      	orrs	r3, r2
 8008324:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	697a      	ldr	r2, [r7, #20]
 800832a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	693a      	ldr	r2, [r7, #16]
 8008330:	621a      	str	r2, [r3, #32]
}
 8008332:	bf00      	nop
 8008334:	371c      	adds	r7, #28
 8008336:	46bd      	mov	sp, r7
 8008338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800833c:	4770      	bx	lr

0800833e <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800833e:	b480      	push	{r7}
 8008340:	b085      	sub	sp, #20
 8008342:	af00      	add	r7, sp, #0
 8008344:	6078      	str	r0, [r7, #4]
 8008346:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	689b      	ldr	r3, [r3, #8]
 800834c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008354:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008358:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800835a:	683a      	ldr	r2, [r7, #0]
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	4313      	orrs	r3, r2
 8008360:	f043 0307 	orr.w	r3, r3, #7
 8008364:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	609a      	str	r2, [r3, #8]
}
 800836c:	bf00      	nop
 800836e:	3714      	adds	r7, #20
 8008370:	46bd      	mov	sp, r7
 8008372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008376:	4770      	bx	lr

08008378 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008378:	b480      	push	{r7}
 800837a:	b087      	sub	sp, #28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
 8008384:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008386:	68fb      	ldr	r3, [r7, #12]
 8008388:	689b      	ldr	r3, [r3, #8]
 800838a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800838c:	697b      	ldr	r3, [r7, #20]
 800838e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008392:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008394:	683b      	ldr	r3, [r7, #0]
 8008396:	021a      	lsls	r2, r3, #8
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	431a      	orrs	r2, r3
 800839c:	68bb      	ldr	r3, [r7, #8]
 800839e:	4313      	orrs	r3, r2
 80083a0:	697a      	ldr	r2, [r7, #20]
 80083a2:	4313      	orrs	r3, r2
 80083a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	697a      	ldr	r2, [r7, #20]
 80083aa:	609a      	str	r2, [r3, #8]
}
 80083ac:	bf00      	nop
 80083ae:	371c      	adds	r7, #28
 80083b0:	46bd      	mov	sp, r7
 80083b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b6:	4770      	bx	lr

080083b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80083c4:	68bb      	ldr	r3, [r7, #8]
 80083c6:	f003 031f 	and.w	r3, r3, #31
 80083ca:	2201      	movs	r2, #1
 80083cc:	fa02 f303 	lsl.w	r3, r2, r3
 80083d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80083d2:	68fb      	ldr	r3, [r7, #12]
 80083d4:	6a1a      	ldr	r2, [r3, #32]
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	43db      	mvns	r3, r3
 80083da:	401a      	ands	r2, r3
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	6a1a      	ldr	r2, [r3, #32]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	f003 031f 	and.w	r3, r3, #31
 80083ea:	6879      	ldr	r1, [r7, #4]
 80083ec:	fa01 f303 	lsl.w	r3, r1, r3
 80083f0:	431a      	orrs	r2, r3
 80083f2:	68fb      	ldr	r3, [r7, #12]
 80083f4:	621a      	str	r2, [r3, #32]
}
 80083f6:	bf00      	nop
 80083f8:	371c      	adds	r7, #28
 80083fa:	46bd      	mov	sp, r7
 80083fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008400:	4770      	bx	lr
	...

08008404 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008404:	b480      	push	{r7}
 8008406:	b085      	sub	sp, #20
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
 800840c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008414:	2b01      	cmp	r3, #1
 8008416:	d101      	bne.n	800841c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008418:	2302      	movs	r3, #2
 800841a:	e065      	b.n	80084e8 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2201      	movs	r2, #1
 8008420:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2202      	movs	r2, #2
 8008428:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	685b      	ldr	r3, [r3, #4]
 8008432:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	689b      	ldr	r3, [r3, #8]
 800843a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	681b      	ldr	r3, [r3, #0]
 8008440:	4a2c      	ldr	r2, [pc, #176]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008442:	4293      	cmp	r3, r2
 8008444:	d004      	beq.n	8008450 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	4a2b      	ldr	r2, [pc, #172]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d108      	bne.n	8008462 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008456:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008458:	683b      	ldr	r3, [r7, #0]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	68fa      	ldr	r2, [r7, #12]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008468:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800846c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800846e:	683b      	ldr	r3, [r7, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	68fa      	ldr	r2, [r7, #12]
 8008474:	4313      	orrs	r3, r2
 8008476:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	68fa      	ldr	r2, [r7, #12]
 800847e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	4a1b      	ldr	r2, [pc, #108]	; (80084f4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008486:	4293      	cmp	r3, r2
 8008488:	d018      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	681b      	ldr	r3, [r3, #0]
 800848e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008492:	d013      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	4a18      	ldr	r2, [pc, #96]	; (80084fc <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800849a:	4293      	cmp	r3, r2
 800849c:	d00e      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	4a17      	ldr	r2, [pc, #92]	; (8008500 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80084a4:	4293      	cmp	r3, r2
 80084a6:	d009      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	4a12      	ldr	r2, [pc, #72]	; (80084f8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80084ae:	4293      	cmp	r3, r2
 80084b0:	d004      	beq.n	80084bc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	4a13      	ldr	r2, [pc, #76]	; (8008504 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80084b8:	4293      	cmp	r3, r2
 80084ba:	d10c      	bne.n	80084d6 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80084bc:	68bb      	ldr	r3, [r7, #8]
 80084be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80084c2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80084c4:	683b      	ldr	r3, [r7, #0]
 80084c6:	689b      	ldr	r3, [r3, #8]
 80084c8:	68ba      	ldr	r2, [r7, #8]
 80084ca:	4313      	orrs	r3, r2
 80084cc:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68ba      	ldr	r2, [r7, #8]
 80084d4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	2201      	movs	r2, #1
 80084da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	2200      	movs	r2, #0
 80084e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80084e6:	2300      	movs	r3, #0
}
 80084e8:	4618      	mov	r0, r3
 80084ea:	3714      	adds	r7, #20
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	40012c00 	.word	0x40012c00
 80084f8:	40013400 	.word	0x40013400
 80084fc:	40000400 	.word	0x40000400
 8008500:	40000800 	.word	0x40000800
 8008504:	40014000 	.word	0x40014000

08008508 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008508:	b480      	push	{r7}
 800850a:	b083      	sub	sp, #12
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008510:	bf00      	nop
 8008512:	370c      	adds	r7, #12
 8008514:	46bd      	mov	sp, r7
 8008516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851a:	4770      	bx	lr

0800851c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b480      	push	{r7}
 800851e:	b083      	sub	sp, #12
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008524:	bf00      	nop
 8008526:	370c      	adds	r7, #12
 8008528:	46bd      	mov	sp, r7
 800852a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800852e:	4770      	bx	lr

08008530 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008530:	b480      	push	{r7}
 8008532:	b083      	sub	sp, #12
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008538:	bf00      	nop
 800853a:	370c      	adds	r7, #12
 800853c:	46bd      	mov	sp, r7
 800853e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008542:	4770      	bx	lr

08008544 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008544:	b480      	push	{r7}
 8008546:	b083      	sub	sp, #12
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800854c:	bf00      	nop
 800854e:	370c      	adds	r7, #12
 8008550:	46bd      	mov	sp, r7
 8008552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008556:	4770      	bx	lr

08008558 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008558:	b480      	push	{r7}
 800855a:	b083      	sub	sp, #12
 800855c:	af00      	add	r7, sp, #0
 800855e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008560:	bf00      	nop
 8008562:	370c      	adds	r7, #12
 8008564:	46bd      	mov	sp, r7
 8008566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800856a:	4770      	bx	lr

0800856c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800856c:	b480      	push	{r7}
 800856e:	b083      	sub	sp, #12
 8008570:	af00      	add	r7, sp, #0
 8008572:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008574:	bf00      	nop
 8008576:	370c      	adds	r7, #12
 8008578:	46bd      	mov	sp, r7
 800857a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857e:	4770      	bx	lr

08008580 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008580:	b480      	push	{r7}
 8008582:	b083      	sub	sp, #12
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008588:	bf00      	nop
 800858a:	370c      	adds	r7, #12
 800858c:	46bd      	mov	sp, r7
 800858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008592:	4770      	bx	lr

08008594 <__errno>:
 8008594:	4b01      	ldr	r3, [pc, #4]	; (800859c <__errno+0x8>)
 8008596:	6818      	ldr	r0, [r3, #0]
 8008598:	4770      	bx	lr
 800859a:	bf00      	nop
 800859c:	20000010 	.word	0x20000010

080085a0 <__libc_init_array>:
 80085a0:	b570      	push	{r4, r5, r6, lr}
 80085a2:	4d0d      	ldr	r5, [pc, #52]	; (80085d8 <__libc_init_array+0x38>)
 80085a4:	4c0d      	ldr	r4, [pc, #52]	; (80085dc <__libc_init_array+0x3c>)
 80085a6:	1b64      	subs	r4, r4, r5
 80085a8:	10a4      	asrs	r4, r4, #2
 80085aa:	2600      	movs	r6, #0
 80085ac:	42a6      	cmp	r6, r4
 80085ae:	d109      	bne.n	80085c4 <__libc_init_array+0x24>
 80085b0:	4d0b      	ldr	r5, [pc, #44]	; (80085e0 <__libc_init_array+0x40>)
 80085b2:	4c0c      	ldr	r4, [pc, #48]	; (80085e4 <__libc_init_array+0x44>)
 80085b4:	f001 f97a 	bl	80098ac <_init>
 80085b8:	1b64      	subs	r4, r4, r5
 80085ba:	10a4      	asrs	r4, r4, #2
 80085bc:	2600      	movs	r6, #0
 80085be:	42a6      	cmp	r6, r4
 80085c0:	d105      	bne.n	80085ce <__libc_init_array+0x2e>
 80085c2:	bd70      	pop	{r4, r5, r6, pc}
 80085c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085c8:	4798      	blx	r3
 80085ca:	3601      	adds	r6, #1
 80085cc:	e7ee      	b.n	80085ac <__libc_init_array+0xc>
 80085ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d2:	4798      	blx	r3
 80085d4:	3601      	adds	r6, #1
 80085d6:	e7f2      	b.n	80085be <__libc_init_array+0x1e>
 80085d8:	08009fbc 	.word	0x08009fbc
 80085dc:	08009fbc 	.word	0x08009fbc
 80085e0:	08009fbc 	.word	0x08009fbc
 80085e4:	08009fc0 	.word	0x08009fc0

080085e8 <memset>:
 80085e8:	4402      	add	r2, r0
 80085ea:	4603      	mov	r3, r0
 80085ec:	4293      	cmp	r3, r2
 80085ee:	d100      	bne.n	80085f2 <memset+0xa>
 80085f0:	4770      	bx	lr
 80085f2:	f803 1b01 	strb.w	r1, [r3], #1
 80085f6:	e7f9      	b.n	80085ec <memset+0x4>

080085f8 <iprintf>:
 80085f8:	b40f      	push	{r0, r1, r2, r3}
 80085fa:	4b0a      	ldr	r3, [pc, #40]	; (8008624 <iprintf+0x2c>)
 80085fc:	b513      	push	{r0, r1, r4, lr}
 80085fe:	681c      	ldr	r4, [r3, #0]
 8008600:	b124      	cbz	r4, 800860c <iprintf+0x14>
 8008602:	69a3      	ldr	r3, [r4, #24]
 8008604:	b913      	cbnz	r3, 800860c <iprintf+0x14>
 8008606:	4620      	mov	r0, r4
 8008608:	f000 fa74 	bl	8008af4 <__sinit>
 800860c:	ab05      	add	r3, sp, #20
 800860e:	9a04      	ldr	r2, [sp, #16]
 8008610:	68a1      	ldr	r1, [r4, #8]
 8008612:	9301      	str	r3, [sp, #4]
 8008614:	4620      	mov	r0, r4
 8008616:	f000 fc45 	bl	8008ea4 <_vfiprintf_r>
 800861a:	b002      	add	sp, #8
 800861c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008620:	b004      	add	sp, #16
 8008622:	4770      	bx	lr
 8008624:	20000010 	.word	0x20000010

08008628 <putchar>:
 8008628:	4b09      	ldr	r3, [pc, #36]	; (8008650 <putchar+0x28>)
 800862a:	b513      	push	{r0, r1, r4, lr}
 800862c:	681c      	ldr	r4, [r3, #0]
 800862e:	4601      	mov	r1, r0
 8008630:	b134      	cbz	r4, 8008640 <putchar+0x18>
 8008632:	69a3      	ldr	r3, [r4, #24]
 8008634:	b923      	cbnz	r3, 8008640 <putchar+0x18>
 8008636:	9001      	str	r0, [sp, #4]
 8008638:	4620      	mov	r0, r4
 800863a:	f000 fa5b 	bl	8008af4 <__sinit>
 800863e:	9901      	ldr	r1, [sp, #4]
 8008640:	68a2      	ldr	r2, [r4, #8]
 8008642:	4620      	mov	r0, r4
 8008644:	b002      	add	sp, #8
 8008646:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800864a:	f000 beef 	b.w	800942c <_putc_r>
 800864e:	bf00      	nop
 8008650:	20000010 	.word	0x20000010

08008654 <_puts_r>:
 8008654:	b570      	push	{r4, r5, r6, lr}
 8008656:	460e      	mov	r6, r1
 8008658:	4605      	mov	r5, r0
 800865a:	b118      	cbz	r0, 8008664 <_puts_r+0x10>
 800865c:	6983      	ldr	r3, [r0, #24]
 800865e:	b90b      	cbnz	r3, 8008664 <_puts_r+0x10>
 8008660:	f000 fa48 	bl	8008af4 <__sinit>
 8008664:	69ab      	ldr	r3, [r5, #24]
 8008666:	68ac      	ldr	r4, [r5, #8]
 8008668:	b913      	cbnz	r3, 8008670 <_puts_r+0x1c>
 800866a:	4628      	mov	r0, r5
 800866c:	f000 fa42 	bl	8008af4 <__sinit>
 8008670:	4b2c      	ldr	r3, [pc, #176]	; (8008724 <_puts_r+0xd0>)
 8008672:	429c      	cmp	r4, r3
 8008674:	d120      	bne.n	80086b8 <_puts_r+0x64>
 8008676:	686c      	ldr	r4, [r5, #4]
 8008678:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800867a:	07db      	lsls	r3, r3, #31
 800867c:	d405      	bmi.n	800868a <_puts_r+0x36>
 800867e:	89a3      	ldrh	r3, [r4, #12]
 8008680:	0598      	lsls	r0, r3, #22
 8008682:	d402      	bmi.n	800868a <_puts_r+0x36>
 8008684:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008686:	f000 fad3 	bl	8008c30 <__retarget_lock_acquire_recursive>
 800868a:	89a3      	ldrh	r3, [r4, #12]
 800868c:	0719      	lsls	r1, r3, #28
 800868e:	d51d      	bpl.n	80086cc <_puts_r+0x78>
 8008690:	6923      	ldr	r3, [r4, #16]
 8008692:	b1db      	cbz	r3, 80086cc <_puts_r+0x78>
 8008694:	3e01      	subs	r6, #1
 8008696:	68a3      	ldr	r3, [r4, #8]
 8008698:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800869c:	3b01      	subs	r3, #1
 800869e:	60a3      	str	r3, [r4, #8]
 80086a0:	bb39      	cbnz	r1, 80086f2 <_puts_r+0x9e>
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	da38      	bge.n	8008718 <_puts_r+0xc4>
 80086a6:	4622      	mov	r2, r4
 80086a8:	210a      	movs	r1, #10
 80086aa:	4628      	mov	r0, r5
 80086ac:	f000 f848 	bl	8008740 <__swbuf_r>
 80086b0:	3001      	adds	r0, #1
 80086b2:	d011      	beq.n	80086d8 <_puts_r+0x84>
 80086b4:	250a      	movs	r5, #10
 80086b6:	e011      	b.n	80086dc <_puts_r+0x88>
 80086b8:	4b1b      	ldr	r3, [pc, #108]	; (8008728 <_puts_r+0xd4>)
 80086ba:	429c      	cmp	r4, r3
 80086bc:	d101      	bne.n	80086c2 <_puts_r+0x6e>
 80086be:	68ac      	ldr	r4, [r5, #8]
 80086c0:	e7da      	b.n	8008678 <_puts_r+0x24>
 80086c2:	4b1a      	ldr	r3, [pc, #104]	; (800872c <_puts_r+0xd8>)
 80086c4:	429c      	cmp	r4, r3
 80086c6:	bf08      	it	eq
 80086c8:	68ec      	ldreq	r4, [r5, #12]
 80086ca:	e7d5      	b.n	8008678 <_puts_r+0x24>
 80086cc:	4621      	mov	r1, r4
 80086ce:	4628      	mov	r0, r5
 80086d0:	f000 f888 	bl	80087e4 <__swsetup_r>
 80086d4:	2800      	cmp	r0, #0
 80086d6:	d0dd      	beq.n	8008694 <_puts_r+0x40>
 80086d8:	f04f 35ff 	mov.w	r5, #4294967295
 80086dc:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80086de:	07da      	lsls	r2, r3, #31
 80086e0:	d405      	bmi.n	80086ee <_puts_r+0x9a>
 80086e2:	89a3      	ldrh	r3, [r4, #12]
 80086e4:	059b      	lsls	r3, r3, #22
 80086e6:	d402      	bmi.n	80086ee <_puts_r+0x9a>
 80086e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80086ea:	f000 faa2 	bl	8008c32 <__retarget_lock_release_recursive>
 80086ee:	4628      	mov	r0, r5
 80086f0:	bd70      	pop	{r4, r5, r6, pc}
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	da04      	bge.n	8008700 <_puts_r+0xac>
 80086f6:	69a2      	ldr	r2, [r4, #24]
 80086f8:	429a      	cmp	r2, r3
 80086fa:	dc06      	bgt.n	800870a <_puts_r+0xb6>
 80086fc:	290a      	cmp	r1, #10
 80086fe:	d004      	beq.n	800870a <_puts_r+0xb6>
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	1c5a      	adds	r2, r3, #1
 8008704:	6022      	str	r2, [r4, #0]
 8008706:	7019      	strb	r1, [r3, #0]
 8008708:	e7c5      	b.n	8008696 <_puts_r+0x42>
 800870a:	4622      	mov	r2, r4
 800870c:	4628      	mov	r0, r5
 800870e:	f000 f817 	bl	8008740 <__swbuf_r>
 8008712:	3001      	adds	r0, #1
 8008714:	d1bf      	bne.n	8008696 <_puts_r+0x42>
 8008716:	e7df      	b.n	80086d8 <_puts_r+0x84>
 8008718:	6823      	ldr	r3, [r4, #0]
 800871a:	250a      	movs	r5, #10
 800871c:	1c5a      	adds	r2, r3, #1
 800871e:	6022      	str	r2, [r4, #0]
 8008720:	701d      	strb	r5, [r3, #0]
 8008722:	e7db      	b.n	80086dc <_puts_r+0x88>
 8008724:	08009f40 	.word	0x08009f40
 8008728:	08009f60 	.word	0x08009f60
 800872c:	08009f20 	.word	0x08009f20

08008730 <puts>:
 8008730:	4b02      	ldr	r3, [pc, #8]	; (800873c <puts+0xc>)
 8008732:	4601      	mov	r1, r0
 8008734:	6818      	ldr	r0, [r3, #0]
 8008736:	f7ff bf8d 	b.w	8008654 <_puts_r>
 800873a:	bf00      	nop
 800873c:	20000010 	.word	0x20000010

08008740 <__swbuf_r>:
 8008740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008742:	460e      	mov	r6, r1
 8008744:	4614      	mov	r4, r2
 8008746:	4605      	mov	r5, r0
 8008748:	b118      	cbz	r0, 8008752 <__swbuf_r+0x12>
 800874a:	6983      	ldr	r3, [r0, #24]
 800874c:	b90b      	cbnz	r3, 8008752 <__swbuf_r+0x12>
 800874e:	f000 f9d1 	bl	8008af4 <__sinit>
 8008752:	4b21      	ldr	r3, [pc, #132]	; (80087d8 <__swbuf_r+0x98>)
 8008754:	429c      	cmp	r4, r3
 8008756:	d12b      	bne.n	80087b0 <__swbuf_r+0x70>
 8008758:	686c      	ldr	r4, [r5, #4]
 800875a:	69a3      	ldr	r3, [r4, #24]
 800875c:	60a3      	str	r3, [r4, #8]
 800875e:	89a3      	ldrh	r3, [r4, #12]
 8008760:	071a      	lsls	r2, r3, #28
 8008762:	d52f      	bpl.n	80087c4 <__swbuf_r+0x84>
 8008764:	6923      	ldr	r3, [r4, #16]
 8008766:	b36b      	cbz	r3, 80087c4 <__swbuf_r+0x84>
 8008768:	6923      	ldr	r3, [r4, #16]
 800876a:	6820      	ldr	r0, [r4, #0]
 800876c:	1ac0      	subs	r0, r0, r3
 800876e:	6963      	ldr	r3, [r4, #20]
 8008770:	b2f6      	uxtb	r6, r6
 8008772:	4283      	cmp	r3, r0
 8008774:	4637      	mov	r7, r6
 8008776:	dc04      	bgt.n	8008782 <__swbuf_r+0x42>
 8008778:	4621      	mov	r1, r4
 800877a:	4628      	mov	r0, r5
 800877c:	f000 f926 	bl	80089cc <_fflush_r>
 8008780:	bb30      	cbnz	r0, 80087d0 <__swbuf_r+0x90>
 8008782:	68a3      	ldr	r3, [r4, #8]
 8008784:	3b01      	subs	r3, #1
 8008786:	60a3      	str	r3, [r4, #8]
 8008788:	6823      	ldr	r3, [r4, #0]
 800878a:	1c5a      	adds	r2, r3, #1
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	701e      	strb	r6, [r3, #0]
 8008790:	6963      	ldr	r3, [r4, #20]
 8008792:	3001      	adds	r0, #1
 8008794:	4283      	cmp	r3, r0
 8008796:	d004      	beq.n	80087a2 <__swbuf_r+0x62>
 8008798:	89a3      	ldrh	r3, [r4, #12]
 800879a:	07db      	lsls	r3, r3, #31
 800879c:	d506      	bpl.n	80087ac <__swbuf_r+0x6c>
 800879e:	2e0a      	cmp	r6, #10
 80087a0:	d104      	bne.n	80087ac <__swbuf_r+0x6c>
 80087a2:	4621      	mov	r1, r4
 80087a4:	4628      	mov	r0, r5
 80087a6:	f000 f911 	bl	80089cc <_fflush_r>
 80087aa:	b988      	cbnz	r0, 80087d0 <__swbuf_r+0x90>
 80087ac:	4638      	mov	r0, r7
 80087ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80087b0:	4b0a      	ldr	r3, [pc, #40]	; (80087dc <__swbuf_r+0x9c>)
 80087b2:	429c      	cmp	r4, r3
 80087b4:	d101      	bne.n	80087ba <__swbuf_r+0x7a>
 80087b6:	68ac      	ldr	r4, [r5, #8]
 80087b8:	e7cf      	b.n	800875a <__swbuf_r+0x1a>
 80087ba:	4b09      	ldr	r3, [pc, #36]	; (80087e0 <__swbuf_r+0xa0>)
 80087bc:	429c      	cmp	r4, r3
 80087be:	bf08      	it	eq
 80087c0:	68ec      	ldreq	r4, [r5, #12]
 80087c2:	e7ca      	b.n	800875a <__swbuf_r+0x1a>
 80087c4:	4621      	mov	r1, r4
 80087c6:	4628      	mov	r0, r5
 80087c8:	f000 f80c 	bl	80087e4 <__swsetup_r>
 80087cc:	2800      	cmp	r0, #0
 80087ce:	d0cb      	beq.n	8008768 <__swbuf_r+0x28>
 80087d0:	f04f 37ff 	mov.w	r7, #4294967295
 80087d4:	e7ea      	b.n	80087ac <__swbuf_r+0x6c>
 80087d6:	bf00      	nop
 80087d8:	08009f40 	.word	0x08009f40
 80087dc:	08009f60 	.word	0x08009f60
 80087e0:	08009f20 	.word	0x08009f20

080087e4 <__swsetup_r>:
 80087e4:	4b32      	ldr	r3, [pc, #200]	; (80088b0 <__swsetup_r+0xcc>)
 80087e6:	b570      	push	{r4, r5, r6, lr}
 80087e8:	681d      	ldr	r5, [r3, #0]
 80087ea:	4606      	mov	r6, r0
 80087ec:	460c      	mov	r4, r1
 80087ee:	b125      	cbz	r5, 80087fa <__swsetup_r+0x16>
 80087f0:	69ab      	ldr	r3, [r5, #24]
 80087f2:	b913      	cbnz	r3, 80087fa <__swsetup_r+0x16>
 80087f4:	4628      	mov	r0, r5
 80087f6:	f000 f97d 	bl	8008af4 <__sinit>
 80087fa:	4b2e      	ldr	r3, [pc, #184]	; (80088b4 <__swsetup_r+0xd0>)
 80087fc:	429c      	cmp	r4, r3
 80087fe:	d10f      	bne.n	8008820 <__swsetup_r+0x3c>
 8008800:	686c      	ldr	r4, [r5, #4]
 8008802:	89a3      	ldrh	r3, [r4, #12]
 8008804:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008808:	0719      	lsls	r1, r3, #28
 800880a:	d42c      	bmi.n	8008866 <__swsetup_r+0x82>
 800880c:	06dd      	lsls	r5, r3, #27
 800880e:	d411      	bmi.n	8008834 <__swsetup_r+0x50>
 8008810:	2309      	movs	r3, #9
 8008812:	6033      	str	r3, [r6, #0]
 8008814:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008818:	81a3      	strh	r3, [r4, #12]
 800881a:	f04f 30ff 	mov.w	r0, #4294967295
 800881e:	e03e      	b.n	800889e <__swsetup_r+0xba>
 8008820:	4b25      	ldr	r3, [pc, #148]	; (80088b8 <__swsetup_r+0xd4>)
 8008822:	429c      	cmp	r4, r3
 8008824:	d101      	bne.n	800882a <__swsetup_r+0x46>
 8008826:	68ac      	ldr	r4, [r5, #8]
 8008828:	e7eb      	b.n	8008802 <__swsetup_r+0x1e>
 800882a:	4b24      	ldr	r3, [pc, #144]	; (80088bc <__swsetup_r+0xd8>)
 800882c:	429c      	cmp	r4, r3
 800882e:	bf08      	it	eq
 8008830:	68ec      	ldreq	r4, [r5, #12]
 8008832:	e7e6      	b.n	8008802 <__swsetup_r+0x1e>
 8008834:	0758      	lsls	r0, r3, #29
 8008836:	d512      	bpl.n	800885e <__swsetup_r+0x7a>
 8008838:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800883a:	b141      	cbz	r1, 800884e <__swsetup_r+0x6a>
 800883c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008840:	4299      	cmp	r1, r3
 8008842:	d002      	beq.n	800884a <__swsetup_r+0x66>
 8008844:	4630      	mov	r0, r6
 8008846:	f000 fa59 	bl	8008cfc <_free_r>
 800884a:	2300      	movs	r3, #0
 800884c:	6363      	str	r3, [r4, #52]	; 0x34
 800884e:	89a3      	ldrh	r3, [r4, #12]
 8008850:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008854:	81a3      	strh	r3, [r4, #12]
 8008856:	2300      	movs	r3, #0
 8008858:	6063      	str	r3, [r4, #4]
 800885a:	6923      	ldr	r3, [r4, #16]
 800885c:	6023      	str	r3, [r4, #0]
 800885e:	89a3      	ldrh	r3, [r4, #12]
 8008860:	f043 0308 	orr.w	r3, r3, #8
 8008864:	81a3      	strh	r3, [r4, #12]
 8008866:	6923      	ldr	r3, [r4, #16]
 8008868:	b94b      	cbnz	r3, 800887e <__swsetup_r+0x9a>
 800886a:	89a3      	ldrh	r3, [r4, #12]
 800886c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008870:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008874:	d003      	beq.n	800887e <__swsetup_r+0x9a>
 8008876:	4621      	mov	r1, r4
 8008878:	4630      	mov	r0, r6
 800887a:	f000 f9ff 	bl	8008c7c <__smakebuf_r>
 800887e:	89a0      	ldrh	r0, [r4, #12]
 8008880:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008884:	f010 0301 	ands.w	r3, r0, #1
 8008888:	d00a      	beq.n	80088a0 <__swsetup_r+0xbc>
 800888a:	2300      	movs	r3, #0
 800888c:	60a3      	str	r3, [r4, #8]
 800888e:	6963      	ldr	r3, [r4, #20]
 8008890:	425b      	negs	r3, r3
 8008892:	61a3      	str	r3, [r4, #24]
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	b943      	cbnz	r3, 80088aa <__swsetup_r+0xc6>
 8008898:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800889c:	d1ba      	bne.n	8008814 <__swsetup_r+0x30>
 800889e:	bd70      	pop	{r4, r5, r6, pc}
 80088a0:	0781      	lsls	r1, r0, #30
 80088a2:	bf58      	it	pl
 80088a4:	6963      	ldrpl	r3, [r4, #20]
 80088a6:	60a3      	str	r3, [r4, #8]
 80088a8:	e7f4      	b.n	8008894 <__swsetup_r+0xb0>
 80088aa:	2000      	movs	r0, #0
 80088ac:	e7f7      	b.n	800889e <__swsetup_r+0xba>
 80088ae:	bf00      	nop
 80088b0:	20000010 	.word	0x20000010
 80088b4:	08009f40 	.word	0x08009f40
 80088b8:	08009f60 	.word	0x08009f60
 80088bc:	08009f20 	.word	0x08009f20

080088c0 <__sflush_r>:
 80088c0:	898a      	ldrh	r2, [r1, #12]
 80088c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80088c6:	4605      	mov	r5, r0
 80088c8:	0710      	lsls	r0, r2, #28
 80088ca:	460c      	mov	r4, r1
 80088cc:	d458      	bmi.n	8008980 <__sflush_r+0xc0>
 80088ce:	684b      	ldr	r3, [r1, #4]
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	dc05      	bgt.n	80088e0 <__sflush_r+0x20>
 80088d4:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	dc02      	bgt.n	80088e0 <__sflush_r+0x20>
 80088da:	2000      	movs	r0, #0
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80088e2:	2e00      	cmp	r6, #0
 80088e4:	d0f9      	beq.n	80088da <__sflush_r+0x1a>
 80088e6:	2300      	movs	r3, #0
 80088e8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80088ec:	682f      	ldr	r7, [r5, #0]
 80088ee:	602b      	str	r3, [r5, #0]
 80088f0:	d032      	beq.n	8008958 <__sflush_r+0x98>
 80088f2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80088f4:	89a3      	ldrh	r3, [r4, #12]
 80088f6:	075a      	lsls	r2, r3, #29
 80088f8:	d505      	bpl.n	8008906 <__sflush_r+0x46>
 80088fa:	6863      	ldr	r3, [r4, #4]
 80088fc:	1ac0      	subs	r0, r0, r3
 80088fe:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008900:	b10b      	cbz	r3, 8008906 <__sflush_r+0x46>
 8008902:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008904:	1ac0      	subs	r0, r0, r3
 8008906:	2300      	movs	r3, #0
 8008908:	4602      	mov	r2, r0
 800890a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800890c:	6a21      	ldr	r1, [r4, #32]
 800890e:	4628      	mov	r0, r5
 8008910:	47b0      	blx	r6
 8008912:	1c43      	adds	r3, r0, #1
 8008914:	89a3      	ldrh	r3, [r4, #12]
 8008916:	d106      	bne.n	8008926 <__sflush_r+0x66>
 8008918:	6829      	ldr	r1, [r5, #0]
 800891a:	291d      	cmp	r1, #29
 800891c:	d82c      	bhi.n	8008978 <__sflush_r+0xb8>
 800891e:	4a2a      	ldr	r2, [pc, #168]	; (80089c8 <__sflush_r+0x108>)
 8008920:	40ca      	lsrs	r2, r1
 8008922:	07d6      	lsls	r6, r2, #31
 8008924:	d528      	bpl.n	8008978 <__sflush_r+0xb8>
 8008926:	2200      	movs	r2, #0
 8008928:	6062      	str	r2, [r4, #4]
 800892a:	04d9      	lsls	r1, r3, #19
 800892c:	6922      	ldr	r2, [r4, #16]
 800892e:	6022      	str	r2, [r4, #0]
 8008930:	d504      	bpl.n	800893c <__sflush_r+0x7c>
 8008932:	1c42      	adds	r2, r0, #1
 8008934:	d101      	bne.n	800893a <__sflush_r+0x7a>
 8008936:	682b      	ldr	r3, [r5, #0]
 8008938:	b903      	cbnz	r3, 800893c <__sflush_r+0x7c>
 800893a:	6560      	str	r0, [r4, #84]	; 0x54
 800893c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800893e:	602f      	str	r7, [r5, #0]
 8008940:	2900      	cmp	r1, #0
 8008942:	d0ca      	beq.n	80088da <__sflush_r+0x1a>
 8008944:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008948:	4299      	cmp	r1, r3
 800894a:	d002      	beq.n	8008952 <__sflush_r+0x92>
 800894c:	4628      	mov	r0, r5
 800894e:	f000 f9d5 	bl	8008cfc <_free_r>
 8008952:	2000      	movs	r0, #0
 8008954:	6360      	str	r0, [r4, #52]	; 0x34
 8008956:	e7c1      	b.n	80088dc <__sflush_r+0x1c>
 8008958:	6a21      	ldr	r1, [r4, #32]
 800895a:	2301      	movs	r3, #1
 800895c:	4628      	mov	r0, r5
 800895e:	47b0      	blx	r6
 8008960:	1c41      	adds	r1, r0, #1
 8008962:	d1c7      	bne.n	80088f4 <__sflush_r+0x34>
 8008964:	682b      	ldr	r3, [r5, #0]
 8008966:	2b00      	cmp	r3, #0
 8008968:	d0c4      	beq.n	80088f4 <__sflush_r+0x34>
 800896a:	2b1d      	cmp	r3, #29
 800896c:	d001      	beq.n	8008972 <__sflush_r+0xb2>
 800896e:	2b16      	cmp	r3, #22
 8008970:	d101      	bne.n	8008976 <__sflush_r+0xb6>
 8008972:	602f      	str	r7, [r5, #0]
 8008974:	e7b1      	b.n	80088da <__sflush_r+0x1a>
 8008976:	89a3      	ldrh	r3, [r4, #12]
 8008978:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800897c:	81a3      	strh	r3, [r4, #12]
 800897e:	e7ad      	b.n	80088dc <__sflush_r+0x1c>
 8008980:	690f      	ldr	r7, [r1, #16]
 8008982:	2f00      	cmp	r7, #0
 8008984:	d0a9      	beq.n	80088da <__sflush_r+0x1a>
 8008986:	0793      	lsls	r3, r2, #30
 8008988:	680e      	ldr	r6, [r1, #0]
 800898a:	bf08      	it	eq
 800898c:	694b      	ldreq	r3, [r1, #20]
 800898e:	600f      	str	r7, [r1, #0]
 8008990:	bf18      	it	ne
 8008992:	2300      	movne	r3, #0
 8008994:	eba6 0807 	sub.w	r8, r6, r7
 8008998:	608b      	str	r3, [r1, #8]
 800899a:	f1b8 0f00 	cmp.w	r8, #0
 800899e:	dd9c      	ble.n	80088da <__sflush_r+0x1a>
 80089a0:	6a21      	ldr	r1, [r4, #32]
 80089a2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80089a4:	4643      	mov	r3, r8
 80089a6:	463a      	mov	r2, r7
 80089a8:	4628      	mov	r0, r5
 80089aa:	47b0      	blx	r6
 80089ac:	2800      	cmp	r0, #0
 80089ae:	dc06      	bgt.n	80089be <__sflush_r+0xfe>
 80089b0:	89a3      	ldrh	r3, [r4, #12]
 80089b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089b6:	81a3      	strh	r3, [r4, #12]
 80089b8:	f04f 30ff 	mov.w	r0, #4294967295
 80089bc:	e78e      	b.n	80088dc <__sflush_r+0x1c>
 80089be:	4407      	add	r7, r0
 80089c0:	eba8 0800 	sub.w	r8, r8, r0
 80089c4:	e7e9      	b.n	800899a <__sflush_r+0xda>
 80089c6:	bf00      	nop
 80089c8:	20400001 	.word	0x20400001

080089cc <_fflush_r>:
 80089cc:	b538      	push	{r3, r4, r5, lr}
 80089ce:	690b      	ldr	r3, [r1, #16]
 80089d0:	4605      	mov	r5, r0
 80089d2:	460c      	mov	r4, r1
 80089d4:	b913      	cbnz	r3, 80089dc <_fflush_r+0x10>
 80089d6:	2500      	movs	r5, #0
 80089d8:	4628      	mov	r0, r5
 80089da:	bd38      	pop	{r3, r4, r5, pc}
 80089dc:	b118      	cbz	r0, 80089e6 <_fflush_r+0x1a>
 80089de:	6983      	ldr	r3, [r0, #24]
 80089e0:	b90b      	cbnz	r3, 80089e6 <_fflush_r+0x1a>
 80089e2:	f000 f887 	bl	8008af4 <__sinit>
 80089e6:	4b14      	ldr	r3, [pc, #80]	; (8008a38 <_fflush_r+0x6c>)
 80089e8:	429c      	cmp	r4, r3
 80089ea:	d11b      	bne.n	8008a24 <_fflush_r+0x58>
 80089ec:	686c      	ldr	r4, [r5, #4]
 80089ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d0ef      	beq.n	80089d6 <_fflush_r+0xa>
 80089f6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80089f8:	07d0      	lsls	r0, r2, #31
 80089fa:	d404      	bmi.n	8008a06 <_fflush_r+0x3a>
 80089fc:	0599      	lsls	r1, r3, #22
 80089fe:	d402      	bmi.n	8008a06 <_fflush_r+0x3a>
 8008a00:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a02:	f000 f915 	bl	8008c30 <__retarget_lock_acquire_recursive>
 8008a06:	4628      	mov	r0, r5
 8008a08:	4621      	mov	r1, r4
 8008a0a:	f7ff ff59 	bl	80088c0 <__sflush_r>
 8008a0e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008a10:	07da      	lsls	r2, r3, #31
 8008a12:	4605      	mov	r5, r0
 8008a14:	d4e0      	bmi.n	80089d8 <_fflush_r+0xc>
 8008a16:	89a3      	ldrh	r3, [r4, #12]
 8008a18:	059b      	lsls	r3, r3, #22
 8008a1a:	d4dd      	bmi.n	80089d8 <_fflush_r+0xc>
 8008a1c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008a1e:	f000 f908 	bl	8008c32 <__retarget_lock_release_recursive>
 8008a22:	e7d9      	b.n	80089d8 <_fflush_r+0xc>
 8008a24:	4b05      	ldr	r3, [pc, #20]	; (8008a3c <_fflush_r+0x70>)
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d101      	bne.n	8008a2e <_fflush_r+0x62>
 8008a2a:	68ac      	ldr	r4, [r5, #8]
 8008a2c:	e7df      	b.n	80089ee <_fflush_r+0x22>
 8008a2e:	4b04      	ldr	r3, [pc, #16]	; (8008a40 <_fflush_r+0x74>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	bf08      	it	eq
 8008a34:	68ec      	ldreq	r4, [r5, #12]
 8008a36:	e7da      	b.n	80089ee <_fflush_r+0x22>
 8008a38:	08009f40 	.word	0x08009f40
 8008a3c:	08009f60 	.word	0x08009f60
 8008a40:	08009f20 	.word	0x08009f20

08008a44 <std>:
 8008a44:	2300      	movs	r3, #0
 8008a46:	b510      	push	{r4, lr}
 8008a48:	4604      	mov	r4, r0
 8008a4a:	e9c0 3300 	strd	r3, r3, [r0]
 8008a4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008a52:	6083      	str	r3, [r0, #8]
 8008a54:	8181      	strh	r1, [r0, #12]
 8008a56:	6643      	str	r3, [r0, #100]	; 0x64
 8008a58:	81c2      	strh	r2, [r0, #14]
 8008a5a:	6183      	str	r3, [r0, #24]
 8008a5c:	4619      	mov	r1, r3
 8008a5e:	2208      	movs	r2, #8
 8008a60:	305c      	adds	r0, #92	; 0x5c
 8008a62:	f7ff fdc1 	bl	80085e8 <memset>
 8008a66:	4b05      	ldr	r3, [pc, #20]	; (8008a7c <std+0x38>)
 8008a68:	6263      	str	r3, [r4, #36]	; 0x24
 8008a6a:	4b05      	ldr	r3, [pc, #20]	; (8008a80 <std+0x3c>)
 8008a6c:	62a3      	str	r3, [r4, #40]	; 0x28
 8008a6e:	4b05      	ldr	r3, [pc, #20]	; (8008a84 <std+0x40>)
 8008a70:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008a72:	4b05      	ldr	r3, [pc, #20]	; (8008a88 <std+0x44>)
 8008a74:	6224      	str	r4, [r4, #32]
 8008a76:	6323      	str	r3, [r4, #48]	; 0x30
 8008a78:	bd10      	pop	{r4, pc}
 8008a7a:	bf00      	nop
 8008a7c:	080094dd 	.word	0x080094dd
 8008a80:	080094ff 	.word	0x080094ff
 8008a84:	08009537 	.word	0x08009537
 8008a88:	0800955b 	.word	0x0800955b

08008a8c <_cleanup_r>:
 8008a8c:	4901      	ldr	r1, [pc, #4]	; (8008a94 <_cleanup_r+0x8>)
 8008a8e:	f000 b8af 	b.w	8008bf0 <_fwalk_reent>
 8008a92:	bf00      	nop
 8008a94:	080089cd 	.word	0x080089cd

08008a98 <__sfmoreglue>:
 8008a98:	b570      	push	{r4, r5, r6, lr}
 8008a9a:	1e4a      	subs	r2, r1, #1
 8008a9c:	2568      	movs	r5, #104	; 0x68
 8008a9e:	4355      	muls	r5, r2
 8008aa0:	460e      	mov	r6, r1
 8008aa2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008aa6:	f000 f979 	bl	8008d9c <_malloc_r>
 8008aaa:	4604      	mov	r4, r0
 8008aac:	b140      	cbz	r0, 8008ac0 <__sfmoreglue+0x28>
 8008aae:	2100      	movs	r1, #0
 8008ab0:	e9c0 1600 	strd	r1, r6, [r0]
 8008ab4:	300c      	adds	r0, #12
 8008ab6:	60a0      	str	r0, [r4, #8]
 8008ab8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008abc:	f7ff fd94 	bl	80085e8 <memset>
 8008ac0:	4620      	mov	r0, r4
 8008ac2:	bd70      	pop	{r4, r5, r6, pc}

08008ac4 <__sfp_lock_acquire>:
 8008ac4:	4801      	ldr	r0, [pc, #4]	; (8008acc <__sfp_lock_acquire+0x8>)
 8008ac6:	f000 b8b3 	b.w	8008c30 <__retarget_lock_acquire_recursive>
 8008aca:	bf00      	nop
 8008acc:	200004c0 	.word	0x200004c0

08008ad0 <__sfp_lock_release>:
 8008ad0:	4801      	ldr	r0, [pc, #4]	; (8008ad8 <__sfp_lock_release+0x8>)
 8008ad2:	f000 b8ae 	b.w	8008c32 <__retarget_lock_release_recursive>
 8008ad6:	bf00      	nop
 8008ad8:	200004c0 	.word	0x200004c0

08008adc <__sinit_lock_acquire>:
 8008adc:	4801      	ldr	r0, [pc, #4]	; (8008ae4 <__sinit_lock_acquire+0x8>)
 8008ade:	f000 b8a7 	b.w	8008c30 <__retarget_lock_acquire_recursive>
 8008ae2:	bf00      	nop
 8008ae4:	200004bb 	.word	0x200004bb

08008ae8 <__sinit_lock_release>:
 8008ae8:	4801      	ldr	r0, [pc, #4]	; (8008af0 <__sinit_lock_release+0x8>)
 8008aea:	f000 b8a2 	b.w	8008c32 <__retarget_lock_release_recursive>
 8008aee:	bf00      	nop
 8008af0:	200004bb 	.word	0x200004bb

08008af4 <__sinit>:
 8008af4:	b510      	push	{r4, lr}
 8008af6:	4604      	mov	r4, r0
 8008af8:	f7ff fff0 	bl	8008adc <__sinit_lock_acquire>
 8008afc:	69a3      	ldr	r3, [r4, #24]
 8008afe:	b11b      	cbz	r3, 8008b08 <__sinit+0x14>
 8008b00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008b04:	f7ff bff0 	b.w	8008ae8 <__sinit_lock_release>
 8008b08:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008b0c:	6523      	str	r3, [r4, #80]	; 0x50
 8008b0e:	4b13      	ldr	r3, [pc, #76]	; (8008b5c <__sinit+0x68>)
 8008b10:	4a13      	ldr	r2, [pc, #76]	; (8008b60 <__sinit+0x6c>)
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	62a2      	str	r2, [r4, #40]	; 0x28
 8008b16:	42a3      	cmp	r3, r4
 8008b18:	bf04      	itt	eq
 8008b1a:	2301      	moveq	r3, #1
 8008b1c:	61a3      	streq	r3, [r4, #24]
 8008b1e:	4620      	mov	r0, r4
 8008b20:	f000 f820 	bl	8008b64 <__sfp>
 8008b24:	6060      	str	r0, [r4, #4]
 8008b26:	4620      	mov	r0, r4
 8008b28:	f000 f81c 	bl	8008b64 <__sfp>
 8008b2c:	60a0      	str	r0, [r4, #8]
 8008b2e:	4620      	mov	r0, r4
 8008b30:	f000 f818 	bl	8008b64 <__sfp>
 8008b34:	2200      	movs	r2, #0
 8008b36:	60e0      	str	r0, [r4, #12]
 8008b38:	2104      	movs	r1, #4
 8008b3a:	6860      	ldr	r0, [r4, #4]
 8008b3c:	f7ff ff82 	bl	8008a44 <std>
 8008b40:	68a0      	ldr	r0, [r4, #8]
 8008b42:	2201      	movs	r2, #1
 8008b44:	2109      	movs	r1, #9
 8008b46:	f7ff ff7d 	bl	8008a44 <std>
 8008b4a:	68e0      	ldr	r0, [r4, #12]
 8008b4c:	2202      	movs	r2, #2
 8008b4e:	2112      	movs	r1, #18
 8008b50:	f7ff ff78 	bl	8008a44 <std>
 8008b54:	2301      	movs	r3, #1
 8008b56:	61a3      	str	r3, [r4, #24]
 8008b58:	e7d2      	b.n	8008b00 <__sinit+0xc>
 8008b5a:	bf00      	nop
 8008b5c:	08009f1c 	.word	0x08009f1c
 8008b60:	08008a8d 	.word	0x08008a8d

08008b64 <__sfp>:
 8008b64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b66:	4607      	mov	r7, r0
 8008b68:	f7ff ffac 	bl	8008ac4 <__sfp_lock_acquire>
 8008b6c:	4b1e      	ldr	r3, [pc, #120]	; (8008be8 <__sfp+0x84>)
 8008b6e:	681e      	ldr	r6, [r3, #0]
 8008b70:	69b3      	ldr	r3, [r6, #24]
 8008b72:	b913      	cbnz	r3, 8008b7a <__sfp+0x16>
 8008b74:	4630      	mov	r0, r6
 8008b76:	f7ff ffbd 	bl	8008af4 <__sinit>
 8008b7a:	3648      	adds	r6, #72	; 0x48
 8008b7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008b80:	3b01      	subs	r3, #1
 8008b82:	d503      	bpl.n	8008b8c <__sfp+0x28>
 8008b84:	6833      	ldr	r3, [r6, #0]
 8008b86:	b30b      	cbz	r3, 8008bcc <__sfp+0x68>
 8008b88:	6836      	ldr	r6, [r6, #0]
 8008b8a:	e7f7      	b.n	8008b7c <__sfp+0x18>
 8008b8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008b90:	b9d5      	cbnz	r5, 8008bc8 <__sfp+0x64>
 8008b92:	4b16      	ldr	r3, [pc, #88]	; (8008bec <__sfp+0x88>)
 8008b94:	60e3      	str	r3, [r4, #12]
 8008b96:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008b9a:	6665      	str	r5, [r4, #100]	; 0x64
 8008b9c:	f000 f847 	bl	8008c2e <__retarget_lock_init_recursive>
 8008ba0:	f7ff ff96 	bl	8008ad0 <__sfp_lock_release>
 8008ba4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008ba8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008bac:	6025      	str	r5, [r4, #0]
 8008bae:	61a5      	str	r5, [r4, #24]
 8008bb0:	2208      	movs	r2, #8
 8008bb2:	4629      	mov	r1, r5
 8008bb4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008bb8:	f7ff fd16 	bl	80085e8 <memset>
 8008bbc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008bc0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008bc4:	4620      	mov	r0, r4
 8008bc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008bc8:	3468      	adds	r4, #104	; 0x68
 8008bca:	e7d9      	b.n	8008b80 <__sfp+0x1c>
 8008bcc:	2104      	movs	r1, #4
 8008bce:	4638      	mov	r0, r7
 8008bd0:	f7ff ff62 	bl	8008a98 <__sfmoreglue>
 8008bd4:	4604      	mov	r4, r0
 8008bd6:	6030      	str	r0, [r6, #0]
 8008bd8:	2800      	cmp	r0, #0
 8008bda:	d1d5      	bne.n	8008b88 <__sfp+0x24>
 8008bdc:	f7ff ff78 	bl	8008ad0 <__sfp_lock_release>
 8008be0:	230c      	movs	r3, #12
 8008be2:	603b      	str	r3, [r7, #0]
 8008be4:	e7ee      	b.n	8008bc4 <__sfp+0x60>
 8008be6:	bf00      	nop
 8008be8:	08009f1c 	.word	0x08009f1c
 8008bec:	ffff0001 	.word	0xffff0001

08008bf0 <_fwalk_reent>:
 8008bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bf4:	4606      	mov	r6, r0
 8008bf6:	4688      	mov	r8, r1
 8008bf8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008bfc:	2700      	movs	r7, #0
 8008bfe:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008c02:	f1b9 0901 	subs.w	r9, r9, #1
 8008c06:	d505      	bpl.n	8008c14 <_fwalk_reent+0x24>
 8008c08:	6824      	ldr	r4, [r4, #0]
 8008c0a:	2c00      	cmp	r4, #0
 8008c0c:	d1f7      	bne.n	8008bfe <_fwalk_reent+0xe>
 8008c0e:	4638      	mov	r0, r7
 8008c10:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008c14:	89ab      	ldrh	r3, [r5, #12]
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d907      	bls.n	8008c2a <_fwalk_reent+0x3a>
 8008c1a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008c1e:	3301      	adds	r3, #1
 8008c20:	d003      	beq.n	8008c2a <_fwalk_reent+0x3a>
 8008c22:	4629      	mov	r1, r5
 8008c24:	4630      	mov	r0, r6
 8008c26:	47c0      	blx	r8
 8008c28:	4307      	orrs	r7, r0
 8008c2a:	3568      	adds	r5, #104	; 0x68
 8008c2c:	e7e9      	b.n	8008c02 <_fwalk_reent+0x12>

08008c2e <__retarget_lock_init_recursive>:
 8008c2e:	4770      	bx	lr

08008c30 <__retarget_lock_acquire_recursive>:
 8008c30:	4770      	bx	lr

08008c32 <__retarget_lock_release_recursive>:
 8008c32:	4770      	bx	lr

08008c34 <__swhatbuf_r>:
 8008c34:	b570      	push	{r4, r5, r6, lr}
 8008c36:	460e      	mov	r6, r1
 8008c38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c3c:	2900      	cmp	r1, #0
 8008c3e:	b096      	sub	sp, #88	; 0x58
 8008c40:	4614      	mov	r4, r2
 8008c42:	461d      	mov	r5, r3
 8008c44:	da07      	bge.n	8008c56 <__swhatbuf_r+0x22>
 8008c46:	2300      	movs	r3, #0
 8008c48:	602b      	str	r3, [r5, #0]
 8008c4a:	89b3      	ldrh	r3, [r6, #12]
 8008c4c:	061a      	lsls	r2, r3, #24
 8008c4e:	d410      	bmi.n	8008c72 <__swhatbuf_r+0x3e>
 8008c50:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008c54:	e00e      	b.n	8008c74 <__swhatbuf_r+0x40>
 8008c56:	466a      	mov	r2, sp
 8008c58:	f000 fca6 	bl	80095a8 <_fstat_r>
 8008c5c:	2800      	cmp	r0, #0
 8008c5e:	dbf2      	blt.n	8008c46 <__swhatbuf_r+0x12>
 8008c60:	9a01      	ldr	r2, [sp, #4]
 8008c62:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008c66:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008c6a:	425a      	negs	r2, r3
 8008c6c:	415a      	adcs	r2, r3
 8008c6e:	602a      	str	r2, [r5, #0]
 8008c70:	e7ee      	b.n	8008c50 <__swhatbuf_r+0x1c>
 8008c72:	2340      	movs	r3, #64	; 0x40
 8008c74:	2000      	movs	r0, #0
 8008c76:	6023      	str	r3, [r4, #0]
 8008c78:	b016      	add	sp, #88	; 0x58
 8008c7a:	bd70      	pop	{r4, r5, r6, pc}

08008c7c <__smakebuf_r>:
 8008c7c:	898b      	ldrh	r3, [r1, #12]
 8008c7e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008c80:	079d      	lsls	r5, r3, #30
 8008c82:	4606      	mov	r6, r0
 8008c84:	460c      	mov	r4, r1
 8008c86:	d507      	bpl.n	8008c98 <__smakebuf_r+0x1c>
 8008c88:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008c8c:	6023      	str	r3, [r4, #0]
 8008c8e:	6123      	str	r3, [r4, #16]
 8008c90:	2301      	movs	r3, #1
 8008c92:	6163      	str	r3, [r4, #20]
 8008c94:	b002      	add	sp, #8
 8008c96:	bd70      	pop	{r4, r5, r6, pc}
 8008c98:	ab01      	add	r3, sp, #4
 8008c9a:	466a      	mov	r2, sp
 8008c9c:	f7ff ffca 	bl	8008c34 <__swhatbuf_r>
 8008ca0:	9900      	ldr	r1, [sp, #0]
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	4630      	mov	r0, r6
 8008ca6:	f000 f879 	bl	8008d9c <_malloc_r>
 8008caa:	b948      	cbnz	r0, 8008cc0 <__smakebuf_r+0x44>
 8008cac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008cb0:	059a      	lsls	r2, r3, #22
 8008cb2:	d4ef      	bmi.n	8008c94 <__smakebuf_r+0x18>
 8008cb4:	f023 0303 	bic.w	r3, r3, #3
 8008cb8:	f043 0302 	orr.w	r3, r3, #2
 8008cbc:	81a3      	strh	r3, [r4, #12]
 8008cbe:	e7e3      	b.n	8008c88 <__smakebuf_r+0xc>
 8008cc0:	4b0d      	ldr	r3, [pc, #52]	; (8008cf8 <__smakebuf_r+0x7c>)
 8008cc2:	62b3      	str	r3, [r6, #40]	; 0x28
 8008cc4:	89a3      	ldrh	r3, [r4, #12]
 8008cc6:	6020      	str	r0, [r4, #0]
 8008cc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ccc:	81a3      	strh	r3, [r4, #12]
 8008cce:	9b00      	ldr	r3, [sp, #0]
 8008cd0:	6163      	str	r3, [r4, #20]
 8008cd2:	9b01      	ldr	r3, [sp, #4]
 8008cd4:	6120      	str	r0, [r4, #16]
 8008cd6:	b15b      	cbz	r3, 8008cf0 <__smakebuf_r+0x74>
 8008cd8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cdc:	4630      	mov	r0, r6
 8008cde:	f000 fc75 	bl	80095cc <_isatty_r>
 8008ce2:	b128      	cbz	r0, 8008cf0 <__smakebuf_r+0x74>
 8008ce4:	89a3      	ldrh	r3, [r4, #12]
 8008ce6:	f023 0303 	bic.w	r3, r3, #3
 8008cea:	f043 0301 	orr.w	r3, r3, #1
 8008cee:	81a3      	strh	r3, [r4, #12]
 8008cf0:	89a0      	ldrh	r0, [r4, #12]
 8008cf2:	4305      	orrs	r5, r0
 8008cf4:	81a5      	strh	r5, [r4, #12]
 8008cf6:	e7cd      	b.n	8008c94 <__smakebuf_r+0x18>
 8008cf8:	08008a8d 	.word	0x08008a8d

08008cfc <_free_r>:
 8008cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	d048      	beq.n	8008d94 <_free_r+0x98>
 8008d02:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008d06:	9001      	str	r0, [sp, #4]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	f1a1 0404 	sub.w	r4, r1, #4
 8008d0e:	bfb8      	it	lt
 8008d10:	18e4      	addlt	r4, r4, r3
 8008d12:	f000 fc7d 	bl	8009610 <__malloc_lock>
 8008d16:	4a20      	ldr	r2, [pc, #128]	; (8008d98 <_free_r+0x9c>)
 8008d18:	9801      	ldr	r0, [sp, #4]
 8008d1a:	6813      	ldr	r3, [r2, #0]
 8008d1c:	4615      	mov	r5, r2
 8008d1e:	b933      	cbnz	r3, 8008d2e <_free_r+0x32>
 8008d20:	6063      	str	r3, [r4, #4]
 8008d22:	6014      	str	r4, [r2, #0]
 8008d24:	b003      	add	sp, #12
 8008d26:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008d2a:	f000 bc77 	b.w	800961c <__malloc_unlock>
 8008d2e:	42a3      	cmp	r3, r4
 8008d30:	d90b      	bls.n	8008d4a <_free_r+0x4e>
 8008d32:	6821      	ldr	r1, [r4, #0]
 8008d34:	1862      	adds	r2, r4, r1
 8008d36:	4293      	cmp	r3, r2
 8008d38:	bf04      	itt	eq
 8008d3a:	681a      	ldreq	r2, [r3, #0]
 8008d3c:	685b      	ldreq	r3, [r3, #4]
 8008d3e:	6063      	str	r3, [r4, #4]
 8008d40:	bf04      	itt	eq
 8008d42:	1852      	addeq	r2, r2, r1
 8008d44:	6022      	streq	r2, [r4, #0]
 8008d46:	602c      	str	r4, [r5, #0]
 8008d48:	e7ec      	b.n	8008d24 <_free_r+0x28>
 8008d4a:	461a      	mov	r2, r3
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b10b      	cbz	r3, 8008d54 <_free_r+0x58>
 8008d50:	42a3      	cmp	r3, r4
 8008d52:	d9fa      	bls.n	8008d4a <_free_r+0x4e>
 8008d54:	6811      	ldr	r1, [r2, #0]
 8008d56:	1855      	adds	r5, r2, r1
 8008d58:	42a5      	cmp	r5, r4
 8008d5a:	d10b      	bne.n	8008d74 <_free_r+0x78>
 8008d5c:	6824      	ldr	r4, [r4, #0]
 8008d5e:	4421      	add	r1, r4
 8008d60:	1854      	adds	r4, r2, r1
 8008d62:	42a3      	cmp	r3, r4
 8008d64:	6011      	str	r1, [r2, #0]
 8008d66:	d1dd      	bne.n	8008d24 <_free_r+0x28>
 8008d68:	681c      	ldr	r4, [r3, #0]
 8008d6a:	685b      	ldr	r3, [r3, #4]
 8008d6c:	6053      	str	r3, [r2, #4]
 8008d6e:	4421      	add	r1, r4
 8008d70:	6011      	str	r1, [r2, #0]
 8008d72:	e7d7      	b.n	8008d24 <_free_r+0x28>
 8008d74:	d902      	bls.n	8008d7c <_free_r+0x80>
 8008d76:	230c      	movs	r3, #12
 8008d78:	6003      	str	r3, [r0, #0]
 8008d7a:	e7d3      	b.n	8008d24 <_free_r+0x28>
 8008d7c:	6825      	ldr	r5, [r4, #0]
 8008d7e:	1961      	adds	r1, r4, r5
 8008d80:	428b      	cmp	r3, r1
 8008d82:	bf04      	itt	eq
 8008d84:	6819      	ldreq	r1, [r3, #0]
 8008d86:	685b      	ldreq	r3, [r3, #4]
 8008d88:	6063      	str	r3, [r4, #4]
 8008d8a:	bf04      	itt	eq
 8008d8c:	1949      	addeq	r1, r1, r5
 8008d8e:	6021      	streq	r1, [r4, #0]
 8008d90:	6054      	str	r4, [r2, #4]
 8008d92:	e7c7      	b.n	8008d24 <_free_r+0x28>
 8008d94:	b003      	add	sp, #12
 8008d96:	bd30      	pop	{r4, r5, pc}
 8008d98:	200000a0 	.word	0x200000a0

08008d9c <_malloc_r>:
 8008d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d9e:	1ccd      	adds	r5, r1, #3
 8008da0:	f025 0503 	bic.w	r5, r5, #3
 8008da4:	3508      	adds	r5, #8
 8008da6:	2d0c      	cmp	r5, #12
 8008da8:	bf38      	it	cc
 8008daa:	250c      	movcc	r5, #12
 8008dac:	2d00      	cmp	r5, #0
 8008dae:	4606      	mov	r6, r0
 8008db0:	db01      	blt.n	8008db6 <_malloc_r+0x1a>
 8008db2:	42a9      	cmp	r1, r5
 8008db4:	d903      	bls.n	8008dbe <_malloc_r+0x22>
 8008db6:	230c      	movs	r3, #12
 8008db8:	6033      	str	r3, [r6, #0]
 8008dba:	2000      	movs	r0, #0
 8008dbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dbe:	f000 fc27 	bl	8009610 <__malloc_lock>
 8008dc2:	4921      	ldr	r1, [pc, #132]	; (8008e48 <_malloc_r+0xac>)
 8008dc4:	680a      	ldr	r2, [r1, #0]
 8008dc6:	4614      	mov	r4, r2
 8008dc8:	b99c      	cbnz	r4, 8008df2 <_malloc_r+0x56>
 8008dca:	4f20      	ldr	r7, [pc, #128]	; (8008e4c <_malloc_r+0xb0>)
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	b923      	cbnz	r3, 8008dda <_malloc_r+0x3e>
 8008dd0:	4621      	mov	r1, r4
 8008dd2:	4630      	mov	r0, r6
 8008dd4:	f000 fb72 	bl	80094bc <_sbrk_r>
 8008dd8:	6038      	str	r0, [r7, #0]
 8008dda:	4629      	mov	r1, r5
 8008ddc:	4630      	mov	r0, r6
 8008dde:	f000 fb6d 	bl	80094bc <_sbrk_r>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d123      	bne.n	8008e2e <_malloc_r+0x92>
 8008de6:	230c      	movs	r3, #12
 8008de8:	6033      	str	r3, [r6, #0]
 8008dea:	4630      	mov	r0, r6
 8008dec:	f000 fc16 	bl	800961c <__malloc_unlock>
 8008df0:	e7e3      	b.n	8008dba <_malloc_r+0x1e>
 8008df2:	6823      	ldr	r3, [r4, #0]
 8008df4:	1b5b      	subs	r3, r3, r5
 8008df6:	d417      	bmi.n	8008e28 <_malloc_r+0x8c>
 8008df8:	2b0b      	cmp	r3, #11
 8008dfa:	d903      	bls.n	8008e04 <_malloc_r+0x68>
 8008dfc:	6023      	str	r3, [r4, #0]
 8008dfe:	441c      	add	r4, r3
 8008e00:	6025      	str	r5, [r4, #0]
 8008e02:	e004      	b.n	8008e0e <_malloc_r+0x72>
 8008e04:	6863      	ldr	r3, [r4, #4]
 8008e06:	42a2      	cmp	r2, r4
 8008e08:	bf0c      	ite	eq
 8008e0a:	600b      	streq	r3, [r1, #0]
 8008e0c:	6053      	strne	r3, [r2, #4]
 8008e0e:	4630      	mov	r0, r6
 8008e10:	f000 fc04 	bl	800961c <__malloc_unlock>
 8008e14:	f104 000b 	add.w	r0, r4, #11
 8008e18:	1d23      	adds	r3, r4, #4
 8008e1a:	f020 0007 	bic.w	r0, r0, #7
 8008e1e:	1ac2      	subs	r2, r0, r3
 8008e20:	d0cc      	beq.n	8008dbc <_malloc_r+0x20>
 8008e22:	1a1b      	subs	r3, r3, r0
 8008e24:	50a3      	str	r3, [r4, r2]
 8008e26:	e7c9      	b.n	8008dbc <_malloc_r+0x20>
 8008e28:	4622      	mov	r2, r4
 8008e2a:	6864      	ldr	r4, [r4, #4]
 8008e2c:	e7cc      	b.n	8008dc8 <_malloc_r+0x2c>
 8008e2e:	1cc4      	adds	r4, r0, #3
 8008e30:	f024 0403 	bic.w	r4, r4, #3
 8008e34:	42a0      	cmp	r0, r4
 8008e36:	d0e3      	beq.n	8008e00 <_malloc_r+0x64>
 8008e38:	1a21      	subs	r1, r4, r0
 8008e3a:	4630      	mov	r0, r6
 8008e3c:	f000 fb3e 	bl	80094bc <_sbrk_r>
 8008e40:	3001      	adds	r0, #1
 8008e42:	d1dd      	bne.n	8008e00 <_malloc_r+0x64>
 8008e44:	e7cf      	b.n	8008de6 <_malloc_r+0x4a>
 8008e46:	bf00      	nop
 8008e48:	200000a0 	.word	0x200000a0
 8008e4c:	200000a4 	.word	0x200000a4

08008e50 <__sfputc_r>:
 8008e50:	6893      	ldr	r3, [r2, #8]
 8008e52:	3b01      	subs	r3, #1
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	b410      	push	{r4}
 8008e58:	6093      	str	r3, [r2, #8]
 8008e5a:	da08      	bge.n	8008e6e <__sfputc_r+0x1e>
 8008e5c:	6994      	ldr	r4, [r2, #24]
 8008e5e:	42a3      	cmp	r3, r4
 8008e60:	db01      	blt.n	8008e66 <__sfputc_r+0x16>
 8008e62:	290a      	cmp	r1, #10
 8008e64:	d103      	bne.n	8008e6e <__sfputc_r+0x1e>
 8008e66:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e6a:	f7ff bc69 	b.w	8008740 <__swbuf_r>
 8008e6e:	6813      	ldr	r3, [r2, #0]
 8008e70:	1c58      	adds	r0, r3, #1
 8008e72:	6010      	str	r0, [r2, #0]
 8008e74:	7019      	strb	r1, [r3, #0]
 8008e76:	4608      	mov	r0, r1
 8008e78:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008e7c:	4770      	bx	lr

08008e7e <__sfputs_r>:
 8008e7e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e80:	4606      	mov	r6, r0
 8008e82:	460f      	mov	r7, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	18d5      	adds	r5, r2, r3
 8008e88:	42ac      	cmp	r4, r5
 8008e8a:	d101      	bne.n	8008e90 <__sfputs_r+0x12>
 8008e8c:	2000      	movs	r0, #0
 8008e8e:	e007      	b.n	8008ea0 <__sfputs_r+0x22>
 8008e90:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e94:	463a      	mov	r2, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff ffda 	bl	8008e50 <__sfputc_r>
 8008e9c:	1c43      	adds	r3, r0, #1
 8008e9e:	d1f3      	bne.n	8008e88 <__sfputs_r+0xa>
 8008ea0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ea4 <_vfiprintf_r>:
 8008ea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ea8:	460d      	mov	r5, r1
 8008eaa:	b09d      	sub	sp, #116	; 0x74
 8008eac:	4614      	mov	r4, r2
 8008eae:	4698      	mov	r8, r3
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	b118      	cbz	r0, 8008ebc <_vfiprintf_r+0x18>
 8008eb4:	6983      	ldr	r3, [r0, #24]
 8008eb6:	b90b      	cbnz	r3, 8008ebc <_vfiprintf_r+0x18>
 8008eb8:	f7ff fe1c 	bl	8008af4 <__sinit>
 8008ebc:	4b89      	ldr	r3, [pc, #548]	; (80090e4 <_vfiprintf_r+0x240>)
 8008ebe:	429d      	cmp	r5, r3
 8008ec0:	d11b      	bne.n	8008efa <_vfiprintf_r+0x56>
 8008ec2:	6875      	ldr	r5, [r6, #4]
 8008ec4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ec6:	07d9      	lsls	r1, r3, #31
 8008ec8:	d405      	bmi.n	8008ed6 <_vfiprintf_r+0x32>
 8008eca:	89ab      	ldrh	r3, [r5, #12]
 8008ecc:	059a      	lsls	r2, r3, #22
 8008ece:	d402      	bmi.n	8008ed6 <_vfiprintf_r+0x32>
 8008ed0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008ed2:	f7ff fead 	bl	8008c30 <__retarget_lock_acquire_recursive>
 8008ed6:	89ab      	ldrh	r3, [r5, #12]
 8008ed8:	071b      	lsls	r3, r3, #28
 8008eda:	d501      	bpl.n	8008ee0 <_vfiprintf_r+0x3c>
 8008edc:	692b      	ldr	r3, [r5, #16]
 8008ede:	b9eb      	cbnz	r3, 8008f1c <_vfiprintf_r+0x78>
 8008ee0:	4629      	mov	r1, r5
 8008ee2:	4630      	mov	r0, r6
 8008ee4:	f7ff fc7e 	bl	80087e4 <__swsetup_r>
 8008ee8:	b1c0      	cbz	r0, 8008f1c <_vfiprintf_r+0x78>
 8008eea:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008eec:	07dc      	lsls	r4, r3, #31
 8008eee:	d50e      	bpl.n	8008f0e <_vfiprintf_r+0x6a>
 8008ef0:	f04f 30ff 	mov.w	r0, #4294967295
 8008ef4:	b01d      	add	sp, #116	; 0x74
 8008ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008efa:	4b7b      	ldr	r3, [pc, #492]	; (80090e8 <_vfiprintf_r+0x244>)
 8008efc:	429d      	cmp	r5, r3
 8008efe:	d101      	bne.n	8008f04 <_vfiprintf_r+0x60>
 8008f00:	68b5      	ldr	r5, [r6, #8]
 8008f02:	e7df      	b.n	8008ec4 <_vfiprintf_r+0x20>
 8008f04:	4b79      	ldr	r3, [pc, #484]	; (80090ec <_vfiprintf_r+0x248>)
 8008f06:	429d      	cmp	r5, r3
 8008f08:	bf08      	it	eq
 8008f0a:	68f5      	ldreq	r5, [r6, #12]
 8008f0c:	e7da      	b.n	8008ec4 <_vfiprintf_r+0x20>
 8008f0e:	89ab      	ldrh	r3, [r5, #12]
 8008f10:	0598      	lsls	r0, r3, #22
 8008f12:	d4ed      	bmi.n	8008ef0 <_vfiprintf_r+0x4c>
 8008f14:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008f16:	f7ff fe8c 	bl	8008c32 <__retarget_lock_release_recursive>
 8008f1a:	e7e9      	b.n	8008ef0 <_vfiprintf_r+0x4c>
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8008f20:	2320      	movs	r3, #32
 8008f22:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008f26:	f8cd 800c 	str.w	r8, [sp, #12]
 8008f2a:	2330      	movs	r3, #48	; 0x30
 8008f2c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80090f0 <_vfiprintf_r+0x24c>
 8008f30:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008f34:	f04f 0901 	mov.w	r9, #1
 8008f38:	4623      	mov	r3, r4
 8008f3a:	469a      	mov	sl, r3
 8008f3c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008f40:	b10a      	cbz	r2, 8008f46 <_vfiprintf_r+0xa2>
 8008f42:	2a25      	cmp	r2, #37	; 0x25
 8008f44:	d1f9      	bne.n	8008f3a <_vfiprintf_r+0x96>
 8008f46:	ebba 0b04 	subs.w	fp, sl, r4
 8008f4a:	d00b      	beq.n	8008f64 <_vfiprintf_r+0xc0>
 8008f4c:	465b      	mov	r3, fp
 8008f4e:	4622      	mov	r2, r4
 8008f50:	4629      	mov	r1, r5
 8008f52:	4630      	mov	r0, r6
 8008f54:	f7ff ff93 	bl	8008e7e <__sfputs_r>
 8008f58:	3001      	adds	r0, #1
 8008f5a:	f000 80aa 	beq.w	80090b2 <_vfiprintf_r+0x20e>
 8008f5e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008f60:	445a      	add	r2, fp
 8008f62:	9209      	str	r2, [sp, #36]	; 0x24
 8008f64:	f89a 3000 	ldrb.w	r3, [sl]
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	f000 80a2 	beq.w	80090b2 <_vfiprintf_r+0x20e>
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f04f 32ff 	mov.w	r2, #4294967295
 8008f74:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008f78:	f10a 0a01 	add.w	sl, sl, #1
 8008f7c:	9304      	str	r3, [sp, #16]
 8008f7e:	9307      	str	r3, [sp, #28]
 8008f80:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008f84:	931a      	str	r3, [sp, #104]	; 0x68
 8008f86:	4654      	mov	r4, sl
 8008f88:	2205      	movs	r2, #5
 8008f8a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008f8e:	4858      	ldr	r0, [pc, #352]	; (80090f0 <_vfiprintf_r+0x24c>)
 8008f90:	f7f7 f946 	bl	8000220 <memchr>
 8008f94:	9a04      	ldr	r2, [sp, #16]
 8008f96:	b9d8      	cbnz	r0, 8008fd0 <_vfiprintf_r+0x12c>
 8008f98:	06d1      	lsls	r1, r2, #27
 8008f9a:	bf44      	itt	mi
 8008f9c:	2320      	movmi	r3, #32
 8008f9e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fa2:	0713      	lsls	r3, r2, #28
 8008fa4:	bf44      	itt	mi
 8008fa6:	232b      	movmi	r3, #43	; 0x2b
 8008fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008fac:	f89a 3000 	ldrb.w	r3, [sl]
 8008fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8008fb2:	d015      	beq.n	8008fe0 <_vfiprintf_r+0x13c>
 8008fb4:	9a07      	ldr	r2, [sp, #28]
 8008fb6:	4654      	mov	r4, sl
 8008fb8:	2000      	movs	r0, #0
 8008fba:	f04f 0c0a 	mov.w	ip, #10
 8008fbe:	4621      	mov	r1, r4
 8008fc0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008fc4:	3b30      	subs	r3, #48	; 0x30
 8008fc6:	2b09      	cmp	r3, #9
 8008fc8:	d94e      	bls.n	8009068 <_vfiprintf_r+0x1c4>
 8008fca:	b1b0      	cbz	r0, 8008ffa <_vfiprintf_r+0x156>
 8008fcc:	9207      	str	r2, [sp, #28]
 8008fce:	e014      	b.n	8008ffa <_vfiprintf_r+0x156>
 8008fd0:	eba0 0308 	sub.w	r3, r0, r8
 8008fd4:	fa09 f303 	lsl.w	r3, r9, r3
 8008fd8:	4313      	orrs	r3, r2
 8008fda:	9304      	str	r3, [sp, #16]
 8008fdc:	46a2      	mov	sl, r4
 8008fde:	e7d2      	b.n	8008f86 <_vfiprintf_r+0xe2>
 8008fe0:	9b03      	ldr	r3, [sp, #12]
 8008fe2:	1d19      	adds	r1, r3, #4
 8008fe4:	681b      	ldr	r3, [r3, #0]
 8008fe6:	9103      	str	r1, [sp, #12]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	bfbb      	ittet	lt
 8008fec:	425b      	neglt	r3, r3
 8008fee:	f042 0202 	orrlt.w	r2, r2, #2
 8008ff2:	9307      	strge	r3, [sp, #28]
 8008ff4:	9307      	strlt	r3, [sp, #28]
 8008ff6:	bfb8      	it	lt
 8008ff8:	9204      	strlt	r2, [sp, #16]
 8008ffa:	7823      	ldrb	r3, [r4, #0]
 8008ffc:	2b2e      	cmp	r3, #46	; 0x2e
 8008ffe:	d10c      	bne.n	800901a <_vfiprintf_r+0x176>
 8009000:	7863      	ldrb	r3, [r4, #1]
 8009002:	2b2a      	cmp	r3, #42	; 0x2a
 8009004:	d135      	bne.n	8009072 <_vfiprintf_r+0x1ce>
 8009006:	9b03      	ldr	r3, [sp, #12]
 8009008:	1d1a      	adds	r2, r3, #4
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	9203      	str	r2, [sp, #12]
 800900e:	2b00      	cmp	r3, #0
 8009010:	bfb8      	it	lt
 8009012:	f04f 33ff 	movlt.w	r3, #4294967295
 8009016:	3402      	adds	r4, #2
 8009018:	9305      	str	r3, [sp, #20]
 800901a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009100 <_vfiprintf_r+0x25c>
 800901e:	7821      	ldrb	r1, [r4, #0]
 8009020:	2203      	movs	r2, #3
 8009022:	4650      	mov	r0, sl
 8009024:	f7f7 f8fc 	bl	8000220 <memchr>
 8009028:	b140      	cbz	r0, 800903c <_vfiprintf_r+0x198>
 800902a:	2340      	movs	r3, #64	; 0x40
 800902c:	eba0 000a 	sub.w	r0, r0, sl
 8009030:	fa03 f000 	lsl.w	r0, r3, r0
 8009034:	9b04      	ldr	r3, [sp, #16]
 8009036:	4303      	orrs	r3, r0
 8009038:	3401      	adds	r4, #1
 800903a:	9304      	str	r3, [sp, #16]
 800903c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009040:	482c      	ldr	r0, [pc, #176]	; (80090f4 <_vfiprintf_r+0x250>)
 8009042:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009046:	2206      	movs	r2, #6
 8009048:	f7f7 f8ea 	bl	8000220 <memchr>
 800904c:	2800      	cmp	r0, #0
 800904e:	d03f      	beq.n	80090d0 <_vfiprintf_r+0x22c>
 8009050:	4b29      	ldr	r3, [pc, #164]	; (80090f8 <_vfiprintf_r+0x254>)
 8009052:	bb1b      	cbnz	r3, 800909c <_vfiprintf_r+0x1f8>
 8009054:	9b03      	ldr	r3, [sp, #12]
 8009056:	3307      	adds	r3, #7
 8009058:	f023 0307 	bic.w	r3, r3, #7
 800905c:	3308      	adds	r3, #8
 800905e:	9303      	str	r3, [sp, #12]
 8009060:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009062:	443b      	add	r3, r7
 8009064:	9309      	str	r3, [sp, #36]	; 0x24
 8009066:	e767      	b.n	8008f38 <_vfiprintf_r+0x94>
 8009068:	fb0c 3202 	mla	r2, ip, r2, r3
 800906c:	460c      	mov	r4, r1
 800906e:	2001      	movs	r0, #1
 8009070:	e7a5      	b.n	8008fbe <_vfiprintf_r+0x11a>
 8009072:	2300      	movs	r3, #0
 8009074:	3401      	adds	r4, #1
 8009076:	9305      	str	r3, [sp, #20]
 8009078:	4619      	mov	r1, r3
 800907a:	f04f 0c0a 	mov.w	ip, #10
 800907e:	4620      	mov	r0, r4
 8009080:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009084:	3a30      	subs	r2, #48	; 0x30
 8009086:	2a09      	cmp	r2, #9
 8009088:	d903      	bls.n	8009092 <_vfiprintf_r+0x1ee>
 800908a:	2b00      	cmp	r3, #0
 800908c:	d0c5      	beq.n	800901a <_vfiprintf_r+0x176>
 800908e:	9105      	str	r1, [sp, #20]
 8009090:	e7c3      	b.n	800901a <_vfiprintf_r+0x176>
 8009092:	fb0c 2101 	mla	r1, ip, r1, r2
 8009096:	4604      	mov	r4, r0
 8009098:	2301      	movs	r3, #1
 800909a:	e7f0      	b.n	800907e <_vfiprintf_r+0x1da>
 800909c:	ab03      	add	r3, sp, #12
 800909e:	9300      	str	r3, [sp, #0]
 80090a0:	462a      	mov	r2, r5
 80090a2:	4b16      	ldr	r3, [pc, #88]	; (80090fc <_vfiprintf_r+0x258>)
 80090a4:	a904      	add	r1, sp, #16
 80090a6:	4630      	mov	r0, r6
 80090a8:	f3af 8000 	nop.w
 80090ac:	4607      	mov	r7, r0
 80090ae:	1c78      	adds	r0, r7, #1
 80090b0:	d1d6      	bne.n	8009060 <_vfiprintf_r+0x1bc>
 80090b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090b4:	07d9      	lsls	r1, r3, #31
 80090b6:	d405      	bmi.n	80090c4 <_vfiprintf_r+0x220>
 80090b8:	89ab      	ldrh	r3, [r5, #12]
 80090ba:	059a      	lsls	r2, r3, #22
 80090bc:	d402      	bmi.n	80090c4 <_vfiprintf_r+0x220>
 80090be:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090c0:	f7ff fdb7 	bl	8008c32 <__retarget_lock_release_recursive>
 80090c4:	89ab      	ldrh	r3, [r5, #12]
 80090c6:	065b      	lsls	r3, r3, #25
 80090c8:	f53f af12 	bmi.w	8008ef0 <_vfiprintf_r+0x4c>
 80090cc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80090ce:	e711      	b.n	8008ef4 <_vfiprintf_r+0x50>
 80090d0:	ab03      	add	r3, sp, #12
 80090d2:	9300      	str	r3, [sp, #0]
 80090d4:	462a      	mov	r2, r5
 80090d6:	4b09      	ldr	r3, [pc, #36]	; (80090fc <_vfiprintf_r+0x258>)
 80090d8:	a904      	add	r1, sp, #16
 80090da:	4630      	mov	r0, r6
 80090dc:	f000 f880 	bl	80091e0 <_printf_i>
 80090e0:	e7e4      	b.n	80090ac <_vfiprintf_r+0x208>
 80090e2:	bf00      	nop
 80090e4:	08009f40 	.word	0x08009f40
 80090e8:	08009f60 	.word	0x08009f60
 80090ec:	08009f20 	.word	0x08009f20
 80090f0:	08009f80 	.word	0x08009f80
 80090f4:	08009f8a 	.word	0x08009f8a
 80090f8:	00000000 	.word	0x00000000
 80090fc:	08008e7f 	.word	0x08008e7f
 8009100:	08009f86 	.word	0x08009f86

08009104 <_printf_common>:
 8009104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009108:	4616      	mov	r6, r2
 800910a:	4699      	mov	r9, r3
 800910c:	688a      	ldr	r2, [r1, #8]
 800910e:	690b      	ldr	r3, [r1, #16]
 8009110:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009114:	4293      	cmp	r3, r2
 8009116:	bfb8      	it	lt
 8009118:	4613      	movlt	r3, r2
 800911a:	6033      	str	r3, [r6, #0]
 800911c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009120:	4607      	mov	r7, r0
 8009122:	460c      	mov	r4, r1
 8009124:	b10a      	cbz	r2, 800912a <_printf_common+0x26>
 8009126:	3301      	adds	r3, #1
 8009128:	6033      	str	r3, [r6, #0]
 800912a:	6823      	ldr	r3, [r4, #0]
 800912c:	0699      	lsls	r1, r3, #26
 800912e:	bf42      	ittt	mi
 8009130:	6833      	ldrmi	r3, [r6, #0]
 8009132:	3302      	addmi	r3, #2
 8009134:	6033      	strmi	r3, [r6, #0]
 8009136:	6825      	ldr	r5, [r4, #0]
 8009138:	f015 0506 	ands.w	r5, r5, #6
 800913c:	d106      	bne.n	800914c <_printf_common+0x48>
 800913e:	f104 0a19 	add.w	sl, r4, #25
 8009142:	68e3      	ldr	r3, [r4, #12]
 8009144:	6832      	ldr	r2, [r6, #0]
 8009146:	1a9b      	subs	r3, r3, r2
 8009148:	42ab      	cmp	r3, r5
 800914a:	dc26      	bgt.n	800919a <_printf_common+0x96>
 800914c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009150:	1e13      	subs	r3, r2, #0
 8009152:	6822      	ldr	r2, [r4, #0]
 8009154:	bf18      	it	ne
 8009156:	2301      	movne	r3, #1
 8009158:	0692      	lsls	r2, r2, #26
 800915a:	d42b      	bmi.n	80091b4 <_printf_common+0xb0>
 800915c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009160:	4649      	mov	r1, r9
 8009162:	4638      	mov	r0, r7
 8009164:	47c0      	blx	r8
 8009166:	3001      	adds	r0, #1
 8009168:	d01e      	beq.n	80091a8 <_printf_common+0xa4>
 800916a:	6823      	ldr	r3, [r4, #0]
 800916c:	68e5      	ldr	r5, [r4, #12]
 800916e:	6832      	ldr	r2, [r6, #0]
 8009170:	f003 0306 	and.w	r3, r3, #6
 8009174:	2b04      	cmp	r3, #4
 8009176:	bf08      	it	eq
 8009178:	1aad      	subeq	r5, r5, r2
 800917a:	68a3      	ldr	r3, [r4, #8]
 800917c:	6922      	ldr	r2, [r4, #16]
 800917e:	bf0c      	ite	eq
 8009180:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009184:	2500      	movne	r5, #0
 8009186:	4293      	cmp	r3, r2
 8009188:	bfc4      	itt	gt
 800918a:	1a9b      	subgt	r3, r3, r2
 800918c:	18ed      	addgt	r5, r5, r3
 800918e:	2600      	movs	r6, #0
 8009190:	341a      	adds	r4, #26
 8009192:	42b5      	cmp	r5, r6
 8009194:	d11a      	bne.n	80091cc <_printf_common+0xc8>
 8009196:	2000      	movs	r0, #0
 8009198:	e008      	b.n	80091ac <_printf_common+0xa8>
 800919a:	2301      	movs	r3, #1
 800919c:	4652      	mov	r2, sl
 800919e:	4649      	mov	r1, r9
 80091a0:	4638      	mov	r0, r7
 80091a2:	47c0      	blx	r8
 80091a4:	3001      	adds	r0, #1
 80091a6:	d103      	bne.n	80091b0 <_printf_common+0xac>
 80091a8:	f04f 30ff 	mov.w	r0, #4294967295
 80091ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80091b0:	3501      	adds	r5, #1
 80091b2:	e7c6      	b.n	8009142 <_printf_common+0x3e>
 80091b4:	18e1      	adds	r1, r4, r3
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	2030      	movs	r0, #48	; 0x30
 80091ba:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80091be:	4422      	add	r2, r4
 80091c0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80091c4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80091c8:	3302      	adds	r3, #2
 80091ca:	e7c7      	b.n	800915c <_printf_common+0x58>
 80091cc:	2301      	movs	r3, #1
 80091ce:	4622      	mov	r2, r4
 80091d0:	4649      	mov	r1, r9
 80091d2:	4638      	mov	r0, r7
 80091d4:	47c0      	blx	r8
 80091d6:	3001      	adds	r0, #1
 80091d8:	d0e6      	beq.n	80091a8 <_printf_common+0xa4>
 80091da:	3601      	adds	r6, #1
 80091dc:	e7d9      	b.n	8009192 <_printf_common+0x8e>
	...

080091e0 <_printf_i>:
 80091e0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80091e4:	460c      	mov	r4, r1
 80091e6:	4691      	mov	r9, r2
 80091e8:	7e27      	ldrb	r7, [r4, #24]
 80091ea:	990c      	ldr	r1, [sp, #48]	; 0x30
 80091ec:	2f78      	cmp	r7, #120	; 0x78
 80091ee:	4680      	mov	r8, r0
 80091f0:	469a      	mov	sl, r3
 80091f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80091f6:	d807      	bhi.n	8009208 <_printf_i+0x28>
 80091f8:	2f62      	cmp	r7, #98	; 0x62
 80091fa:	d80a      	bhi.n	8009212 <_printf_i+0x32>
 80091fc:	2f00      	cmp	r7, #0
 80091fe:	f000 80d8 	beq.w	80093b2 <_printf_i+0x1d2>
 8009202:	2f58      	cmp	r7, #88	; 0x58
 8009204:	f000 80a3 	beq.w	800934e <_printf_i+0x16e>
 8009208:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800920c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009210:	e03a      	b.n	8009288 <_printf_i+0xa8>
 8009212:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009216:	2b15      	cmp	r3, #21
 8009218:	d8f6      	bhi.n	8009208 <_printf_i+0x28>
 800921a:	a001      	add	r0, pc, #4	; (adr r0, 8009220 <_printf_i+0x40>)
 800921c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009220:	08009279 	.word	0x08009279
 8009224:	0800928d 	.word	0x0800928d
 8009228:	08009209 	.word	0x08009209
 800922c:	08009209 	.word	0x08009209
 8009230:	08009209 	.word	0x08009209
 8009234:	08009209 	.word	0x08009209
 8009238:	0800928d 	.word	0x0800928d
 800923c:	08009209 	.word	0x08009209
 8009240:	08009209 	.word	0x08009209
 8009244:	08009209 	.word	0x08009209
 8009248:	08009209 	.word	0x08009209
 800924c:	08009399 	.word	0x08009399
 8009250:	080092bd 	.word	0x080092bd
 8009254:	0800937b 	.word	0x0800937b
 8009258:	08009209 	.word	0x08009209
 800925c:	08009209 	.word	0x08009209
 8009260:	080093bb 	.word	0x080093bb
 8009264:	08009209 	.word	0x08009209
 8009268:	080092bd 	.word	0x080092bd
 800926c:	08009209 	.word	0x08009209
 8009270:	08009209 	.word	0x08009209
 8009274:	08009383 	.word	0x08009383
 8009278:	680b      	ldr	r3, [r1, #0]
 800927a:	1d1a      	adds	r2, r3, #4
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	600a      	str	r2, [r1, #0]
 8009280:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009284:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009288:	2301      	movs	r3, #1
 800928a:	e0a3      	b.n	80093d4 <_printf_i+0x1f4>
 800928c:	6825      	ldr	r5, [r4, #0]
 800928e:	6808      	ldr	r0, [r1, #0]
 8009290:	062e      	lsls	r6, r5, #24
 8009292:	f100 0304 	add.w	r3, r0, #4
 8009296:	d50a      	bpl.n	80092ae <_printf_i+0xce>
 8009298:	6805      	ldr	r5, [r0, #0]
 800929a:	600b      	str	r3, [r1, #0]
 800929c:	2d00      	cmp	r5, #0
 800929e:	da03      	bge.n	80092a8 <_printf_i+0xc8>
 80092a0:	232d      	movs	r3, #45	; 0x2d
 80092a2:	426d      	negs	r5, r5
 80092a4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80092a8:	485e      	ldr	r0, [pc, #376]	; (8009424 <_printf_i+0x244>)
 80092aa:	230a      	movs	r3, #10
 80092ac:	e019      	b.n	80092e2 <_printf_i+0x102>
 80092ae:	f015 0f40 	tst.w	r5, #64	; 0x40
 80092b2:	6805      	ldr	r5, [r0, #0]
 80092b4:	600b      	str	r3, [r1, #0]
 80092b6:	bf18      	it	ne
 80092b8:	b22d      	sxthne	r5, r5
 80092ba:	e7ef      	b.n	800929c <_printf_i+0xbc>
 80092bc:	680b      	ldr	r3, [r1, #0]
 80092be:	6825      	ldr	r5, [r4, #0]
 80092c0:	1d18      	adds	r0, r3, #4
 80092c2:	6008      	str	r0, [r1, #0]
 80092c4:	0628      	lsls	r0, r5, #24
 80092c6:	d501      	bpl.n	80092cc <_printf_i+0xec>
 80092c8:	681d      	ldr	r5, [r3, #0]
 80092ca:	e002      	b.n	80092d2 <_printf_i+0xf2>
 80092cc:	0669      	lsls	r1, r5, #25
 80092ce:	d5fb      	bpl.n	80092c8 <_printf_i+0xe8>
 80092d0:	881d      	ldrh	r5, [r3, #0]
 80092d2:	4854      	ldr	r0, [pc, #336]	; (8009424 <_printf_i+0x244>)
 80092d4:	2f6f      	cmp	r7, #111	; 0x6f
 80092d6:	bf0c      	ite	eq
 80092d8:	2308      	moveq	r3, #8
 80092da:	230a      	movne	r3, #10
 80092dc:	2100      	movs	r1, #0
 80092de:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80092e2:	6866      	ldr	r6, [r4, #4]
 80092e4:	60a6      	str	r6, [r4, #8]
 80092e6:	2e00      	cmp	r6, #0
 80092e8:	bfa2      	ittt	ge
 80092ea:	6821      	ldrge	r1, [r4, #0]
 80092ec:	f021 0104 	bicge.w	r1, r1, #4
 80092f0:	6021      	strge	r1, [r4, #0]
 80092f2:	b90d      	cbnz	r5, 80092f8 <_printf_i+0x118>
 80092f4:	2e00      	cmp	r6, #0
 80092f6:	d04d      	beq.n	8009394 <_printf_i+0x1b4>
 80092f8:	4616      	mov	r6, r2
 80092fa:	fbb5 f1f3 	udiv	r1, r5, r3
 80092fe:	fb03 5711 	mls	r7, r3, r1, r5
 8009302:	5dc7      	ldrb	r7, [r0, r7]
 8009304:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009308:	462f      	mov	r7, r5
 800930a:	42bb      	cmp	r3, r7
 800930c:	460d      	mov	r5, r1
 800930e:	d9f4      	bls.n	80092fa <_printf_i+0x11a>
 8009310:	2b08      	cmp	r3, #8
 8009312:	d10b      	bne.n	800932c <_printf_i+0x14c>
 8009314:	6823      	ldr	r3, [r4, #0]
 8009316:	07df      	lsls	r7, r3, #31
 8009318:	d508      	bpl.n	800932c <_printf_i+0x14c>
 800931a:	6923      	ldr	r3, [r4, #16]
 800931c:	6861      	ldr	r1, [r4, #4]
 800931e:	4299      	cmp	r1, r3
 8009320:	bfde      	ittt	le
 8009322:	2330      	movle	r3, #48	; 0x30
 8009324:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009328:	f106 36ff 	addle.w	r6, r6, #4294967295
 800932c:	1b92      	subs	r2, r2, r6
 800932e:	6122      	str	r2, [r4, #16]
 8009330:	f8cd a000 	str.w	sl, [sp]
 8009334:	464b      	mov	r3, r9
 8009336:	aa03      	add	r2, sp, #12
 8009338:	4621      	mov	r1, r4
 800933a:	4640      	mov	r0, r8
 800933c:	f7ff fee2 	bl	8009104 <_printf_common>
 8009340:	3001      	adds	r0, #1
 8009342:	d14c      	bne.n	80093de <_printf_i+0x1fe>
 8009344:	f04f 30ff 	mov.w	r0, #4294967295
 8009348:	b004      	add	sp, #16
 800934a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800934e:	4835      	ldr	r0, [pc, #212]	; (8009424 <_printf_i+0x244>)
 8009350:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009354:	6823      	ldr	r3, [r4, #0]
 8009356:	680e      	ldr	r6, [r1, #0]
 8009358:	061f      	lsls	r7, r3, #24
 800935a:	f856 5b04 	ldr.w	r5, [r6], #4
 800935e:	600e      	str	r6, [r1, #0]
 8009360:	d514      	bpl.n	800938c <_printf_i+0x1ac>
 8009362:	07d9      	lsls	r1, r3, #31
 8009364:	bf44      	itt	mi
 8009366:	f043 0320 	orrmi.w	r3, r3, #32
 800936a:	6023      	strmi	r3, [r4, #0]
 800936c:	b91d      	cbnz	r5, 8009376 <_printf_i+0x196>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	f023 0320 	bic.w	r3, r3, #32
 8009374:	6023      	str	r3, [r4, #0]
 8009376:	2310      	movs	r3, #16
 8009378:	e7b0      	b.n	80092dc <_printf_i+0xfc>
 800937a:	6823      	ldr	r3, [r4, #0]
 800937c:	f043 0320 	orr.w	r3, r3, #32
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	2378      	movs	r3, #120	; 0x78
 8009384:	4828      	ldr	r0, [pc, #160]	; (8009428 <_printf_i+0x248>)
 8009386:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800938a:	e7e3      	b.n	8009354 <_printf_i+0x174>
 800938c:	065e      	lsls	r6, r3, #25
 800938e:	bf48      	it	mi
 8009390:	b2ad      	uxthmi	r5, r5
 8009392:	e7e6      	b.n	8009362 <_printf_i+0x182>
 8009394:	4616      	mov	r6, r2
 8009396:	e7bb      	b.n	8009310 <_printf_i+0x130>
 8009398:	680b      	ldr	r3, [r1, #0]
 800939a:	6826      	ldr	r6, [r4, #0]
 800939c:	6960      	ldr	r0, [r4, #20]
 800939e:	1d1d      	adds	r5, r3, #4
 80093a0:	600d      	str	r5, [r1, #0]
 80093a2:	0635      	lsls	r5, r6, #24
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	d501      	bpl.n	80093ac <_printf_i+0x1cc>
 80093a8:	6018      	str	r0, [r3, #0]
 80093aa:	e002      	b.n	80093b2 <_printf_i+0x1d2>
 80093ac:	0671      	lsls	r1, r6, #25
 80093ae:	d5fb      	bpl.n	80093a8 <_printf_i+0x1c8>
 80093b0:	8018      	strh	r0, [r3, #0]
 80093b2:	2300      	movs	r3, #0
 80093b4:	6123      	str	r3, [r4, #16]
 80093b6:	4616      	mov	r6, r2
 80093b8:	e7ba      	b.n	8009330 <_printf_i+0x150>
 80093ba:	680b      	ldr	r3, [r1, #0]
 80093bc:	1d1a      	adds	r2, r3, #4
 80093be:	600a      	str	r2, [r1, #0]
 80093c0:	681e      	ldr	r6, [r3, #0]
 80093c2:	6862      	ldr	r2, [r4, #4]
 80093c4:	2100      	movs	r1, #0
 80093c6:	4630      	mov	r0, r6
 80093c8:	f7f6 ff2a 	bl	8000220 <memchr>
 80093cc:	b108      	cbz	r0, 80093d2 <_printf_i+0x1f2>
 80093ce:	1b80      	subs	r0, r0, r6
 80093d0:	6060      	str	r0, [r4, #4]
 80093d2:	6863      	ldr	r3, [r4, #4]
 80093d4:	6123      	str	r3, [r4, #16]
 80093d6:	2300      	movs	r3, #0
 80093d8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80093dc:	e7a8      	b.n	8009330 <_printf_i+0x150>
 80093de:	6923      	ldr	r3, [r4, #16]
 80093e0:	4632      	mov	r2, r6
 80093e2:	4649      	mov	r1, r9
 80093e4:	4640      	mov	r0, r8
 80093e6:	47d0      	blx	sl
 80093e8:	3001      	adds	r0, #1
 80093ea:	d0ab      	beq.n	8009344 <_printf_i+0x164>
 80093ec:	6823      	ldr	r3, [r4, #0]
 80093ee:	079b      	lsls	r3, r3, #30
 80093f0:	d413      	bmi.n	800941a <_printf_i+0x23a>
 80093f2:	68e0      	ldr	r0, [r4, #12]
 80093f4:	9b03      	ldr	r3, [sp, #12]
 80093f6:	4298      	cmp	r0, r3
 80093f8:	bfb8      	it	lt
 80093fa:	4618      	movlt	r0, r3
 80093fc:	e7a4      	b.n	8009348 <_printf_i+0x168>
 80093fe:	2301      	movs	r3, #1
 8009400:	4632      	mov	r2, r6
 8009402:	4649      	mov	r1, r9
 8009404:	4640      	mov	r0, r8
 8009406:	47d0      	blx	sl
 8009408:	3001      	adds	r0, #1
 800940a:	d09b      	beq.n	8009344 <_printf_i+0x164>
 800940c:	3501      	adds	r5, #1
 800940e:	68e3      	ldr	r3, [r4, #12]
 8009410:	9903      	ldr	r1, [sp, #12]
 8009412:	1a5b      	subs	r3, r3, r1
 8009414:	42ab      	cmp	r3, r5
 8009416:	dcf2      	bgt.n	80093fe <_printf_i+0x21e>
 8009418:	e7eb      	b.n	80093f2 <_printf_i+0x212>
 800941a:	2500      	movs	r5, #0
 800941c:	f104 0619 	add.w	r6, r4, #25
 8009420:	e7f5      	b.n	800940e <_printf_i+0x22e>
 8009422:	bf00      	nop
 8009424:	08009f91 	.word	0x08009f91
 8009428:	08009fa2 	.word	0x08009fa2

0800942c <_putc_r>:
 800942c:	b570      	push	{r4, r5, r6, lr}
 800942e:	460d      	mov	r5, r1
 8009430:	4614      	mov	r4, r2
 8009432:	4606      	mov	r6, r0
 8009434:	b118      	cbz	r0, 800943e <_putc_r+0x12>
 8009436:	6983      	ldr	r3, [r0, #24]
 8009438:	b90b      	cbnz	r3, 800943e <_putc_r+0x12>
 800943a:	f7ff fb5b 	bl	8008af4 <__sinit>
 800943e:	4b1c      	ldr	r3, [pc, #112]	; (80094b0 <_putc_r+0x84>)
 8009440:	429c      	cmp	r4, r3
 8009442:	d124      	bne.n	800948e <_putc_r+0x62>
 8009444:	6874      	ldr	r4, [r6, #4]
 8009446:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009448:	07d8      	lsls	r0, r3, #31
 800944a:	d405      	bmi.n	8009458 <_putc_r+0x2c>
 800944c:	89a3      	ldrh	r3, [r4, #12]
 800944e:	0599      	lsls	r1, r3, #22
 8009450:	d402      	bmi.n	8009458 <_putc_r+0x2c>
 8009452:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009454:	f7ff fbec 	bl	8008c30 <__retarget_lock_acquire_recursive>
 8009458:	68a3      	ldr	r3, [r4, #8]
 800945a:	3b01      	subs	r3, #1
 800945c:	2b00      	cmp	r3, #0
 800945e:	60a3      	str	r3, [r4, #8]
 8009460:	da05      	bge.n	800946e <_putc_r+0x42>
 8009462:	69a2      	ldr	r2, [r4, #24]
 8009464:	4293      	cmp	r3, r2
 8009466:	db1c      	blt.n	80094a2 <_putc_r+0x76>
 8009468:	b2eb      	uxtb	r3, r5
 800946a:	2b0a      	cmp	r3, #10
 800946c:	d019      	beq.n	80094a2 <_putc_r+0x76>
 800946e:	6823      	ldr	r3, [r4, #0]
 8009470:	1c5a      	adds	r2, r3, #1
 8009472:	6022      	str	r2, [r4, #0]
 8009474:	701d      	strb	r5, [r3, #0]
 8009476:	b2ed      	uxtb	r5, r5
 8009478:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800947a:	07da      	lsls	r2, r3, #31
 800947c:	d405      	bmi.n	800948a <_putc_r+0x5e>
 800947e:	89a3      	ldrh	r3, [r4, #12]
 8009480:	059b      	lsls	r3, r3, #22
 8009482:	d402      	bmi.n	800948a <_putc_r+0x5e>
 8009484:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009486:	f7ff fbd4 	bl	8008c32 <__retarget_lock_release_recursive>
 800948a:	4628      	mov	r0, r5
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	4b09      	ldr	r3, [pc, #36]	; (80094b4 <_putc_r+0x88>)
 8009490:	429c      	cmp	r4, r3
 8009492:	d101      	bne.n	8009498 <_putc_r+0x6c>
 8009494:	68b4      	ldr	r4, [r6, #8]
 8009496:	e7d6      	b.n	8009446 <_putc_r+0x1a>
 8009498:	4b07      	ldr	r3, [pc, #28]	; (80094b8 <_putc_r+0x8c>)
 800949a:	429c      	cmp	r4, r3
 800949c:	bf08      	it	eq
 800949e:	68f4      	ldreq	r4, [r6, #12]
 80094a0:	e7d1      	b.n	8009446 <_putc_r+0x1a>
 80094a2:	4629      	mov	r1, r5
 80094a4:	4622      	mov	r2, r4
 80094a6:	4630      	mov	r0, r6
 80094a8:	f7ff f94a 	bl	8008740 <__swbuf_r>
 80094ac:	4605      	mov	r5, r0
 80094ae:	e7e3      	b.n	8009478 <_putc_r+0x4c>
 80094b0:	08009f40 	.word	0x08009f40
 80094b4:	08009f60 	.word	0x08009f60
 80094b8:	08009f20 	.word	0x08009f20

080094bc <_sbrk_r>:
 80094bc:	b538      	push	{r3, r4, r5, lr}
 80094be:	4d06      	ldr	r5, [pc, #24]	; (80094d8 <_sbrk_r+0x1c>)
 80094c0:	2300      	movs	r3, #0
 80094c2:	4604      	mov	r4, r0
 80094c4:	4608      	mov	r0, r1
 80094c6:	602b      	str	r3, [r5, #0]
 80094c8:	f7f9 f85e 	bl	8002588 <_sbrk>
 80094cc:	1c43      	adds	r3, r0, #1
 80094ce:	d102      	bne.n	80094d6 <_sbrk_r+0x1a>
 80094d0:	682b      	ldr	r3, [r5, #0]
 80094d2:	b103      	cbz	r3, 80094d6 <_sbrk_r+0x1a>
 80094d4:	6023      	str	r3, [r4, #0]
 80094d6:	bd38      	pop	{r3, r4, r5, pc}
 80094d8:	200004c4 	.word	0x200004c4

080094dc <__sread>:
 80094dc:	b510      	push	{r4, lr}
 80094de:	460c      	mov	r4, r1
 80094e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80094e4:	f000 f8a0 	bl	8009628 <_read_r>
 80094e8:	2800      	cmp	r0, #0
 80094ea:	bfab      	itete	ge
 80094ec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80094ee:	89a3      	ldrhlt	r3, [r4, #12]
 80094f0:	181b      	addge	r3, r3, r0
 80094f2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80094f6:	bfac      	ite	ge
 80094f8:	6563      	strge	r3, [r4, #84]	; 0x54
 80094fa:	81a3      	strhlt	r3, [r4, #12]
 80094fc:	bd10      	pop	{r4, pc}

080094fe <__swrite>:
 80094fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009502:	461f      	mov	r7, r3
 8009504:	898b      	ldrh	r3, [r1, #12]
 8009506:	05db      	lsls	r3, r3, #23
 8009508:	4605      	mov	r5, r0
 800950a:	460c      	mov	r4, r1
 800950c:	4616      	mov	r6, r2
 800950e:	d505      	bpl.n	800951c <__swrite+0x1e>
 8009510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009514:	2302      	movs	r3, #2
 8009516:	2200      	movs	r2, #0
 8009518:	f000 f868 	bl	80095ec <_lseek_r>
 800951c:	89a3      	ldrh	r3, [r4, #12]
 800951e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009522:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009526:	81a3      	strh	r3, [r4, #12]
 8009528:	4632      	mov	r2, r6
 800952a:	463b      	mov	r3, r7
 800952c:	4628      	mov	r0, r5
 800952e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009532:	f000 b817 	b.w	8009564 <_write_r>

08009536 <__sseek>:
 8009536:	b510      	push	{r4, lr}
 8009538:	460c      	mov	r4, r1
 800953a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800953e:	f000 f855 	bl	80095ec <_lseek_r>
 8009542:	1c43      	adds	r3, r0, #1
 8009544:	89a3      	ldrh	r3, [r4, #12]
 8009546:	bf15      	itete	ne
 8009548:	6560      	strne	r0, [r4, #84]	; 0x54
 800954a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800954e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009552:	81a3      	strheq	r3, [r4, #12]
 8009554:	bf18      	it	ne
 8009556:	81a3      	strhne	r3, [r4, #12]
 8009558:	bd10      	pop	{r4, pc}

0800955a <__sclose>:
 800955a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800955e:	f000 b813 	b.w	8009588 <_close_r>
	...

08009564 <_write_r>:
 8009564:	b538      	push	{r3, r4, r5, lr}
 8009566:	4d07      	ldr	r5, [pc, #28]	; (8009584 <_write_r+0x20>)
 8009568:	4604      	mov	r4, r0
 800956a:	4608      	mov	r0, r1
 800956c:	4611      	mov	r1, r2
 800956e:	2200      	movs	r2, #0
 8009570:	602a      	str	r2, [r5, #0]
 8009572:	461a      	mov	r2, r3
 8009574:	f7f7 fe45 	bl	8001202 <_write>
 8009578:	1c43      	adds	r3, r0, #1
 800957a:	d102      	bne.n	8009582 <_write_r+0x1e>
 800957c:	682b      	ldr	r3, [r5, #0]
 800957e:	b103      	cbz	r3, 8009582 <_write_r+0x1e>
 8009580:	6023      	str	r3, [r4, #0]
 8009582:	bd38      	pop	{r3, r4, r5, pc}
 8009584:	200004c4 	.word	0x200004c4

08009588 <_close_r>:
 8009588:	b538      	push	{r3, r4, r5, lr}
 800958a:	4d06      	ldr	r5, [pc, #24]	; (80095a4 <_close_r+0x1c>)
 800958c:	2300      	movs	r3, #0
 800958e:	4604      	mov	r4, r0
 8009590:	4608      	mov	r0, r1
 8009592:	602b      	str	r3, [r5, #0]
 8009594:	f7f8 ffc3 	bl	800251e <_close>
 8009598:	1c43      	adds	r3, r0, #1
 800959a:	d102      	bne.n	80095a2 <_close_r+0x1a>
 800959c:	682b      	ldr	r3, [r5, #0]
 800959e:	b103      	cbz	r3, 80095a2 <_close_r+0x1a>
 80095a0:	6023      	str	r3, [r4, #0]
 80095a2:	bd38      	pop	{r3, r4, r5, pc}
 80095a4:	200004c4 	.word	0x200004c4

080095a8 <_fstat_r>:
 80095a8:	b538      	push	{r3, r4, r5, lr}
 80095aa:	4d07      	ldr	r5, [pc, #28]	; (80095c8 <_fstat_r+0x20>)
 80095ac:	2300      	movs	r3, #0
 80095ae:	4604      	mov	r4, r0
 80095b0:	4608      	mov	r0, r1
 80095b2:	4611      	mov	r1, r2
 80095b4:	602b      	str	r3, [r5, #0]
 80095b6:	f7f8 ffbe 	bl	8002536 <_fstat>
 80095ba:	1c43      	adds	r3, r0, #1
 80095bc:	d102      	bne.n	80095c4 <_fstat_r+0x1c>
 80095be:	682b      	ldr	r3, [r5, #0]
 80095c0:	b103      	cbz	r3, 80095c4 <_fstat_r+0x1c>
 80095c2:	6023      	str	r3, [r4, #0]
 80095c4:	bd38      	pop	{r3, r4, r5, pc}
 80095c6:	bf00      	nop
 80095c8:	200004c4 	.word	0x200004c4

080095cc <_isatty_r>:
 80095cc:	b538      	push	{r3, r4, r5, lr}
 80095ce:	4d06      	ldr	r5, [pc, #24]	; (80095e8 <_isatty_r+0x1c>)
 80095d0:	2300      	movs	r3, #0
 80095d2:	4604      	mov	r4, r0
 80095d4:	4608      	mov	r0, r1
 80095d6:	602b      	str	r3, [r5, #0]
 80095d8:	f7f8 ffbd 	bl	8002556 <_isatty>
 80095dc:	1c43      	adds	r3, r0, #1
 80095de:	d102      	bne.n	80095e6 <_isatty_r+0x1a>
 80095e0:	682b      	ldr	r3, [r5, #0]
 80095e2:	b103      	cbz	r3, 80095e6 <_isatty_r+0x1a>
 80095e4:	6023      	str	r3, [r4, #0]
 80095e6:	bd38      	pop	{r3, r4, r5, pc}
 80095e8:	200004c4 	.word	0x200004c4

080095ec <_lseek_r>:
 80095ec:	b538      	push	{r3, r4, r5, lr}
 80095ee:	4d07      	ldr	r5, [pc, #28]	; (800960c <_lseek_r+0x20>)
 80095f0:	4604      	mov	r4, r0
 80095f2:	4608      	mov	r0, r1
 80095f4:	4611      	mov	r1, r2
 80095f6:	2200      	movs	r2, #0
 80095f8:	602a      	str	r2, [r5, #0]
 80095fa:	461a      	mov	r2, r3
 80095fc:	f7f8 ffb6 	bl	800256c <_lseek>
 8009600:	1c43      	adds	r3, r0, #1
 8009602:	d102      	bne.n	800960a <_lseek_r+0x1e>
 8009604:	682b      	ldr	r3, [r5, #0]
 8009606:	b103      	cbz	r3, 800960a <_lseek_r+0x1e>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	bd38      	pop	{r3, r4, r5, pc}
 800960c:	200004c4 	.word	0x200004c4

08009610 <__malloc_lock>:
 8009610:	4801      	ldr	r0, [pc, #4]	; (8009618 <__malloc_lock+0x8>)
 8009612:	f7ff bb0d 	b.w	8008c30 <__retarget_lock_acquire_recursive>
 8009616:	bf00      	nop
 8009618:	200004bc 	.word	0x200004bc

0800961c <__malloc_unlock>:
 800961c:	4801      	ldr	r0, [pc, #4]	; (8009624 <__malloc_unlock+0x8>)
 800961e:	f7ff bb08 	b.w	8008c32 <__retarget_lock_release_recursive>
 8009622:	bf00      	nop
 8009624:	200004bc 	.word	0x200004bc

08009628 <_read_r>:
 8009628:	b538      	push	{r3, r4, r5, lr}
 800962a:	4d07      	ldr	r5, [pc, #28]	; (8009648 <_read_r+0x20>)
 800962c:	4604      	mov	r4, r0
 800962e:	4608      	mov	r0, r1
 8009630:	4611      	mov	r1, r2
 8009632:	2200      	movs	r2, #0
 8009634:	602a      	str	r2, [r5, #0]
 8009636:	461a      	mov	r2, r3
 8009638:	f7f8 ff54 	bl	80024e4 <_read>
 800963c:	1c43      	adds	r3, r0, #1
 800963e:	d102      	bne.n	8009646 <_read_r+0x1e>
 8009640:	682b      	ldr	r3, [r5, #0]
 8009642:	b103      	cbz	r3, 8009646 <_read_r+0x1e>
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	bd38      	pop	{r3, r4, r5, pc}
 8009648:	200004c4 	.word	0x200004c4
 800964c:	00000000 	.word	0x00000000

08009650 <floor>:
 8009650:	ec51 0b10 	vmov	r0, r1, d0
 8009654:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009658:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800965c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009660:	2e13      	cmp	r6, #19
 8009662:	ee10 5a10 	vmov	r5, s0
 8009666:	ee10 8a10 	vmov	r8, s0
 800966a:	460c      	mov	r4, r1
 800966c:	dc32      	bgt.n	80096d4 <floor+0x84>
 800966e:	2e00      	cmp	r6, #0
 8009670:	da14      	bge.n	800969c <floor+0x4c>
 8009672:	a333      	add	r3, pc, #204	; (adr r3, 8009740 <floor+0xf0>)
 8009674:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009678:	f7f6 ff52 	bl	8000520 <__adddf3>
 800967c:	2200      	movs	r2, #0
 800967e:	2300      	movs	r3, #0
 8009680:	f7f7 f982 	bl	8000988 <__aeabi_dcmpgt>
 8009684:	b138      	cbz	r0, 8009696 <floor+0x46>
 8009686:	2c00      	cmp	r4, #0
 8009688:	da57      	bge.n	800973a <floor+0xea>
 800968a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800968e:	431d      	orrs	r5, r3
 8009690:	d001      	beq.n	8009696 <floor+0x46>
 8009692:	4c2d      	ldr	r4, [pc, #180]	; (8009748 <floor+0xf8>)
 8009694:	2500      	movs	r5, #0
 8009696:	4621      	mov	r1, r4
 8009698:	4628      	mov	r0, r5
 800969a:	e025      	b.n	80096e8 <floor+0x98>
 800969c:	4f2b      	ldr	r7, [pc, #172]	; (800974c <floor+0xfc>)
 800969e:	4137      	asrs	r7, r6
 80096a0:	ea01 0307 	and.w	r3, r1, r7
 80096a4:	4303      	orrs	r3, r0
 80096a6:	d01f      	beq.n	80096e8 <floor+0x98>
 80096a8:	a325      	add	r3, pc, #148	; (adr r3, 8009740 <floor+0xf0>)
 80096aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ae:	f7f6 ff37 	bl	8000520 <__adddf3>
 80096b2:	2200      	movs	r2, #0
 80096b4:	2300      	movs	r3, #0
 80096b6:	f7f7 f967 	bl	8000988 <__aeabi_dcmpgt>
 80096ba:	2800      	cmp	r0, #0
 80096bc:	d0eb      	beq.n	8009696 <floor+0x46>
 80096be:	2c00      	cmp	r4, #0
 80096c0:	bfbe      	ittt	lt
 80096c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80096c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80096ca:	19a4      	addlt	r4, r4, r6
 80096cc:	ea24 0407 	bic.w	r4, r4, r7
 80096d0:	2500      	movs	r5, #0
 80096d2:	e7e0      	b.n	8009696 <floor+0x46>
 80096d4:	2e33      	cmp	r6, #51	; 0x33
 80096d6:	dd0b      	ble.n	80096f0 <floor+0xa0>
 80096d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80096dc:	d104      	bne.n	80096e8 <floor+0x98>
 80096de:	ee10 2a10 	vmov	r2, s0
 80096e2:	460b      	mov	r3, r1
 80096e4:	f7f6 ff1c 	bl	8000520 <__adddf3>
 80096e8:	ec41 0b10 	vmov	d0, r0, r1
 80096ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80096f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80096f4:	f04f 33ff 	mov.w	r3, #4294967295
 80096f8:	fa23 f707 	lsr.w	r7, r3, r7
 80096fc:	4207      	tst	r7, r0
 80096fe:	d0f3      	beq.n	80096e8 <floor+0x98>
 8009700:	a30f      	add	r3, pc, #60	; (adr r3, 8009740 <floor+0xf0>)
 8009702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009706:	f7f6 ff0b 	bl	8000520 <__adddf3>
 800970a:	2200      	movs	r2, #0
 800970c:	2300      	movs	r3, #0
 800970e:	f7f7 f93b 	bl	8000988 <__aeabi_dcmpgt>
 8009712:	2800      	cmp	r0, #0
 8009714:	d0bf      	beq.n	8009696 <floor+0x46>
 8009716:	2c00      	cmp	r4, #0
 8009718:	da02      	bge.n	8009720 <floor+0xd0>
 800971a:	2e14      	cmp	r6, #20
 800971c:	d103      	bne.n	8009726 <floor+0xd6>
 800971e:	3401      	adds	r4, #1
 8009720:	ea25 0507 	bic.w	r5, r5, r7
 8009724:	e7b7      	b.n	8009696 <floor+0x46>
 8009726:	2301      	movs	r3, #1
 8009728:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800972c:	fa03 f606 	lsl.w	r6, r3, r6
 8009730:	4435      	add	r5, r6
 8009732:	4545      	cmp	r5, r8
 8009734:	bf38      	it	cc
 8009736:	18e4      	addcc	r4, r4, r3
 8009738:	e7f2      	b.n	8009720 <floor+0xd0>
 800973a:	2500      	movs	r5, #0
 800973c:	462c      	mov	r4, r5
 800973e:	e7aa      	b.n	8009696 <floor+0x46>
 8009740:	8800759c 	.word	0x8800759c
 8009744:	7e37e43c 	.word	0x7e37e43c
 8009748:	bff00000 	.word	0xbff00000
 800974c:	000fffff 	.word	0x000fffff

08009750 <fmodf>:
 8009750:	b508      	push	{r3, lr}
 8009752:	ed2d 8b02 	vpush	{d8}
 8009756:	eef0 8a40 	vmov.f32	s17, s0
 800975a:	eeb0 8a60 	vmov.f32	s16, s1
 800975e:	f000 f823 	bl	80097a8 <__ieee754_fmodf>
 8009762:	4b0f      	ldr	r3, [pc, #60]	; (80097a0 <fmodf+0x50>)
 8009764:	f993 3000 	ldrsb.w	r3, [r3]
 8009768:	3301      	adds	r3, #1
 800976a:	d016      	beq.n	800979a <fmodf+0x4a>
 800976c:	eeb4 8a48 	vcmp.f32	s16, s16
 8009770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009774:	d611      	bvs.n	800979a <fmodf+0x4a>
 8009776:	eef4 8a68 	vcmp.f32	s17, s17
 800977a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800977e:	d60c      	bvs.n	800979a <fmodf+0x4a>
 8009780:	eddf 8a08 	vldr	s17, [pc, #32]	; 80097a4 <fmodf+0x54>
 8009784:	eeb4 8a68 	vcmp.f32	s16, s17
 8009788:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800978c:	d105      	bne.n	800979a <fmodf+0x4a>
 800978e:	f7fe ff01 	bl	8008594 <__errno>
 8009792:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009796:	2321      	movs	r3, #33	; 0x21
 8009798:	6003      	str	r3, [r0, #0]
 800979a:	ecbd 8b02 	vpop	{d8}
 800979e:	bd08      	pop	{r3, pc}
 80097a0:	20000074 	.word	0x20000074
 80097a4:	00000000 	.word	0x00000000

080097a8 <__ieee754_fmodf>:
 80097a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80097aa:	ee10 6a90 	vmov	r6, s1
 80097ae:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80097b2:	d009      	beq.n	80097c8 <__ieee754_fmodf+0x20>
 80097b4:	ee10 2a10 	vmov	r2, s0
 80097b8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80097bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80097c0:	da02      	bge.n	80097c8 <__ieee754_fmodf+0x20>
 80097c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80097c6:	dd04      	ble.n	80097d2 <__ieee754_fmodf+0x2a>
 80097c8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80097cc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80097d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80097d2:	42ab      	cmp	r3, r5
 80097d4:	dbfc      	blt.n	80097d0 <__ieee754_fmodf+0x28>
 80097d6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 80097da:	d106      	bne.n	80097ea <__ieee754_fmodf+0x42>
 80097dc:	4a32      	ldr	r2, [pc, #200]	; (80098a8 <__ieee754_fmodf+0x100>)
 80097de:	0fe3      	lsrs	r3, r4, #31
 80097e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80097e4:	ed93 0a00 	vldr	s0, [r3]
 80097e8:	e7f2      	b.n	80097d0 <__ieee754_fmodf+0x28>
 80097ea:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80097ee:	d13f      	bne.n	8009870 <__ieee754_fmodf+0xc8>
 80097f0:	0219      	lsls	r1, r3, #8
 80097f2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80097f6:	2900      	cmp	r1, #0
 80097f8:	dc37      	bgt.n	800986a <__ieee754_fmodf+0xc2>
 80097fa:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80097fe:	d13d      	bne.n	800987c <__ieee754_fmodf+0xd4>
 8009800:	022f      	lsls	r7, r5, #8
 8009802:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8009806:	2f00      	cmp	r7, #0
 8009808:	da35      	bge.n	8009876 <__ieee754_fmodf+0xce>
 800980a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800980e:	bfbb      	ittet	lt
 8009810:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8009814:	1a12      	sublt	r2, r2, r0
 8009816:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800981a:	4093      	lsllt	r3, r2
 800981c:	bfa8      	it	ge
 800981e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8009822:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009826:	bfb5      	itete	lt
 8009828:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800982c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009830:	1a52      	sublt	r2, r2, r1
 8009832:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009836:	bfb8      	it	lt
 8009838:	4095      	lsllt	r5, r2
 800983a:	1a40      	subs	r0, r0, r1
 800983c:	1b5a      	subs	r2, r3, r5
 800983e:	bb00      	cbnz	r0, 8009882 <__ieee754_fmodf+0xda>
 8009840:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8009844:	bf38      	it	cc
 8009846:	4613      	movcc	r3, r2
 8009848:	2b00      	cmp	r3, #0
 800984a:	d0c7      	beq.n	80097dc <__ieee754_fmodf+0x34>
 800984c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009850:	db1f      	blt.n	8009892 <__ieee754_fmodf+0xea>
 8009852:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009856:	db1f      	blt.n	8009898 <__ieee754_fmodf+0xf0>
 8009858:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800985c:	317f      	adds	r1, #127	; 0x7f
 800985e:	4323      	orrs	r3, r4
 8009860:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8009864:	ee00 3a10 	vmov	s0, r3
 8009868:	e7b2      	b.n	80097d0 <__ieee754_fmodf+0x28>
 800986a:	3801      	subs	r0, #1
 800986c:	0049      	lsls	r1, r1, #1
 800986e:	e7c2      	b.n	80097f6 <__ieee754_fmodf+0x4e>
 8009870:	15d8      	asrs	r0, r3, #23
 8009872:	387f      	subs	r0, #127	; 0x7f
 8009874:	e7c1      	b.n	80097fa <__ieee754_fmodf+0x52>
 8009876:	3901      	subs	r1, #1
 8009878:	007f      	lsls	r7, r7, #1
 800987a:	e7c4      	b.n	8009806 <__ieee754_fmodf+0x5e>
 800987c:	15e9      	asrs	r1, r5, #23
 800987e:	397f      	subs	r1, #127	; 0x7f
 8009880:	e7c3      	b.n	800980a <__ieee754_fmodf+0x62>
 8009882:	2a00      	cmp	r2, #0
 8009884:	da02      	bge.n	800988c <__ieee754_fmodf+0xe4>
 8009886:	005b      	lsls	r3, r3, #1
 8009888:	3801      	subs	r0, #1
 800988a:	e7d7      	b.n	800983c <__ieee754_fmodf+0x94>
 800988c:	d0a6      	beq.n	80097dc <__ieee754_fmodf+0x34>
 800988e:	0053      	lsls	r3, r2, #1
 8009890:	e7fa      	b.n	8009888 <__ieee754_fmodf+0xe0>
 8009892:	005b      	lsls	r3, r3, #1
 8009894:	3901      	subs	r1, #1
 8009896:	e7d9      	b.n	800984c <__ieee754_fmodf+0xa4>
 8009898:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800989c:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 80098a0:	3182      	adds	r1, #130	; 0x82
 80098a2:	410b      	asrs	r3, r1
 80098a4:	4323      	orrs	r3, r4
 80098a6:	e7dd      	b.n	8009864 <__ieee754_fmodf+0xbc>
 80098a8:	08009fb4 	.word	0x08009fb4

080098ac <_init>:
 80098ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ae:	bf00      	nop
 80098b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098b2:	bc08      	pop	{r3}
 80098b4:	469e      	mov	lr, r3
 80098b6:	4770      	bx	lr

080098b8 <_fini>:
 80098b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098ba:	bf00      	nop
 80098bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80098be:	bc08      	pop	{r3}
 80098c0:	469e      	mov	lr, r3
 80098c2:	4770      	bx	lr
