
STM32G431_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009eec  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000844  0800a0cc  0800a0cc  0001a0cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a910  0800a910  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a910  0800a910  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a910  0800a910  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a910  0800a910  0001a910  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a914  0800a914  0001a914  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a918  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000450  20000078  0800a98c  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200004c8  0800a98c  000204c8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce68  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003544  00000000  00000000  0003cf0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001740  00000000  00000000  00040450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015a8  00000000  00000000  00041b90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022956  00000000  00000000  00043138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019b39  00000000  00000000  00065a8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df682  00000000  00000000  0007f5c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ec49  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006df8  00000000  00000000  0015ec9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a0b4 	.word	0x0800a0b4

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	0800a0b4 	.word	0x0800a0b4

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f008 f9a5 	bl	8008df4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b3b      	ldr	r3, [pc, #236]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000aac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ab2:	4b39      	ldr	r3, [pc, #228]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ab4:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	4b37      	ldr	r3, [pc, #220]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b35      	ldr	r3, [pc, #212]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ac6:	4b34      	ldr	r3, [pc, #208]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000acc:	4b32      	ldr	r3, [pc, #200]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ad2:	4b31      	ldr	r3, [pc, #196]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ad4:	2204      	movs	r2, #4
 8000ad6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b2f      	ldr	r3, [pc, #188]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b2e      	ldr	r3, [pc, #184]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ae4:	4b2c      	ldr	r3, [pc, #176]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b2b      	ldr	r3, [pc, #172]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b29      	ldr	r3, [pc, #164]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af8:	4b27      	ldr	r3, [pc, #156]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000afe:	4b26      	ldr	r3, [pc, #152]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b06:	4b24      	ldr	r3, [pc, #144]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0c:	4b22      	ldr	r3, [pc, #136]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b16:	f002 fd33 	bl	8003580 <HAL_ADC_Init>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d001      	beq.n	8000b24 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000b20:	f001 ffbb 	bl	8002a9a <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000b24:	2306      	movs	r3, #6
 8000b26:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b30:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b34:	4619      	mov	r1, r3
 8000b36:	4818      	ldr	r0, [pc, #96]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b38:	f003 fe2c 	bl	8004794 <HAL_ADCEx_MultiModeConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000b42:	f001 ffaa 	bl	8002a9a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b46:	4b15      	ldr	r3, [pc, #84]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b48:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4a:	2306      	movs	r3, #6
 8000b4c:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b52:	237f      	movs	r3, #127	; 0x7f
 8000b54:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b56:	2304      	movs	r3, #4
 8000b58:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b5e:	1d3b      	adds	r3, r7, #4
 8000b60:	4619      	mov	r1, r3
 8000b62:	480d      	ldr	r0, [pc, #52]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b64:	f003 f90a 	bl	8003d7c <HAL_ADC_ConfigChannel>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 8000b6e:	f001 ff94 	bl	8002a9a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b72:	4b0b      	ldr	r3, [pc, #44]	; (8000ba0 <MX_ADC1_Init+0x114>)
 8000b74:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b76:	230c      	movs	r3, #12
 8000b78:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7a:	1d3b      	adds	r3, r7, #4
 8000b7c:	4619      	mov	r1, r3
 8000b7e:	4806      	ldr	r0, [pc, #24]	; (8000b98 <MX_ADC1_Init+0x10c>)
 8000b80:	f003 f8fc 	bl	8003d7c <HAL_ADC_ConfigChannel>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <MX_ADC1_Init+0x102>
  {
    Error_Handler();
 8000b8a:	f001 ff86 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b8e:	bf00      	nop
 8000b90:	3730      	adds	r7, #48	; 0x30
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000110 	.word	0x20000110
 8000b9c:	32601000 	.word	0x32601000
 8000ba0:	3ef08000 	.word	0x3ef08000

08000ba4 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b088      	sub	sp, #32
 8000ba8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000baa:	463b      	mov	r3, r7
 8000bac:	2220      	movs	r2, #32
 8000bae:	2100      	movs	r1, #0
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f008 f91f 	bl	8008df4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bb6:	4b2f      	ldr	r3, [pc, #188]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bb8:	4a2f      	ldr	r2, [pc, #188]	; (8000c78 <MX_ADC2_Init+0xd4>)
 8000bba:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bbc:	4b2d      	ldr	r3, [pc, #180]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bbe:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000bc2:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc4:	4b2b      	ldr	r3, [pc, #172]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bca:	4b2a      	ldr	r3, [pc, #168]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bcc:	2200      	movs	r2, #0
 8000bce:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000bd0:	4b28      	ldr	r3, [pc, #160]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bd6:	4b27      	ldr	r3, [pc, #156]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bd8:	2201      	movs	r2, #1
 8000bda:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bde:	2204      	movs	r2, #4
 8000be0:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000be2:	4b24      	ldr	r3, [pc, #144]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000be4:	2200      	movs	r2, #0
 8000be6:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000be8:	4b22      	ldr	r3, [pc, #136]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bea:	2200      	movs	r2, #0
 8000bec:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000bee:	4b21      	ldr	r3, [pc, #132]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bf0:	2202      	movs	r2, #2
 8000bf2:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf4:	4b1f      	ldr	r3, [pc, #124]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bf6:	2200      	movs	r2, #0
 8000bf8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000bfc:	4b1d      	ldr	r3, [pc, #116]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000bfe:	2200      	movs	r2, #0
 8000c00:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c12:	4818      	ldr	r0, [pc, #96]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000c14:	f002 fcb4 	bl	8003580 <HAL_ADC_Init>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000c1e:	f001 ff3c 	bl	8002a9a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c22:	4b16      	ldr	r3, [pc, #88]	; (8000c7c <MX_ADC2_Init+0xd8>)
 8000c24:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c26:	2306      	movs	r3, #6
 8000c28:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c2e:	237f      	movs	r3, #127	; 0x7f
 8000c30:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c32:	2304      	movs	r3, #4
 8000c34:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c36:	2300      	movs	r3, #0
 8000c38:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	480d      	ldr	r0, [pc, #52]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000c40:	f003 f89c 	bl	8003d7c <HAL_ADC_ConfigChannel>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 8000c4a:	f001 ff26 	bl	8002a9a <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c4e:	4b0c      	ldr	r3, [pc, #48]	; (8000c80 <MX_ADC2_Init+0xdc>)
 8000c50:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c52:	230c      	movs	r3, #12
 8000c54:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c56:	463b      	mov	r3, r7
 8000c58:	4619      	mov	r1, r3
 8000c5a:	4806      	ldr	r0, [pc, #24]	; (8000c74 <MX_ADC2_Init+0xd0>)
 8000c5c:	f003 f88e 	bl	8003d7c <HAL_ADC_ConfigChannel>
 8000c60:	4603      	mov	r3, r0
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d001      	beq.n	8000c6a <MX_ADC2_Init+0xc6>
  {
    Error_Handler();
 8000c66:	f001 ff18 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c6a:	bf00      	nop
 8000c6c:	3720      	adds	r7, #32
 8000c6e:	46bd      	mov	sp, r7
 8000c70:	bd80      	pop	{r7, pc}
 8000c72:	bf00      	nop
 8000c74:	200000a4 	.word	0x200000a4
 8000c78:	50000100 	.word	0x50000100
 8000c7c:	32601000 	.word	0x32601000
 8000c80:	10c00010 	.word	0x10c00010

08000c84 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b09e      	sub	sp, #120	; 0x78
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c8c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c90:	2200      	movs	r2, #0
 8000c92:	601a      	str	r2, [r3, #0]
 8000c94:	605a      	str	r2, [r3, #4]
 8000c96:	609a      	str	r2, [r3, #8]
 8000c98:	60da      	str	r2, [r3, #12]
 8000c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c9c:	f107 0320 	add.w	r3, r7, #32
 8000ca0:	2244      	movs	r2, #68	; 0x44
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f008 f8a5 	bl	8008df4 <memset>
  if(adcHandle->Instance==ADC1)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb2:	d168      	bne.n	8000d86 <HAL_ADC_MspInit+0x102>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cb8:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cba:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cbe:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc0:	f107 0320 	add.w	r3, r7, #32
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f005 fc6f 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 8000cca:	4603      	mov	r3, r0
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d001      	beq.n	8000cd4 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cd0:	f001 fee3 	bl	8002a9a <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cd4:	4b71      	ldr	r3, [pc, #452]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	3301      	adds	r3, #1
 8000cda:	4a70      	ldr	r2, [pc, #448]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000cdc:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000cde:	4b6f      	ldr	r3, [pc, #444]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	2b01      	cmp	r3, #1
 8000ce4:	d10b      	bne.n	8000cfe <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000ce6:	4b6e      	ldr	r3, [pc, #440]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000ce8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cea:	4a6d      	ldr	r2, [pc, #436]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000cec:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf2:	4b6b      	ldr	r3, [pc, #428]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000cf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cf6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfa:	61fb      	str	r3, [r7, #28]
 8000cfc:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cfe:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000d00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d02:	4a67      	ldr	r2, [pc, #412]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0a:	4b65      	ldr	r3, [pc, #404]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000d0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	61bb      	str	r3, [r7, #24]
 8000d14:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = V_Sen_Pin|SO_A_Pin;
 8000d16:	2303      	movs	r3, #3
 8000d18:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d22:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d26:	4619      	mov	r1, r3
 8000d28:	485e      	ldr	r0, [pc, #376]	; (8000ea4 <HAL_ADC_MspInit+0x220>)
 8000d2a:	f004 fcb7 	bl	800569c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d2e:	4b5e      	ldr	r3, [pc, #376]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d30:	4a5e      	ldr	r2, [pc, #376]	; (8000eac <HAL_ADC_MspInit+0x228>)
 8000d32:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d34:	4b5c      	ldr	r3, [pc, #368]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d36:	2205      	movs	r2, #5
 8000d38:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3a:	4b5b      	ldr	r3, [pc, #364]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d40:	4b59      	ldr	r3, [pc, #356]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d46:	4b58      	ldr	r3, [pc, #352]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d48:	2280      	movs	r2, #128	; 0x80
 8000d4a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d4c:	4b56      	ldr	r3, [pc, #344]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d4e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d52:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d54:	4b54      	ldr	r3, [pc, #336]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d56:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5a:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d5c:	4b52      	ldr	r3, [pc, #328]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d5e:	2220      	movs	r2, #32
 8000d60:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d62:	4b51      	ldr	r3, [pc, #324]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d64:	2200      	movs	r2, #0
 8000d66:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d68:	484f      	ldr	r0, [pc, #316]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d6a:	f003 fec7 	bl	8004afc <HAL_DMA_Init>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8000d74:	f001 fe91 	bl	8002a9a <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	4a4b      	ldr	r2, [pc, #300]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d7c:	655a      	str	r2, [r3, #84]	; 0x54
 8000d7e:	4a4a      	ldr	r2, [pc, #296]	; (8000ea8 <HAL_ADC_MspInit+0x224>)
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d84:	e086      	b.n	8000e94 <HAL_ADC_MspInit+0x210>
  else if(adcHandle->Instance==ADC2)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	4a49      	ldr	r2, [pc, #292]	; (8000eb0 <HAL_ADC_MspInit+0x22c>)
 8000d8c:	4293      	cmp	r3, r2
 8000d8e:	f040 8081 	bne.w	8000e94 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d92:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d96:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d98:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d9c:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9e:	f107 0320 	add.w	r3, r7, #32
 8000da2:	4618      	mov	r0, r3
 8000da4:	f005 fc00 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 8000da8:	4603      	mov	r3, r0
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d001      	beq.n	8000db2 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000dae:	f001 fe74 	bl	8002a9a <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000db2:	4b3a      	ldr	r3, [pc, #232]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	3301      	adds	r3, #1
 8000db8:	4a38      	ldr	r2, [pc, #224]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000dba:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dbc:	4b37      	ldr	r3, [pc, #220]	; (8000e9c <HAL_ADC_MspInit+0x218>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	2b01      	cmp	r3, #1
 8000dc2:	d10b      	bne.n	8000ddc <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc4:	4b36      	ldr	r3, [pc, #216]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc8:	4a35      	ldr	r2, [pc, #212]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dca:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dce:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd0:	4b33      	ldr	r3, [pc, #204]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dd2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dd8:	617b      	str	r3, [r7, #20]
 8000dda:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ddc:	4b30      	ldr	r3, [pc, #192]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de0:	4a2f      	ldr	r2, [pc, #188]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000de2:	f043 0301 	orr.w	r3, r3, #1
 8000de6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000de8:	4b2d      	ldr	r3, [pc, #180]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	613b      	str	r3, [r7, #16]
 8000df2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df4:	4b2a      	ldr	r3, [pc, #168]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000df6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df8:	4a29      	ldr	r2, [pc, #164]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000dfa:	f043 0302 	orr.w	r3, r3, #2
 8000dfe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e00:	4b27      	ldr	r3, [pc, #156]	; (8000ea0 <HAL_ADC_MspInit+0x21c>)
 8000e02:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e04:	f003 0302 	and.w	r3, r3, #2
 8000e08:	60fb      	str	r3, [r7, #12]
 8000e0a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_Sen_Pin;
 8000e0c:	2380      	movs	r3, #128	; 0x80
 8000e0e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e10:	2303      	movs	r3, #3
 8000e12:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e14:	2300      	movs	r3, #0
 8000e16:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(T_Sen_GPIO_Port, &GPIO_InitStruct);
 8000e18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e1c:	4619      	mov	r1, r3
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e22:	f004 fc3b 	bl	800569c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO_B_Pin;
 8000e26:	2304      	movs	r3, #4
 8000e28:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2a:	2303      	movs	r3, #3
 8000e2c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SO_B_GPIO_Port, &GPIO_InitStruct);
 8000e32:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e36:	4619      	mov	r1, r3
 8000e38:	481a      	ldr	r0, [pc, #104]	; (8000ea4 <HAL_ADC_MspInit+0x220>)
 8000e3a:	f004 fc2f 	bl	800569c <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel2;
 8000e3e:	4b1d      	ldr	r3, [pc, #116]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e40:	4a1d      	ldr	r2, [pc, #116]	; (8000eb8 <HAL_ADC_MspInit+0x234>)
 8000e42:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e44:	4b1b      	ldr	r3, [pc, #108]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e46:	2224      	movs	r2, #36	; 0x24
 8000e48:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4a:	4b1a      	ldr	r3, [pc, #104]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e50:	4b18      	ldr	r3, [pc, #96]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e56:	4b17      	ldr	r3, [pc, #92]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e58:	2280      	movs	r2, #128	; 0x80
 8000e5a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e5c:	4b15      	ldr	r3, [pc, #84]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e5e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e62:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e64:	4b13      	ldr	r3, [pc, #76]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e66:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e6c:	4b11      	ldr	r3, [pc, #68]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e6e:	2220      	movs	r2, #32
 8000e70:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e72:	4b10      	ldr	r3, [pc, #64]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e78:	480e      	ldr	r0, [pc, #56]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e7a:	f003 fe3f 	bl	8004afc <HAL_DMA_Init>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d001      	beq.n	8000e88 <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8000e84:	f001 fe09 	bl	8002a9a <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	4a0a      	ldr	r2, [pc, #40]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e8c:	655a      	str	r2, [r3, #84]	; 0x54
 8000e8e:	4a09      	ldr	r2, [pc, #36]	; (8000eb4 <HAL_ADC_MspInit+0x230>)
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e94:	bf00      	nop
 8000e96:	3778      	adds	r7, #120	; 0x78
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	20000094 	.word	0x20000094
 8000ea0:	40021000 	.word	0x40021000
 8000ea4:	48000400 	.word	0x48000400
 8000ea8:	2000017c 	.word	0x2000017c
 8000eac:	40020008 	.word	0x40020008
 8000eb0:	50000100 	.word	0x50000100
 8000eb4:	200001dc 	.word	0x200001dc
 8000eb8:	4002001c 	.word	0x4002001c

08000ebc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec2:	4b16      	ldr	r3, [pc, #88]	; (8000f1c <MX_DMA_Init+0x60>)
 8000ec4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ec6:	4a15      	ldr	r2, [pc, #84]	; (8000f1c <MX_DMA_Init+0x60>)
 8000ec8:	f043 0304 	orr.w	r3, r3, #4
 8000ecc:	6493      	str	r3, [r2, #72]	; 0x48
 8000ece:	4b13      	ldr	r3, [pc, #76]	; (8000f1c <MX_DMA_Init+0x60>)
 8000ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed2:	f003 0304 	and.w	r3, r3, #4
 8000ed6:	607b      	str	r3, [r7, #4]
 8000ed8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000eda:	4b10      	ldr	r3, [pc, #64]	; (8000f1c <MX_DMA_Init+0x60>)
 8000edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ede:	4a0f      	ldr	r2, [pc, #60]	; (8000f1c <MX_DMA_Init+0x60>)
 8000ee0:	f043 0301 	orr.w	r3, r3, #1
 8000ee4:	6493      	str	r3, [r2, #72]	; 0x48
 8000ee6:	4b0d      	ldr	r3, [pc, #52]	; (8000f1c <MX_DMA_Init+0x60>)
 8000ee8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	2100      	movs	r1, #0
 8000ef6:	200b      	movs	r0, #11
 8000ef8:	f003 fdcb 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000efc:	200b      	movs	r0, #11
 8000efe:	f003 fde2 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8000f02:	2200      	movs	r2, #0
 8000f04:	2100      	movs	r1, #0
 8000f06:	200c      	movs	r0, #12
 8000f08:	f003 fdc3 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8000f0c:	200c      	movs	r0, #12
 8000f0e:	f003 fdda 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40021000 	.word	0x40021000

08000f20 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f24:	4b1f      	ldr	r3, [pc, #124]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f26:	4a20      	ldr	r2, [pc, #128]	; (8000fa8 <MX_FDCAN1_Init+0x88>)
 8000f28:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f2a:	4b1e      	ldr	r3, [pc, #120]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f2c:	2200      	movs	r2, #0
 8000f2e:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f30:	4b1c      	ldr	r3, [pc, #112]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f32:	2200      	movs	r2, #0
 8000f34:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f36:	4b1b      	ldr	r3, [pc, #108]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f3c:	4b19      	ldr	r3, [pc, #100]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f3e:	2200      	movs	r2, #0
 8000f40:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f42:	4b18      	ldr	r3, [pc, #96]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f48:	4b16      	ldr	r3, [pc, #88]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f4e:	4b15      	ldr	r3, [pc, #84]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f50:	2201      	movs	r2, #1
 8000f52:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f54:	4b13      	ldr	r3, [pc, #76]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f5a:	4b12      	ldr	r3, [pc, #72]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f5c:	2202      	movs	r2, #2
 8000f5e:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f60:	4b10      	ldr	r3, [pc, #64]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f62:	2202      	movs	r2, #2
 8000f64:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f66:	4b0f      	ldr	r3, [pc, #60]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f68:	2201      	movs	r2, #1
 8000f6a:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f6c:	4b0d      	ldr	r3, [pc, #52]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f72:	4b0c      	ldr	r3, [pc, #48]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f74:	2201      	movs	r2, #1
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f78:	4b0a      	ldr	r3, [pc, #40]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f7e:	4b09      	ldr	r3, [pc, #36]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000f84:	4b07      	ldr	r3, [pc, #28]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000f8a:	4b06      	ldr	r3, [pc, #24]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000f90:	4804      	ldr	r0, [pc, #16]	; (8000fa4 <MX_FDCAN1_Init+0x84>)
 8000f92:	f004 f825 	bl	8004fe0 <HAL_FDCAN_Init>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b00      	cmp	r3, #0
 8000f9a:	d001      	beq.n	8000fa0 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000f9c:	f001 fd7d 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}
 8000fa4:	2000023c 	.word	0x2000023c
 8000fa8:	40006400 	.word	0x40006400

08000fac <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b09a      	sub	sp, #104	; 0x68
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fb4:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fb8:	2200      	movs	r2, #0
 8000fba:	601a      	str	r2, [r3, #0]
 8000fbc:	605a      	str	r2, [r3, #4]
 8000fbe:	609a      	str	r2, [r3, #8]
 8000fc0:	60da      	str	r2, [r3, #12]
 8000fc2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fc4:	f107 0310 	add.w	r3, r7, #16
 8000fc8:	2244      	movs	r2, #68	; 0x44
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f007 ff11 	bl	8008df4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4a24      	ldr	r2, [pc, #144]	; (8001068 <HAL_FDCAN_MspInit+0xbc>)
 8000fd8:	4293      	cmp	r3, r2
 8000fda:	d140      	bne.n	800105e <HAL_FDCAN_MspInit+0xb2>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000fdc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000fe2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fe6:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000fe8:	f107 0310 	add.w	r3, r7, #16
 8000fec:	4618      	mov	r0, r3
 8000fee:	f005 fadb 	bl	80065a8 <HAL_RCCEx_PeriphCLKConfig>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d001      	beq.n	8000ffc <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8000ff8:	f001 fd4f 	bl	8002a9a <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8000ffc:	4b1b      	ldr	r3, [pc, #108]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 8000ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001000:	4a1a      	ldr	r2, [pc, #104]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 8001002:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001006:	6593      	str	r3, [r2, #88]	; 0x58
 8001008:	4b18      	ldr	r3, [pc, #96]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 800100a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800100c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001010:	60fb      	str	r3, [r7, #12]
 8001012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001014:	4b15      	ldr	r3, [pc, #84]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 8001016:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001018:	4a14      	ldr	r2, [pc, #80]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 800101a:	f043 0302 	orr.w	r3, r3, #2
 800101e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001020:	4b12      	ldr	r3, [pc, #72]	; (800106c <HAL_FDCAN_MspInit+0xc0>)
 8001022:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001024:	f003 0302 	and.w	r3, r3, #2
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 800102c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001030:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001032:	2302      	movs	r3, #2
 8001034:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001036:	2300      	movs	r3, #0
 8001038:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800103a:	2300      	movs	r3, #0
 800103c:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800103e:	2309      	movs	r3, #9
 8001040:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001042:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001046:	4619      	mov	r1, r3
 8001048:	4809      	ldr	r0, [pc, #36]	; (8001070 <HAL_FDCAN_MspInit+0xc4>)
 800104a:	f004 fb27 	bl	800569c <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 800104e:	2200      	movs	r2, #0
 8001050:	2103      	movs	r1, #3
 8001052:	2015      	movs	r0, #21
 8001054:	f003 fd1d 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001058:	2015      	movs	r0, #21
 800105a:	f003 fd34 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800105e:	bf00      	nop
 8001060:	3768      	adds	r7, #104	; 0x68
 8001062:	46bd      	mov	sp, r7
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	40006400 	.word	0x40006400
 800106c:	40021000 	.word	0x40021000
 8001070:	48000400 	.word	0x48000400

08001074 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	b08a      	sub	sp, #40	; 0x28
 8001078:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0314 	add.w	r3, r7, #20
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
 8001088:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800108a:	4b41      	ldr	r3, [pc, #260]	; (8001190 <MX_GPIO_Init+0x11c>)
 800108c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800108e:	4a40      	ldr	r2, [pc, #256]	; (8001190 <MX_GPIO_Init+0x11c>)
 8001090:	f043 0320 	orr.w	r3, r3, #32
 8001094:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001096:	4b3e      	ldr	r3, [pc, #248]	; (8001190 <MX_GPIO_Init+0x11c>)
 8001098:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800109a:	f003 0320 	and.w	r3, r3, #32
 800109e:	613b      	str	r3, [r7, #16]
 80010a0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010a2:	4b3b      	ldr	r3, [pc, #236]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010a6:	4a3a      	ldr	r2, [pc, #232]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010a8:	f043 0301 	orr.w	r3, r3, #1
 80010ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ae:	4b38      	ldr	r3, [pc, #224]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b2:	f003 0301 	and.w	r3, r3, #1
 80010b6:	60fb      	str	r3, [r7, #12]
 80010b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ba:	4b35      	ldr	r3, [pc, #212]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010be:	4a34      	ldr	r2, [pc, #208]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010c0:	f043 0302 	orr.w	r3, r3, #2
 80010c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010c6:	4b32      	ldr	r3, [pc, #200]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ca:	f003 0302 	and.w	r3, r3, #2
 80010ce:	60bb      	str	r3, [r7, #8]
 80010d0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d2:	4b2f      	ldr	r3, [pc, #188]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010d6:	4a2e      	ldr	r2, [pc, #184]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010d8:	f043 0304 	orr.w	r3, r3, #4
 80010dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010de:	4b2c      	ldr	r3, [pc, #176]	; (8001190 <MX_GPIO_Init+0x11c>)
 80010e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e2:	f003 0304 	and.w	r3, r3, #4
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80010ea:	2200      	movs	r2, #0
 80010ec:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80010f0:	4828      	ldr	r0, [pc, #160]	; (8001194 <MX_GPIO_Init+0x120>)
 80010f2:	f004 fc6d 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80010f6:	2200      	movs	r2, #0
 80010f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80010fc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001100:	f004 fc66 	bl	80059d0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001104:	2320      	movs	r3, #32
 8001106:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001108:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 800110c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 8001112:	f107 0314 	add.w	r3, r7, #20
 8001116:	4619      	mov	r1, r3
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f004 fabe 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 8001120:	2340      	movs	r3, #64	; 0x40
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001124:	2300      	movs	r3, #0
 8001126:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001128:	2300      	movs	r3, #0
 800112a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 800112c:	f107 0314 	add.w	r3, r7, #20
 8001130:	4619      	mov	r1, r3
 8001132:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001136:	f004 fab1 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 800113a:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001140:	2301      	movs	r3, #1
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001148:	2300      	movs	r3, #0
 800114a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800114c:	f107 0314 	add.w	r3, r7, #20
 8001150:	4619      	mov	r1, r3
 8001152:	4810      	ldr	r0, [pc, #64]	; (8001194 <MX_GPIO_Init+0x120>)
 8001154:	f004 faa2 	bl	800569c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001158:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800115c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	2301      	movs	r3, #1
 8001160:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001162:	2300      	movs	r3, #0
 8001164:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001166:	2302      	movs	r3, #2
 8001168:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800116a:	f107 0314 	add.w	r3, r7, #20
 800116e:	4619      	mov	r1, r3
 8001170:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001174:	f004 fa92 	bl	800569c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 1, 0);
 8001178:	2200      	movs	r2, #0
 800117a:	2101      	movs	r1, #1
 800117c:	2017      	movs	r0, #23
 800117e:	f003 fc88 	bl	8004a92 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001182:	2017      	movs	r0, #23
 8001184:	f003 fc9f 	bl	8004ac6 <HAL_NVIC_EnableIRQ>

}
 8001188:	bf00      	nop
 800118a:	3728      	adds	r7, #40	; 0x28
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}
 8001190:	40021000 	.word	0x40021000
 8001194:	48000400 	.word	0x48000400

08001198 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001198:	b480      	push	{r7}
 800119a:	b083      	sub	sp, #12
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011a0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011a4:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b00      	cmp	r3, #0
 80011ae:	d013      	beq.n	80011d8 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011b0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011b4:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011b8:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d00b      	beq.n	80011d8 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011c0:	e000      	b.n	80011c4 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011c2:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011c4:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d0f9      	beq.n	80011c2 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011ce:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d2:	687a      	ldr	r2, [r7, #4]
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011d8:	687b      	ldr	r3, [r7, #4]
}
 80011da:	4618      	mov	r0, r3
 80011dc:	370c      	adds	r7, #12
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr

080011e6 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 80011e6:	b580      	push	{r7, lr}
 80011e8:	b086      	sub	sp, #24
 80011ea:	af00      	add	r7, sp, #0
 80011ec:	60f8      	str	r0, [r7, #12]
 80011ee:	60b9      	str	r1, [r7, #8]
 80011f0:	607a      	str	r2, [r7, #4]
	int i=0;
 80011f2:	2300      	movs	r3, #0
 80011f4:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80011f6:	2300      	movs	r3, #0
 80011f8:	617b      	str	r3, [r7, #20]
 80011fa:	e009      	b.n	8001210 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80011fc:	68bb      	ldr	r3, [r7, #8]
 80011fe:	1c5a      	adds	r2, r3, #1
 8001200:	60ba      	str	r2, [r7, #8]
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	4618      	mov	r0, r3
 8001206:	f7ff ffc7 	bl	8001198 <ITM_SendChar>
	for(i=0; i<len; i++)
 800120a:	697b      	ldr	r3, [r7, #20]
 800120c:	3301      	adds	r3, #1
 800120e:	617b      	str	r3, [r7, #20]
 8001210:	697a      	ldr	r2, [r7, #20]
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	429a      	cmp	r2, r3
 8001216:	dbf1      	blt.n	80011fc <_write+0x16>
	return len;
 8001218:	687b      	ldr	r3, [r7, #4]
}
 800121a:	4618      	mov	r0, r3
 800121c:	3718      	adds	r7, #24
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
	...

08001224 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b082      	sub	sp, #8
 8001228:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800122a:	f001 ff08 	bl	800303e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800122e:	f000 f92b 	bl	8001488 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001232:	f7ff ff1f 	bl	8001074 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001236:	f7ff fc29 	bl	8000a8c <MX_ADC1_Init>
  MX_ADC2_Init();
 800123a:	f7ff fcb3 	bl	8000ba4 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800123e:	f7ff fe6f 	bl	8000f20 <MX_FDCAN1_Init>
  MX_DMA_Init();
 8001242:	f7ff fe3b 	bl	8000ebc <MX_DMA_Init>
  MX_TIM2_Init();
 8001246:	f001 fded 	bl	8002e24 <MX_TIM2_Init>
  MX_SPI3_Init();
 800124a:	f001 fc2b 	bl	8002aa4 <MX_SPI3_Init>
  /* USER CODE BEGIN 2 */
  printf("Actuator Firmware Version: %i\n",REV);
 800124e:	2101      	movs	r1, #1
 8001250:	4872      	ldr	r0, [pc, #456]	; (800141c <main+0x1f8>)
 8001252:	f007 fdd7 	bl	8008e04 <iprintf>

  /* Start ADCs */
  printf("Start ADC... ");
 8001256:	4872      	ldr	r0, [pc, #456]	; (8001420 <main+0x1fc>)
 8001258:	f007 fdd4 	bl	8008e04 <iprintf>
  HAL_ADC_Start(&hadc1);
 800125c:	4871      	ldr	r0, [pc, #452]	; (8001424 <main+0x200>)
 800125e:	f002 fb19 	bl	8003894 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8001262:	4871      	ldr	r0, [pc, #452]	; (8001428 <main+0x204>)
 8001264:	f002 fb16 	bl	8003894 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc.ADC1_DMA_Buff, 2);
 8001268:	2202      	movs	r2, #2
 800126a:	4970      	ldr	r1, [pc, #448]	; (800142c <main+0x208>)
 800126c:	486d      	ldr	r0, [pc, #436]	; (8001424 <main+0x200>)
 800126e:	f002 fca5 	bl	8003bbc <HAL_ADC_Start_DMA>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc.ADC2_DMA_Buff, 2);
 8001272:	2202      	movs	r2, #2
 8001274:	496e      	ldr	r1, [pc, #440]	; (8001430 <main+0x20c>)
 8001276:	486c      	ldr	r0, [pc, #432]	; (8001428 <main+0x204>)
 8001278:	f002 fca0 	bl	8003bbc <HAL_ADC_Start_DMA>
  printf("Good\n");
 800127c:	486d      	ldr	r0, [pc, #436]	; (8001434 <main+0x210>)
 800127e:	f007 fe5d 	bl	8008f3c <puts>

  /* Start Timers */
  printf("Start TIM... ");
 8001282:	486d      	ldr	r0, [pc, #436]	; (8001438 <main+0x214>)
 8001284:	f007 fdbe 	bl	8008e04 <iprintf>
  HAL_TIM_Base_Start_IT(&htim2);
 8001288:	486c      	ldr	r0, [pc, #432]	; (800143c <main+0x218>)
 800128a:	f006 faed 	bl	8007868 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, Phase_A_Ch);
 800128e:	210c      	movs	r1, #12
 8001290:	486a      	ldr	r0, [pc, #424]	; (800143c <main+0x218>)
 8001292:	f006 fbb5 	bl	8007a00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_B_Ch);
 8001296:	2108      	movs	r1, #8
 8001298:	4868      	ldr	r0, [pc, #416]	; (800143c <main+0x218>)
 800129a:	f006 fbb1 	bl	8007a00 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_C_Ch);
 800129e:	2100      	movs	r1, #0
 80012a0:	4866      	ldr	r0, [pc, #408]	; (800143c <main+0x218>)
 80012a2:	f006 fbad 	bl	8007a00 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to off
 80012a6:	ed9f 1a66 	vldr	s2, [pc, #408]	; 8001440 <main+0x21c>
 80012aa:	eddf 0a65 	vldr	s1, [pc, #404]	; 8001440 <main+0x21c>
 80012ae:	ed9f 0a64 	vldr	s0, [pc, #400]	; 8001440 <main+0x21c>
 80012b2:	f000 ffab 	bl	800220c <Set_PWM3>
  printf("Good\n");
 80012b6:	485f      	ldr	r0, [pc, #380]	; (8001434 <main+0x210>)
 80012b8:	f007 fe40 	bl	8008f3c <puts>

  /* Start Encoder */
  printf("Start ENC... \n");
 80012bc:	4861      	ldr	r0, [pc, #388]	; (8001444 <main+0x220>)
 80012be:	f007 fe3d 	bl	8008f3c <puts>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80012c2:	2201      	movs	r2, #1
 80012c4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012cc:	f004 fb80 	bl	80059d0 <HAL_GPIO_WritePin>
  // 10		- 0 access to current values/1 access all in buffer
  // 9-4	- 6 bit address
  // 3-0	- 4 bit number of data words	if 0000, no safety word

  // 		command1, 	command2,   data1,	    data2,      mask1,      mask2
  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000001, 0b11000000, 0b00010111);		// write MOD_1	06 register		A/B
 80012d0:	2317      	movs	r3, #23
 80012d2:	9301      	str	r3, [sp, #4]
 80012d4:	23c0      	movs	r3, #192	; 0xc0
 80012d6:	9300      	str	r3, [sp, #0]
 80012d8:	2301      	movs	r3, #1
 80012da:	2240      	movs	r2, #64	; 0x40
 80012dc:	2161      	movs	r1, #97	; 0x61
 80012de:	20d0      	movs	r0, #208	; 0xd0
 80012e0:	f000 fa76 	bl	80017d0 <ENC_Write>
  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000010, 0b11000000, 0b00010111);		// write MOD_1	06 register		step/dir
 80012e4:	2317      	movs	r3, #23
 80012e6:	9301      	str	r3, [sp, #4]
 80012e8:	23c0      	movs	r3, #192	; 0xc0
 80012ea:	9300      	str	r3, [sp, #0]
 80012ec:	2302      	movs	r3, #2
 80012ee:	2240      	movs	r2, #64	; 0x40
 80012f0:	2161      	movs	r1, #97	; 0x61
 80012f2:	20d0      	movs	r0, #208	; 0xd0
 80012f4:	f000 fa6c 	bl	80017d0 <ENC_Write>
  ENC_Write(0b11010000, 0b10000001, 0b00001000, 0b00000001, 0b01111111, 0b11111111);		// write MOD_2	08 register
 80012f8:	23ff      	movs	r3, #255	; 0xff
 80012fa:	9301      	str	r3, [sp, #4]
 80012fc:	237f      	movs	r3, #127	; 0x7f
 80012fe:	9300      	str	r3, [sp, #0]
 8001300:	2301      	movs	r3, #1
 8001302:	2208      	movs	r2, #8
 8001304:	2181      	movs	r1, #129	; 0x81
 8001306:	20d0      	movs	r0, #208	; 0xd0
 8001308:	f000 fa62 	bl	80017d0 <ENC_Write>
  ENC_Write(0b11010000, 0b10010001, 0b00000000, 0b00000000, 0b11111111, 0b11111111);		// write MOD_3  09 register
 800130c:	23ff      	movs	r3, #255	; 0xff
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23ff      	movs	r3, #255	; 0xff
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2300      	movs	r3, #0
 8001316:	2200      	movs	r2, #0
 8001318:	2191      	movs	r1, #145	; 0x91
 800131a:	20d0      	movs	r0, #208	; 0xd0
 800131c:	f000 fa58 	bl	80017d0 <ENC_Write>
  ENC_Write(0b11010000, 0b11010001, 0b00000000, 0b00001001, 0b11111111, 0b11111111);		// write IFAB	0D register	(13)
 8001320:	23ff      	movs	r3, #255	; 0xff
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	23ff      	movs	r3, #255	; 0xff
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2309      	movs	r3, #9
 800132a:	2200      	movs	r2, #0
 800132c:	21d1      	movs	r1, #209	; 0xd1
 800132e:	20d0      	movs	r0, #208	; 0xd0
 8001330:	f000 fa4e 	bl	80017d0 <ENC_Write>
  ENC_Write(0b11010000, 0b11100001, 0b00000000, 0b10000000, 0b00000001, 0b11111011);		// write MOD_4	0E register (14)
 8001334:	23fb      	movs	r3, #251	; 0xfb
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	2301      	movs	r3, #1
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2380      	movs	r3, #128	; 0x80
 800133e:	2200      	movs	r2, #0
 8001340:	21e1      	movs	r1, #225	; 0xe1
 8001342:	20d0      	movs	r0, #208	; 0xd0
 8001344:	f000 fa44 	bl	80017d0 <ENC_Write>

  ENC_Read_Ang(&enc.SPI_theta);
 8001348:	483f      	ldr	r0, [pc, #252]	; (8001448 <main+0x224>)
 800134a:	f000 f9ed 	bl	8001728 <ENC_Read_Ang>
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 800134e:	4b3e      	ldr	r3, [pc, #248]	; (8001448 <main+0x224>)
 8001350:	ed93 7a00 	vldr	s14, [r3]
 8001354:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800144c <main+0x228>
 8001358:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800135c:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 8001450 <main+0x22c>
 8001360:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001368:	ee17 3a90 	vmov	r3, s15
 800136c:	b21a      	sxth	r2, r3
 800136e:	4b36      	ldr	r3, [pc, #216]	; (8001448 <main+0x224>)
 8001370:	809a      	strh	r2, [r3, #4]
  printf("Good\n");
 8001372:	4830      	ldr	r0, [pc, #192]	; (8001434 <main+0x210>)
 8001374:	f007 fde2 	bl	8008f3c <puts>

  /* Start CAN */
  printf("Start CAN... ");
 8001378:	4836      	ldr	r0, [pc, #216]	; (8001454 <main+0x230>)
 800137a:	f007 fd43 	bl	8008e04 <iprintf>
  // can code
  printf("Good\n");
 800137e:	482d      	ldr	r0, [pc, #180]	; (8001434 <main+0x210>)
 8001380:	f007 fddc 	bl	8008f3c <puts>

  /* Setup ADC structure */
  adc.VDDA = 3.30f;
 8001384:	4b34      	ldr	r3, [pc, #208]	; (8001458 <main+0x234>)
 8001386:	4a35      	ldr	r2, [pc, #212]	; (800145c <main+0x238>)
 8001388:	601a      	str	r2, [r3, #0]
  adc.V_bat_R_Top = 255.0f;
 800138a:	4b33      	ldr	r3, [pc, #204]	; (8001458 <main+0x234>)
 800138c:	4a34      	ldr	r2, [pc, #208]	; (8001460 <main+0x23c>)
 800138e:	61da      	str	r2, [r3, #28]
  adc.V_bat_R_Bot = 10.0f;
 8001390:	4b31      	ldr	r3, [pc, #196]	; (8001458 <main+0x234>)
 8001392:	4a34      	ldr	r2, [pc, #208]	; (8001464 <main+0x240>)
 8001394:	619a      	str	r2, [r3, #24]
  adc.Temp_V_Offset = 0.424f;
 8001396:	4b30      	ldr	r3, [pc, #192]	; (8001458 <main+0x234>)
 8001398:	4a33      	ldr	r2, [pc, #204]	; (8001468 <main+0x244>)
 800139a:	625a      	str	r2, [r3, #36]	; 0x24
  adc.Temp_Slope = 0.00625f;
 800139c:	4b2e      	ldr	r3, [pc, #184]	; (8001458 <main+0x234>)
 800139e:	4a33      	ldr	r2, [pc, #204]	; (800146c <main+0x248>)
 80013a0:	629a      	str	r2, [r3, #40]	; 0x28
  adc.R_Shunt_Res = 0.001f;
 80013a2:	4b2d      	ldr	r3, [pc, #180]	; (8001458 <main+0x234>)
 80013a4:	4a32      	ldr	r2, [pc, #200]	; (8001470 <main+0x24c>)
 80013a6:	63da      	str	r2, [r3, #60]	; 0x3c
  adc.SO_Gain = 40.0f;
 80013a8:	4b2b      	ldr	r3, [pc, #172]	; (8001458 <main+0x234>)
 80013aa:	2228      	movs	r2, #40	; 0x28
 80013ac:	641a      	str	r2, [r3, #64]	; 0x40

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 80013ae:	4b31      	ldr	r3, [pc, #196]	; (8001474 <main+0x250>)
 80013b0:	2215      	movs	r2, #21
 80013b2:	609a      	str	r2, [r3, #8]
  foc.dt = (float)(2.0f/(170.0f*1000000.0f/(htim2.Init.Period+1)/(htim2.Init.RepetitionCounter+1)));
 80013b4:	4b21      	ldr	r3, [pc, #132]	; (800143c <main+0x218>)
 80013b6:	68db      	ldr	r3, [r3, #12]
 80013b8:	3301      	adds	r3, #1
 80013ba:	ee07 3a90 	vmov	s15, r3
 80013be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013c2:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8001478 <main+0x254>
 80013c6:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ca:	4b1c      	ldr	r3, [pc, #112]	; (800143c <main+0x218>)
 80013cc:	695b      	ldr	r3, [r3, #20]
 80013ce:	3301      	adds	r3, #1
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013dc:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 80013e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80013e4:	4b23      	ldr	r3, [pc, #140]	; (8001474 <main+0x250>)
 80013e6:	edc3 7a03 	vstr	s15, [r3, #12]
  foc.PWM_Reg_Max = htim2.Init.Period;
 80013ea:	4b14      	ldr	r3, [pc, #80]	; (800143c <main+0x218>)
 80013ec:	68db      	ldr	r3, [r3, #12]
 80013ee:	b29a      	uxth	r2, r3
 80013f0:	4b20      	ldr	r3, [pc, #128]	; (8001474 <main+0x250>)
 80013f2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  foc.RCR   = 0;
 80013f6:	4b1f      	ldr	r3, [pc, #124]	; (8001474 <main+0x250>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
  foc.RCR_n = 13;	  // 5=10kHz, 7=8kHz, 13=5kHz	freq=32.5(RCR_n)^-0.724
 80013fc:	4b1d      	ldr	r3, [pc, #116]	; (8001474 <main+0x250>)
 80013fe:	220d      	movs	r2, #13
 8001400:	605a      	str	r2, [r3, #4]

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8001402:	4b1e      	ldr	r3, [pc, #120]	; (800147c <main+0x258>)
 8001404:	4a1e      	ldr	r2, [pc, #120]	; (8001480 <main+0x25c>)
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	4b1c      	ldr	r3, [pc, #112]	; (800147c <main+0x258>)
 800140a:	4a1e      	ldr	r2, [pc, #120]	; (8001484 <main+0x260>)
 800140c:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 800140e:	4b1b      	ldr	r3, [pc, #108]	; (800147c <main+0x258>)
 8001410:	4a1b      	ldr	r2, [pc, #108]	; (8001480 <main+0x25c>)
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	4b19      	ldr	r3, [pc, #100]	; (800147c <main+0x258>)
 8001416:	4a1b      	ldr	r2, [pc, #108]	; (8001484 <main+0x260>)
 8001418:	60da      	str	r2, [r3, #12]

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800141a:	e7fe      	b.n	800141a <main+0x1f6>
 800141c:	0800a0cc 	.word	0x0800a0cc
 8001420:	0800a0ec 	.word	0x0800a0ec
 8001424:	20000110 	.word	0x20000110
 8001428:	200000a4 	.word	0x200000a4
 800142c:	20000320 	.word	0x20000320
 8001430:	20000328 	.word	0x20000328
 8001434:	0800a0fc 	.word	0x0800a0fc
 8001438:	0800a104 	.word	0x0800a104
 800143c:	20000468 	.word	0x20000468
 8001440:	00000000 	.word	0x00000000
 8001444:	0800a114 	.word	0x0800a114
 8001448:	200002a0 	.word	0x200002a0
 800144c:	43b40000 	.word	0x43b40000
 8001450:	457ff000 	.word	0x457ff000
 8001454:	0800a124 	.word	0x0800a124
 8001458:	2000031c 	.word	0x2000031c
 800145c:	40533333 	.word	0x40533333
 8001460:	437f0000 	.word	0x437f0000
 8001464:	41200000 	.word	0x41200000
 8001468:	3ed91687 	.word	0x3ed91687
 800146c:	3bcccccd 	.word	0x3bcccccd
 8001470:	3a83126f 	.word	0x3a83126f
 8001474:	200002b8 	.word	0x200002b8
 8001478:	4d221fe8 	.word	0x4d221fe8
 800147c:	200003e4 	.word	0x200003e4
 8001480:	3ed78d50 	.word	0x3ed78d50
 8001484:	3e21cac1 	.word	0x3e21cac1

08001488 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b094      	sub	sp, #80	; 0x50
 800148c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800148e:	f107 0318 	add.w	r3, r7, #24
 8001492:	2238      	movs	r2, #56	; 0x38
 8001494:	2100      	movs	r1, #0
 8001496:	4618      	mov	r0, r3
 8001498:	f007 fcac 	bl	8008df4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800149c:	1d3b      	adds	r3, r7, #4
 800149e:	2200      	movs	r2, #0
 80014a0:	601a      	str	r2, [r3, #0]
 80014a2:	605a      	str	r2, [r3, #4]
 80014a4:	609a      	str	r2, [r3, #8]
 80014a6:	60da      	str	r2, [r3, #12]
 80014a8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014aa:	2000      	movs	r0, #0
 80014ac:	f004 facc 	bl	8005a48 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80014b0:	2301      	movs	r3, #1
 80014b2:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80014b4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80014b8:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80014ba:	2302      	movs	r3, #2
 80014bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80014be:	2303      	movs	r3, #3
 80014c0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 80014c2:	2303      	movs	r3, #3
 80014c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80014c6:	2355      	movs	r3, #85	; 0x55
 80014c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80014ca:	2302      	movs	r3, #2
 80014cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80014ce:	2302      	movs	r3, #2
 80014d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80014d2:	2302      	movs	r3, #2
 80014d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80014d6:	f107 0318 	add.w	r3, r7, #24
 80014da:	4618      	mov	r0, r3
 80014dc:	f004 fb68 	bl	8005bb0 <HAL_RCC_OscConfig>
 80014e0:	4603      	mov	r3, r0
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d001      	beq.n	80014ea <SystemClock_Config+0x62>
  {
    Error_Handler();
 80014e6:	f001 fad8 	bl	8002a9a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80014ea:	230f      	movs	r3, #15
 80014ec:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80014ee:	2303      	movs	r3, #3
 80014f0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80014fa:	2300      	movs	r3, #0
 80014fc:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80014fe:	1d3b      	adds	r3, r7, #4
 8001500:	2104      	movs	r1, #4
 8001502:	4618      	mov	r0, r3
 8001504:	f004 fe6c 	bl	80061e0 <HAL_RCC_ClockConfig>
 8001508:	4603      	mov	r3, r0
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800150e:	f001 fac4 	bl	8002a9a <Error_Handler>
  }
}
 8001512:	bf00      	nop
 8001514:	3750      	adds	r7, #80	; 0x50
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}
	...

0800151c <ADC_Get_Raw>:

/* USER CODE BEGIN 4 */

// Read ADCs
void  ADC_Get_Raw    (int16_t*i_a_Raw, int16_t*i_b_Raw, int16_t*PVDD_Raw, int16_t*Temp_Raw)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
 8001528:	603b      	str	r3, [r7, #0]
	HAL_ADC_PollForConversion(&hadc1, 1);
 800152a:	2101      	movs	r1, #1
 800152c:	480f      	ldr	r0, [pc, #60]	; (800156c <ADC_Get_Raw+0x50>)
 800152e:	f002 fa6d 	bl	8003a0c <HAL_ADC_PollForConversion>

	*i_a_Raw	= HAL_ADC_GetValue(&hadc1);
 8001532:	480e      	ldr	r0, [pc, #56]	; (800156c <ADC_Get_Raw+0x50>)
 8001534:	f002 fbf6 	bl	8003d24 <HAL_ADC_GetValue>
 8001538:	4603      	mov	r3, r0
 800153a:	b21a      	sxth	r2, r3
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	801a      	strh	r2, [r3, #0]
	*i_b_Raw	= HAL_ADC_GetValue(&hadc2);
 8001540:	480b      	ldr	r0, [pc, #44]	; (8001570 <ADC_Get_Raw+0x54>)
 8001542:	f002 fbef 	bl	8003d24 <HAL_ADC_GetValue>
 8001546:	4603      	mov	r3, r0
 8001548:	b21a      	sxth	r2, r3
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	801a      	strh	r2, [r3, #0]
	*PVDD_Raw	= adc.ADC1_DMA_Buff[0];
 800154e:	4b09      	ldr	r3, [pc, #36]	; (8001574 <ADC_Get_Raw+0x58>)
 8001550:	685b      	ldr	r3, [r3, #4]
 8001552:	b21a      	sxth	r2, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	801a      	strh	r2, [r3, #0]
	*Temp_Raw	= adc.ADC2_DMA_Buff[0];
 8001558:	4b06      	ldr	r3, [pc, #24]	; (8001574 <ADC_Get_Raw+0x58>)
 800155a:	68db      	ldr	r3, [r3, #12]
 800155c:	b21a      	sxth	r2, r3
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	801a      	strh	r2, [r3, #0]
}
 8001562:	bf00      	nop
 8001564:	3710      	adds	r7, #16
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000110 	.word	0x20000110
 8001570:	200000a4 	.word	0x200000a4
 8001574:	2000031c 	.word	0x2000031c

08001578 <ADC_Filter_Curr>:
void  ADC_Filter_Curr(int16_t i_a_Raw, int16_t i_b_Raw, int16_t*i_a_Fil, int16_t*i_b_Fil)
{
 8001578:	b480      	push	{r7}
 800157a:	b085      	sub	sp, #20
 800157c:	af00      	add	r7, sp, #0
 800157e:	60ba      	str	r2, [r7, #8]
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4603      	mov	r3, r0
 8001584:	81fb      	strh	r3, [r7, #14]
 8001586:	460b      	mov	r3, r1
 8001588:	81bb      	strh	r3, [r7, #12]
	// Filter
	*i_a_Fil = fil.i_k[0]*i_a_Raw + fil.i_k[0]*fil.i_a_Pre + fil.i_k[1]*fil.i_a_Pre_Fil;
 800158a:	4b39      	ldr	r3, [pc, #228]	; (8001670 <ADC_Filter_Curr+0xf8>)
 800158c:	ed93 7a00 	vldr	s14, [r3]
 8001590:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001594:	ee07 3a90 	vmov	s15, r3
 8001598:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800159c:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015a0:	4b33      	ldr	r3, [pc, #204]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015a2:	edd3 6a00 	vldr	s13, [r3]
 80015a6:	4b32      	ldr	r3, [pc, #200]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015a8:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80015ac:	ee07 3a90 	vmov	s15, r3
 80015b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015b4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015b8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80015bc:	4b2c      	ldr	r3, [pc, #176]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015be:	edd3 6a01 	vldr	s13, [r3, #4]
 80015c2:	4b2b      	ldr	r3, [pc, #172]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015c4:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80015c8:	ee07 3a90 	vmov	s15, r3
 80015cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80015dc:	ee17 3a90 	vmov	r3, s15
 80015e0:	b21a      	sxth	r2, r3
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	801a      	strh	r2, [r3, #0]
	*i_b_Fil = fil.i_k[0]*i_b_Raw + fil.i_k[0]*fil.i_b_Pre + fil.i_k[1]*fil.i_b_Pre_Fil;
 80015e6:	4b22      	ldr	r3, [pc, #136]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015e8:	ed93 7a00 	vldr	s14, [r3]
 80015ec:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015f0:	ee07 3a90 	vmov	s15, r3
 80015f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f8:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015fc:	4b1c      	ldr	r3, [pc, #112]	; (8001670 <ADC_Filter_Curr+0xf8>)
 80015fe:	edd3 6a00 	vldr	s13, [r3]
 8001602:	4b1b      	ldr	r3, [pc, #108]	; (8001670 <ADC_Filter_Curr+0xf8>)
 8001604:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8001608:	ee07 3a90 	vmov	s15, r3
 800160c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001610:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001614:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001618:	4b15      	ldr	r3, [pc, #84]	; (8001670 <ADC_Filter_Curr+0xf8>)
 800161a:	edd3 6a01 	vldr	s13, [r3, #4]
 800161e:	4b14      	ldr	r3, [pc, #80]	; (8001670 <ADC_Filter_Curr+0xf8>)
 8001620:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001624:	ee07 3a90 	vmov	s15, r3
 8001628:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800162c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001630:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001634:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001638:	ee17 3a90 	vmov	r3, s15
 800163c:	b21a      	sxth	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.i_a_Pre = i_a_Raw;
 8001642:	4a0b      	ldr	r2, [pc, #44]	; (8001670 <ADC_Filter_Curr+0xf8>)
 8001644:	89fb      	ldrh	r3, [r7, #14]
 8001646:	8213      	strh	r3, [r2, #16]
	fil.i_b_Pre = i_b_Raw;
 8001648:	4a09      	ldr	r2, [pc, #36]	; (8001670 <ADC_Filter_Curr+0xf8>)
 800164a:	89bb      	ldrh	r3, [r7, #12]
 800164c:	8293      	strh	r3, [r2, #20]

	fil.i_a_Pre_Fil = *i_a_Fil;
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	f9b3 2000 	ldrsh.w	r2, [r3]
 8001654:	4b06      	ldr	r3, [pc, #24]	; (8001670 <ADC_Filter_Curr+0xf8>)
 8001656:	825a      	strh	r2, [r3, #18]
	fil.i_b_Pre_Fil = *i_b_Fil;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f9b3 2000 	ldrsh.w	r2, [r3]
 800165e:	4b04      	ldr	r3, [pc, #16]	; (8001670 <ADC_Filter_Curr+0xf8>)
 8001660:	82da      	strh	r2, [r3, #22]
}
 8001662:	bf00      	nop
 8001664:	3714      	adds	r7, #20
 8001666:	46bd      	mov	sp, r7
 8001668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166c:	4770      	bx	lr
 800166e:	bf00      	nop
 8001670:	200003e4 	.word	0x200003e4

08001674 <ADC_Norm_Curr>:
void  ADC_Norm_Curr  (int16_t i_a_Fil, int16_t i_b_Fil, float*i_a, float*i_b)
{
 8001674:	b480      	push	{r7}
 8001676:	b085      	sub	sp, #20
 8001678:	af00      	add	r7, sp, #0
 800167a:	60ba      	str	r2, [r7, #8]
 800167c:	607b      	str	r3, [r7, #4]
 800167e:	4603      	mov	r3, r0
 8001680:	81fb      	strh	r3, [r7, #14]
 8001682:	460b      	mov	r3, r1
 8001684:	81bb      	strh	r3, [r7, #12]
	*i_a = (((float)(i_a_Fil-adc.SO_A_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 8001686:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800168a:	4a25      	ldr	r2, [pc, #148]	; (8001720 <ADC_Norm_Curr+0xac>)
 800168c:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 8001690:	1a9b      	subs	r3, r3, r2
 8001692:	ee07 3a90 	vmov	s15, r3
 8001696:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800169a:	4b21      	ldr	r3, [pc, #132]	; (8001720 <ADC_Norm_Curr+0xac>)
 800169c:	edd3 7a00 	vldr	s15, [r3]
 80016a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016a4:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001724 <ADC_Norm_Curr+0xb0>
 80016a8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016ac:	4b1c      	ldr	r3, [pc, #112]	; (8001720 <ADC_Norm_Curr+0xac>)
 80016ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016b0:	ee07 3a90 	vmov	s15, r3
 80016b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016b8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80016bc:	4b18      	ldr	r3, [pc, #96]	; (8001720 <ADC_Norm_Curr+0xac>)
 80016be:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 80016c2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80016c6:	68bb      	ldr	r3, [r7, #8]
 80016c8:	edc3 7a00 	vstr	s15, [r3]
	*i_b = (((float)(i_b_Fil-adc.SO_B_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 80016cc:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80016d0:	4a13      	ldr	r2, [pc, #76]	; (8001720 <ADC_Norm_Curr+0xac>)
 80016d2:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 80016d6:	1a9b      	subs	r3, r3, r2
 80016d8:	ee07 3a90 	vmov	s15, r3
 80016dc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <ADC_Norm_Curr+0xac>)
 80016e2:	edd3 7a00 	vldr	s15, [r3]
 80016e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016ea:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001724 <ADC_Norm_Curr+0xb0>
 80016ee:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <ADC_Norm_Curr+0xac>)
 80016f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016f6:	ee07 3a90 	vmov	s15, r3
 80016fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80016fe:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001702:	4b07      	ldr	r3, [pc, #28]	; (8001720 <ADC_Norm_Curr+0xac>)
 8001704:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001708:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	edc3 7a00 	vstr	s15, [r3]
}
 8001712:	bf00      	nop
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	2000031c 	.word	0x2000031c
 8001724:	457ff000 	.word	0x457ff000

08001728 <ENC_Read_Ang>:
	*PVDD = (float)PVDD_Fil*adc.VDDA/4095.0f / adc.V_bat_R_Bot * (adc.V_bat_R_Bot+adc.V_bat_R_Top);
	*Temp = (((float)Temp_Fil*adc.VDDA/4095.0f)-adc.Temp_V_Offset)/adc.Temp_Slope;
}
// Encoder
void  ENC_Read_Ang(float*Angle)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b086      	sub	sp, #24
 800172c:	af00      	add	r7, sp, #0
 800172e:	6078      	str	r0, [r7, #4]
	uint8_t ENC_ASK_POS   [2] = {0b10000000,0b00100001};	// Command for asking position
 8001730:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001734:	823b      	strh	r3, [r7, #16]
	uint8_t SPI_BUFF[2] = {0,0};
 8001736:	2300      	movs	r3, #0
 8001738:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800173a:	2200      	movs	r2, #0
 800173c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001740:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001744:	f004 f944 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_ASK_POS, 2, 10);	// Ask for data
 8001748:	f107 0110 	add.w	r1, r7, #16
 800174c:	230a      	movs	r3, #10
 800174e:	2202      	movs	r2, #2
 8001750:	481d      	ldr	r0, [pc, #116]	; (80017c8 <ENC_Read_Ang+0xa0>)
 8001752:	f005 f9c4 	bl	8006ade <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF    , 2, 10);	// Receive 4 bytes of data
 8001756:	f107 010c 	add.w	r1, r7, #12
 800175a:	230a      	movs	r3, #10
 800175c:	2202      	movs	r2, #2
 800175e:	481a      	ldr	r0, [pc, #104]	; (80017c8 <ENC_Read_Ang+0xa0>)
 8001760:	f005 fb2b 	bl	8006dba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001764:	2201      	movs	r2, #1
 8001766:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800176a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800176e:	f004 f92f 	bl	80059d0 <HAL_GPIO_WritePin>

	int16_t SPI_ANG = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
 8001772:	7b3b      	ldrb	r3, [r7, #12]
 8001774:	021b      	lsls	r3, r3, #8
 8001776:	b21a      	sxth	r2, r3
 8001778:	7b7b      	ldrb	r3, [r7, #13]
 800177a:	b21b      	sxth	r3, r3
 800177c:	4313      	orrs	r3, r2
 800177e:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8001780:	8afb      	ldrh	r3, [r7, #22]
 8001782:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001786:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8001788:	8aba      	ldrh	r2, [r7, #20]
 800178a:	8afb      	ldrh	r3, [r7, #22]
 800178c:	0b9b      	lsrs	r3, r3, #14
 800178e:	b29b      	uxth	r3, r3
 8001790:	f003 0301 	and.w	r3, r3, #1
 8001794:	b29b      	uxth	r3, r3
 8001796:	4619      	mov	r1, r3
 8001798:	0049      	lsls	r1, r1, #1
 800179a:	440b      	add	r3, r1
 800179c:	039b      	lsls	r3, r3, #14
 800179e:	b29b      	uxth	r3, r3
 80017a0:	1ad3      	subs	r3, r2, r3
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0f/32768.0f * ANG_VAL;
 80017a6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017aa:	ee07 3a90 	vmov	s15, r3
 80017ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b2:	ed9f 7a06 	vldr	s14, [pc, #24]	; 80017cc <ENC_Read_Ang+0xa4>
 80017b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	edc3 7a00 	vstr	s15, [r3]
}
 80017c0:	bf00      	nop
 80017c2:	3718      	adds	r7, #24
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	20000404 	.word	0x20000404
 80017cc:	3c340000 	.word	0x3c340000

080017d0 <ENC_Write>:
	int16_t SPI_VEL = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
	int16_t VEL_VAL = (0b0011111111111111 & SPI_VEL);			// keep last 14 bits
	*Velocity = 360.0f/32768.0f * VEL_VAL / 2.0f / 0.0000427f;
}
void  ENC_Write(uint8_t com1, uint8_t com2, uint8_t data1, uint8_t data2, uint8_t mask1, uint8_t mask2)
{
 80017d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80017d4:	b0bc      	sub	sp, #240	; 0xf0
 80017d6:	af1e      	add	r7, sp, #120	; 0x78
 80017d8:	4604      	mov	r4, r0
 80017da:	4608      	mov	r0, r1
 80017dc:	4611      	mov	r1, r2
 80017de:	461a      	mov	r2, r3
 80017e0:	4623      	mov	r3, r4
 80017e2:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
 80017e6:	4603      	mov	r3, r0
 80017e8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 80017ec:	460b      	mov	r3, r1
 80017ee:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 80017f2:	4613      	mov	r3, r2
 80017f4:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
	uint8_t ADDR = (com2>>4)&0b00001111;
 80017f8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80017fc:	091b      	lsrs	r3, r3, #4
 80017fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	printf("\tRegister %i... ",ADDR);
 8001802:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001806:	4619      	mov	r1, r3
 8001808:	48be      	ldr	r0, [pc, #760]	; (8001b04 <ENC_Write+0x334>)
 800180a:	f007 fafb 	bl	8008e04 <iprintf>

	// read
	uint8_t ENC_R_COM [2] = {com1|0b1000000,								// make into read command
 800180e:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 8001812:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001816:	b2db      	uxtb	r3, r3
 8001818:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 800181c:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 8001820:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
							 com2};
	uint8_t SPI_BUFF[2] = {0,0};
 8001824:	2300      	movs	r3, #0
 8001826:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68

	printf("\n");
 800182a:	200a      	movs	r0, #10
 800182c:	f007 fb02 	bl	8008e34 <putchar>
//	printf("\t\tTX: %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_R_COM[0]), BYTE_TO_BINARY(ENC_R_COM[1]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001830:	2200      	movs	r2, #0
 8001832:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001836:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800183a:	f004 f8c9 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 800183e:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001842:	230a      	movs	r3, #10
 8001844:	2202      	movs	r2, #2
 8001846:	48b0      	ldr	r0, [pc, #704]	; (8001b08 <ENC_Write+0x338>)
 8001848:	f005 f949 	bl	8006ade <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 800184c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001850:	230a      	movs	r3, #10
 8001852:	2202      	movs	r2, #2
 8001854:	48ac      	ldr	r0, [pc, #688]	; (8001b08 <ENC_Write+0x338>)
 8001856:	f005 fab0 	bl	8006dba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800185a:	2201      	movs	r2, #1
 800185c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001860:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001864:	f004 f8b4 	bl	80059d0 <HAL_GPIO_WritePin>
	printf("\t\tRead  : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));
 8001868:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800186c:	b25b      	sxtb	r3, r3
 800186e:	2b00      	cmp	r3, #0
 8001870:	da02      	bge.n	8001878 <ENC_Write+0xa8>
 8001872:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001876:	e001      	b.n	800187c <ENC_Write+0xac>
 8001878:	f04f 0c30 	mov.w	ip, #48	; 0x30
 800187c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001884:	2b00      	cmp	r3, #0
 8001886:	d002      	beq.n	800188e <ENC_Write+0xbe>
 8001888:	f04f 0e31 	mov.w	lr, #49	; 0x31
 800188c:	e001      	b.n	8001892 <ENC_Write+0xc2>
 800188e:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8001892:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001896:	f003 0320 	and.w	r3, r3, #32
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <ENC_Write+0xd4>
 800189e:	f04f 0831 	mov.w	r8, #49	; 0x31
 80018a2:	e001      	b.n	80018a8 <ENC_Write+0xd8>
 80018a4:	f04f 0830 	mov.w	r8, #48	; 0x30
 80018a8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80018ac:	f003 0310 	and.w	r3, r3, #16
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d001      	beq.n	80018b8 <ENC_Write+0xe8>
 80018b4:	2031      	movs	r0, #49	; 0x31
 80018b6:	e000      	b.n	80018ba <ENC_Write+0xea>
 80018b8:	2030      	movs	r0, #48	; 0x30
 80018ba:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80018be:	f003 0308 	and.w	r3, r3, #8
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d001      	beq.n	80018ca <ENC_Write+0xfa>
 80018c6:	2431      	movs	r4, #49	; 0x31
 80018c8:	e000      	b.n	80018cc <ENC_Write+0xfc>
 80018ca:	2430      	movs	r4, #48	; 0x30
 80018cc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80018d0:	f003 0304 	and.w	r3, r3, #4
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d001      	beq.n	80018dc <ENC_Write+0x10c>
 80018d8:	2531      	movs	r5, #49	; 0x31
 80018da:	e000      	b.n	80018de <ENC_Write+0x10e>
 80018dc:	2530      	movs	r5, #48	; 0x30
 80018de:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80018e2:	f003 0302 	and.w	r3, r3, #2
 80018e6:	2b00      	cmp	r3, #0
 80018e8:	d001      	beq.n	80018ee <ENC_Write+0x11e>
 80018ea:	2631      	movs	r6, #49	; 0x31
 80018ec:	e000      	b.n	80018f0 <ENC_Write+0x120>
 80018ee:	2630      	movs	r6, #48	; 0x30
 80018f0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80018f4:	f003 0301 	and.w	r3, r3, #1
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d002      	beq.n	8001902 <ENC_Write+0x132>
 80018fc:	2331      	movs	r3, #49	; 0x31
 80018fe:	65bb      	str	r3, [r7, #88]	; 0x58
 8001900:	e001      	b.n	8001906 <ENC_Write+0x136>
 8001902:	2330      	movs	r3, #48	; 0x30
 8001904:	65bb      	str	r3, [r7, #88]	; 0x58
 8001906:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800190a:	b25b      	sxtb	r3, r3
 800190c:	2b00      	cmp	r3, #0
 800190e:	da02      	bge.n	8001916 <ENC_Write+0x146>
 8001910:	2331      	movs	r3, #49	; 0x31
 8001912:	657b      	str	r3, [r7, #84]	; 0x54
 8001914:	e001      	b.n	800191a <ENC_Write+0x14a>
 8001916:	2330      	movs	r3, #48	; 0x30
 8001918:	657b      	str	r3, [r7, #84]	; 0x54
 800191a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800191e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001922:	2b00      	cmp	r3, #0
 8001924:	d002      	beq.n	800192c <ENC_Write+0x15c>
 8001926:	2331      	movs	r3, #49	; 0x31
 8001928:	653b      	str	r3, [r7, #80]	; 0x50
 800192a:	e001      	b.n	8001930 <ENC_Write+0x160>
 800192c:	2330      	movs	r3, #48	; 0x30
 800192e:	653b      	str	r3, [r7, #80]	; 0x50
 8001930:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d002      	beq.n	8001942 <ENC_Write+0x172>
 800193c:	2331      	movs	r3, #49	; 0x31
 800193e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001940:	e001      	b.n	8001946 <ENC_Write+0x176>
 8001942:	2330      	movs	r3, #48	; 0x30
 8001944:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001946:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	2b00      	cmp	r3, #0
 8001950:	d002      	beq.n	8001958 <ENC_Write+0x188>
 8001952:	2331      	movs	r3, #49	; 0x31
 8001954:	64bb      	str	r3, [r7, #72]	; 0x48
 8001956:	e001      	b.n	800195c <ENC_Write+0x18c>
 8001958:	2330      	movs	r3, #48	; 0x30
 800195a:	64bb      	str	r3, [r7, #72]	; 0x48
 800195c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001960:	f003 0308 	and.w	r3, r3, #8
 8001964:	2b00      	cmp	r3, #0
 8001966:	d002      	beq.n	800196e <ENC_Write+0x19e>
 8001968:	2331      	movs	r3, #49	; 0x31
 800196a:	647b      	str	r3, [r7, #68]	; 0x44
 800196c:	e001      	b.n	8001972 <ENC_Write+0x1a2>
 800196e:	2330      	movs	r3, #48	; 0x30
 8001970:	647b      	str	r3, [r7, #68]	; 0x44
 8001972:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001976:	f003 0304 	and.w	r3, r3, #4
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <ENC_Write+0x1b2>
 800197e:	2131      	movs	r1, #49	; 0x31
 8001980:	e000      	b.n	8001984 <ENC_Write+0x1b4>
 8001982:	2130      	movs	r1, #48	; 0x30
 8001984:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001988:	f003 0302 	and.w	r3, r3, #2
 800198c:	2b00      	cmp	r3, #0
 800198e:	d001      	beq.n	8001994 <ENC_Write+0x1c4>
 8001990:	2231      	movs	r2, #49	; 0x31
 8001992:	e000      	b.n	8001996 <ENC_Write+0x1c6>
 8001994:	2230      	movs	r2, #48	; 0x30
 8001996:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800199a:	f003 0301 	and.w	r3, r3, #1
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d001      	beq.n	80019a6 <ENC_Write+0x1d6>
 80019a2:	2331      	movs	r3, #49	; 0x31
 80019a4:	e000      	b.n	80019a8 <ENC_Write+0x1d8>
 80019a6:	2330      	movs	r3, #48	; 0x30
 80019a8:	930c      	str	r3, [sp, #48]	; 0x30
 80019aa:	920b      	str	r2, [sp, #44]	; 0x2c
 80019ac:	910a      	str	r1, [sp, #40]	; 0x28
 80019ae:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80019b0:	9309      	str	r3, [sp, #36]	; 0x24
 80019b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80019b4:	9308      	str	r3, [sp, #32]
 80019b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80019b8:	9307      	str	r3, [sp, #28]
 80019ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80019bc:	9306      	str	r3, [sp, #24]
 80019be:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80019c0:	9305      	str	r3, [sp, #20]
 80019c2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80019c4:	9304      	str	r3, [sp, #16]
 80019c6:	9603      	str	r6, [sp, #12]
 80019c8:	9502      	str	r5, [sp, #8]
 80019ca:	9401      	str	r4, [sp, #4]
 80019cc:	9000      	str	r0, [sp, #0]
 80019ce:	4643      	mov	r3, r8
 80019d0:	4672      	mov	r2, lr
 80019d2:	4661      	mov	r1, ip
 80019d4:	484d      	ldr	r0, [pc, #308]	; (8001b0c <ENC_Write+0x33c>)
 80019d6:	f007 fa15 	bl	8008e04 <iprintf>

	// write
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 80019da:	f897 305f 	ldrb.w	r3, [r7, #95]	; 0x5f
 80019de:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 80019e8:	f897 305e 	ldrb.w	r3, [r7, #94]	; 0x5e
 80019ec:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
						     com2,											// same
							 (SPI_BUFF[0] & (~mask1)) | (data1 & mask1),	// keep read when mask=0, keep data when mask=1
 80019f0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	f997 3090 	ldrsb.w	r3, [r7, #144]	; 0x90
 80019fa:	43db      	mvns	r3, r3
 80019fc:	b25b      	sxtb	r3, r3
 80019fe:	4013      	ands	r3, r2
 8001a00:	b25a      	sxtb	r2, r3
 8001a02:	f897 105d 	ldrb.w	r1, [r7, #93]	; 0x5d
 8001a06:	f897 3090 	ldrb.w	r3, [r7, #144]	; 0x90
 8001a0a:	400b      	ands	r3, r1
 8001a0c:	b2db      	uxtb	r3, r3
 8001a0e:	b25b      	sxtb	r3, r3
 8001a10:	4313      	orrs	r3, r2
 8001a12:	b25b      	sxtb	r3, r3
 8001a14:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8001a16:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
							 (SPI_BUFF[1] & (~mask2)) | (data2 & mask2)};	// keep read when mask=0, keep data when mask=1
 8001a1a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001a1e:	b25a      	sxtb	r2, r3
 8001a20:	f997 3094 	ldrsb.w	r3, [r7, #148]	; 0x94
 8001a24:	43db      	mvns	r3, r3
 8001a26:	b25b      	sxtb	r3, r3
 8001a28:	4013      	ands	r3, r2
 8001a2a:	b25a      	sxtb	r2, r3
 8001a2c:	f897 105c 	ldrb.w	r1, [r7, #92]	; 0x5c
 8001a30:	f897 3094 	ldrb.w	r3, [r7, #148]	; 0x94
 8001a34:	400b      	ands	r3, r1
 8001a36:	b2db      	uxtb	r3, r3
 8001a38:	b25b      	sxtb	r3, r3
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	b25b      	sxtb	r3, r3
 8001a3e:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8001a40:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67

	printf("\t\tTX    : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_W_EOM[0]), BYTE_TO_BINARY(ENC_W_EOM[1]), BYTE_TO_BINARY(ENC_W_EOM[2]), BYTE_TO_BINARY(ENC_W_EOM[3]));
 8001a44:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a48:	b25b      	sxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	da02      	bge.n	8001a54 <ENC_Write+0x284>
 8001a4e:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001a52:	e001      	b.n	8001a58 <ENC_Write+0x288>
 8001a54:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001a58:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d002      	beq.n	8001a6a <ENC_Write+0x29a>
 8001a64:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8001a68:	e001      	b.n	8001a6e <ENC_Write+0x29e>
 8001a6a:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8001a6e:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a72:	f003 0320 	and.w	r3, r3, #32
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d002      	beq.n	8001a80 <ENC_Write+0x2b0>
 8001a7a:	f04f 0831 	mov.w	r8, #49	; 0x31
 8001a7e:	e001      	b.n	8001a84 <ENC_Write+0x2b4>
 8001a80:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001a84:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a88:	f003 0310 	and.w	r3, r3, #16
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d002      	beq.n	8001a96 <ENC_Write+0x2c6>
 8001a90:	2331      	movs	r3, #49	; 0x31
 8001a92:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a94:	e001      	b.n	8001a9a <ENC_Write+0x2ca>
 8001a96:	2330      	movs	r3, #48	; 0x30
 8001a98:	65bb      	str	r3, [r7, #88]	; 0x58
 8001a9a:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001a9e:	f003 0308 	and.w	r3, r3, #8
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d002      	beq.n	8001aac <ENC_Write+0x2dc>
 8001aa6:	2331      	movs	r3, #49	; 0x31
 8001aa8:	657b      	str	r3, [r7, #84]	; 0x54
 8001aaa:	e001      	b.n	8001ab0 <ENC_Write+0x2e0>
 8001aac:	2330      	movs	r3, #48	; 0x30
 8001aae:	657b      	str	r3, [r7, #84]	; 0x54
 8001ab0:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d002      	beq.n	8001ac2 <ENC_Write+0x2f2>
 8001abc:	2331      	movs	r3, #49	; 0x31
 8001abe:	653b      	str	r3, [r7, #80]	; 0x50
 8001ac0:	e001      	b.n	8001ac6 <ENC_Write+0x2f6>
 8001ac2:	2330      	movs	r3, #48	; 0x30
 8001ac4:	653b      	str	r3, [r7, #80]	; 0x50
 8001ac6:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001aca:	f003 0302 	and.w	r3, r3, #2
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d002      	beq.n	8001ad8 <ENC_Write+0x308>
 8001ad2:	2331      	movs	r3, #49	; 0x31
 8001ad4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001ad6:	e001      	b.n	8001adc <ENC_Write+0x30c>
 8001ad8:	2330      	movs	r3, #48	; 0x30
 8001ada:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001adc:	f897 3064 	ldrb.w	r3, [r7, #100]	; 0x64
 8001ae0:	f003 0301 	and.w	r3, r3, #1
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d002      	beq.n	8001aee <ENC_Write+0x31e>
 8001ae8:	2331      	movs	r3, #49	; 0x31
 8001aea:	64bb      	str	r3, [r7, #72]	; 0x48
 8001aec:	e001      	b.n	8001af2 <ENC_Write+0x322>
 8001aee:	2330      	movs	r3, #48	; 0x30
 8001af0:	64bb      	str	r3, [r7, #72]	; 0x48
 8001af2:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001af6:	b25b      	sxtb	r3, r3
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	da09      	bge.n	8001b10 <ENC_Write+0x340>
 8001afc:	2331      	movs	r3, #49	; 0x31
 8001afe:	647b      	str	r3, [r7, #68]	; 0x44
 8001b00:	e008      	b.n	8001b14 <ENC_Write+0x344>
 8001b02:	bf00      	nop
 8001b04:	0800a134 	.word	0x0800a134
 8001b08:	20000404 	.word	0x20000404
 8001b0c:	0800a148 	.word	0x0800a148
 8001b10:	2330      	movs	r3, #48	; 0x30
 8001b12:	647b      	str	r3, [r7, #68]	; 0x44
 8001b14:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b18:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d002      	beq.n	8001b26 <ENC_Write+0x356>
 8001b20:	2331      	movs	r3, #49	; 0x31
 8001b22:	643b      	str	r3, [r7, #64]	; 0x40
 8001b24:	e001      	b.n	8001b2a <ENC_Write+0x35a>
 8001b26:	2330      	movs	r3, #48	; 0x30
 8001b28:	643b      	str	r3, [r7, #64]	; 0x40
 8001b2a:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b2e:	f003 0320 	and.w	r3, r3, #32
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d002      	beq.n	8001b3c <ENC_Write+0x36c>
 8001b36:	2331      	movs	r3, #49	; 0x31
 8001b38:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b3a:	e001      	b.n	8001b40 <ENC_Write+0x370>
 8001b3c:	2330      	movs	r3, #48	; 0x30
 8001b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001b40:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b44:	f003 0310 	and.w	r3, r3, #16
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d002      	beq.n	8001b52 <ENC_Write+0x382>
 8001b4c:	2331      	movs	r3, #49	; 0x31
 8001b4e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b50:	e001      	b.n	8001b56 <ENC_Write+0x386>
 8001b52:	2330      	movs	r3, #48	; 0x30
 8001b54:	63bb      	str	r3, [r7, #56]	; 0x38
 8001b56:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d002      	beq.n	8001b68 <ENC_Write+0x398>
 8001b62:	2331      	movs	r3, #49	; 0x31
 8001b64:	637b      	str	r3, [r7, #52]	; 0x34
 8001b66:	e001      	b.n	8001b6c <ENC_Write+0x39c>
 8001b68:	2330      	movs	r3, #48	; 0x30
 8001b6a:	637b      	str	r3, [r7, #52]	; 0x34
 8001b6c:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	d002      	beq.n	8001b7e <ENC_Write+0x3ae>
 8001b78:	2331      	movs	r3, #49	; 0x31
 8001b7a:	633b      	str	r3, [r7, #48]	; 0x30
 8001b7c:	e001      	b.n	8001b82 <ENC_Write+0x3b2>
 8001b7e:	2330      	movs	r3, #48	; 0x30
 8001b80:	633b      	str	r3, [r7, #48]	; 0x30
 8001b82:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d002      	beq.n	8001b94 <ENC_Write+0x3c4>
 8001b8e:	2331      	movs	r3, #49	; 0x31
 8001b90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b92:	e001      	b.n	8001b98 <ENC_Write+0x3c8>
 8001b94:	2330      	movs	r3, #48	; 0x30
 8001b96:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b98:	f897 3065 	ldrb.w	r3, [r7, #101]	; 0x65
 8001b9c:	f003 0301 	and.w	r3, r3, #1
 8001ba0:	2b00      	cmp	r3, #0
 8001ba2:	d002      	beq.n	8001baa <ENC_Write+0x3da>
 8001ba4:	2331      	movs	r3, #49	; 0x31
 8001ba6:	62bb      	str	r3, [r7, #40]	; 0x28
 8001ba8:	e001      	b.n	8001bae <ENC_Write+0x3de>
 8001baa:	2330      	movs	r3, #48	; 0x30
 8001bac:	62bb      	str	r3, [r7, #40]	; 0x28
 8001bae:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001bb2:	b25b      	sxtb	r3, r3
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	da02      	bge.n	8001bbe <ENC_Write+0x3ee>
 8001bb8:	2331      	movs	r3, #49	; 0x31
 8001bba:	627b      	str	r3, [r7, #36]	; 0x24
 8001bbc:	e001      	b.n	8001bc2 <ENC_Write+0x3f2>
 8001bbe:	2330      	movs	r3, #48	; 0x30
 8001bc0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bc2:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001bc6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d002      	beq.n	8001bd4 <ENC_Write+0x404>
 8001bce:	2331      	movs	r3, #49	; 0x31
 8001bd0:	623b      	str	r3, [r7, #32]
 8001bd2:	e001      	b.n	8001bd8 <ENC_Write+0x408>
 8001bd4:	2330      	movs	r3, #48	; 0x30
 8001bd6:	623b      	str	r3, [r7, #32]
 8001bd8:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001bdc:	f003 0320 	and.w	r3, r3, #32
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d002      	beq.n	8001bea <ENC_Write+0x41a>
 8001be4:	2331      	movs	r3, #49	; 0x31
 8001be6:	61fb      	str	r3, [r7, #28]
 8001be8:	e001      	b.n	8001bee <ENC_Write+0x41e>
 8001bea:	2330      	movs	r3, #48	; 0x30
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001bf2:	f003 0310 	and.w	r3, r3, #16
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <ENC_Write+0x430>
 8001bfa:	2331      	movs	r3, #49	; 0x31
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e001      	b.n	8001c04 <ENC_Write+0x434>
 8001c00:	2330      	movs	r3, #48	; 0x30
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c08:	f003 0308 	and.w	r3, r3, #8
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d002      	beq.n	8001c16 <ENC_Write+0x446>
 8001c10:	2331      	movs	r3, #49	; 0x31
 8001c12:	617b      	str	r3, [r7, #20]
 8001c14:	e001      	b.n	8001c1a <ENC_Write+0x44a>
 8001c16:	2330      	movs	r3, #48	; 0x30
 8001c18:	617b      	str	r3, [r7, #20]
 8001c1a:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c1e:	f003 0304 	and.w	r3, r3, #4
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <ENC_Write+0x45c>
 8001c26:	2331      	movs	r3, #49	; 0x31
 8001c28:	613b      	str	r3, [r7, #16]
 8001c2a:	e001      	b.n	8001c30 <ENC_Write+0x460>
 8001c2c:	2330      	movs	r3, #48	; 0x30
 8001c2e:	613b      	str	r3, [r7, #16]
 8001c30:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c34:	f003 0302 	and.w	r3, r3, #2
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d002      	beq.n	8001c42 <ENC_Write+0x472>
 8001c3c:	2331      	movs	r3, #49	; 0x31
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	e001      	b.n	8001c46 <ENC_Write+0x476>
 8001c42:	2330      	movs	r3, #48	; 0x30
 8001c44:	60fb      	str	r3, [r7, #12]
 8001c46:	f897 3066 	ldrb.w	r3, [r7, #102]	; 0x66
 8001c4a:	f003 0301 	and.w	r3, r3, #1
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d002      	beq.n	8001c58 <ENC_Write+0x488>
 8001c52:	2331      	movs	r3, #49	; 0x31
 8001c54:	60bb      	str	r3, [r7, #8]
 8001c56:	e001      	b.n	8001c5c <ENC_Write+0x48c>
 8001c58:	2330      	movs	r3, #48	; 0x30
 8001c5a:	60bb      	str	r3, [r7, #8]
 8001c5c:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c60:	b25b      	sxtb	r3, r3
 8001c62:	2b00      	cmp	r3, #0
 8001c64:	da02      	bge.n	8001c6c <ENC_Write+0x49c>
 8001c66:	2331      	movs	r3, #49	; 0x31
 8001c68:	607b      	str	r3, [r7, #4]
 8001c6a:	e001      	b.n	8001c70 <ENC_Write+0x4a0>
 8001c6c:	2330      	movs	r3, #48	; 0x30
 8001c6e:	607b      	str	r3, [r7, #4]
 8001c70:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d001      	beq.n	8001c80 <ENC_Write+0x4b0>
 8001c7c:	2631      	movs	r6, #49	; 0x31
 8001c7e:	e000      	b.n	8001c82 <ENC_Write+0x4b2>
 8001c80:	2630      	movs	r6, #48	; 0x30
 8001c82:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c86:	f003 0320 	and.w	r3, r3, #32
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d001      	beq.n	8001c92 <ENC_Write+0x4c2>
 8001c8e:	2531      	movs	r5, #49	; 0x31
 8001c90:	e000      	b.n	8001c94 <ENC_Write+0x4c4>
 8001c92:	2530      	movs	r5, #48	; 0x30
 8001c94:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001c98:	f003 0310 	and.w	r3, r3, #16
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <ENC_Write+0x4d4>
 8001ca0:	2431      	movs	r4, #49	; 0x31
 8001ca2:	e000      	b.n	8001ca6 <ENC_Write+0x4d6>
 8001ca4:	2430      	movs	r4, #48	; 0x30
 8001ca6:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001caa:	f003 0308 	and.w	r3, r3, #8
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d001      	beq.n	8001cb6 <ENC_Write+0x4e6>
 8001cb2:	2031      	movs	r0, #49	; 0x31
 8001cb4:	e000      	b.n	8001cb8 <ENC_Write+0x4e8>
 8001cb6:	2030      	movs	r0, #48	; 0x30
 8001cb8:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cbc:	f003 0304 	and.w	r3, r3, #4
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d001      	beq.n	8001cc8 <ENC_Write+0x4f8>
 8001cc4:	2131      	movs	r1, #49	; 0x31
 8001cc6:	e000      	b.n	8001cca <ENC_Write+0x4fa>
 8001cc8:	2130      	movs	r1, #48	; 0x30
 8001cca:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001cce:	f003 0302 	and.w	r3, r3, #2
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <ENC_Write+0x50a>
 8001cd6:	2231      	movs	r2, #49	; 0x31
 8001cd8:	e000      	b.n	8001cdc <ENC_Write+0x50c>
 8001cda:	2230      	movs	r2, #48	; 0x30
 8001cdc:	f897 3067 	ldrb.w	r3, [r7, #103]	; 0x67
 8001ce0:	f003 0301 	and.w	r3, r3, #1
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d001      	beq.n	8001cec <ENC_Write+0x51c>
 8001ce8:	2331      	movs	r3, #49	; 0x31
 8001cea:	e000      	b.n	8001cee <ENC_Write+0x51e>
 8001cec:	2330      	movs	r3, #48	; 0x30
 8001cee:	931c      	str	r3, [sp, #112]	; 0x70
 8001cf0:	921b      	str	r2, [sp, #108]	; 0x6c
 8001cf2:	911a      	str	r1, [sp, #104]	; 0x68
 8001cf4:	9019      	str	r0, [sp, #100]	; 0x64
 8001cf6:	9418      	str	r4, [sp, #96]	; 0x60
 8001cf8:	9517      	str	r5, [sp, #92]	; 0x5c
 8001cfa:	9616      	str	r6, [sp, #88]	; 0x58
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	9315      	str	r3, [sp, #84]	; 0x54
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	9314      	str	r3, [sp, #80]	; 0x50
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	9313      	str	r3, [sp, #76]	; 0x4c
 8001d08:	693b      	ldr	r3, [r7, #16]
 8001d0a:	9312      	str	r3, [sp, #72]	; 0x48
 8001d0c:	697b      	ldr	r3, [r7, #20]
 8001d0e:	9311      	str	r3, [sp, #68]	; 0x44
 8001d10:	69bb      	ldr	r3, [r7, #24]
 8001d12:	9310      	str	r3, [sp, #64]	; 0x40
 8001d14:	69fb      	ldr	r3, [r7, #28]
 8001d16:	930f      	str	r3, [sp, #60]	; 0x3c
 8001d18:	6a3b      	ldr	r3, [r7, #32]
 8001d1a:	930e      	str	r3, [sp, #56]	; 0x38
 8001d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d1e:	930d      	str	r3, [sp, #52]	; 0x34
 8001d20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d22:	930c      	str	r3, [sp, #48]	; 0x30
 8001d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d26:	930b      	str	r3, [sp, #44]	; 0x2c
 8001d28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001d2a:	930a      	str	r3, [sp, #40]	; 0x28
 8001d2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001d2e:	9309      	str	r3, [sp, #36]	; 0x24
 8001d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001d32:	9308      	str	r3, [sp, #32]
 8001d34:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8001d36:	9307      	str	r3, [sp, #28]
 8001d38:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001d3a:	9306      	str	r3, [sp, #24]
 8001d3c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001d3e:	9305      	str	r3, [sp, #20]
 8001d40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d42:	9304      	str	r3, [sp, #16]
 8001d44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001d46:	9303      	str	r3, [sp, #12]
 8001d48:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001d4a:	9302      	str	r3, [sp, #8]
 8001d4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001d4e:	9301      	str	r3, [sp, #4]
 8001d50:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001d52:	9300      	str	r3, [sp, #0]
 8001d54:	4643      	mov	r3, r8
 8001d56:	4672      	mov	r2, lr
 8001d58:	4661      	mov	r1, ip
 8001d5a:	48c5      	ldr	r0, [pc, #788]	; (8002070 <ENC_Write+0x8a0>)
 8001d5c:	f007 f852 	bl	8008e04 <iprintf>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001d60:	2200      	movs	r2, #0
 8001d62:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d6a:	f003 fe31 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_W_EOM, 4, 10);		// Write to register
 8001d6e:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8001d72:	230a      	movs	r3, #10
 8001d74:	2204      	movs	r2, #4
 8001d76:	48bf      	ldr	r0, [pc, #764]	; (8002074 <ENC_Write+0x8a4>)
 8001d78:	f004 feb1 	bl	8006ade <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001d7c:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001d80:	230a      	movs	r3, #10
 8001d82:	2202      	movs	r2, #2
 8001d84:	48bb      	ldr	r0, [pc, #748]	; (8002074 <ENC_Write+0x8a4>)
 8001d86:	f005 f818 	bl	8006dba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001d90:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001d94:	f003 fe1c 	bl	80059d0 <HAL_GPIO_WritePin>
	printf("\t\tS Word: %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));
 8001d98:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001d9c:	b25b      	sxtb	r3, r3
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da02      	bge.n	8001da8 <ENC_Write+0x5d8>
 8001da2:	f04f 0c31 	mov.w	ip, #49	; 0x31
 8001da6:	e001      	b.n	8001dac <ENC_Write+0x5dc>
 8001da8:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8001dac:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001db0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001db4:	2b00      	cmp	r3, #0
 8001db6:	d002      	beq.n	8001dbe <ENC_Write+0x5ee>
 8001db8:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8001dbc:	e001      	b.n	8001dc2 <ENC_Write+0x5f2>
 8001dbe:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8001dc2:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001dc6:	f003 0320 	and.w	r3, r3, #32
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <ENC_Write+0x604>
 8001dce:	f04f 0831 	mov.w	r8, #49	; 0x31
 8001dd2:	e001      	b.n	8001dd8 <ENC_Write+0x608>
 8001dd4:	f04f 0830 	mov.w	r8, #48	; 0x30
 8001dd8:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001ddc:	f003 0310 	and.w	r3, r3, #16
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d001      	beq.n	8001de8 <ENC_Write+0x618>
 8001de4:	2031      	movs	r0, #49	; 0x31
 8001de6:	e000      	b.n	8001dea <ENC_Write+0x61a>
 8001de8:	2030      	movs	r0, #48	; 0x30
 8001dea:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001dee:	f003 0308 	and.w	r3, r3, #8
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d001      	beq.n	8001dfa <ENC_Write+0x62a>
 8001df6:	2431      	movs	r4, #49	; 0x31
 8001df8:	e000      	b.n	8001dfc <ENC_Write+0x62c>
 8001dfa:	2430      	movs	r4, #48	; 0x30
 8001dfc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e00:	f003 0304 	and.w	r3, r3, #4
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d001      	beq.n	8001e0c <ENC_Write+0x63c>
 8001e08:	2531      	movs	r5, #49	; 0x31
 8001e0a:	e000      	b.n	8001e0e <ENC_Write+0x63e>
 8001e0c:	2530      	movs	r5, #48	; 0x30
 8001e0e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e12:	f003 0302 	and.w	r3, r3, #2
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <ENC_Write+0x64e>
 8001e1a:	2631      	movs	r6, #49	; 0x31
 8001e1c:	e000      	b.n	8001e20 <ENC_Write+0x650>
 8001e1e:	2630      	movs	r6, #48	; 0x30
 8001e20:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001e24:	f003 0301 	and.w	r3, r3, #1
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d002      	beq.n	8001e32 <ENC_Write+0x662>
 8001e2c:	2331      	movs	r3, #49	; 0x31
 8001e2e:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e30:	e001      	b.n	8001e36 <ENC_Write+0x666>
 8001e32:	2330      	movs	r3, #48	; 0x30
 8001e34:	65bb      	str	r3, [r7, #88]	; 0x58
 8001e36:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001e3a:	b25b      	sxtb	r3, r3
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	da02      	bge.n	8001e46 <ENC_Write+0x676>
 8001e40:	2331      	movs	r3, #49	; 0x31
 8001e42:	657b      	str	r3, [r7, #84]	; 0x54
 8001e44:	e001      	b.n	8001e4a <ENC_Write+0x67a>
 8001e46:	2330      	movs	r3, #48	; 0x30
 8001e48:	657b      	str	r3, [r7, #84]	; 0x54
 8001e4a:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001e4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d002      	beq.n	8001e5c <ENC_Write+0x68c>
 8001e56:	2331      	movs	r3, #49	; 0x31
 8001e58:	653b      	str	r3, [r7, #80]	; 0x50
 8001e5a:	e001      	b.n	8001e60 <ENC_Write+0x690>
 8001e5c:	2330      	movs	r3, #48	; 0x30
 8001e5e:	653b      	str	r3, [r7, #80]	; 0x50
 8001e60:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001e64:	f003 0320 	and.w	r3, r3, #32
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d002      	beq.n	8001e72 <ENC_Write+0x6a2>
 8001e6c:	2331      	movs	r3, #49	; 0x31
 8001e6e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e70:	e001      	b.n	8001e76 <ENC_Write+0x6a6>
 8001e72:	2330      	movs	r3, #48	; 0x30
 8001e74:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001e76:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001e7a:	f003 0310 	and.w	r3, r3, #16
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d002      	beq.n	8001e88 <ENC_Write+0x6b8>
 8001e82:	2331      	movs	r3, #49	; 0x31
 8001e84:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e86:	e001      	b.n	8001e8c <ENC_Write+0x6bc>
 8001e88:	2330      	movs	r3, #48	; 0x30
 8001e8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8001e8c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001e90:	f003 0308 	and.w	r3, r3, #8
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d002      	beq.n	8001e9e <ENC_Write+0x6ce>
 8001e98:	2331      	movs	r3, #49	; 0x31
 8001e9a:	647b      	str	r3, [r7, #68]	; 0x44
 8001e9c:	e001      	b.n	8001ea2 <ENC_Write+0x6d2>
 8001e9e:	2330      	movs	r3, #48	; 0x30
 8001ea0:	647b      	str	r3, [r7, #68]	; 0x44
 8001ea2:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001ea6:	f003 0304 	and.w	r3, r3, #4
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d001      	beq.n	8001eb2 <ENC_Write+0x6e2>
 8001eae:	2131      	movs	r1, #49	; 0x31
 8001eb0:	e000      	b.n	8001eb4 <ENC_Write+0x6e4>
 8001eb2:	2130      	movs	r1, #48	; 0x30
 8001eb4:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001eb8:	f003 0302 	and.w	r3, r3, #2
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <ENC_Write+0x6f4>
 8001ec0:	2231      	movs	r2, #49	; 0x31
 8001ec2:	e000      	b.n	8001ec6 <ENC_Write+0x6f6>
 8001ec4:	2230      	movs	r2, #48	; 0x30
 8001ec6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001eca:	f003 0301 	and.w	r3, r3, #1
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d001      	beq.n	8001ed6 <ENC_Write+0x706>
 8001ed2:	2331      	movs	r3, #49	; 0x31
 8001ed4:	e000      	b.n	8001ed8 <ENC_Write+0x708>
 8001ed6:	2330      	movs	r3, #48	; 0x30
 8001ed8:	930c      	str	r3, [sp, #48]	; 0x30
 8001eda:	920b      	str	r2, [sp, #44]	; 0x2c
 8001edc:	910a      	str	r1, [sp, #40]	; 0x28
 8001ede:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001ee0:	9309      	str	r3, [sp, #36]	; 0x24
 8001ee2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001ee4:	9308      	str	r3, [sp, #32]
 8001ee6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8001ee8:	9307      	str	r3, [sp, #28]
 8001eea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001eec:	9306      	str	r3, [sp, #24]
 8001eee:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001ef0:	9305      	str	r3, [sp, #20]
 8001ef2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8001ef4:	9304      	str	r3, [sp, #16]
 8001ef6:	9603      	str	r6, [sp, #12]
 8001ef8:	9502      	str	r5, [sp, #8]
 8001efa:	9401      	str	r4, [sp, #4]
 8001efc:	9000      	str	r0, [sp, #0]
 8001efe:	4643      	mov	r3, r8
 8001f00:	4672      	mov	r2, lr
 8001f02:	4661      	mov	r1, ip
 8001f04:	485c      	ldr	r0, [pc, #368]	; (8002078 <ENC_Write+0x8a8>)
 8001f06:	f006 ff7d 	bl	8008e04 <iprintf>

	// check safety word
	uint16_t SAFE_WORD = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);		// form 16bit safety word
 8001f0a:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8001f0e:	021b      	lsls	r3, r3, #8
 8001f10:	b21a      	sxth	r2, r3
 8001f12:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8001f16:	b21b      	sxth	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b21b      	sxth	r3, r3
 8001f1c:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74

	uint8_t ERR_1 = (SAFE_WORD >> 15)&1U;		// only care about first bit
 8001f20:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001f24:	0bdb      	lsrs	r3, r3, #15
 8001f26:	b29b      	uxth	r3, r3
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	f887 3073 	strb.w	r3, [r7, #115]	; 0x73
	uint8_t ERR_2 = (SAFE_WORD >> 14)&1U;		// shift left one then make it first
 8001f32:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001f36:	0b9b      	lsrs	r3, r3, #14
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b2db      	uxtb	r3, r3
 8001f3c:	f003 0301 	and.w	r3, r3, #1
 8001f40:	f887 3072 	strb.w	r3, [r7, #114]	; 0x72
	uint8_t ERR_3 = (SAFE_WORD >> 13)&1U;		// shift left 2 ...
 8001f44:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001f48:	0b5b      	lsrs	r3, r3, #13
 8001f4a:	b29b      	uxth	r3, r3
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	f887 3071 	strb.w	r3, [r7, #113]	; 0x71
	uint8_t ERR_4 = (SAFE_WORD >> 12)&1U;		// ...
 8001f56:	f8b7 3074 	ldrh.w	r3, [r7, #116]	; 0x74
 8001f5a:	0b1b      	lsrs	r3, r3, #12
 8001f5c:	b29b      	uxth	r3, r3
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	f003 0301 	and.w	r3, r3, #1
 8001f64:	f887 3070 	strb.w	r3, [r7, #112]	; 0x70

	if(ERR_1==0 || ERR_2==0 || ERR_3==0 || ERR_4==0)
 8001f68:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00b      	beq.n	8001f88 <ENC_Write+0x7b8>
 8001f70:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d007      	beq.n	8001f88 <ENC_Write+0x7b8>
 8001f78:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <ENC_Write+0x7b8>
 8001f80:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d11d      	bne.n	8001fc4 <ENC_Write+0x7f4>
	{
		if(ERR_1==0){printf("\t\t\tErr 1: Reset/watchdog overflow!\n");}
 8001f88:	f897 3073 	ldrb.w	r3, [r7, #115]	; 0x73
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d102      	bne.n	8001f96 <ENC_Write+0x7c6>
 8001f90:	483a      	ldr	r0, [pc, #232]	; (800207c <ENC_Write+0x8ac>)
 8001f92:	f006 ffd3 	bl	8008f3c <puts>
		if(ERR_2==0){printf("\t\t\tErr 2: System error!\n");}
 8001f96:	f897 3072 	ldrb.w	r3, [r7, #114]	; 0x72
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d102      	bne.n	8001fa4 <ENC_Write+0x7d4>
 8001f9e:	4838      	ldr	r0, [pc, #224]	; (8002080 <ENC_Write+0x8b0>)
 8001fa0:	f006 ffcc 	bl	8008f3c <puts>
		if(ERR_3==0){printf("\t\t\tErr 3: Interface access error!\n");}
 8001fa4:	f897 3071 	ldrb.w	r3, [r7, #113]	; 0x71
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d102      	bne.n	8001fb2 <ENC_Write+0x7e2>
 8001fac:	4835      	ldr	r0, [pc, #212]	; (8002084 <ENC_Write+0x8b4>)
 8001fae:	f006 ffc5 	bl	8008f3c <puts>
		if(ERR_4==0){printf("\t\t\tErr 4: Invalid angle value!\n");}
 8001fb2:	f897 3070 	ldrb.w	r3, [r7, #112]	; 0x70
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d102      	bne.n	8001fc0 <ENC_Write+0x7f0>
 8001fba:	4833      	ldr	r0, [pc, #204]	; (8002088 <ENC_Write+0x8b8>)
 8001fbc:	f006 ffbe 	bl	8008f3c <puts>
		Error_Handler();
 8001fc0:	f000 fd6b 	bl	8002a9a <Error_Handler>
	}

	// check if written
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001fca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001fce:	f003 fcff 	bl	80059d0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8001fd2:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8001fd6:	230a      	movs	r3, #10
 8001fd8:	2202      	movs	r2, #2
 8001fda:	4826      	ldr	r0, [pc, #152]	; (8002074 <ENC_Write+0x8a4>)
 8001fdc:	f004 fd7f 	bl	8006ade <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001fe0:	f107 0168 	add.w	r1, r7, #104	; 0x68
 8001fe4:	230a      	movs	r3, #10
 8001fe6:	2202      	movs	r2, #2
 8001fe8:	4822      	ldr	r0, [pc, #136]	; (8002074 <ENC_Write+0x8a4>)
 8001fea:	f004 fee6 	bl	8006dba <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001fee:	2201      	movs	r2, #1
 8001ff0:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001ff4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001ff8:	f003 fcea 	bl	80059d0 <HAL_GPIO_WritePin>
	printf("\t\tNew   : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));
 8001ffc:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002000:	b25b      	sxtb	r3, r3
 8002002:	2b00      	cmp	r3, #0
 8002004:	da02      	bge.n	800200c <ENC_Write+0x83c>
 8002006:	f04f 0c31 	mov.w	ip, #49	; 0x31
 800200a:	e001      	b.n	8002010 <ENC_Write+0x840>
 800200c:	f04f 0c30 	mov.w	ip, #48	; 0x30
 8002010:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002014:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002018:	2b00      	cmp	r3, #0
 800201a:	d002      	beq.n	8002022 <ENC_Write+0x852>
 800201c:	f04f 0e31 	mov.w	lr, #49	; 0x31
 8002020:	e001      	b.n	8002026 <ENC_Write+0x856>
 8002022:	f04f 0e30 	mov.w	lr, #48	; 0x30
 8002026:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 800202a:	f003 0320 	and.w	r3, r3, #32
 800202e:	2b00      	cmp	r3, #0
 8002030:	d002      	beq.n	8002038 <ENC_Write+0x868>
 8002032:	f04f 0831 	mov.w	r8, #49	; 0x31
 8002036:	e001      	b.n	800203c <ENC_Write+0x86c>
 8002038:	f04f 0830 	mov.w	r8, #48	; 0x30
 800203c:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002040:	f003 0310 	and.w	r3, r3, #16
 8002044:	2b00      	cmp	r3, #0
 8002046:	d001      	beq.n	800204c <ENC_Write+0x87c>
 8002048:	2031      	movs	r0, #49	; 0x31
 800204a:	e000      	b.n	800204e <ENC_Write+0x87e>
 800204c:	2030      	movs	r0, #48	; 0x30
 800204e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d001      	beq.n	800205e <ENC_Write+0x88e>
 800205a:	2431      	movs	r4, #49	; 0x31
 800205c:	e000      	b.n	8002060 <ENC_Write+0x890>
 800205e:	2430      	movs	r4, #48	; 0x30
 8002060:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002064:	f003 0304 	and.w	r3, r3, #4
 8002068:	2b00      	cmp	r3, #0
 800206a:	d00f      	beq.n	800208c <ENC_Write+0x8bc>
 800206c:	2531      	movs	r5, #49	; 0x31
 800206e:	e00e      	b.n	800208e <ENC_Write+0x8be>
 8002070:	0800a17c 	.word	0x0800a17c
 8002074:	20000404 	.word	0x20000404
 8002078:	0800a1d8 	.word	0x0800a1d8
 800207c:	0800a20c 	.word	0x0800a20c
 8002080:	0800a230 	.word	0x0800a230
 8002084:	0800a248 	.word	0x0800a248
 8002088:	0800a26c 	.word	0x0800a26c
 800208c:	2530      	movs	r5, #48	; 0x30
 800208e:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 8002092:	f003 0302 	and.w	r3, r3, #2
 8002096:	2b00      	cmp	r3, #0
 8002098:	d001      	beq.n	800209e <ENC_Write+0x8ce>
 800209a:	2631      	movs	r6, #49	; 0x31
 800209c:	e000      	b.n	80020a0 <ENC_Write+0x8d0>
 800209e:	2630      	movs	r6, #48	; 0x30
 80020a0:	f897 3068 	ldrb.w	r3, [r7, #104]	; 0x68
 80020a4:	f003 0301 	and.w	r3, r3, #1
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d002      	beq.n	80020b2 <ENC_Write+0x8e2>
 80020ac:	2331      	movs	r3, #49	; 0x31
 80020ae:	65bb      	str	r3, [r7, #88]	; 0x58
 80020b0:	e001      	b.n	80020b6 <ENC_Write+0x8e6>
 80020b2:	2330      	movs	r3, #48	; 0x30
 80020b4:	65bb      	str	r3, [r7, #88]	; 0x58
 80020b6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80020ba:	b25b      	sxtb	r3, r3
 80020bc:	2b00      	cmp	r3, #0
 80020be:	da02      	bge.n	80020c6 <ENC_Write+0x8f6>
 80020c0:	2331      	movs	r3, #49	; 0x31
 80020c2:	657b      	str	r3, [r7, #84]	; 0x54
 80020c4:	e001      	b.n	80020ca <ENC_Write+0x8fa>
 80020c6:	2330      	movs	r3, #48	; 0x30
 80020c8:	657b      	str	r3, [r7, #84]	; 0x54
 80020ca:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80020ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d002      	beq.n	80020dc <ENC_Write+0x90c>
 80020d6:	2331      	movs	r3, #49	; 0x31
 80020d8:	653b      	str	r3, [r7, #80]	; 0x50
 80020da:	e001      	b.n	80020e0 <ENC_Write+0x910>
 80020dc:	2330      	movs	r3, #48	; 0x30
 80020de:	653b      	str	r3, [r7, #80]	; 0x50
 80020e0:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80020e4:	f003 0320 	and.w	r3, r3, #32
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d002      	beq.n	80020f2 <ENC_Write+0x922>
 80020ec:	2331      	movs	r3, #49	; 0x31
 80020ee:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020f0:	e001      	b.n	80020f6 <ENC_Write+0x926>
 80020f2:	2330      	movs	r3, #48	; 0x30
 80020f4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80020f6:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 80020fa:	f003 0310 	and.w	r3, r3, #16
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d002      	beq.n	8002108 <ENC_Write+0x938>
 8002102:	2331      	movs	r3, #49	; 0x31
 8002104:	64bb      	str	r3, [r7, #72]	; 0x48
 8002106:	e001      	b.n	800210c <ENC_Write+0x93c>
 8002108:	2330      	movs	r3, #48	; 0x30
 800210a:	64bb      	str	r3, [r7, #72]	; 0x48
 800210c:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d002      	beq.n	800211e <ENC_Write+0x94e>
 8002118:	2331      	movs	r3, #49	; 0x31
 800211a:	647b      	str	r3, [r7, #68]	; 0x44
 800211c:	e001      	b.n	8002122 <ENC_Write+0x952>
 800211e:	2330      	movs	r3, #48	; 0x30
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
 8002122:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002126:	f003 0304 	and.w	r3, r3, #4
 800212a:	2b00      	cmp	r3, #0
 800212c:	d001      	beq.n	8002132 <ENC_Write+0x962>
 800212e:	2131      	movs	r1, #49	; 0x31
 8002130:	e000      	b.n	8002134 <ENC_Write+0x964>
 8002132:	2130      	movs	r1, #48	; 0x30
 8002134:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 8002138:	f003 0302 	and.w	r3, r3, #2
 800213c:	2b00      	cmp	r3, #0
 800213e:	d001      	beq.n	8002144 <ENC_Write+0x974>
 8002140:	2231      	movs	r2, #49	; 0x31
 8002142:	e000      	b.n	8002146 <ENC_Write+0x976>
 8002144:	2230      	movs	r2, #48	; 0x30
 8002146:	f897 3069 	ldrb.w	r3, [r7, #105]	; 0x69
 800214a:	f003 0301 	and.w	r3, r3, #1
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <ENC_Write+0x986>
 8002152:	2331      	movs	r3, #49	; 0x31
 8002154:	e000      	b.n	8002158 <ENC_Write+0x988>
 8002156:	2330      	movs	r3, #48	; 0x30
 8002158:	930c      	str	r3, [sp, #48]	; 0x30
 800215a:	920b      	str	r2, [sp, #44]	; 0x2c
 800215c:	910a      	str	r1, [sp, #40]	; 0x28
 800215e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002160:	9309      	str	r3, [sp, #36]	; 0x24
 8002162:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002164:	9308      	str	r3, [sp, #32]
 8002166:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002168:	9307      	str	r3, [sp, #28]
 800216a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800216c:	9306      	str	r3, [sp, #24]
 800216e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002170:	9305      	str	r3, [sp, #20]
 8002172:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002174:	9304      	str	r3, [sp, #16]
 8002176:	9603      	str	r6, [sp, #12]
 8002178:	9502      	str	r5, [sp, #8]
 800217a:	9401      	str	r4, [sp, #4]
 800217c:	9000      	str	r0, [sp, #0]
 800217e:	4643      	mov	r3, r8
 8002180:	4672      	mov	r2, lr
 8002182:	4661      	mov	r1, ip
 8002184:	4803      	ldr	r0, [pc, #12]	; (8002194 <ENC_Write+0x9c4>)
 8002186:	f006 fe3d 	bl	8008e04 <iprintf>
//	if((data2&mask2) == (SPI_BUFF[1]&mask2))
//	{
//		// second bit same
//		printf("\t\tBit 2 good\n");
//	}
}
 800218a:	bf00      	nop
 800218c:	3778      	adds	r7, #120	; 0x78
 800218e:	46bd      	mov	sp, r7
 8002190:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002194:	0800a28c 	.word	0x0800a28c

08002198 <ENC_Interrupt>:
void  ENC_Interrupt(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002198:	b580      	push	{r7, lr}
 800219a:	b082      	sub	sp, #8
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	460b      	mov	r3, r1
 80021a2:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80021a4:	887b      	ldrh	r3, [r7, #2]
 80021a6:	4619      	mov	r1, r3
 80021a8:	6878      	ldr	r0, [r7, #4]
 80021aa:	f003 fbf9 	bl	80059a0 <HAL_GPIO_ReadPin>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d009      	beq.n	80021c8 <ENC_Interrupt+0x30>
		enc.IIF_Counter++;		// If high, increment
 80021b4:	4b14      	ldr	r3, [pc, #80]	; (8002208 <ENC_Interrupt+0x70>)
 80021b6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	3301      	adds	r3, #1
 80021be:	b29b      	uxth	r3, r3
 80021c0:	b21a      	sxth	r2, r3
 80021c2:	4b11      	ldr	r3, [pc, #68]	; (8002208 <ENC_Interrupt+0x70>)
 80021c4:	809a      	strh	r2, [r3, #4]
 80021c6:	e008      	b.n	80021da <ENC_Interrupt+0x42>
	else
		enc.IIF_Counter--;		// If low , decrement
 80021c8:	4b0f      	ldr	r3, [pc, #60]	; (8002208 <ENC_Interrupt+0x70>)
 80021ca:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021ce:	b29b      	uxth	r3, r3
 80021d0:	3b01      	subs	r3, #1
 80021d2:	b29b      	uxth	r3, r3
 80021d4:	b21a      	sxth	r2, r3
 80021d6:	4b0c      	ldr	r3, [pc, #48]	; (8002208 <ENC_Interrupt+0x70>)
 80021d8:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 80021da:	4b0b      	ldr	r3, [pc, #44]	; (8002208 <ENC_Interrupt+0x70>)
 80021dc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80021e4:	db02      	blt.n	80021ec <ENC_Interrupt+0x54>
		enc.IIF_Counter = 0;		// Set to 0
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <ENC_Interrupt+0x70>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter<0)		// If underflow
 80021ec:	4b06      	ldr	r3, [pc, #24]	; (8002208 <ENC_Interrupt+0x70>)
 80021ee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	da03      	bge.n	80021fe <ENC_Interrupt+0x66>
		enc.IIF_Counter = 4095;		// Set to 4095
 80021f6:	4b04      	ldr	r3, [pc, #16]	; (8002208 <ENC_Interrupt+0x70>)
 80021f8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80021fc:	809a      	strh	r2, [r3, #4]
}
 80021fe:	bf00      	nop
 8002200:	3708      	adds	r7, #8
 8002202:	46bd      	mov	sp, r7
 8002204:	bd80      	pop	{r7, pc}
 8002206:	bf00      	nop
 8002208:	200002a0 	.word	0x200002a0

0800220c <Set_PWM3>:
// FOC stuff
void  Set_PWM3(float DC_1, float DC_2, float DC_3)
{
 800220c:	b480      	push	{r7}
 800220e:	b085      	sub	sp, #20
 8002210:	af00      	add	r7, sp, #0
 8002212:	ed87 0a03 	vstr	s0, [r7, #12]
 8002216:	edc7 0a02 	vstr	s1, [r7, #8]
 800221a:	ed87 1a01 	vstr	s2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,Phase_A_Ch,foc.PWM_Reg_Max*DC_1);	// Set PWM channels
 800221e:	4b1e      	ldr	r3, [pc, #120]	; (8002298 <Set_PWM3+0x8c>)
 8002220:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002224:	ee07 3a90 	vmov	s15, r3
 8002228:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800222c:	edd7 7a03 	vldr	s15, [r7, #12]
 8002230:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002234:	4b19      	ldr	r3, [pc, #100]	; (800229c <Set_PWM3+0x90>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800223c:	ee17 2a90 	vmov	r2, s15
 8002240:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,Phase_B_Ch,foc.PWM_Reg_Max*DC_2);
 8002242:	4b15      	ldr	r3, [pc, #84]	; (8002298 <Set_PWM3+0x8c>)
 8002244:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002248:	ee07 3a90 	vmov	s15, r3
 800224c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002250:	edd7 7a02 	vldr	s15, [r7, #8]
 8002254:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002258:	4b10      	ldr	r3, [pc, #64]	; (800229c <Set_PWM3+0x90>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002260:	ee17 2a90 	vmov	r2, s15
 8002264:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,Phase_C_Ch,foc.PWM_Reg_Max*DC_3);
 8002266:	4b0c      	ldr	r3, [pc, #48]	; (8002298 <Set_PWM3+0x8c>)
 8002268:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800226c:	ee07 3a90 	vmov	s15, r3
 8002270:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002274:	edd7 7a01 	vldr	s15, [r7, #4]
 8002278:	ee67 7a27 	vmul.f32	s15, s14, s15
 800227c:	4b07      	ldr	r3, [pc, #28]	; (800229c <Set_PWM3+0x90>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002284:	ee17 2a90 	vmov	r2, s15
 8002288:	635a      	str	r2, [r3, #52]	; 0x34
}
 800228a:	bf00      	nop
 800228c:	3714      	adds	r7, #20
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	200002b8 	.word	0x200002b8
 800229c:	20000468 	.word	0x20000468

080022a0 <_sin>:
float _sin(float theta)
{
 80022a0:	b580      	push	{r7, lr}
 80022a2:	b082      	sub	sp, #8
 80022a4:	af00      	add	r7, sp, #0
 80022a6:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(theta)];
 80022aa:	6878      	ldr	r0, [r7, #4]
 80022ac:	f7fe fa96 	bl	80007dc <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	ec43 2b10 	vmov	d0, r2, r3
 80022b8:	f007 fdce 	bl	8009e58 <floor>
 80022bc:	ec53 2b10 	vmov	r2, r3, d0
 80022c0:	4610      	mov	r0, r2
 80022c2:	4619      	mov	r1, r3
 80022c4:	f7fe fb6a 	bl	800099c <__aeabi_d2iz>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a05      	ldr	r2, [pc, #20]	; (80022e0 <_sin+0x40>)
 80022cc:	009b      	lsls	r3, r3, #2
 80022ce:	4413      	add	r3, r2
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	ee07 3a90 	vmov	s15, r3
}
 80022d6:	eeb0 0a67 	vmov.f32	s0, s15
 80022da:	3708      	adds	r7, #8
 80022dc:	46bd      	mov	sp, r7
 80022de:	bd80      	pop	{r7, pc}
 80022e0:	0800a2c0 	.word	0x0800a2c0

080022e4 <_cos>:
float _cos(float theta)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b082      	sub	sp, #8
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
 80022ee:	edd7 7a01 	vldr	s15, [r7, #4]
 80022f2:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8002340 <_cos+0x5c>
 80022f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022fa:	eddf 0a12 	vldr	s1, [pc, #72]	; 8002344 <_cos+0x60>
 80022fe:	eeb0 0a67 	vmov.f32	s0, s15
 8002302:	f007 fe29 	bl	8009f58 <fmodf>
 8002306:	ee10 3a10 	vmov	r3, s0
 800230a:	4618      	mov	r0, r3
 800230c:	f7fe fa66 	bl	80007dc <__aeabi_f2d>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	ec43 2b10 	vmov	d0, r2, r3
 8002318:	f007 fd9e 	bl	8009e58 <floor>
 800231c:	ec53 2b10 	vmov	r2, r3, d0
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fb3a 	bl	800099c <__aeabi_d2iz>
 8002328:	4603      	mov	r3, r0
 800232a:	4a07      	ldr	r2, [pc, #28]	; (8002348 <_cos+0x64>)
 800232c:	009b      	lsls	r3, r3, #2
 800232e:	4413      	add	r3, r2
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	ee07 3a90 	vmov	s15, r3
}
 8002336:	eeb0 0a67 	vmov.f32	s0, s15
 800233a:	3708      	adds	r7, #8
 800233c:	46bd      	mov	sp, r7
 800233e:	bd80      	pop	{r7, pc}
 8002340:	43870000 	.word	0x43870000
 8002344:	43b40000 	.word	0x43b40000
 8002348:	0800a2c0 	.word	0x0800a2c0

0800234c <FOC_Interrupt>:
// Timer Interrupts
void  FOC_Interrupt(void)
{
 800234c:	b5b0      	push	{r4, r5, r7, lr}
 800234e:	ed2d 8b02 	vpush	{d8}
 8002352:	b082      	sub	sp, #8
 8002354:	af00      	add	r7, sp, #0
	/* Check if skipping this PWM pulse */
	foc.RCR++;									// increment
 8002356:	4bc1      	ldr	r3, [pc, #772]	; (800265c <FOC_Interrupt+0x310>)
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	3301      	adds	r3, #1
 800235c:	4abf      	ldr	r2, [pc, #764]	; (800265c <FOC_Interrupt+0x310>)
 800235e:	6013      	str	r3, [r2, #0]
	if(foc.RCR==foc.RCR_n+2){foc.RCR=0;}		// overflow
 8002360:	4bbe      	ldr	r3, [pc, #760]	; (800265c <FOC_Interrupt+0x310>)
 8002362:	681a      	ldr	r2, [r3, #0]
 8002364:	4bbd      	ldr	r3, [pc, #756]	; (800265c <FOC_Interrupt+0x310>)
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	3302      	adds	r3, #2
 800236a:	429a      	cmp	r2, r3
 800236c:	d102      	bne.n	8002374 <FOC_Interrupt+0x28>
 800236e:	4bbb      	ldr	r3, [pc, #748]	; (800265c <FOC_Interrupt+0x310>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

	if(foc.RCR==foc.RCR_n)
 8002374:	4bb9      	ldr	r3, [pc, #740]	; (800265c <FOC_Interrupt+0x310>)
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	4bb8      	ldr	r3, [pc, #736]	; (800265c <FOC_Interrupt+0x310>)
 800237a:	685b      	ldr	r3, [r3, #4]
 800237c:	429a      	cmp	r2, r3
 800237e:	f040 8379 	bne.w	8002a74 <FOC_Interrupt+0x728>
	{
		/* LED on */
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 8002382:	2201      	movs	r2, #1
 8002384:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002388:	48b5      	ldr	r0, [pc, #724]	; (8002660 <FOC_Interrupt+0x314>)
 800238a:	f003 fb21 	bl	80059d0 <HAL_GPIO_WritePin>

		/* FOC sample */
		ADC_Get_Raw(&adc.i_a_Raw,&adc.i_b_Raw, &adc.PVDD_Raw, &adc.Temp_Raw);	// Read raw ADC
 800238e:	4bb5      	ldr	r3, [pc, #724]	; (8002664 <FOC_Interrupt+0x318>)
 8002390:	4ab5      	ldr	r2, [pc, #724]	; (8002668 <FOC_Interrupt+0x31c>)
 8002392:	49b6      	ldr	r1, [pc, #728]	; (800266c <FOC_Interrupt+0x320>)
 8002394:	48b6      	ldr	r0, [pc, #728]	; (8002670 <FOC_Interrupt+0x324>)
 8002396:	f7ff f8c1 	bl	800151c <ADC_Get_Raw>
		enc.IIF_Raw = enc.IIF_Counter;											// Get encoder angle
 800239a:	4bb6      	ldr	r3, [pc, #728]	; (8002674 <FOC_Interrupt+0x328>)
 800239c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80023a0:	b29a      	uxth	r2, r3
 80023a2:	4bb4      	ldr	r3, [pc, #720]	; (8002674 <FOC_Interrupt+0x328>)
 80023a4:	821a      	strh	r2, [r3, #16]

		/* Filter and normalise readings */
		ADC_Filter_Curr(adc.i_a_Raw,adc.i_b_Raw,&adc.i_a_Fil,&adc.i_b_Fil);		// Filter raw ADC currents
 80023a6:	4bb4      	ldr	r3, [pc, #720]	; (8002678 <FOC_Interrupt+0x32c>)
 80023a8:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 80023ac:	4bb2      	ldr	r3, [pc, #712]	; (8002678 <FOC_Interrupt+0x32c>)
 80023ae:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 80023b2:	4bb2      	ldr	r3, [pc, #712]	; (800267c <FOC_Interrupt+0x330>)
 80023b4:	4ab2      	ldr	r2, [pc, #712]	; (8002680 <FOC_Interrupt+0x334>)
 80023b6:	f7ff f8df 	bl	8001578 <ADC_Filter_Curr>
		ADC_Norm_Curr  (adc.i_a_Fil,adc.i_b_Fil,&foc.i_a,&foc.i_b);				// Normalise currents
 80023ba:	4baf      	ldr	r3, [pc, #700]	; (8002678 <FOC_Interrupt+0x32c>)
 80023bc:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	; 0x34
 80023c0:	4bad      	ldr	r3, [pc, #692]	; (8002678 <FOC_Interrupt+0x32c>)
 80023c2:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	; 0x36
 80023c6:	4baf      	ldr	r3, [pc, #700]	; (8002684 <FOC_Interrupt+0x338>)
 80023c8:	4aaf      	ldr	r2, [pc, #700]	; (8002688 <FOC_Interrupt+0x33c>)
 80023ca:	f7ff f953 	bl	8001674 <ADC_Norm_Curr>
		foc.m_theta = (float)enc.IIF_Raw / 4095.0f * 360.0f;					// Normalise angle to 0-360deg
 80023ce:	4ba9      	ldr	r3, [pc, #676]	; (8002674 <FOC_Interrupt+0x328>)
 80023d0:	8a1b      	ldrh	r3, [r3, #16]
 80023d2:	ee07 3a90 	vmov	s15, r3
 80023d6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023da:	eddf 6aac 	vldr	s13, [pc, #688]	; 800268c <FOC_Interrupt+0x340>
 80023de:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80023e2:	ed9f 7aab 	vldr	s14, [pc, #684]	; 8002690 <FOC_Interrupt+0x344>
 80023e6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80023ea:	4b9c      	ldr	r3, [pc, #624]	; (800265c <FOC_Interrupt+0x310>)
 80023ec:	edc3 7a04 	vstr	s15, [r3, #16]

		/* FOC maths */
		// Get electrical angles correct
		foc.e_theta = fmodf(foc.m_theta*foc.Pole_Pairs,360.0f);	// get electrical angle and constrain in 360 deg
 80023f0:	4b9a      	ldr	r3, [pc, #616]	; (800265c <FOC_Interrupt+0x310>)
 80023f2:	ed93 7a04 	vldr	s14, [r3, #16]
 80023f6:	4b99      	ldr	r3, [pc, #612]	; (800265c <FOC_Interrupt+0x310>)
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	ee07 3a90 	vmov	s15, r3
 80023fe:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002406:	eddf 0aa2 	vldr	s1, [pc, #648]	; 8002690 <FOC_Interrupt+0x344>
 800240a:	eeb0 0a67 	vmov.f32	s0, s15
 800240e:	f007 fda3 	bl	8009f58 <fmodf>
 8002412:	eef0 7a40 	vmov.f32	s15, s0
 8002416:	4b91      	ldr	r3, [pc, #580]	; (800265c <FOC_Interrupt+0x310>)
 8002418:	edc3 7a06 	vstr	s15, [r3, #24]

		// Clarke -> alpha/beta
		foc.i_alph = foc.i_a;
 800241c:	4b8f      	ldr	r3, [pc, #572]	; (800265c <FOC_Interrupt+0x310>)
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <FOC_Interrupt+0x310>)
 8002422:	62d3      	str	r3, [r2, #44]	; 0x2c
		foc.i_beta = SQRT1_3 * (2.0f*foc.i_b - foc.i_a);
 8002424:	4b8d      	ldr	r3, [pc, #564]	; (800265c <FOC_Interrupt+0x310>)
 8002426:	edd3 7a09 	vldr	s15, [r3, #36]	; 0x24
 800242a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800242e:	4b8b      	ldr	r3, [pc, #556]	; (800265c <FOC_Interrupt+0x310>)
 8002430:	edd3 7a08 	vldr	s15, [r3, #32]
 8002434:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002438:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8002694 <FOC_Interrupt+0x348>
 800243c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002440:	4b86      	ldr	r3, [pc, #536]	; (800265c <FOC_Interrupt+0x310>)
 8002442:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

		// Park -> direct/quadrature
		float sin_Ang = _sin(foc.e_theta);
 8002446:	4b85      	ldr	r3, [pc, #532]	; (800265c <FOC_Interrupt+0x310>)
 8002448:	edd3 7a06 	vldr	s15, [r3, #24]
 800244c:	eeb0 0a67 	vmov.f32	s0, s15
 8002450:	f7ff ff26 	bl	80022a0 <_sin>
 8002454:	ed87 0a01 	vstr	s0, [r7, #4]
		float cos_Ang = _cos(foc.e_theta);
 8002458:	4b80      	ldr	r3, [pc, #512]	; (800265c <FOC_Interrupt+0x310>)
 800245a:	edd3 7a06 	vldr	s15, [r3, #24]
 800245e:	eeb0 0a67 	vmov.f32	s0, s15
 8002462:	f7ff ff3f 	bl	80022e4 <_cos>
 8002466:	ed87 0a00 	vstr	s0, [r7]
		foc.i_d = cos_Ang*foc.i_alph + sin_Ang*foc.i_beta;
 800246a:	4b7c      	ldr	r3, [pc, #496]	; (800265c <FOC_Interrupt+0x310>)
 800246c:	ed93 7a0b 	vldr	s14, [r3, #44]	; 0x2c
 8002470:	edd7 7a00 	vldr	s15, [r7]
 8002474:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002478:	4b78      	ldr	r3, [pc, #480]	; (800265c <FOC_Interrupt+0x310>)
 800247a:	edd3 6a0c 	vldr	s13, [r3, #48]	; 0x30
 800247e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002482:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002486:	ee77 7a27 	vadd.f32	s15, s14, s15
 800248a:	4b74      	ldr	r3, [pc, #464]	; (800265c <FOC_Interrupt+0x310>)
 800248c:	edc3 7a0d 	vstr	s15, [r3, #52]	; 0x34
		foc.i_q = cos_Ang*foc.i_beta - sin_Ang*foc.i_alph;
 8002490:	4b72      	ldr	r3, [pc, #456]	; (800265c <FOC_Interrupt+0x310>)
 8002492:	ed93 7a0c 	vldr	s14, [r3, #48]	; 0x30
 8002496:	edd7 7a00 	vldr	s15, [r7]
 800249a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800249e:	4b6f      	ldr	r3, [pc, #444]	; (800265c <FOC_Interrupt+0x310>)
 80024a0:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 80024a4:	edd7 7a01 	vldr	s15, [r7, #4]
 80024a8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80024ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024b0:	4b6a      	ldr	r3, [pc, #424]	; (800265c <FOC_Interrupt+0x310>)
 80024b2:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

		/* Regulate currents */
		foc.DC_I = 0.1f;				// Current duty cycle
 80024b6:	4b69      	ldr	r3, [pc, #420]	; (800265c <FOC_Interrupt+0x310>)
 80024b8:	4a77      	ldr	r2, [pc, #476]	; (8002698 <FOC_Interrupt+0x34c>)
 80024ba:	63da      	str	r2, [r3, #60]	; 0x3c

		/* Set PWM Compare values */
		foc.alpha = fmodf(foc.e_theta,60.0f);	// calculate alpha
 80024bc:	4b67      	ldr	r3, [pc, #412]	; (800265c <FOC_Interrupt+0x310>)
 80024be:	edd3 7a06 	vldr	s15, [r3, #24]
 80024c2:	eddf 0a76 	vldr	s1, [pc, #472]	; 800269c <FOC_Interrupt+0x350>
 80024c6:	eeb0 0a67 	vmov.f32	s0, s15
 80024ca:	f007 fd45 	bl	8009f58 <fmodf>
 80024ce:	eef0 7a40 	vmov.f32	s15, s0
 80024d2:	4b62      	ldr	r3, [pc, #392]	; (800265c <FOC_Interrupt+0x310>)
 80024d4:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40

		foc.DC_1 = foc.DC_I*_sin(60.0f - foc.alpha);
 80024d8:	4b60      	ldr	r3, [pc, #384]	; (800265c <FOC_Interrupt+0x310>)
 80024da:	ed93 8a0f 	vldr	s16, [r3, #60]	; 0x3c
 80024de:	4b5f      	ldr	r3, [pc, #380]	; (800265c <FOC_Interrupt+0x310>)
 80024e0:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80024e4:	ed9f 7a6d 	vldr	s14, [pc, #436]	; 800269c <FOC_Interrupt+0x350>
 80024e8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80024ec:	eeb0 0a67 	vmov.f32	s0, s15
 80024f0:	f7ff fed6 	bl	80022a0 <_sin>
 80024f4:	eef0 7a40 	vmov.f32	s15, s0
 80024f8:	ee68 7a27 	vmul.f32	s15, s16, s15
 80024fc:	4b57      	ldr	r3, [pc, #348]	; (800265c <FOC_Interrupt+0x310>)
 80024fe:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
		foc.DC_2 = foc.DC_I*_sin(foc.alpha);
 8002502:	4b56      	ldr	r3, [pc, #344]	; (800265c <FOC_Interrupt+0x310>)
 8002504:	ed93 8a0f 	vldr	s16, [r3, #60]	; 0x3c
 8002508:	4b54      	ldr	r3, [pc, #336]	; (800265c <FOC_Interrupt+0x310>)
 800250a:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 800250e:	eeb0 0a67 	vmov.f32	s0, s15
 8002512:	f7ff fec5 	bl	80022a0 <_sin>
 8002516:	eef0 7a40 	vmov.f32	s15, s0
 800251a:	ee68 7a27 	vmul.f32	s15, s16, s15
 800251e:	4b4f      	ldr	r3, [pc, #316]	; (800265c <FOC_Interrupt+0x310>)
 8002520:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
		foc.DC_0 = 1.0f - foc.DC_1 - foc.DC_2;
 8002524:	4b4d      	ldr	r3, [pc, #308]	; (800265c <FOC_Interrupt+0x310>)
 8002526:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800252a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800252e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8002532:	4b4a      	ldr	r3, [pc, #296]	; (800265c <FOC_Interrupt+0x310>)
 8002534:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8002538:	ee77 7a67 	vsub.f32	s15, s14, s15
 800253c:	4b47      	ldr	r3, [pc, #284]	; (800265c <FOC_Interrupt+0x310>)
 800253e:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

		foc.sector = (int)floor(foc.e_theta/60.0f);
 8002542:	4b46      	ldr	r3, [pc, #280]	; (800265c <FOC_Interrupt+0x310>)
 8002544:	edd3 7a06 	vldr	s15, [r3, #24]
 8002548:	ed9f 7a54 	vldr	s14, [pc, #336]	; 800269c <FOC_Interrupt+0x350>
 800254c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8002550:	ee16 0a90 	vmov	r0, s13
 8002554:	f7fe f942 	bl	80007dc <__aeabi_f2d>
 8002558:	4602      	mov	r2, r0
 800255a:	460b      	mov	r3, r1
 800255c:	ec43 2b10 	vmov	d0, r2, r3
 8002560:	f007 fc7a 	bl	8009e58 <floor>
 8002564:	ec53 2b10 	vmov	r2, r3, d0
 8002568:	4610      	mov	r0, r2
 800256a:	4619      	mov	r1, r3
 800256c:	f7fe fa16 	bl	800099c <__aeabi_d2iz>
 8002570:	4603      	mov	r3, r0
 8002572:	4a3a      	ldr	r2, [pc, #232]	; (800265c <FOC_Interrupt+0x310>)
 8002574:	6453      	str	r3, [r2, #68]	; 0x44

		switch (foc.sector)
 8002576:	4b39      	ldr	r3, [pc, #228]	; (800265c <FOC_Interrupt+0x310>)
 8002578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800257a:	2b05      	cmp	r3, #5
 800257c:	f200 826c 	bhi.w	8002a58 <FOC_Interrupt+0x70c>
 8002580:	a201      	add	r2, pc, #4	; (adr r2, 8002588 <FOC_Interrupt+0x23c>)
 8002582:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002586:	bf00      	nop
 8002588:	080025a1 	.word	0x080025a1
 800258c:	080026a5 	.word	0x080026a5
 8002590:	08002761 	.word	0x08002761
 8002594:	0800281d 	.word	0x0800281d
 8002598:	080028d9 	.word	0x080028d9
 800259c:	0800299d 	.word	0x0800299d
		{
			case 0:
				foc.PWM_A = 0.5*foc.DC_0;
 80025a0:	4b2e      	ldr	r3, [pc, #184]	; (800265c <FOC_Interrupt+0x310>)
 80025a2:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80025a6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80025aa:	ee67 7a87 	vmul.f32	s15, s15, s14
 80025ae:	4b2b      	ldr	r3, [pc, #172]	; (800265c <FOC_Interrupt+0x310>)
 80025b0:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1;
 80025b4:	4b29      	ldr	r3, [pc, #164]	; (800265c <FOC_Interrupt+0x310>)
 80025b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025b8:	4618      	mov	r0, r3
 80025ba:	f7fe f90f 	bl	80007dc <__aeabi_f2d>
 80025be:	f04f 0200 	mov.w	r2, #0
 80025c2:	4b37      	ldr	r3, [pc, #220]	; (80026a0 <FOC_Interrupt+0x354>)
 80025c4:	f7fd fe7c 	bl	80002c0 <__aeabi_dmul>
 80025c8:	4602      	mov	r2, r0
 80025ca:	460b      	mov	r3, r1
 80025cc:	4614      	mov	r4, r2
 80025ce:	461d      	mov	r5, r3
 80025d0:	4b22      	ldr	r3, [pc, #136]	; (800265c <FOC_Interrupt+0x310>)
 80025d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025d4:	4618      	mov	r0, r3
 80025d6:	f7fe f901 	bl	80007dc <__aeabi_f2d>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4620      	mov	r0, r4
 80025e0:	4629      	mov	r1, r5
 80025e2:	f7fd ff9d 	bl	8000520 <__adddf3>
 80025e6:	4602      	mov	r2, r0
 80025e8:	460b      	mov	r3, r1
 80025ea:	4610      	mov	r0, r2
 80025ec:	4619      	mov	r1, r3
 80025ee:	f7fe f9fd 	bl	80009ec <__aeabi_d2f>
 80025f2:	4603      	mov	r3, r0
 80025f4:	4a19      	ldr	r2, [pc, #100]	; (800265c <FOC_Interrupt+0x310>)
 80025f6:	6613      	str	r3, [r2, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 80025f8:	4b18      	ldr	r3, [pc, #96]	; (800265c <FOC_Interrupt+0x310>)
 80025fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025fc:	4618      	mov	r0, r3
 80025fe:	f7fe f8ed 	bl	80007dc <__aeabi_f2d>
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	4b26      	ldr	r3, [pc, #152]	; (80026a0 <FOC_Interrupt+0x354>)
 8002608:	f7fd fe5a 	bl	80002c0 <__aeabi_dmul>
 800260c:	4602      	mov	r2, r0
 800260e:	460b      	mov	r3, r1
 8002610:	4614      	mov	r4, r2
 8002612:	461d      	mov	r5, r3
 8002614:	4b11      	ldr	r3, [pc, #68]	; (800265c <FOC_Interrupt+0x310>)
 8002616:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002618:	4618      	mov	r0, r3
 800261a:	f7fe f8df 	bl	80007dc <__aeabi_f2d>
 800261e:	4602      	mov	r2, r0
 8002620:	460b      	mov	r3, r1
 8002622:	4620      	mov	r0, r4
 8002624:	4629      	mov	r1, r5
 8002626:	f7fd ff7b 	bl	8000520 <__adddf3>
 800262a:	4602      	mov	r2, r0
 800262c:	460b      	mov	r3, r1
 800262e:	4614      	mov	r4, r2
 8002630:	461d      	mov	r5, r3
 8002632:	4b0a      	ldr	r3, [pc, #40]	; (800265c <FOC_Interrupt+0x310>)
 8002634:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002636:	4618      	mov	r0, r3
 8002638:	f7fe f8d0 	bl	80007dc <__aeabi_f2d>
 800263c:	4602      	mov	r2, r0
 800263e:	460b      	mov	r3, r1
 8002640:	4620      	mov	r0, r4
 8002642:	4629      	mov	r1, r5
 8002644:	f7fd ff6c 	bl	8000520 <__adddf3>
 8002648:	4602      	mov	r2, r0
 800264a:	460b      	mov	r3, r1
 800264c:	4610      	mov	r0, r2
 800264e:	4619      	mov	r1, r3
 8002650:	f7fe f9cc 	bl	80009ec <__aeabi_d2f>
 8002654:	4603      	mov	r3, r0
 8002656:	4a01      	ldr	r2, [pc, #4]	; (800265c <FOC_Interrupt+0x310>)
 8002658:	65d3      	str	r3, [r2, #92]	; 0x5c
				break;
 800265a:	e1fd      	b.n	8002a58 <FOC_Interrupt+0x70c>
 800265c:	200002b8 	.word	0x200002b8
 8002660:	48000400 	.word	0x48000400
 8002664:	2000034e 	.word	0x2000034e
 8002668:	2000034c 	.word	0x2000034c
 800266c:	2000034a 	.word	0x2000034a
 8002670:	20000348 	.word	0x20000348
 8002674:	200002a0 	.word	0x200002a0
 8002678:	2000031c 	.word	0x2000031c
 800267c:	20000352 	.word	0x20000352
 8002680:	20000350 	.word	0x20000350
 8002684:	200002dc 	.word	0x200002dc
 8002688:	200002d8 	.word	0x200002d8
 800268c:	457ff000 	.word	0x457ff000
 8002690:	43b40000 	.word	0x43b40000
 8002694:	3f13cd3a 	.word	0x3f13cd3a
 8002698:	3dcccccd 	.word	0x3dcccccd
 800269c:	42700000 	.word	0x42700000
 80026a0:	3fe00000 	.word	0x3fe00000
			case 1:
				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_2;
 80026a4:	4bbb      	ldr	r3, [pc, #748]	; (8002994 <FOC_Interrupt+0x648>)
 80026a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fe f897 	bl	80007dc <__aeabi_f2d>
 80026ae:	f04f 0200 	mov.w	r2, #0
 80026b2:	4bb9      	ldr	r3, [pc, #740]	; (8002998 <FOC_Interrupt+0x64c>)
 80026b4:	f7fd fe04 	bl	80002c0 <__aeabi_dmul>
 80026b8:	4602      	mov	r2, r0
 80026ba:	460b      	mov	r3, r1
 80026bc:	4614      	mov	r4, r2
 80026be:	461d      	mov	r5, r3
 80026c0:	4bb4      	ldr	r3, [pc, #720]	; (8002994 <FOC_Interrupt+0x648>)
 80026c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fe f889 	bl	80007dc <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	4620      	mov	r0, r4
 80026d0:	4629      	mov	r1, r5
 80026d2:	f7fd ff25 	bl	8000520 <__adddf3>
 80026d6:	4602      	mov	r2, r0
 80026d8:	460b      	mov	r3, r1
 80026da:	4610      	mov	r0, r2
 80026dc:	4619      	mov	r1, r3
 80026de:	f7fe f985 	bl	80009ec <__aeabi_d2f>
 80026e2:	4603      	mov	r3, r0
 80026e4:	4aab      	ldr	r2, [pc, #684]	; (8002994 <FOC_Interrupt+0x648>)
 80026e6:	6593      	str	r3, [r2, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0;
 80026e8:	4baa      	ldr	r3, [pc, #680]	; (8002994 <FOC_Interrupt+0x648>)
 80026ea:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80026ee:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80026f2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80026f6:	4ba7      	ldr	r3, [pc, #668]	; (8002994 <FOC_Interrupt+0x648>)
 80026f8:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 80026fc:	4ba5      	ldr	r3, [pc, #660]	; (8002994 <FOC_Interrupt+0x648>)
 80026fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002700:	4618      	mov	r0, r3
 8002702:	f7fe f86b 	bl	80007dc <__aeabi_f2d>
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	4ba3      	ldr	r3, [pc, #652]	; (8002998 <FOC_Interrupt+0x64c>)
 800270c:	f7fd fdd8 	bl	80002c0 <__aeabi_dmul>
 8002710:	4602      	mov	r2, r0
 8002712:	460b      	mov	r3, r1
 8002714:	4614      	mov	r4, r2
 8002716:	461d      	mov	r5, r3
 8002718:	4b9e      	ldr	r3, [pc, #632]	; (8002994 <FOC_Interrupt+0x648>)
 800271a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800271c:	4618      	mov	r0, r3
 800271e:	f7fe f85d 	bl	80007dc <__aeabi_f2d>
 8002722:	4602      	mov	r2, r0
 8002724:	460b      	mov	r3, r1
 8002726:	4620      	mov	r0, r4
 8002728:	4629      	mov	r1, r5
 800272a:	f7fd fef9 	bl	8000520 <__adddf3>
 800272e:	4602      	mov	r2, r0
 8002730:	460b      	mov	r3, r1
 8002732:	4614      	mov	r4, r2
 8002734:	461d      	mov	r5, r3
 8002736:	4b97      	ldr	r3, [pc, #604]	; (8002994 <FOC_Interrupt+0x648>)
 8002738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800273a:	4618      	mov	r0, r3
 800273c:	f7fe f84e 	bl	80007dc <__aeabi_f2d>
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4620      	mov	r0, r4
 8002746:	4629      	mov	r1, r5
 8002748:	f7fd feea 	bl	8000520 <__adddf3>
 800274c:	4602      	mov	r2, r0
 800274e:	460b      	mov	r3, r1
 8002750:	4610      	mov	r0, r2
 8002752:	4619      	mov	r1, r3
 8002754:	f7fe f94a 	bl	80009ec <__aeabi_d2f>
 8002758:	4603      	mov	r3, r0
 800275a:	4a8e      	ldr	r2, [pc, #568]	; (8002994 <FOC_Interrupt+0x648>)
 800275c:	65d3      	str	r3, [r2, #92]	; 0x5c
				break;
 800275e:	e17b      	b.n	8002a58 <FOC_Interrupt+0x70c>
			case 2:
				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002760:	4b8c      	ldr	r3, [pc, #560]	; (8002994 <FOC_Interrupt+0x648>)
 8002762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002764:	4618      	mov	r0, r3
 8002766:	f7fe f839 	bl	80007dc <__aeabi_f2d>
 800276a:	f04f 0200 	mov.w	r2, #0
 800276e:	4b8a      	ldr	r3, [pc, #552]	; (8002998 <FOC_Interrupt+0x64c>)
 8002770:	f7fd fda6 	bl	80002c0 <__aeabi_dmul>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4614      	mov	r4, r2
 800277a:	461d      	mov	r5, r3
 800277c:	4b85      	ldr	r3, [pc, #532]	; (8002994 <FOC_Interrupt+0x648>)
 800277e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002780:	4618      	mov	r0, r3
 8002782:	f7fe f82b 	bl	80007dc <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	4620      	mov	r0, r4
 800278c:	4629      	mov	r1, r5
 800278e:	f7fd fec7 	bl	8000520 <__adddf3>
 8002792:	4602      	mov	r2, r0
 8002794:	460b      	mov	r3, r1
 8002796:	4614      	mov	r4, r2
 8002798:	461d      	mov	r5, r3
 800279a:	4b7e      	ldr	r3, [pc, #504]	; (8002994 <FOC_Interrupt+0x648>)
 800279c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fe f81c 	bl	80007dc <__aeabi_f2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	4620      	mov	r0, r4
 80027aa:	4629      	mov	r1, r5
 80027ac:	f7fd feb8 	bl	8000520 <__adddf3>
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4610      	mov	r0, r2
 80027b6:	4619      	mov	r1, r3
 80027b8:	f7fe f918 	bl	80009ec <__aeabi_d2f>
 80027bc:	4603      	mov	r3, r0
 80027be:	4a75      	ldr	r2, [pc, #468]	; (8002994 <FOC_Interrupt+0x648>)
 80027c0:	6593      	str	r3, [r2, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0;
 80027c2:	4b74      	ldr	r3, [pc, #464]	; (8002994 <FOC_Interrupt+0x648>)
 80027c4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80027c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80027cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80027d0:	4b70      	ldr	r3, [pc, #448]	; (8002994 <FOC_Interrupt+0x648>)
 80027d2:	edc3 7a18 	vstr	s15, [r3, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1;
 80027d6:	4b6f      	ldr	r3, [pc, #444]	; (8002994 <FOC_Interrupt+0x648>)
 80027d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80027da:	4618      	mov	r0, r3
 80027dc:	f7fd fffe 	bl	80007dc <__aeabi_f2d>
 80027e0:	f04f 0200 	mov.w	r2, #0
 80027e4:	4b6c      	ldr	r3, [pc, #432]	; (8002998 <FOC_Interrupt+0x64c>)
 80027e6:	f7fd fd6b 	bl	80002c0 <__aeabi_dmul>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4614      	mov	r4, r2
 80027f0:	461d      	mov	r5, r3
 80027f2:	4b68      	ldr	r3, [pc, #416]	; (8002994 <FOC_Interrupt+0x648>)
 80027f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027f6:	4618      	mov	r0, r3
 80027f8:	f7fd fff0 	bl	80007dc <__aeabi_f2d>
 80027fc:	4602      	mov	r2, r0
 80027fe:	460b      	mov	r3, r1
 8002800:	4620      	mov	r0, r4
 8002802:	4629      	mov	r1, r5
 8002804:	f7fd fe8c 	bl	8000520 <__adddf3>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4610      	mov	r0, r2
 800280e:	4619      	mov	r1, r3
 8002810:	f7fe f8ec 	bl	80009ec <__aeabi_d2f>
 8002814:	4603      	mov	r3, r0
 8002816:	4a5f      	ldr	r2, [pc, #380]	; (8002994 <FOC_Interrupt+0x648>)
 8002818:	65d3      	str	r3, [r2, #92]	; 0x5c
				break;
 800281a:	e11d      	b.n	8002a58 <FOC_Interrupt+0x70c>
			case 3:
				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 800281c:	4b5d      	ldr	r3, [pc, #372]	; (8002994 <FOC_Interrupt+0x648>)
 800281e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002820:	4618      	mov	r0, r3
 8002822:	f7fd ffdb 	bl	80007dc <__aeabi_f2d>
 8002826:	f04f 0200 	mov.w	r2, #0
 800282a:	4b5b      	ldr	r3, [pc, #364]	; (8002998 <FOC_Interrupt+0x64c>)
 800282c:	f7fd fd48 	bl	80002c0 <__aeabi_dmul>
 8002830:	4602      	mov	r2, r0
 8002832:	460b      	mov	r3, r1
 8002834:	4614      	mov	r4, r2
 8002836:	461d      	mov	r5, r3
 8002838:	4b56      	ldr	r3, [pc, #344]	; (8002994 <FOC_Interrupt+0x648>)
 800283a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800283c:	4618      	mov	r0, r3
 800283e:	f7fd ffcd 	bl	80007dc <__aeabi_f2d>
 8002842:	4602      	mov	r2, r0
 8002844:	460b      	mov	r3, r1
 8002846:	4620      	mov	r0, r4
 8002848:	4629      	mov	r1, r5
 800284a:	f7fd fe69 	bl	8000520 <__adddf3>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4614      	mov	r4, r2
 8002854:	461d      	mov	r5, r3
 8002856:	4b4f      	ldr	r3, [pc, #316]	; (8002994 <FOC_Interrupt+0x648>)
 8002858:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800285a:	4618      	mov	r0, r3
 800285c:	f7fd ffbe 	bl	80007dc <__aeabi_f2d>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4620      	mov	r0, r4
 8002866:	4629      	mov	r1, r5
 8002868:	f7fd fe5a 	bl	8000520 <__adddf3>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	4610      	mov	r0, r2
 8002872:	4619      	mov	r1, r3
 8002874:	f7fe f8ba 	bl	80009ec <__aeabi_d2f>
 8002878:	4603      	mov	r3, r0
 800287a:	4a46      	ldr	r2, [pc, #280]	; (8002994 <FOC_Interrupt+0x648>)
 800287c:	6593      	str	r3, [r2, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_2;
 800287e:	4b45      	ldr	r3, [pc, #276]	; (8002994 <FOC_Interrupt+0x648>)
 8002880:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd ffaa 	bl	80007dc <__aeabi_f2d>
 8002888:	f04f 0200 	mov.w	r2, #0
 800288c:	4b42      	ldr	r3, [pc, #264]	; (8002998 <FOC_Interrupt+0x64c>)
 800288e:	f7fd fd17 	bl	80002c0 <__aeabi_dmul>
 8002892:	4602      	mov	r2, r0
 8002894:	460b      	mov	r3, r1
 8002896:	4614      	mov	r4, r2
 8002898:	461d      	mov	r5, r3
 800289a:	4b3e      	ldr	r3, [pc, #248]	; (8002994 <FOC_Interrupt+0x648>)
 800289c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289e:	4618      	mov	r0, r3
 80028a0:	f7fd ff9c 	bl	80007dc <__aeabi_f2d>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fe38 	bl	8000520 <__adddf3>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f898 	bl	80009ec <__aeabi_d2f>
 80028bc:	4603      	mov	r3, r0
 80028be:	4a35      	ldr	r2, [pc, #212]	; (8002994 <FOC_Interrupt+0x648>)
 80028c0:	6613      	str	r3, [r2, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0;
 80028c2:	4b34      	ldr	r3, [pc, #208]	; (8002994 <FOC_Interrupt+0x648>)
 80028c4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80028c8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80028cc:	ee67 7a87 	vmul.f32	s15, s15, s14
 80028d0:	4b30      	ldr	r3, [pc, #192]	; (8002994 <FOC_Interrupt+0x648>)
 80028d2:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				break;
 80028d6:	e0bf      	b.n	8002a58 <FOC_Interrupt+0x70c>
			case 4:
				foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1;
 80028d8:	4b2e      	ldr	r3, [pc, #184]	; (8002994 <FOC_Interrupt+0x648>)
 80028da:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028dc:	4618      	mov	r0, r3
 80028de:	f7fd ff7d 	bl	80007dc <__aeabi_f2d>
 80028e2:	f04f 0200 	mov.w	r2, #0
 80028e6:	4b2c      	ldr	r3, [pc, #176]	; (8002998 <FOC_Interrupt+0x64c>)
 80028e8:	f7fd fcea 	bl	80002c0 <__aeabi_dmul>
 80028ec:	4602      	mov	r2, r0
 80028ee:	460b      	mov	r3, r1
 80028f0:	4614      	mov	r4, r2
 80028f2:	461d      	mov	r5, r3
 80028f4:	4b27      	ldr	r3, [pc, #156]	; (8002994 <FOC_Interrupt+0x648>)
 80028f6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028f8:	4618      	mov	r0, r3
 80028fa:	f7fd ff6f 	bl	80007dc <__aeabi_f2d>
 80028fe:	4602      	mov	r2, r0
 8002900:	460b      	mov	r3, r1
 8002902:	4620      	mov	r0, r4
 8002904:	4629      	mov	r1, r5
 8002906:	f7fd fe0b 	bl	8000520 <__adddf3>
 800290a:	4602      	mov	r2, r0
 800290c:	460b      	mov	r3, r1
 800290e:	4610      	mov	r0, r2
 8002910:	4619      	mov	r1, r3
 8002912:	f7fe f86b 	bl	80009ec <__aeabi_d2f>
 8002916:	4603      	mov	r3, r0
 8002918:	4a1e      	ldr	r2, [pc, #120]	; (8002994 <FOC_Interrupt+0x648>)
 800291a:	6593      	str	r3, [r2, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <FOC_Interrupt+0x648>)
 800291e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002920:	4618      	mov	r0, r3
 8002922:	f7fd ff5b 	bl	80007dc <__aeabi_f2d>
 8002926:	f04f 0200 	mov.w	r2, #0
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <FOC_Interrupt+0x64c>)
 800292c:	f7fd fcc8 	bl	80002c0 <__aeabi_dmul>
 8002930:	4602      	mov	r2, r0
 8002932:	460b      	mov	r3, r1
 8002934:	4614      	mov	r4, r2
 8002936:	461d      	mov	r5, r3
 8002938:	4b16      	ldr	r3, [pc, #88]	; (8002994 <FOC_Interrupt+0x648>)
 800293a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800293c:	4618      	mov	r0, r3
 800293e:	f7fd ff4d 	bl	80007dc <__aeabi_f2d>
 8002942:	4602      	mov	r2, r0
 8002944:	460b      	mov	r3, r1
 8002946:	4620      	mov	r0, r4
 8002948:	4629      	mov	r1, r5
 800294a:	f7fd fde9 	bl	8000520 <__adddf3>
 800294e:	4602      	mov	r2, r0
 8002950:	460b      	mov	r3, r1
 8002952:	4614      	mov	r4, r2
 8002954:	461d      	mov	r5, r3
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <FOC_Interrupt+0x648>)
 8002958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800295a:	4618      	mov	r0, r3
 800295c:	f7fd ff3e 	bl	80007dc <__aeabi_f2d>
 8002960:	4602      	mov	r2, r0
 8002962:	460b      	mov	r3, r1
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7fd fdda 	bl	8000520 <__adddf3>
 800296c:	4602      	mov	r2, r0
 800296e:	460b      	mov	r3, r1
 8002970:	4610      	mov	r0, r2
 8002972:	4619      	mov	r1, r3
 8002974:	f7fe f83a 	bl	80009ec <__aeabi_d2f>
 8002978:	4603      	mov	r3, r0
 800297a:	4a06      	ldr	r2, [pc, #24]	; (8002994 <FOC_Interrupt+0x648>)
 800297c:	6613      	str	r3, [r2, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0;
 800297e:	4b05      	ldr	r3, [pc, #20]	; (8002994 <FOC_Interrupt+0x648>)
 8002980:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8002984:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002988:	ee67 7a87 	vmul.f32	s15, s15, s14
 800298c:	4b01      	ldr	r3, [pc, #4]	; (8002994 <FOC_Interrupt+0x648>)
 800298e:	edc3 7a17 	vstr	s15, [r3, #92]	; 0x5c
				break;
 8002992:	e061      	b.n	8002a58 <FOC_Interrupt+0x70c>
 8002994:	200002b8 	.word	0x200002b8
 8002998:	3fe00000 	.word	0x3fe00000
			case 5:
				foc.PWM_A = 0.5*foc.DC_0;
 800299c:	4b38      	ldr	r3, [pc, #224]	; (8002a80 <FOC_Interrupt+0x734>)
 800299e:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80029a2:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80029a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029aa:	4b35      	ldr	r3, [pc, #212]	; (8002a80 <FOC_Interrupt+0x734>)
 80029ac:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
				foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 80029b0:	4b33      	ldr	r3, [pc, #204]	; (8002a80 <FOC_Interrupt+0x734>)
 80029b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80029b4:	4618      	mov	r0, r3
 80029b6:	f7fd ff11 	bl	80007dc <__aeabi_f2d>
 80029ba:	f04f 0200 	mov.w	r2, #0
 80029be:	4b31      	ldr	r3, [pc, #196]	; (8002a84 <FOC_Interrupt+0x738>)
 80029c0:	f7fd fc7e 	bl	80002c0 <__aeabi_dmul>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4614      	mov	r4, r2
 80029ca:	461d      	mov	r5, r3
 80029cc:	4b2c      	ldr	r3, [pc, #176]	; (8002a80 <FOC_Interrupt+0x734>)
 80029ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029d0:	4618      	mov	r0, r3
 80029d2:	f7fd ff03 	bl	80007dc <__aeabi_f2d>
 80029d6:	4602      	mov	r2, r0
 80029d8:	460b      	mov	r3, r1
 80029da:	4620      	mov	r0, r4
 80029dc:	4629      	mov	r1, r5
 80029de:	f7fd fd9f 	bl	8000520 <__adddf3>
 80029e2:	4602      	mov	r2, r0
 80029e4:	460b      	mov	r3, r1
 80029e6:	4614      	mov	r4, r2
 80029e8:	461d      	mov	r5, r3
 80029ea:	4b25      	ldr	r3, [pc, #148]	; (8002a80 <FOC_Interrupt+0x734>)
 80029ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80029ee:	4618      	mov	r0, r3
 80029f0:	f7fd fef4 	bl	80007dc <__aeabi_f2d>
 80029f4:	4602      	mov	r2, r0
 80029f6:	460b      	mov	r3, r1
 80029f8:	4620      	mov	r0, r4
 80029fa:	4629      	mov	r1, r5
 80029fc:	f7fd fd90 	bl	8000520 <__adddf3>
 8002a00:	4602      	mov	r2, r0
 8002a02:	460b      	mov	r3, r1
 8002a04:	4610      	mov	r0, r2
 8002a06:	4619      	mov	r1, r3
 8002a08:	f7fd fff0 	bl	80009ec <__aeabi_d2f>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	4a1c      	ldr	r2, [pc, #112]	; (8002a80 <FOC_Interrupt+0x734>)
 8002a10:	6613      	str	r3, [r2, #96]	; 0x60
				foc.PWM_C = 0.5*foc.DC_0 + foc.DC_2;
 8002a12:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <FOC_Interrupt+0x734>)
 8002a14:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002a16:	4618      	mov	r0, r3
 8002a18:	f7fd fee0 	bl	80007dc <__aeabi_f2d>
 8002a1c:	f04f 0200 	mov.w	r2, #0
 8002a20:	4b18      	ldr	r3, [pc, #96]	; (8002a84 <FOC_Interrupt+0x738>)
 8002a22:	f7fd fc4d 	bl	80002c0 <__aeabi_dmul>
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4614      	mov	r4, r2
 8002a2c:	461d      	mov	r5, r3
 8002a2e:	4b14      	ldr	r3, [pc, #80]	; (8002a80 <FOC_Interrupt+0x734>)
 8002a30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7fd fed2 	bl	80007dc <__aeabi_f2d>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4620      	mov	r0, r4
 8002a3e:	4629      	mov	r1, r5
 8002a40:	f7fd fd6e 	bl	8000520 <__adddf3>
 8002a44:	4602      	mov	r2, r0
 8002a46:	460b      	mov	r3, r1
 8002a48:	4610      	mov	r0, r2
 8002a4a:	4619      	mov	r1, r3
 8002a4c:	f7fd ffce 	bl	80009ec <__aeabi_d2f>
 8002a50:	4603      	mov	r3, r0
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <FOC_Interrupt+0x734>)
 8002a54:	65d3      	str	r3, [r2, #92]	; 0x5c
				break;
 8002a56:	bf00      	nop
		}

		//	Set_PWM3(foc.PWM_A,foc.PWM_B,foc.PWM_C);

		Set_PWM3(0.25f,0.5f,0.75f);
 8002a58:	eeb6 1a08 	vmov.f32	s2, #104	; 0x3f400000  0.750
 8002a5c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8002a60:	eeb5 0a00 	vmov.f32	s0, #80	; 0x3e800000  0.250
 8002a64:	f7ff fbd2 	bl	800220c <Set_PWM3>

		/* LED off */
		HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002a6e:	4806      	ldr	r0, [pc, #24]	; (8002a88 <FOC_Interrupt+0x73c>)
 8002a70:	f002 ffae 	bl	80059d0 <HAL_GPIO_WritePin>
	}

}
 8002a74:	bf00      	nop
 8002a76:	3708      	adds	r7, #8
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	ecbd 8b02 	vpop	{d8}
 8002a7e:	bdb0      	pop	{r4, r5, r7, pc}
 8002a80:	200002b8 	.word	0x200002b8
 8002a84:	3fe00000 	.word	0x3fe00000
 8002a88:	48000400 	.word	0x48000400

08002a8c <CAN_Interrupt>:
void  CAN_Interrupt(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0
//	{
//		// unpack and update target values
//	}
//
//	can.timeout = 0;	// reset timeout timer
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a9e:	b672      	cpsid	i
}
 8002aa0:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002aa2:	e7fe      	b.n	8002aa2 <Error_Handler+0x8>

08002aa4 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8002aa4:	b580      	push	{r7, lr}
 8002aa6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8002aa8:	4b1b      	ldr	r3, [pc, #108]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002aaa:	4a1c      	ldr	r2, [pc, #112]	; (8002b1c <MX_SPI3_Init+0x78>)
 8002aac:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8002aae:	4b1a      	ldr	r3, [pc, #104]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ab0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8002ab4:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 8002ab6:	4b18      	ldr	r3, [pc, #96]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ab8:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002abc:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8002abe:	4b16      	ldr	r3, [pc, #88]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ac0:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8002ac4:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 8002ac6:	4b14      	ldr	r3, [pc, #80]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ac8:	2200      	movs	r2, #0
 8002aca:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8002acc:	4b12      	ldr	r3, [pc, #72]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ace:	2201      	movs	r2, #1
 8002ad0:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8002ad2:	4b11      	ldr	r3, [pc, #68]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ad4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ad8:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002ada:	4b0f      	ldr	r3, [pc, #60]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002adc:	2220      	movs	r2, #32
 8002ade:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002ae6:	4b0c      	ldr	r3, [pc, #48]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002aec:	4b0a      	ldr	r3, [pc, #40]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8002af2:	4b09      	ldr	r3, [pc, #36]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002af4:	2207      	movs	r2, #7
 8002af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002af8:	4b07      	ldr	r3, [pc, #28]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002afa:	2200      	movs	r2, #0
 8002afc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8002afe:	4b06      	ldr	r3, [pc, #24]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002b00:	2200      	movs	r2, #0
 8002b02:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002b04:	4804      	ldr	r0, [pc, #16]	; (8002b18 <MX_SPI3_Init+0x74>)
 8002b06:	f003 ff3f 	bl	8006988 <HAL_SPI_Init>
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d001      	beq.n	8002b14 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 8002b10:	f7ff ffc3 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002b14:	bf00      	nop
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	20000404 	.word	0x20000404
 8002b1c:	40003c00 	.word	0x40003c00

08002b20 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b08a      	sub	sp, #40	; 0x28
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b28:	f107 0314 	add.w	r3, r7, #20
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	601a      	str	r2, [r3, #0]
 8002b30:	605a      	str	r2, [r3, #4]
 8002b32:	609a      	str	r2, [r3, #8]
 8002b34:	60da      	str	r2, [r3, #12]
 8002b36:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4a25      	ldr	r2, [pc, #148]	; (8002bd4 <HAL_SPI_MspInit+0xb4>)
 8002b3e:	4293      	cmp	r3, r2
 8002b40:	d144      	bne.n	8002bcc <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8002b42:	4b25      	ldr	r3, [pc, #148]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b46:	4a24      	ldr	r2, [pc, #144]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b48:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b4c:	6593      	str	r3, [r2, #88]	; 0x58
 8002b4e:	4b22      	ldr	r3, [pc, #136]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002b52:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b56:	613b      	str	r3, [r7, #16]
 8002b58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b5a:	4b1f      	ldr	r3, [pc, #124]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b5e:	4a1e      	ldr	r2, [pc, #120]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b60:	f043 0304 	orr.w	r3, r3, #4
 8002b64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b66:	4b1c      	ldr	r3, [pc, #112]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b6a:	f003 0304 	and.w	r3, r3, #4
 8002b6e:	60fb      	str	r3, [r7, #12]
 8002b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002b72:	4b19      	ldr	r3, [pc, #100]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b76:	4a18      	ldr	r2, [pc, #96]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b78:	f043 0302 	orr.w	r3, r3, #2
 8002b7c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002b7e:	4b16      	ldr	r3, [pc, #88]	; (8002bd8 <HAL_SPI_MspInit+0xb8>)
 8002b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b82:	f003 0302 	and.w	r3, r3, #2
 8002b86:	60bb      	str	r3, [r7, #8]
 8002b88:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 8002b8a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b94:	2300      	movs	r3, #0
 8002b96:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002b9c:	2306      	movs	r3, #6
 8002b9e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8002ba0:	f107 0314 	add.w	r3, r7, #20
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	480d      	ldr	r0, [pc, #52]	; (8002bdc <HAL_SPI_MspInit+0xbc>)
 8002ba8:	f002 fd78 	bl	800569c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8002bac:	2320      	movs	r3, #32
 8002bae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb0:	2302      	movs	r3, #2
 8002bb2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2300      	movs	r3, #0
 8002bba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8002bbc:	2306      	movs	r3, #6
 8002bbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	4806      	ldr	r0, [pc, #24]	; (8002be0 <HAL_SPI_MspInit+0xc0>)
 8002bc8:	f002 fd68 	bl	800569c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 8002bcc:	bf00      	nop
 8002bce:	3728      	adds	r7, #40	; 0x28
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40003c00 	.word	0x40003c00
 8002bd8:	40021000 	.word	0x40021000
 8002bdc:	48000800 	.word	0x48000800
 8002be0:	48000400 	.word	0x48000400

08002be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bea:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_MspInit+0x44>)
 8002bec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bee:	4a0e      	ldr	r2, [pc, #56]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf0:	f043 0301 	orr.w	r3, r3, #1
 8002bf4:	6613      	str	r3, [r2, #96]	; 0x60
 8002bf6:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_MspInit+0x44>)
 8002bf8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bfa:	f003 0301 	and.w	r3, r3, #1
 8002bfe:	607b      	str	r3, [r7, #4]
 8002c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002c02:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_MspInit+0x44>)
 8002c04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c06:	4a08      	ldr	r2, [pc, #32]	; (8002c28 <HAL_MspInit+0x44>)
 8002c08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c0c:	6593      	str	r3, [r2, #88]	; 0x58
 8002c0e:	4b06      	ldr	r3, [pc, #24]	; (8002c28 <HAL_MspInit+0x44>)
 8002c10:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c16:	603b      	str	r3, [r7, #0]
 8002c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002c1a:	f002 ffb9 	bl	8005b90 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002c1e:	bf00      	nop
 8002c20:	3708      	adds	r7, #8
 8002c22:	46bd      	mov	sp, r7
 8002c24:	bd80      	pop	{r7, pc}
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000

08002c2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c2c:	b480      	push	{r7}
 8002c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c30:	e7fe      	b.n	8002c30 <NMI_Handler+0x4>

08002c32 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c36:	e7fe      	b.n	8002c36 <HardFault_Handler+0x4>

08002c38 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c3c:	e7fe      	b.n	8002c3c <MemManage_Handler+0x4>

08002c3e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c3e:	b480      	push	{r7}
 8002c40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c42:	e7fe      	b.n	8002c42 <BusFault_Handler+0x4>

08002c44 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c44:	b480      	push	{r7}
 8002c46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c48:	e7fe      	b.n	8002c48 <UsageFault_Handler+0x4>

08002c4a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c4a:	b480      	push	{r7}
 8002c4c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4e:	bf00      	nop
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr

08002c58 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c64:	4770      	bx	lr

08002c66 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c66:	b480      	push	{r7}
 8002c68:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c6a:	bf00      	nop
 8002c6c:	46bd      	mov	sp, r7
 8002c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c72:	4770      	bx	lr

08002c74 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c74:	b580      	push	{r7, lr}
 8002c76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c78:	f000 fa34 	bl	80030e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c7c:	bf00      	nop
 8002c7e:	bd80      	pop	{r7, pc}

08002c80 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002c84:	4802      	ldr	r0, [pc, #8]	; (8002c90 <DMA1_Channel1_IRQHandler+0x10>)
 8002c86:	f002 f85c 	bl	8004d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002c8a:	bf00      	nop
 8002c8c:	bd80      	pop	{r7, pc}
 8002c8e:	bf00      	nop
 8002c90:	2000017c 	.word	0x2000017c

08002c94 <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8002c98:	4802      	ldr	r0, [pc, #8]	; (8002ca4 <DMA1_Channel2_IRQHandler+0x10>)
 8002c9a:	f002 f852 	bl	8004d42 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8002c9e:	bf00      	nop
 8002ca0:	bd80      	pop	{r7, pc}
 8002ca2:	bf00      	nop
 8002ca4:	200001dc 	.word	0x200001dc

08002ca8 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8002ca8:	b580      	push	{r7, lr}
 8002caa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8002cac:	4803      	ldr	r0, [pc, #12]	; (8002cbc <FDCAN1_IT0_IRQHandler+0x14>)
 8002cae:	f002 faf1 	bl	8005294 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_Interrupt();
 8002cb2:	f7ff feeb 	bl	8002a8c <CAN_Interrupt>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	2000023c 	.word	0x2000023c

08002cc0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IF_A_Pin);
 8002cc4:	2020      	movs	r0, #32
 8002cc6:	f002 fe9b 	bl	8005a00 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ENC_Interrupt(IF_B_GPIO_Port, IF_B_Pin);
 8002cca:	2140      	movs	r1, #64	; 0x40
 8002ccc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002cd0:	f7ff fa62 	bl	8002198 <ENC_Interrupt>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002cd4:	bf00      	nop
 8002cd6:	bd80      	pop	{r7, pc}

08002cd8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002cdc:	4803      	ldr	r0, [pc, #12]	; (8002cec <TIM2_IRQHandler+0x14>)
 8002cde:	f004 ff8f 	bl	8007c00 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */
  FOC_Interrupt();
 8002ce2:	f7ff fb33 	bl	800234c <FOC_Interrupt>
  /* USER CODE END TIM2_IRQn 1 */
}
 8002ce6:	bf00      	nop
 8002ce8:	bd80      	pop	{r7, pc}
 8002cea:	bf00      	nop
 8002cec:	20000468 	.word	0x20000468

08002cf0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	60f8      	str	r0, [r7, #12]
 8002cf8:	60b9      	str	r1, [r7, #8]
 8002cfa:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	617b      	str	r3, [r7, #20]
 8002d00:	e00a      	b.n	8002d18 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d02:	f3af 8000 	nop.w
 8002d06:	4601      	mov	r1, r0
 8002d08:	68bb      	ldr	r3, [r7, #8]
 8002d0a:	1c5a      	adds	r2, r3, #1
 8002d0c:	60ba      	str	r2, [r7, #8]
 8002d0e:	b2ca      	uxtb	r2, r1
 8002d10:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d12:	697b      	ldr	r3, [r7, #20]
 8002d14:	3301      	adds	r3, #1
 8002d16:	617b      	str	r3, [r7, #20]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	dbf0      	blt.n	8002d02 <_read+0x12>
	}

return len;
 8002d20:	687b      	ldr	r3, [r7, #4]
}
 8002d22:	4618      	mov	r0, r3
 8002d24:	3718      	adds	r7, #24
 8002d26:	46bd      	mov	sp, r7
 8002d28:	bd80      	pop	{r7, pc}

08002d2a <_close>:
	}
	return len;
}

int _close(int file)
{
 8002d2a:	b480      	push	{r7}
 8002d2c:	b083      	sub	sp, #12
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	6078      	str	r0, [r7, #4]
	return -1;
 8002d32:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d36:	4618      	mov	r0, r3
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
 8002d4a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002d4c:	683b      	ldr	r3, [r7, #0]
 8002d4e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002d52:	605a      	str	r2, [r3, #4]
	return 0;
 8002d54:	2300      	movs	r3, #0
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	370c      	adds	r7, #12
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr

08002d62 <_isatty>:

int _isatty(int file)
{
 8002d62:	b480      	push	{r7}
 8002d64:	b083      	sub	sp, #12
 8002d66:	af00      	add	r7, sp, #0
 8002d68:	6078      	str	r0, [r7, #4]
	return 1;
 8002d6a:	2301      	movs	r3, #1
}
 8002d6c:	4618      	mov	r0, r3
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b085      	sub	sp, #20
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	60f8      	str	r0, [r7, #12]
 8002d80:	60b9      	str	r1, [r7, #8]
 8002d82:	607a      	str	r2, [r7, #4]
	return 0;
 8002d84:	2300      	movs	r3, #0
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	3714      	adds	r7, #20
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
	...

08002d94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b086      	sub	sp, #24
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d9c:	4a14      	ldr	r2, [pc, #80]	; (8002df0 <_sbrk+0x5c>)
 8002d9e:	4b15      	ldr	r3, [pc, #84]	; (8002df4 <_sbrk+0x60>)
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002da4:	697b      	ldr	r3, [r7, #20]
 8002da6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002da8:	4b13      	ldr	r3, [pc, #76]	; (8002df8 <_sbrk+0x64>)
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d102      	bne.n	8002db6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002db0:	4b11      	ldr	r3, [pc, #68]	; (8002df8 <_sbrk+0x64>)
 8002db2:	4a12      	ldr	r2, [pc, #72]	; (8002dfc <_sbrk+0x68>)
 8002db4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002db6:	4b10      	ldr	r3, [pc, #64]	; (8002df8 <_sbrk+0x64>)
 8002db8:	681a      	ldr	r2, [r3, #0]
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	4413      	add	r3, r2
 8002dbe:	693a      	ldr	r2, [r7, #16]
 8002dc0:	429a      	cmp	r2, r3
 8002dc2:	d207      	bcs.n	8002dd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002dc4:	f005 ffec 	bl	8008da0 <__errno>
 8002dc8:	4603      	mov	r3, r0
 8002dca:	220c      	movs	r2, #12
 8002dcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002dce:	f04f 33ff 	mov.w	r3, #4294967295
 8002dd2:	e009      	b.n	8002de8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002dd4:	4b08      	ldr	r3, [pc, #32]	; (8002df8 <_sbrk+0x64>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002dda:	4b07      	ldr	r3, [pc, #28]	; (8002df8 <_sbrk+0x64>)
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4413      	add	r3, r2
 8002de2:	4a05      	ldr	r2, [pc, #20]	; (8002df8 <_sbrk+0x64>)
 8002de4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002de6:	68fb      	ldr	r3, [r7, #12]
}
 8002de8:	4618      	mov	r0, r3
 8002dea:	3718      	adds	r7, #24
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bd80      	pop	{r7, pc}
 8002df0:	20008000 	.word	0x20008000
 8002df4:	00000400 	.word	0x00000400
 8002df8:	20000098 	.word	0x20000098
 8002dfc:	200004c8 	.word	0x200004c8

08002e00 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002e04:	4b06      	ldr	r3, [pc, #24]	; (8002e20 <SystemInit+0x20>)
 8002e06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e0a:	4a05      	ldr	r2, [pc, #20]	; (8002e20 <SystemInit+0x20>)
 8002e0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	e000ed00 	.word	0xe000ed00

08002e24 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002e2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e2e:	2200      	movs	r2, #0
 8002e30:	601a      	str	r2, [r3, #0]
 8002e32:	605a      	str	r2, [r3, #4]
 8002e34:	609a      	str	r2, [r3, #8]
 8002e36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e38:	f107 031c 	add.w	r3, r7, #28
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]
 8002e40:	605a      	str	r2, [r3, #4]
 8002e42:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002e44:	463b      	mov	r3, r7
 8002e46:	2200      	movs	r2, #0
 8002e48:	601a      	str	r2, [r3, #0]
 8002e4a:	605a      	str	r2, [r3, #4]
 8002e4c:	609a      	str	r2, [r3, #8]
 8002e4e:	60da      	str	r2, [r3, #12]
 8002e50:	611a      	str	r2, [r3, #16]
 8002e52:	615a      	str	r2, [r3, #20]
 8002e54:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002e56:	4b38      	ldr	r3, [pc, #224]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e58:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002e5c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002e5e:	4b36      	ldr	r3, [pc, #216]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e60:	2200      	movs	r2, #0
 8002e62:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002e64:	4b34      	ldr	r3, [pc, #208]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e66:	2220      	movs	r2, #32
 8002e68:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2124;
 8002e6a:	4b33      	ldr	r3, [pc, #204]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e6c:	f640 024c 	movw	r2, #2124	; 0x84c
 8002e70:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002e72:	4b31      	ldr	r3, [pc, #196]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e74:	2200      	movs	r2, #0
 8002e76:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e78:	4b2f      	ldr	r3, [pc, #188]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002e7e:	482e      	ldr	r0, [pc, #184]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e80:	f004 fc9a 	bl	80077b8 <HAL_TIM_Base_Init>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d001      	beq.n	8002e8e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8002e8a:	f7ff fe06 	bl	8002a9a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002e8e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002e92:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8002e94:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002e98:	4619      	mov	r1, r3
 8002e9a:	4827      	ldr	r0, [pc, #156]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002e9c:	f005 f944 	bl	8008128 <HAL_TIM_ConfigClockSource>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8002ea6:	f7ff fdf8 	bl	8002a9a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002eaa:	4823      	ldr	r0, [pc, #140]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002eac:	f004 fd46 	bl	800793c <HAL_TIM_PWM_Init>
 8002eb0:	4603      	mov	r3, r0
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d001      	beq.n	8002eba <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8002eb6:	f7ff fdf0 	bl	8002a9a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002ec2:	f107 031c 	add.w	r3, r7, #28
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	481b      	ldr	r0, [pc, #108]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002eca:	f005 fea1 	bl	8008c10 <HAL_TIMEx_MasterConfigSynchronization>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d001      	beq.n	8002ed8 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002ed4:	f7ff fde1 	bl	8002a9a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002ed8:	2370      	movs	r3, #112	; 0x70
 8002eda:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002edc:	2300      	movs	r3, #0
 8002ede:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002ee4:	2300      	movs	r3, #0
 8002ee6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002ee8:	463b      	mov	r3, r7
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	4812      	ldr	r0, [pc, #72]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002ef0:	f005 f806 	bl	8007f00 <HAL_TIM_PWM_ConfigChannel>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002efa:	f7ff fdce 	bl	8002a9a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8002efe:	463b      	mov	r3, r7
 8002f00:	2208      	movs	r2, #8
 8002f02:	4619      	mov	r1, r3
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002f06:	f004 fffb 	bl	8007f00 <HAL_TIM_PWM_ConfigChannel>
 8002f0a:	4603      	mov	r3, r0
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	d001      	beq.n	8002f14 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 8002f10:	f7ff fdc3 	bl	8002a9a <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002f14:	463b      	mov	r3, r7
 8002f16:	220c      	movs	r2, #12
 8002f18:	4619      	mov	r1, r3
 8002f1a:	4807      	ldr	r0, [pc, #28]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002f1c:	f004 fff0 	bl	8007f00 <HAL_TIM_PWM_ConfigChannel>
 8002f20:	4603      	mov	r3, r0
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002f26:	f7ff fdb8 	bl	8002a9a <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002f2a:	4803      	ldr	r0, [pc, #12]	; (8002f38 <MX_TIM2_Init+0x114>)
 8002f2c:	f000 f82a 	bl	8002f84 <HAL_TIM_MspPostInit>

}
 8002f30:	bf00      	nop
 8002f32:	3738      	adds	r7, #56	; 0x38
 8002f34:	46bd      	mov	sp, r7
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	20000468 	.word	0x20000468

08002f3c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002f3c:	b580      	push	{r7, lr}
 8002f3e:	b084      	sub	sp, #16
 8002f40:	af00      	add	r7, sp, #0
 8002f42:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f4c:	d113      	bne.n	8002f76 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002f4e:	4b0c      	ldr	r3, [pc, #48]	; (8002f80 <HAL_TIM_Base_MspInit+0x44>)
 8002f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f52:	4a0b      	ldr	r2, [pc, #44]	; (8002f80 <HAL_TIM_Base_MspInit+0x44>)
 8002f54:	f043 0301 	orr.w	r3, r3, #1
 8002f58:	6593      	str	r3, [r2, #88]	; 0x58
 8002f5a:	4b09      	ldr	r3, [pc, #36]	; (8002f80 <HAL_TIM_Base_MspInit+0x44>)
 8002f5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002f5e:	f003 0301 	and.w	r3, r3, #1
 8002f62:	60fb      	str	r3, [r7, #12]
 8002f64:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 2, 0);
 8002f66:	2200      	movs	r2, #0
 8002f68:	2102      	movs	r1, #2
 8002f6a:	201c      	movs	r0, #28
 8002f6c:	f001 fd91 	bl	8004a92 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002f70:	201c      	movs	r0, #28
 8002f72:	f001 fda8 	bl	8004ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002f76:	bf00      	nop
 8002f78:	3710      	adds	r7, #16
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
 8002f7e:	bf00      	nop
 8002f80:	40021000 	.word	0x40021000

08002f84 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b088      	sub	sp, #32
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002f8c:	f107 030c 	add.w	r3, r7, #12
 8002f90:	2200      	movs	r2, #0
 8002f92:	601a      	str	r2, [r3, #0]
 8002f94:	605a      	str	r2, [r3, #4]
 8002f96:	609a      	str	r2, [r3, #8]
 8002f98:	60da      	str	r2, [r3, #12]
 8002f9a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa4:	d11c      	bne.n	8002fe0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b10      	ldr	r3, [pc, #64]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a0f      	ldr	r2, [pc, #60]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb2:	4b0d      	ldr	r3, [pc, #52]	; (8002fe8 <HAL_TIM_MspPostInit+0x64>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	60bb      	str	r3, [r7, #8]
 8002fbc:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_C_Pin|PWM_B_Pin|PWM_A_Pin;
 8002fbe:	230d      	movs	r3, #13
 8002fc0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fc2:	2302      	movs	r3, #2
 8002fc4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fd2:	f107 030c 	add.w	r3, r7, #12
 8002fd6:	4619      	mov	r1, r3
 8002fd8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fdc:	f002 fb5e 	bl	800569c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002fe0:	bf00      	nop
 8002fe2:	3720      	adds	r7, #32
 8002fe4:	46bd      	mov	sp, r7
 8002fe6:	bd80      	pop	{r7, pc}
 8002fe8:	40021000 	.word	0x40021000

08002fec <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002fec:	480d      	ldr	r0, [pc, #52]	; (8003024 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002fee:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ff0:	480d      	ldr	r0, [pc, #52]	; (8003028 <LoopForever+0x6>)
  ldr r1, =_edata
 8002ff2:	490e      	ldr	r1, [pc, #56]	; (800302c <LoopForever+0xa>)
  ldr r2, =_sidata
 8002ff4:	4a0e      	ldr	r2, [pc, #56]	; (8003030 <LoopForever+0xe>)
  movs r3, #0
 8002ff6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002ff8:	e002      	b.n	8003000 <LoopCopyDataInit>

08002ffa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002ffa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ffc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ffe:	3304      	adds	r3, #4

08003000 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003000:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003002:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003004:	d3f9      	bcc.n	8002ffa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003006:	4a0b      	ldr	r2, [pc, #44]	; (8003034 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003008:	4c0b      	ldr	r4, [pc, #44]	; (8003038 <LoopForever+0x16>)
  movs r3, #0
 800300a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800300c:	e001      	b.n	8003012 <LoopFillZerobss>

0800300e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800300e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003010:	3204      	adds	r2, #4

08003012 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003012:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003014:	d3fb      	bcc.n	800300e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003016:	f7ff fef3 	bl	8002e00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800301a:	f005 fec7 	bl	8008dac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800301e:	f7fe f901 	bl	8001224 <main>

08003022 <LoopForever>:

LoopForever:
    b LoopForever
 8003022:	e7fe      	b.n	8003022 <LoopForever>
  ldr   r0, =_estack
 8003024:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8003028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800302c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8003030:	0800a918 	.word	0x0800a918
  ldr r2, =_sbss
 8003034:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003038:	200004c8 	.word	0x200004c8

0800303c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800303c:	e7fe      	b.n	800303c <ADC1_2_IRQHandler>

0800303e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003044:	2300      	movs	r3, #0
 8003046:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003048:	2003      	movs	r0, #3
 800304a:	f001 fd17 	bl	8004a7c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800304e:	2000      	movs	r0, #0
 8003050:	f000 f80e 	bl	8003070 <HAL_InitTick>
 8003054:	4603      	mov	r3, r0
 8003056:	2b00      	cmp	r3, #0
 8003058:	d002      	beq.n	8003060 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	71fb      	strb	r3, [r7, #7]
 800305e:	e001      	b.n	8003064 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003060:	f7ff fdc0 	bl	8002be4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003064:	79fb      	ldrb	r3, [r7, #7]

}
 8003066:	4618      	mov	r0, r3
 8003068:	3708      	adds	r7, #8
 800306a:	46bd      	mov	sp, r7
 800306c:	bd80      	pop	{r7, pc}
	...

08003070 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003070:	b580      	push	{r7, lr}
 8003072:	b084      	sub	sp, #16
 8003074:	af00      	add	r7, sp, #0
 8003076:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8003078:	2300      	movs	r3, #0
 800307a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800307c:	4b16      	ldr	r3, [pc, #88]	; (80030d8 <HAL_InitTick+0x68>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d022      	beq.n	80030ca <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8003084:	4b15      	ldr	r3, [pc, #84]	; (80030dc <HAL_InitTick+0x6c>)
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	4b13      	ldr	r3, [pc, #76]	; (80030d8 <HAL_InitTick+0x68>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8003090:	fbb1 f3f3 	udiv	r3, r1, r3
 8003094:	fbb2 f3f3 	udiv	r3, r2, r3
 8003098:	4618      	mov	r0, r3
 800309a:	f001 fd22 	bl	8004ae2 <HAL_SYSTICK_Config>
 800309e:	4603      	mov	r3, r0
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d10f      	bne.n	80030c4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	2b0f      	cmp	r3, #15
 80030a8:	d809      	bhi.n	80030be <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030aa:	2200      	movs	r2, #0
 80030ac:	6879      	ldr	r1, [r7, #4]
 80030ae:	f04f 30ff 	mov.w	r0, #4294967295
 80030b2:	f001 fcee 	bl	8004a92 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80030b6:	4a0a      	ldr	r2, [pc, #40]	; (80030e0 <HAL_InitTick+0x70>)
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	6013      	str	r3, [r2, #0]
 80030bc:	e007      	b.n	80030ce <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	73fb      	strb	r3, [r7, #15]
 80030c2:	e004      	b.n	80030ce <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80030c4:	2301      	movs	r3, #1
 80030c6:	73fb      	strb	r3, [r7, #15]
 80030c8:	e001      	b.n	80030ce <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80030ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80030d0:	4618      	mov	r0, r3
 80030d2:	3710      	adds	r7, #16
 80030d4:	46bd      	mov	sp, r7
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	20000008 	.word	0x20000008
 80030dc:	20000000 	.word	0x20000000
 80030e0:	20000004 	.word	0x20000004

080030e4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80030e4:	b480      	push	{r7}
 80030e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80030e8:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_IncTick+0x1c>)
 80030ea:	681a      	ldr	r2, [r3, #0]
 80030ec:	4b05      	ldr	r3, [pc, #20]	; (8003104 <HAL_IncTick+0x20>)
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4413      	add	r3, r2
 80030f2:	4a03      	ldr	r2, [pc, #12]	; (8003100 <HAL_IncTick+0x1c>)
 80030f4:	6013      	str	r3, [r2, #0]
}
 80030f6:	bf00      	nop
 80030f8:	46bd      	mov	sp, r7
 80030fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030fe:	4770      	bx	lr
 8003100:	200004b4 	.word	0x200004b4
 8003104:	20000008 	.word	0x20000008

08003108 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003108:	b480      	push	{r7}
 800310a:	af00      	add	r7, sp, #0
  return uwTick;
 800310c:	4b03      	ldr	r3, [pc, #12]	; (800311c <HAL_GetTick+0x14>)
 800310e:	681b      	ldr	r3, [r3, #0]
}
 8003110:	4618      	mov	r0, r3
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
 800311a:	bf00      	nop
 800311c:	200004b4 	.word	0x200004b4

08003120 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
 8003126:	6078      	str	r0, [r7, #4]
 8003128:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	689b      	ldr	r3, [r3, #8]
 800312e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	431a      	orrs	r2, r3
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	609a      	str	r2, [r3, #8]
}
 800313a:	bf00      	nop
 800313c:	370c      	adds	r7, #12
 800313e:	46bd      	mov	sp, r7
 8003140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003144:	4770      	bx	lr

08003146 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003146:	b480      	push	{r7}
 8003148:	b083      	sub	sp, #12
 800314a:	af00      	add	r7, sp, #0
 800314c:	6078      	str	r0, [r7, #4]
 800314e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003158:	683b      	ldr	r3, [r7, #0]
 800315a:	431a      	orrs	r2, r3
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	609a      	str	r2, [r3, #8]
}
 8003160:	bf00      	nop
 8003162:	370c      	adds	r7, #12
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 800316c:	b480      	push	{r7}
 800316e:	b083      	sub	sp, #12
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	689b      	ldr	r3, [r3, #8]
 8003178:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 800317c:	4618      	mov	r0, r3
 800317e:	370c      	adds	r7, #12
 8003180:	46bd      	mov	sp, r7
 8003182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003186:	4770      	bx	lr

08003188 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003188:	b480      	push	{r7}
 800318a:	b087      	sub	sp, #28
 800318c:	af00      	add	r7, sp, #0
 800318e:	60f8      	str	r0, [r7, #12]
 8003190:	60b9      	str	r1, [r7, #8]
 8003192:	607a      	str	r2, [r7, #4]
 8003194:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	3360      	adds	r3, #96	; 0x60
 800319a:	461a      	mov	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	009b      	lsls	r3, r3, #2
 80031a0:	4413      	add	r3, r2
 80031a2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	681a      	ldr	r2, [r3, #0]
 80031a8:	4b08      	ldr	r3, [pc, #32]	; (80031cc <LL_ADC_SetOffset+0x44>)
 80031aa:	4013      	ands	r3, r2
 80031ac:	687a      	ldr	r2, [r7, #4]
 80031ae:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80031b2:	683a      	ldr	r2, [r7, #0]
 80031b4:	430a      	orrs	r2, r1
 80031b6:	4313      	orrs	r3, r2
 80031b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80031c0:	bf00      	nop
 80031c2:	371c      	adds	r7, #28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	03fff000 	.word	0x03fff000

080031d0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80031d0:	b480      	push	{r7}
 80031d2:	b085      	sub	sp, #20
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	6078      	str	r0, [r7, #4]
 80031d8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	3360      	adds	r3, #96	; 0x60
 80031de:	461a      	mov	r2, r3
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	009b      	lsls	r3, r3, #2
 80031e4:	4413      	add	r3, r2
 80031e6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3714      	adds	r7, #20
 80031f4:	46bd      	mov	sp, r7
 80031f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fa:	4770      	bx	lr

080031fc <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b087      	sub	sp, #28
 8003200:	af00      	add	r7, sp, #0
 8003202:	60f8      	str	r0, [r7, #12]
 8003204:	60b9      	str	r1, [r7, #8]
 8003206:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	3360      	adds	r3, #96	; 0x60
 800320c:	461a      	mov	r2, r3
 800320e:	68bb      	ldr	r3, [r7, #8]
 8003210:	009b      	lsls	r3, r3, #2
 8003212:	4413      	add	r3, r2
 8003214:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003216:	697b      	ldr	r3, [r7, #20]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	431a      	orrs	r2, r3
 8003222:	697b      	ldr	r3, [r7, #20]
 8003224:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003226:	bf00      	nop
 8003228:	371c      	adds	r7, #28
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr

08003232 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8003232:	b480      	push	{r7}
 8003234:	b087      	sub	sp, #28
 8003236:	af00      	add	r7, sp, #0
 8003238:	60f8      	str	r0, [r7, #12]
 800323a:	60b9      	str	r1, [r7, #8]
 800323c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	3360      	adds	r3, #96	; 0x60
 8003242:	461a      	mov	r2, r3
 8003244:	68bb      	ldr	r3, [r7, #8]
 8003246:	009b      	lsls	r3, r3, #2
 8003248:	4413      	add	r3, r2
 800324a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800324c:	697b      	ldr	r3, [r7, #20]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	431a      	orrs	r2, r3
 8003258:	697b      	ldr	r3, [r7, #20]
 800325a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 800325c:	bf00      	nop
 800325e:	371c      	adds	r7, #28
 8003260:	46bd      	mov	sp, r7
 8003262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003266:	4770      	bx	lr

08003268 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8003268:	b480      	push	{r7}
 800326a:	b087      	sub	sp, #28
 800326c:	af00      	add	r7, sp, #0
 800326e:	60f8      	str	r0, [r7, #12]
 8003270:	60b9      	str	r1, [r7, #8]
 8003272:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	3360      	adds	r3, #96	; 0x60
 8003278:	461a      	mov	r2, r3
 800327a:	68bb      	ldr	r3, [r7, #8]
 800327c:	009b      	lsls	r3, r3, #2
 800327e:	4413      	add	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	431a      	orrs	r2, r3
 800328e:	697b      	ldr	r3, [r7, #20]
 8003290:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8003292:	bf00      	nop
 8003294:	371c      	adds	r7, #28
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	695b      	ldr	r3, [r3, #20]
 80032ac:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	431a      	orrs	r2, r3
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	615a      	str	r2, [r3, #20]
}
 80032b8:	bf00      	nop
 80032ba:	370c      	adds	r7, #12
 80032bc:	46bd      	mov	sp, r7
 80032be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c2:	4770      	bx	lr

080032c4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80032c4:	b480      	push	{r7}
 80032c6:	b083      	sub	sp, #12
 80032c8:	af00      	add	r7, sp, #0
 80032ca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	68db      	ldr	r3, [r3, #12]
 80032d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80032d8:	2301      	movs	r3, #1
 80032da:	e000      	b.n	80032de <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80032dc:	2300      	movs	r3, #0
}
 80032de:	4618      	mov	r0, r3
 80032e0:	370c      	adds	r7, #12
 80032e2:	46bd      	mov	sp, r7
 80032e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e8:	4770      	bx	lr

080032ea <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80032ea:	b480      	push	{r7}
 80032ec:	b087      	sub	sp, #28
 80032ee:	af00      	add	r7, sp, #0
 80032f0:	60f8      	str	r0, [r7, #12]
 80032f2:	60b9      	str	r1, [r7, #8]
 80032f4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	3330      	adds	r3, #48	; 0x30
 80032fa:	461a      	mov	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	0a1b      	lsrs	r3, r3, #8
 8003300:	009b      	lsls	r3, r3, #2
 8003302:	f003 030c 	and.w	r3, r3, #12
 8003306:	4413      	add	r3, r2
 8003308:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800330a:	697b      	ldr	r3, [r7, #20]
 800330c:	681a      	ldr	r2, [r3, #0]
 800330e:	68bb      	ldr	r3, [r7, #8]
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	211f      	movs	r1, #31
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	43db      	mvns	r3, r3
 800331c:	401a      	ands	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	0e9b      	lsrs	r3, r3, #26
 8003322:	f003 011f 	and.w	r1, r3, #31
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	f003 031f 	and.w	r3, r3, #31
 800332c:	fa01 f303 	lsl.w	r3, r1, r3
 8003330:	431a      	orrs	r2, r3
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003336:	bf00      	nop
 8003338:	371c      	adds	r7, #28
 800333a:	46bd      	mov	sp, r7
 800333c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003340:	4770      	bx	lr

08003342 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003342:	b480      	push	{r7}
 8003344:	b087      	sub	sp, #28
 8003346:	af00      	add	r7, sp, #0
 8003348:	60f8      	str	r0, [r7, #12]
 800334a:	60b9      	str	r1, [r7, #8]
 800334c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	3314      	adds	r3, #20
 8003352:	461a      	mov	r2, r3
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	0e5b      	lsrs	r3, r3, #25
 8003358:	009b      	lsls	r3, r3, #2
 800335a:	f003 0304 	and.w	r3, r3, #4
 800335e:	4413      	add	r3, r2
 8003360:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	681a      	ldr	r2, [r3, #0]
 8003366:	68bb      	ldr	r3, [r7, #8]
 8003368:	0d1b      	lsrs	r3, r3, #20
 800336a:	f003 031f 	and.w	r3, r3, #31
 800336e:	2107      	movs	r1, #7
 8003370:	fa01 f303 	lsl.w	r3, r1, r3
 8003374:	43db      	mvns	r3, r3
 8003376:	401a      	ands	r2, r3
 8003378:	68bb      	ldr	r3, [r7, #8]
 800337a:	0d1b      	lsrs	r3, r3, #20
 800337c:	f003 031f 	and.w	r3, r3, #31
 8003380:	6879      	ldr	r1, [r7, #4]
 8003382:	fa01 f303 	lsl.w	r3, r1, r3
 8003386:	431a      	orrs	r2, r3
 8003388:	697b      	ldr	r3, [r7, #20]
 800338a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800338c:	bf00      	nop
 800338e:	371c      	adds	r7, #28
 8003390:	46bd      	mov	sp, r7
 8003392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003396:	4770      	bx	lr

08003398 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	60f8      	str	r0, [r7, #12]
 80033a0:	60b9      	str	r1, [r7, #8]
 80033a2:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a0f      	ldr	r2, [pc, #60]	; (80033e4 <LL_ADC_SetChannelSingleDiff+0x4c>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d10a      	bne.n	80033c2 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033b2:	68bb      	ldr	r3, [r7, #8]
 80033b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033b8:	431a      	orrs	r2, r3
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80033c0:	e00a      	b.n	80033d8 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80033c8:	68bb      	ldr	r3, [r7, #8]
 80033ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ce:	43db      	mvns	r3, r3
 80033d0:	401a      	ands	r2, r3
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80033d8:	bf00      	nop
 80033da:	3714      	adds	r7, #20
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	407f0000 	.word	0x407f0000

080033e8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 031f 	and.w	r3, r3, #31
}
 80033f8:	4618      	mov	r0, r3
 80033fa:	370c      	adds	r7, #12
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003404:	b480      	push	{r7}
 8003406:	b083      	sub	sp, #12
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	689b      	ldr	r3, [r3, #8]
 8003410:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8003414:	4618      	mov	r0, r3
 8003416:	370c      	adds	r7, #12
 8003418:	46bd      	mov	sp, r7
 800341a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800341e:	4770      	bx	lr

08003420 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003420:	b480      	push	{r7}
 8003422:	b083      	sub	sp, #12
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003430:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003434:	687a      	ldr	r2, [r7, #4]
 8003436:	6093      	str	r3, [r2, #8]
}
 8003438:	bf00      	nop
 800343a:	370c      	adds	r7, #12
 800343c:	46bd      	mov	sp, r7
 800343e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003442:	4770      	bx	lr

08003444 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003444:	b480      	push	{r7}
 8003446:	b083      	sub	sp, #12
 8003448:	af00      	add	r7, sp, #0
 800344a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003454:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003458:	d101      	bne.n	800345e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800345a:	2301      	movs	r3, #1
 800345c:	e000      	b.n	8003460 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 800345e:	2300      	movs	r3, #0
}
 8003460:	4618      	mov	r0, r3
 8003462:	370c      	adds	r7, #12
 8003464:	46bd      	mov	sp, r7
 8003466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346a:	4770      	bx	lr

0800346c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800346c:	b480      	push	{r7}
 800346e:	b083      	sub	sp, #12
 8003470:	af00      	add	r7, sp, #0
 8003472:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800347c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003480:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8003488:	bf00      	nop
 800348a:	370c      	adds	r7, #12
 800348c:	46bd      	mov	sp, r7
 800348e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003492:	4770      	bx	lr

08003494 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8003494:	b480      	push	{r7}
 8003496:	b083      	sub	sp, #12
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034a4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034a8:	d101      	bne.n	80034ae <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80034aa:	2301      	movs	r3, #1
 80034ac:	e000      	b.n	80034b0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	4618      	mov	r0, r3
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80034bc:	b480      	push	{r7}
 80034be:	b083      	sub	sp, #12
 80034c0:	af00      	add	r7, sp, #0
 80034c2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	689b      	ldr	r3, [r3, #8]
 80034c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80034cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80034d0:	f043 0201 	orr.w	r2, r3, #1
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80034d8:	bf00      	nop
 80034da:	370c      	adds	r7, #12
 80034dc:	46bd      	mov	sp, r7
 80034de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e2:	4770      	bx	lr

080034e4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80034e4:	b480      	push	{r7}
 80034e6:	b083      	sub	sp, #12
 80034e8:	af00      	add	r7, sp, #0
 80034ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	689b      	ldr	r3, [r3, #8]
 80034f0:	f003 0301 	and.w	r3, r3, #1
 80034f4:	2b01      	cmp	r3, #1
 80034f6:	d101      	bne.n	80034fc <LL_ADC_IsEnabled+0x18>
 80034f8:	2301      	movs	r3, #1
 80034fa:	e000      	b.n	80034fe <LL_ADC_IsEnabled+0x1a>
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	370c      	adds	r7, #12
 8003502:	46bd      	mov	sp, r7
 8003504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003508:	4770      	bx	lr

0800350a <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 800350a:	b480      	push	{r7}
 800350c:	b083      	sub	sp, #12
 800350e:	af00      	add	r7, sp, #0
 8003510:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	689b      	ldr	r3, [r3, #8]
 8003516:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800351a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800351e:	f043 0204 	orr.w	r2, r3, #4
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8003526:	bf00      	nop
 8003528:	370c      	adds	r7, #12
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003532:	b480      	push	{r7}
 8003534:	b083      	sub	sp, #12
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	f003 0304 	and.w	r3, r3, #4
 8003542:	2b04      	cmp	r3, #4
 8003544:	d101      	bne.n	800354a <LL_ADC_REG_IsConversionOngoing+0x18>
 8003546:	2301      	movs	r3, #1
 8003548:	e000      	b.n	800354c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800354a:	2300      	movs	r3, #0
}
 800354c:	4618      	mov	r0, r3
 800354e:	370c      	adds	r7, #12
 8003550:	46bd      	mov	sp, r7
 8003552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003556:	4770      	bx	lr

08003558 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8003558:	b480      	push	{r7}
 800355a:	b083      	sub	sp, #12
 800355c:	af00      	add	r7, sp, #0
 800355e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	689b      	ldr	r3, [r3, #8]
 8003564:	f003 0308 	and.w	r3, r3, #8
 8003568:	2b08      	cmp	r3, #8
 800356a:	d101      	bne.n	8003570 <LL_ADC_INJ_IsConversionOngoing+0x18>
 800356c:	2301      	movs	r3, #1
 800356e:	e000      	b.n	8003572 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8003570:	2300      	movs	r3, #0
}
 8003572:	4618      	mov	r0, r3
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8003580:	b590      	push	{r4, r7, lr}
 8003582:	b089      	sub	sp, #36	; 0x24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003588:	2300      	movs	r3, #0
 800358a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 800358c:	2300      	movs	r3, #0
 800358e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d101      	bne.n	800359a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e16d      	b.n	8003876 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695b      	ldr	r3, [r3, #20]
 800359e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d109      	bne.n	80035bc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80035a8:	6878      	ldr	r0, [r7, #4]
 80035aa:	f7fd fb6b 	bl	8000c84 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	2200      	movs	r2, #0
 80035b2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4618      	mov	r0, r3
 80035c2:	f7ff ff3f 	bl	8003444 <LL_ADC_IsDeepPowerDownEnabled>
 80035c6:	4603      	mov	r3, r0
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d004      	beq.n	80035d6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff ff25 	bl	8003420 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4618      	mov	r0, r3
 80035dc:	f7ff ff5a 	bl	8003494 <LL_ADC_IsInternalRegulatorEnabled>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d115      	bne.n	8003612 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4618      	mov	r0, r3
 80035ec:	f7ff ff3e 	bl	800346c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80035f0:	4ba3      	ldr	r3, [pc, #652]	; (8003880 <HAL_ADC_Init+0x300>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	099b      	lsrs	r3, r3, #6
 80035f6:	4aa3      	ldr	r2, [pc, #652]	; (8003884 <HAL_ADC_Init+0x304>)
 80035f8:	fba2 2303 	umull	r2, r3, r2, r3
 80035fc:	099b      	lsrs	r3, r3, #6
 80035fe:	3301      	adds	r3, #1
 8003600:	005b      	lsls	r3, r3, #1
 8003602:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8003604:	e002      	b.n	800360c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	3b01      	subs	r3, #1
 800360a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800360c:	68bb      	ldr	r3, [r7, #8]
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1f9      	bne.n	8003606 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	4618      	mov	r0, r3
 8003618:	f7ff ff3c 	bl	8003494 <LL_ADC_IsInternalRegulatorEnabled>
 800361c:	4603      	mov	r3, r0
 800361e:	2b00      	cmp	r3, #0
 8003620:	d10d      	bne.n	800363e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003626:	f043 0210 	orr.w	r2, r3, #16
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003632:	f043 0201 	orr.w	r2, r3, #1
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 800363a:	2301      	movs	r3, #1
 800363c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	4618      	mov	r0, r3
 8003644:	f7ff ff75 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003648:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800364e:	f003 0310 	and.w	r3, r3, #16
 8003652:	2b00      	cmp	r3, #0
 8003654:	f040 8106 	bne.w	8003864 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8003658:	697b      	ldr	r3, [r7, #20]
 800365a:	2b00      	cmp	r3, #0
 800365c:	f040 8102 	bne.w	8003864 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003664:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8003668:	f043 0202 	orr.w	r2, r3, #2
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4618      	mov	r0, r3
 8003676:	f7ff ff35 	bl	80034e4 <LL_ADC_IsEnabled>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d111      	bne.n	80036a4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003680:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003684:	f7ff ff2e 	bl	80034e4 <LL_ADC_IsEnabled>
 8003688:	4604      	mov	r4, r0
 800368a:	487f      	ldr	r0, [pc, #508]	; (8003888 <HAL_ADC_Init+0x308>)
 800368c:	f7ff ff2a 	bl	80034e4 <LL_ADC_IsEnabled>
 8003690:	4603      	mov	r3, r0
 8003692:	4323      	orrs	r3, r4
 8003694:	2b00      	cmp	r3, #0
 8003696:	d105      	bne.n	80036a4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	4619      	mov	r1, r3
 800369e:	487b      	ldr	r0, [pc, #492]	; (800388c <HAL_ADC_Init+0x30c>)
 80036a0:	f7ff fd3e 	bl	8003120 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	7f5b      	ldrb	r3, [r3, #29]
 80036a8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036ae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80036b4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80036ba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036c2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80036c4:	4313      	orrs	r3, r2
 80036c6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80036ce:	2b01      	cmp	r3, #1
 80036d0:	d106      	bne.n	80036e0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036d6:	3b01      	subs	r3, #1
 80036d8:	045b      	lsls	r3, r3, #17
 80036da:	69ba      	ldr	r2, [r7, #24]
 80036dc:	4313      	orrs	r3, r2
 80036de:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d009      	beq.n	80036fc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036f4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80036f6:	69ba      	ldr	r2, [r7, #24]
 80036f8:	4313      	orrs	r3, r2
 80036fa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68da      	ldr	r2, [r3, #12]
 8003702:	4b63      	ldr	r3, [pc, #396]	; (8003890 <HAL_ADC_Init+0x310>)
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6812      	ldr	r2, [r2, #0]
 800370a:	69b9      	ldr	r1, [r7, #24]
 800370c:	430b      	orrs	r3, r1
 800370e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4618      	mov	r0, r3
 800372c:	f7ff ff01 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003730:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	4618      	mov	r0, r3
 8003738:	f7ff ff0e 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 800373c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d16d      	bne.n	8003820 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	d16a      	bne.n	8003820 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800374e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003756:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003758:	4313      	orrs	r3, r2
 800375a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	68db      	ldr	r3, [r3, #12]
 8003762:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003766:	f023 0302 	bic.w	r3, r3, #2
 800376a:	687a      	ldr	r2, [r7, #4]
 800376c:	6812      	ldr	r2, [r2, #0]
 800376e:	69b9      	ldr	r1, [r7, #24]
 8003770:	430b      	orrs	r3, r1
 8003772:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d017      	beq.n	80037ac <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	691a      	ldr	r2, [r3, #16]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800378a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003794:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003798:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800379c:	687a      	ldr	r2, [r7, #4]
 800379e:	6911      	ldr	r1, [r2, #16]
 80037a0:	687a      	ldr	r2, [r7, #4]
 80037a2:	6812      	ldr	r2, [r2, #0]
 80037a4:	430b      	orrs	r3, r1
 80037a6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80037aa:	e013      	b.n	80037d4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	691a      	ldr	r2, [r3, #16]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80037ba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80037c4:	687a      	ldr	r2, [r7, #4]
 80037c6:	6812      	ldr	r2, [r2, #0]
 80037c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80037cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80037d0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80037da:	2b01      	cmp	r3, #1
 80037dc:	d118      	bne.n	8003810 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	691b      	ldr	r3, [r3, #16]
 80037e4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80037e8:	f023 0304 	bic.w	r3, r3, #4
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80037f0:	687a      	ldr	r2, [r7, #4]
 80037f2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80037f4:	4311      	orrs	r1, r2
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80037fa:	4311      	orrs	r1, r2
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003800:	430a      	orrs	r2, r1
 8003802:	431a      	orrs	r2, r3
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f042 0201 	orr.w	r2, r2, #1
 800380c:	611a      	str	r2, [r3, #16]
 800380e:	e007      	b.n	8003820 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	691a      	ldr	r2, [r3, #16]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0201 	bic.w	r2, r2, #1
 800381e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	695b      	ldr	r3, [r3, #20]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d10c      	bne.n	8003842 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382e:	f023 010f 	bic.w	r1, r3, #15
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6a1b      	ldr	r3, [r3, #32]
 8003836:	1e5a      	subs	r2, r3, #1
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	430a      	orrs	r2, r1
 800383e:	631a      	str	r2, [r3, #48]	; 0x30
 8003840:	e007      	b.n	8003852 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 020f 	bic.w	r2, r2, #15
 8003850:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003856:	f023 0303 	bic.w	r3, r3, #3
 800385a:	f043 0201 	orr.w	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	65da      	str	r2, [r3, #92]	; 0x5c
 8003862:	e007      	b.n	8003874 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003868:	f043 0210 	orr.w	r2, r3, #16
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003870:	2301      	movs	r3, #1
 8003872:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8003874:	7ffb      	ldrb	r3, [r7, #31]
}
 8003876:	4618      	mov	r0, r3
 8003878:	3724      	adds	r7, #36	; 0x24
 800387a:	46bd      	mov	sp, r7
 800387c:	bd90      	pop	{r4, r7, pc}
 800387e:	bf00      	nop
 8003880:	20000000 	.word	0x20000000
 8003884:	053e2d63 	.word	0x053e2d63
 8003888:	50000100 	.word	0x50000100
 800388c:	50000300 	.word	0x50000300
 8003890:	fff04007 	.word	0xfff04007

08003894 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8003894:	b580      	push	{r7, lr}
 8003896:	b086      	sub	sp, #24
 8003898:	af00      	add	r7, sp, #0
 800389a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800389c:	4859      	ldr	r0, [pc, #356]	; (8003a04 <HAL_ADC_Start+0x170>)
 800389e:	f7ff fda3 	bl	80033e8 <LL_ADC_GetMultimode>
 80038a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	4618      	mov	r0, r3
 80038aa:	f7ff fe42 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	f040 809f 	bne.w	80039f4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d101      	bne.n	80038c4 <HAL_ADC_Start+0x30>
 80038c0:	2302      	movs	r3, #2
 80038c2:	e09a      	b.n	80039fa <HAL_ADC_Start+0x166>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	2201      	movs	r2, #1
 80038c8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80038cc:	6878      	ldr	r0, [r7, #4]
 80038ce:	f000 fe45 	bl	800455c <ADC_Enable>
 80038d2:	4603      	mov	r3, r0
 80038d4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80038d6:	7dfb      	ldrb	r3, [r7, #23]
 80038d8:	2b00      	cmp	r3, #0
 80038da:	f040 8086 	bne.w	80039ea <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038e2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80038e6:	f023 0301 	bic.w	r3, r3, #1
 80038ea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	4a44      	ldr	r2, [pc, #272]	; (8003a08 <HAL_ADC_Start+0x174>)
 80038f8:	4293      	cmp	r3, r2
 80038fa:	d002      	beq.n	8003902 <HAL_ADC_Start+0x6e>
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	e001      	b.n	8003906 <HAL_ADC_Start+0x72>
 8003902:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003906:	687a      	ldr	r2, [r7, #4]
 8003908:	6812      	ldr	r2, [r2, #0]
 800390a:	4293      	cmp	r3, r2
 800390c:	d002      	beq.n	8003914 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800390e:	693b      	ldr	r3, [r7, #16]
 8003910:	2b00      	cmp	r3, #0
 8003912:	d105      	bne.n	8003920 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003918:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003924:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003928:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800392c:	d106      	bne.n	800393c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003932:	f023 0206 	bic.w	r2, r3, #6
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	661a      	str	r2, [r3, #96]	; 0x60
 800393a:	e002      	b.n	8003942 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2200      	movs	r2, #0
 8003940:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	221c      	movs	r2, #28
 8003948:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	2200      	movs	r2, #0
 800394e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	4a2c      	ldr	r2, [pc, #176]	; (8003a08 <HAL_ADC_Start+0x174>)
 8003958:	4293      	cmp	r3, r2
 800395a:	d002      	beq.n	8003962 <HAL_ADC_Start+0xce>
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	e001      	b.n	8003966 <HAL_ADC_Start+0xd2>
 8003962:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6812      	ldr	r2, [r2, #0]
 800396a:	4293      	cmp	r3, r2
 800396c:	d008      	beq.n	8003980 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800396e:	693b      	ldr	r3, [r7, #16]
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	2b05      	cmp	r3, #5
 8003978:	d002      	beq.n	8003980 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800397a:	693b      	ldr	r3, [r7, #16]
 800397c:	2b09      	cmp	r3, #9
 800397e:	d114      	bne.n	80039aa <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	68db      	ldr	r3, [r3, #12]
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	2b00      	cmp	r3, #0
 800398c:	d007      	beq.n	800399e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003992:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003996:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7ff fdb1 	bl	800350a <LL_ADC_REG_StartConversion>
 80039a8:	e026      	b.n	80039f8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	4a13      	ldr	r2, [pc, #76]	; (8003a08 <HAL_ADC_Start+0x174>)
 80039bc:	4293      	cmp	r3, r2
 80039be:	d002      	beq.n	80039c6 <HAL_ADC_Start+0x132>
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	e001      	b.n	80039ca <HAL_ADC_Start+0x136>
 80039c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80039ca:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	68db      	ldr	r3, [r3, #12]
 80039d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00f      	beq.n	80039f8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80039e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80039e8:	e006      	b.n	80039f8 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2200      	movs	r2, #0
 80039ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80039f2:	e001      	b.n	80039f8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80039f4:	2302      	movs	r3, #2
 80039f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80039f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3718      	adds	r7, #24
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	50000300 	.word	0x50000300
 8003a08:	50000100 	.word	0x50000100

08003a0c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003a0c:	b580      	push	{r7, lr}
 8003a0e:	b088      	sub	sp, #32
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	6078      	str	r0, [r7, #4]
 8003a14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003a16:	4867      	ldr	r0, [pc, #412]	; (8003bb4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a18:	f7ff fce6 	bl	80033e8 <LL_ADC_GetMultimode>
 8003a1c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	699b      	ldr	r3, [r3, #24]
 8003a22:	2b08      	cmp	r3, #8
 8003a24:	d102      	bne.n	8003a2c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8003a26:	2308      	movs	r3, #8
 8003a28:	61fb      	str	r3, [r7, #28]
 8003a2a:	e02a      	b.n	8003a82 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d005      	beq.n	8003a3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003a32:	697b      	ldr	r3, [r7, #20]
 8003a34:	2b05      	cmp	r3, #5
 8003a36:	d002      	beq.n	8003a3e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	2b09      	cmp	r3, #9
 8003a3c:	d111      	bne.n	8003a62 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	68db      	ldr	r3, [r3, #12]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d007      	beq.n	8003a5c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a50:	f043 0220 	orr.w	r2, r3, #32
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e0a6      	b.n	8003baa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a5c:	2304      	movs	r3, #4
 8003a5e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003a60:	e00f      	b.n	8003a82 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003a62:	4854      	ldr	r0, [pc, #336]	; (8003bb4 <HAL_ADC_PollForConversion+0x1a8>)
 8003a64:	f7ff fcce 	bl	8003404 <LL_ADC_GetMultiDMATransfer>
 8003a68:	4603      	mov	r3, r0
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d007      	beq.n	8003a7e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a72:	f043 0220 	orr.w	r2, r3, #32
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8003a7a:	2301      	movs	r3, #1
 8003a7c:	e095      	b.n	8003baa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003a7e:	2304      	movs	r3, #4
 8003a80:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8003a82:	f7ff fb41 	bl	8003108 <HAL_GetTick>
 8003a86:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003a88:	e021      	b.n	8003ace <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8003a8a:	683b      	ldr	r3, [r7, #0]
 8003a8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a90:	d01d      	beq.n	8003ace <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8003a92:	f7ff fb39 	bl	8003108 <HAL_GetTick>
 8003a96:	4602      	mov	r2, r0
 8003a98:	693b      	ldr	r3, [r7, #16]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	683a      	ldr	r2, [r7, #0]
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d302      	bcc.n	8003aa8 <HAL_ADC_PollForConversion+0x9c>
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d112      	bne.n	8003ace <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	681a      	ldr	r2, [r3, #0]
 8003aae:	69fb      	ldr	r3, [r7, #28]
 8003ab0:	4013      	ands	r3, r2
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d10b      	bne.n	8003ace <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aba:	f043 0204 	orr.w	r2, r3, #4
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e06d      	b.n	8003baa <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	681a      	ldr	r2, [r3, #0]
 8003ad4:	69fb      	ldr	r3, [r7, #28]
 8003ad6:	4013      	ands	r3, r2
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d0d6      	beq.n	8003a8a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ae0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4618      	mov	r0, r3
 8003aee:	f7ff fbe9 	bl	80032c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003af2:	4603      	mov	r3, r0
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d01c      	beq.n	8003b32 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	7f5b      	ldrb	r3, [r3, #29]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d118      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	f003 0308 	and.w	r3, r3, #8
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d111      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b1e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d105      	bne.n	8003b32 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b2a:	f043 0201 	orr.w	r2, r3, #1
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	4a20      	ldr	r2, [pc, #128]	; (8003bb8 <HAL_ADC_PollForConversion+0x1ac>)
 8003b38:	4293      	cmp	r3, r2
 8003b3a:	d002      	beq.n	8003b42 <HAL_ADC_PollForConversion+0x136>
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	e001      	b.n	8003b46 <HAL_ADC_PollForConversion+0x13a>
 8003b42:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b46:	687a      	ldr	r2, [r7, #4]
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	4293      	cmp	r3, r2
 8003b4c:	d008      	beq.n	8003b60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d005      	beq.n	8003b60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003b54:	697b      	ldr	r3, [r7, #20]
 8003b56:	2b05      	cmp	r3, #5
 8003b58:	d002      	beq.n	8003b60 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b09      	cmp	r3, #9
 8003b5e:	d104      	bne.n	8003b6a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	68db      	ldr	r3, [r3, #12]
 8003b66:	61bb      	str	r3, [r7, #24]
 8003b68:	e00d      	b.n	8003b86 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a12      	ldr	r2, [pc, #72]	; (8003bb8 <HAL_ADC_PollForConversion+0x1ac>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d002      	beq.n	8003b7a <HAL_ADC_PollForConversion+0x16e>
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	e001      	b.n	8003b7e <HAL_ADC_PollForConversion+0x172>
 8003b7a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003b7e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	68db      	ldr	r3, [r3, #12]
 8003b84:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8003b86:	69fb      	ldr	r3, [r7, #28]
 8003b88:	2b08      	cmp	r3, #8
 8003b8a:	d104      	bne.n	8003b96 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	2208      	movs	r2, #8
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	e008      	b.n	8003ba8 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8003b96:	69bb      	ldr	r3, [r7, #24]
 8003b98:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d103      	bne.n	8003ba8 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	220c      	movs	r2, #12
 8003ba6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 8003ba8:	2300      	movs	r3, #0
}
 8003baa:	4618      	mov	r0, r3
 8003bac:	3720      	adds	r7, #32
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	50000300 	.word	0x50000300
 8003bb8:	50000100 	.word	0x50000100

08003bbc <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b086      	sub	sp, #24
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003bc8:	4851      	ldr	r0, [pc, #324]	; (8003d10 <HAL_ADC_Start_DMA+0x154>)
 8003bca:	f7ff fc0d 	bl	80033e8 <LL_ADC_GetMultimode>
 8003bce:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	f7ff fcac 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003bda:	4603      	mov	r3, r0
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	f040 808f 	bne.w	8003d00 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003be8:	2b01      	cmp	r3, #1
 8003bea:	d101      	bne.n	8003bf0 <HAL_ADC_Start_DMA+0x34>
 8003bec:	2302      	movs	r3, #2
 8003bee:	e08a      	b.n	8003d06 <HAL_ADC_Start_DMA+0x14a>
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d005      	beq.n	8003c0a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003bfe:	693b      	ldr	r3, [r7, #16]
 8003c00:	2b05      	cmp	r3, #5
 8003c02:	d002      	beq.n	8003c0a <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003c04:	693b      	ldr	r3, [r7, #16]
 8003c06:	2b09      	cmp	r3, #9
 8003c08:	d173      	bne.n	8003cf2 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8003c0a:	68f8      	ldr	r0, [r7, #12]
 8003c0c:	f000 fca6 	bl	800455c <ADC_Enable>
 8003c10:	4603      	mov	r3, r0
 8003c12:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d166      	bne.n	8003ce8 <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c1e:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003c22:	f023 0301 	bic.w	r3, r3, #1
 8003c26:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a38      	ldr	r2, [pc, #224]	; (8003d14 <HAL_ADC_Start_DMA+0x158>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d002      	beq.n	8003c3e <HAL_ADC_Start_DMA+0x82>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	e001      	b.n	8003c42 <HAL_ADC_Start_DMA+0x86>
 8003c3e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003c42:	68fa      	ldr	r2, [r7, #12]
 8003c44:	6812      	ldr	r2, [r2, #0]
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d002      	beq.n	8003c50 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d105      	bne.n	8003c5c <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c54:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c60:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d006      	beq.n	8003c76 <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c6c:	f023 0206 	bic.w	r2, r3, #6
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	661a      	str	r2, [r3, #96]	; 0x60
 8003c74:	e002      	b.n	8003c7c <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c80:	4a25      	ldr	r2, [pc, #148]	; (8003d18 <HAL_ADC_Start_DMA+0x15c>)
 8003c82:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c88:	4a24      	ldr	r2, [pc, #144]	; (8003d1c <HAL_ADC_Start_DMA+0x160>)
 8003c8a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003c90:	4a23      	ldr	r2, [pc, #140]	; (8003d20 <HAL_ADC_Start_DMA+0x164>)
 8003c92:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	221c      	movs	r2, #28
 8003c9a:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	685a      	ldr	r2, [r3, #4]
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	f042 0210 	orr.w	r2, r2, #16
 8003cb2:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	3340      	adds	r3, #64	; 0x40
 8003cce:	4619      	mov	r1, r3
 8003cd0:	68ba      	ldr	r2, [r7, #8]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f000 ffba 	bl	8004c4c <HAL_DMA_Start_IT>
 8003cd8:	4603      	mov	r3, r0
 8003cda:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7ff fc12 	bl	800350a <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003ce6:	e00d      	b.n	8003d04 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	2200      	movs	r2, #0
 8003cec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003cf0:	e008      	b.n	8003d04 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003cf2:	2301      	movs	r3, #1
 8003cf4:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003cfe:	e001      	b.n	8003d04 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003d00:	2302      	movs	r3, #2
 8003d02:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003d04:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d06:	4618      	mov	r0, r3
 8003d08:	3718      	adds	r7, #24
 8003d0a:	46bd      	mov	sp, r7
 8003d0c:	bd80      	pop	{r7, pc}
 8003d0e:	bf00      	nop
 8003d10:	50000300 	.word	0x50000300
 8003d14:	50000100 	.word	0x50000100
 8003d18:	08004621 	.word	0x08004621
 8003d1c:	080046f9 	.word	0x080046f9
 8003d20:	08004715 	.word	0x08004715

08003d24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003d24:	b480      	push	{r7}
 8003d26:	b083      	sub	sp, #12
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003d32:	4618      	mov	r0, r3
 8003d34:	370c      	adds	r7, #12
 8003d36:	46bd      	mov	sp, r7
 8003d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d3c:	4770      	bx	lr

08003d3e <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d3e:	b480      	push	{r7}
 8003d40:	b083      	sub	sp, #12
 8003d42:	af00      	add	r7, sp, #0
 8003d44:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8003d46:	bf00      	nop
 8003d48:	370c      	adds	r7, #12
 8003d4a:	46bd      	mov	sp, r7
 8003d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d50:	4770      	bx	lr

08003d52 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003d52:	b480      	push	{r7}
 8003d54:	b083      	sub	sp, #12
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8003d5a:	bf00      	nop
 8003d5c:	370c      	adds	r7, #12
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr

08003d66 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003d66:	b480      	push	{r7}
 8003d68:	b083      	sub	sp, #12
 8003d6a:	af00      	add	r7, sp, #0
 8003d6c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003d6e:	bf00      	nop
 8003d70:	370c      	adds	r7, #12
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
	...

08003d7c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b0b6      	sub	sp, #216	; 0xd8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
 8003d84:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003d86:	2300      	movs	r3, #0
 8003d88:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d96:	2b01      	cmp	r3, #1
 8003d98:	d101      	bne.n	8003d9e <HAL_ADC_ConfigChannel+0x22>
 8003d9a:	2302      	movs	r3, #2
 8003d9c:	e3c8      	b.n	8004530 <HAL_ADC_ConfigChannel+0x7b4>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2201      	movs	r2, #1
 8003da2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4618      	mov	r0, r3
 8003dac:	f7ff fbc1 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003db0:	4603      	mov	r3, r0
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	f040 83ad 	bne.w	8004512 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6818      	ldr	r0, [r3, #0]
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	6859      	ldr	r1, [r3, #4]
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	461a      	mov	r2, r3
 8003dc6:	f7ff fa90 	bl	80032ea <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4618      	mov	r0, r3
 8003dd0:	f7ff fbaf 	bl	8003532 <LL_ADC_REG_IsConversionOngoing>
 8003dd4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f7ff fbbb 	bl	8003558 <LL_ADC_INJ_IsConversionOngoing>
 8003de2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003de6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	f040 81d9 	bne.w	80041a2 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003df0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f040 81d4 	bne.w	80041a2 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e02:	d10f      	bne.n	8003e24 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	4619      	mov	r1, r3
 8003e10:	f7ff fa97 	bl	8003342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f7ff fa3e 	bl	800329e <LL_ADC_SetSamplingTimeCommonConfig>
 8003e22:	e00e      	b.n	8003e42 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	6818      	ldr	r0, [r3, #0]
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	6819      	ldr	r1, [r3, #0]
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	461a      	mov	r2, r3
 8003e32:	f7ff fa86 	bl	8003342 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2100      	movs	r1, #0
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	f7ff fa2e 	bl	800329e <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	695a      	ldr	r2, [r3, #20]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68db      	ldr	r3, [r3, #12]
 8003e4c:	08db      	lsrs	r3, r3, #3
 8003e4e:	f003 0303 	and.w	r3, r3, #3
 8003e52:	005b      	lsls	r3, r3, #1
 8003e54:	fa02 f303 	lsl.w	r3, r2, r3
 8003e58:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	2b04      	cmp	r3, #4
 8003e62:	d022      	beq.n	8003eaa <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	6818      	ldr	r0, [r3, #0]
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	6919      	ldr	r1, [r3, #16]
 8003e6c:	683b      	ldr	r3, [r7, #0]
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e74:	f7ff f988 	bl	8003188 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6818      	ldr	r0, [r3, #0]
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	6919      	ldr	r1, [r3, #16]
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	699b      	ldr	r3, [r3, #24]
 8003e84:	461a      	mov	r2, r3
 8003e86:	f7ff f9d4 	bl	8003232 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6818      	ldr	r0, [r3, #0]
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	6919      	ldr	r1, [r3, #16]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	7f1b      	ldrb	r3, [r3, #28]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d102      	bne.n	8003ea0 <HAL_ADC_ConfigChannel+0x124>
 8003e9a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003e9e:	e000      	b.n	8003ea2 <HAL_ADC_ConfigChannel+0x126>
 8003ea0:	2300      	movs	r3, #0
 8003ea2:	461a      	mov	r2, r3
 8003ea4:	f7ff f9e0 	bl	8003268 <LL_ADC_SetOffsetSaturation>
 8003ea8:	e17b      	b.n	80041a2 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	2100      	movs	r1, #0
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7ff f98d 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003eb6:	4603      	mov	r3, r0
 8003eb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10a      	bne.n	8003ed6 <HAL_ADC_ConfigChannel+0x15a>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	2100      	movs	r1, #0
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	f7ff f982 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003ecc:	4603      	mov	r3, r0
 8003ece:	0e9b      	lsrs	r3, r3, #26
 8003ed0:	f003 021f 	and.w	r2, r3, #31
 8003ed4:	e01e      	b.n	8003f14 <HAL_ADC_ConfigChannel+0x198>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	2100      	movs	r1, #0
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff f977 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ee8:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003eec:	fa93 f3a3 	rbit	r3, r3
 8003ef0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003ef4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003ef8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003efc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d101      	bne.n	8003f08 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003f04:	2320      	movs	r3, #32
 8003f06:	e004      	b.n	8003f12 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8003f08:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003f0c:	fab3 f383 	clz	r3, r3
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d105      	bne.n	8003f2c <HAL_ADC_ConfigChannel+0x1b0>
 8003f20:	683b      	ldr	r3, [r7, #0]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	0e9b      	lsrs	r3, r3, #26
 8003f26:	f003 031f 	and.w	r3, r3, #31
 8003f2a:	e018      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x1e2>
 8003f2c:	683b      	ldr	r3, [r7, #0]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f34:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8003f38:	fa93 f3a3 	rbit	r3, r3
 8003f3c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003f40:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003f44:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8003f48:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d101      	bne.n	8003f54 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003f50:	2320      	movs	r3, #32
 8003f52:	e004      	b.n	8003f5e <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003f54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003f58:	fab3 f383 	clz	r3, r3
 8003f5c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d106      	bne.n	8003f70 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	2200      	movs	r2, #0
 8003f68:	2100      	movs	r1, #0
 8003f6a:	4618      	mov	r0, r3
 8003f6c:	f7ff f946 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2101      	movs	r1, #1
 8003f76:	4618      	mov	r0, r3
 8003f78:	f7ff f92a 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d10a      	bne.n	8003f9c <HAL_ADC_ConfigChannel+0x220>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	2101      	movs	r1, #1
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7ff f91f 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003f92:	4603      	mov	r3, r0
 8003f94:	0e9b      	lsrs	r3, r3, #26
 8003f96:	f003 021f 	and.w	r2, r3, #31
 8003f9a:	e01e      	b.n	8003fda <HAL_ADC_ConfigChannel+0x25e>
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2101      	movs	r1, #1
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f7ff f914 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8003fa8:	4603      	mov	r3, r0
 8003faa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fae:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003fb2:	fa93 f3a3 	rbit	r3, r3
 8003fb6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003fba:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003fbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003fc2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d101      	bne.n	8003fce <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8003fca:	2320      	movs	r3, #32
 8003fcc:	e004      	b.n	8003fd8 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003fce:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003fd2:	fab3 f383 	clz	r3, r3
 8003fd6:	b2db      	uxtb	r3, r3
 8003fd8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d105      	bne.n	8003ff2 <HAL_ADC_ConfigChannel+0x276>
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	0e9b      	lsrs	r3, r3, #26
 8003fec:	f003 031f 	and.w	r3, r3, #31
 8003ff0:	e018      	b.n	8004024 <HAL_ADC_ConfigChannel+0x2a8>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003ffa:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003ffe:	fa93 f3a3 	rbit	r3, r3
 8004002:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004006:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800400a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800400e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004012:	2b00      	cmp	r3, #0
 8004014:	d101      	bne.n	800401a <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8004016:	2320      	movs	r3, #32
 8004018:	e004      	b.n	8004024 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800401a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800401e:	fab3 f383 	clz	r3, r3
 8004022:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004024:	429a      	cmp	r2, r3
 8004026:	d106      	bne.n	8004036 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2200      	movs	r2, #0
 800402e:	2101      	movs	r1, #1
 8004030:	4618      	mov	r0, r3
 8004032:	f7ff f8e3 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	2102      	movs	r1, #2
 800403c:	4618      	mov	r0, r3
 800403e:	f7ff f8c7 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004042:	4603      	mov	r3, r0
 8004044:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004048:	2b00      	cmp	r3, #0
 800404a:	d10a      	bne.n	8004062 <HAL_ADC_ConfigChannel+0x2e6>
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	2102      	movs	r1, #2
 8004052:	4618      	mov	r0, r3
 8004054:	f7ff f8bc 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004058:	4603      	mov	r3, r0
 800405a:	0e9b      	lsrs	r3, r3, #26
 800405c:	f003 021f 	and.w	r2, r3, #31
 8004060:	e01e      	b.n	80040a0 <HAL_ADC_ConfigChannel+0x324>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	2102      	movs	r1, #2
 8004068:	4618      	mov	r0, r3
 800406a:	f7ff f8b1 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 800406e:	4603      	mov	r3, r0
 8004070:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004074:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004078:	fa93 f3a3 	rbit	r3, r3
 800407c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004080:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004084:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004088:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800408c:	2b00      	cmp	r3, #0
 800408e:	d101      	bne.n	8004094 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8004090:	2320      	movs	r3, #32
 8004092:	e004      	b.n	800409e <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8004094:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004098:	fab3 f383 	clz	r3, r3
 800409c:	b2db      	uxtb	r3, r3
 800409e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d105      	bne.n	80040b8 <HAL_ADC_ConfigChannel+0x33c>
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	0e9b      	lsrs	r3, r3, #26
 80040b2:	f003 031f 	and.w	r3, r3, #31
 80040b6:	e016      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x36a>
 80040b8:	683b      	ldr	r3, [r7, #0]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80040c4:	fa93 f3a3 	rbit	r3, r3
 80040c8:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80040ca:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80040cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80040d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d101      	bne.n	80040dc <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 80040d8:	2320      	movs	r3, #32
 80040da:	e004      	b.n	80040e6 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 80040dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80040e0:	fab3 f383 	clz	r3, r3
 80040e4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80040e6:	429a      	cmp	r2, r3
 80040e8:	d106      	bne.n	80040f8 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	2200      	movs	r2, #0
 80040f0:	2102      	movs	r1, #2
 80040f2:	4618      	mov	r0, r3
 80040f4:	f7ff f882 	bl	80031fc <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	2103      	movs	r1, #3
 80040fe:	4618      	mov	r0, r3
 8004100:	f7ff f866 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004104:	4603      	mov	r3, r0
 8004106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10a      	bne.n	8004124 <HAL_ADC_ConfigChannel+0x3a8>
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	2103      	movs	r1, #3
 8004114:	4618      	mov	r0, r3
 8004116:	f7ff f85b 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 800411a:	4603      	mov	r3, r0
 800411c:	0e9b      	lsrs	r3, r3, #26
 800411e:	f003 021f 	and.w	r2, r3, #31
 8004122:	e017      	b.n	8004154 <HAL_ADC_ConfigChannel+0x3d8>
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	2103      	movs	r1, #3
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff f850 	bl	80031d0 <LL_ADC_GetOffsetChannel>
 8004130:	4603      	mov	r3, r0
 8004132:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004134:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004136:	fa93 f3a3 	rbit	r3, r3
 800413a:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800413c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800413e:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004140:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8004146:	2320      	movs	r3, #32
 8004148:	e003      	b.n	8004152 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 800414a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800414c:	fab3 f383 	clz	r3, r3
 8004150:	b2db      	uxtb	r3, r3
 8004152:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800415c:	2b00      	cmp	r3, #0
 800415e:	d105      	bne.n	800416c <HAL_ADC_ConfigChannel+0x3f0>
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	0e9b      	lsrs	r3, r3, #26
 8004166:	f003 031f 	and.w	r3, r3, #31
 800416a:	e011      	b.n	8004190 <HAL_ADC_ConfigChannel+0x414>
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004172:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004174:	fa93 f3a3 	rbit	r3, r3
 8004178:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800417a:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800417c:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800417e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004180:	2b00      	cmp	r3, #0
 8004182:	d101      	bne.n	8004188 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8004184:	2320      	movs	r3, #32
 8004186:	e003      	b.n	8004190 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8004188:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800418a:	fab3 f383 	clz	r3, r3
 800418e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004190:	429a      	cmp	r2, r3
 8004192:	d106      	bne.n	80041a2 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	2200      	movs	r2, #0
 800419a:	2103      	movs	r1, #3
 800419c:	4618      	mov	r0, r3
 800419e:	f7ff f82d 	bl	80031fc <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	4618      	mov	r0, r3
 80041a8:	f7ff f99c 	bl	80034e4 <LL_ADC_IsEnabled>
 80041ac:	4603      	mov	r3, r0
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	f040 8140 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6818      	ldr	r0, [r3, #0]
 80041b8:	683b      	ldr	r3, [r7, #0]
 80041ba:	6819      	ldr	r1, [r3, #0]
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	68db      	ldr	r3, [r3, #12]
 80041c0:	461a      	mov	r2, r3
 80041c2:	f7ff f8e9 	bl	8003398 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	4a8f      	ldr	r2, [pc, #572]	; (8004408 <HAL_ADC_ConfigChannel+0x68c>)
 80041cc:	4293      	cmp	r3, r2
 80041ce:	f040 8131 	bne.w	8004434 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d10b      	bne.n	80041fa <HAL_ADC_ConfigChannel+0x47e>
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	0e9b      	lsrs	r3, r3, #26
 80041e8:	3301      	adds	r3, #1
 80041ea:	f003 031f 	and.w	r3, r3, #31
 80041ee:	2b09      	cmp	r3, #9
 80041f0:	bf94      	ite	ls
 80041f2:	2301      	movls	r3, #1
 80041f4:	2300      	movhi	r3, #0
 80041f6:	b2db      	uxtb	r3, r3
 80041f8:	e019      	b.n	800422e <HAL_ADC_ConfigChannel+0x4b2>
 80041fa:	683b      	ldr	r3, [r7, #0]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004200:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004202:	fa93 f3a3 	rbit	r3, r3
 8004206:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004208:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800420a:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800420c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800420e:	2b00      	cmp	r3, #0
 8004210:	d101      	bne.n	8004216 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8004212:	2320      	movs	r3, #32
 8004214:	e003      	b.n	800421e <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8004216:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004218:	fab3 f383 	clz	r3, r3
 800421c:	b2db      	uxtb	r3, r3
 800421e:	3301      	adds	r3, #1
 8004220:	f003 031f 	and.w	r3, r3, #31
 8004224:	2b09      	cmp	r3, #9
 8004226:	bf94      	ite	ls
 8004228:	2301      	movls	r3, #1
 800422a:	2300      	movhi	r3, #0
 800422c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800422e:	2b00      	cmp	r3, #0
 8004230:	d079      	beq.n	8004326 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423a:	2b00      	cmp	r3, #0
 800423c:	d107      	bne.n	800424e <HAL_ADC_ConfigChannel+0x4d2>
 800423e:	683b      	ldr	r3, [r7, #0]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	0e9b      	lsrs	r3, r3, #26
 8004244:	3301      	adds	r3, #1
 8004246:	069b      	lsls	r3, r3, #26
 8004248:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800424c:	e015      	b.n	800427a <HAL_ADC_ConfigChannel+0x4fe>
 800424e:	683b      	ldr	r3, [r7, #0]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004254:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004256:	fa93 f3a3 	rbit	r3, r3
 800425a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800425c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800425e:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004262:	2b00      	cmp	r3, #0
 8004264:	d101      	bne.n	800426a <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8004266:	2320      	movs	r3, #32
 8004268:	e003      	b.n	8004272 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 800426a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800426c:	fab3 f383 	clz	r3, r3
 8004270:	b2db      	uxtb	r3, r3
 8004272:	3301      	adds	r3, #1
 8004274:	069b      	lsls	r3, r3, #26
 8004276:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004282:	2b00      	cmp	r3, #0
 8004284:	d109      	bne.n	800429a <HAL_ADC_ConfigChannel+0x51e>
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	0e9b      	lsrs	r3, r3, #26
 800428c:	3301      	adds	r3, #1
 800428e:	f003 031f 	and.w	r3, r3, #31
 8004292:	2101      	movs	r1, #1
 8004294:	fa01 f303 	lsl.w	r3, r1, r3
 8004298:	e017      	b.n	80042ca <HAL_ADC_ConfigChannel+0x54e>
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a2:	fa93 f3a3 	rbit	r3, r3
 80042a6:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80042ac:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d101      	bne.n	80042b6 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 80042b2:	2320      	movs	r3, #32
 80042b4:	e003      	b.n	80042be <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 80042b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80042b8:	fab3 f383 	clz	r3, r3
 80042bc:	b2db      	uxtb	r3, r3
 80042be:	3301      	adds	r3, #1
 80042c0:	f003 031f 	and.w	r3, r3, #31
 80042c4:	2101      	movs	r1, #1
 80042c6:	fa01 f303 	lsl.w	r3, r1, r3
 80042ca:	ea42 0103 	orr.w	r1, r2, r3
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d10a      	bne.n	80042f0 <HAL_ADC_ConfigChannel+0x574>
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	0e9b      	lsrs	r3, r3, #26
 80042e0:	3301      	adds	r3, #1
 80042e2:	f003 021f 	and.w	r2, r3, #31
 80042e6:	4613      	mov	r3, r2
 80042e8:	005b      	lsls	r3, r3, #1
 80042ea:	4413      	add	r3, r2
 80042ec:	051b      	lsls	r3, r3, #20
 80042ee:	e018      	b.n	8004322 <HAL_ADC_ConfigChannel+0x5a6>
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f8:	fa93 f3a3 	rbit	r3, r3
 80042fc:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80042fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004300:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004302:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004304:	2b00      	cmp	r3, #0
 8004306:	d101      	bne.n	800430c <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8004308:	2320      	movs	r3, #32
 800430a:	e003      	b.n	8004314 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 800430c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800430e:	fab3 f383 	clz	r3, r3
 8004312:	b2db      	uxtb	r3, r3
 8004314:	3301      	adds	r3, #1
 8004316:	f003 021f 	and.w	r2, r3, #31
 800431a:	4613      	mov	r3, r2
 800431c:	005b      	lsls	r3, r3, #1
 800431e:	4413      	add	r3, r2
 8004320:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004322:	430b      	orrs	r3, r1
 8004324:	e081      	b.n	800442a <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800432e:	2b00      	cmp	r3, #0
 8004330:	d107      	bne.n	8004342 <HAL_ADC_ConfigChannel+0x5c6>
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	0e9b      	lsrs	r3, r3, #26
 8004338:	3301      	adds	r3, #1
 800433a:	069b      	lsls	r3, r3, #26
 800433c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004340:	e015      	b.n	800436e <HAL_ADC_ConfigChannel+0x5f2>
 8004342:	683b      	ldr	r3, [r7, #0]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004348:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800434a:	fa93 f3a3 	rbit	r3, r3
 800434e:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004354:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004356:	2b00      	cmp	r3, #0
 8004358:	d101      	bne.n	800435e <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 800435a:	2320      	movs	r3, #32
 800435c:	e003      	b.n	8004366 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 800435e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004360:	fab3 f383 	clz	r3, r3
 8004364:	b2db      	uxtb	r3, r3
 8004366:	3301      	adds	r3, #1
 8004368:	069b      	lsls	r3, r3, #26
 800436a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004376:	2b00      	cmp	r3, #0
 8004378:	d109      	bne.n	800438e <HAL_ADC_ConfigChannel+0x612>
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	0e9b      	lsrs	r3, r3, #26
 8004380:	3301      	adds	r3, #1
 8004382:	f003 031f 	and.w	r3, r3, #31
 8004386:	2101      	movs	r1, #1
 8004388:	fa01 f303 	lsl.w	r3, r1, r3
 800438c:	e017      	b.n	80043be <HAL_ADC_ConfigChannel+0x642>
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	fa93 f3a3 	rbit	r3, r3
 800439a:	61fb      	str	r3, [r7, #28]
  return result;
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d101      	bne.n	80043aa <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 80043a6:	2320      	movs	r3, #32
 80043a8:	e003      	b.n	80043b2 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	fab3 f383 	clz	r3, r3
 80043b0:	b2db      	uxtb	r3, r3
 80043b2:	3301      	adds	r3, #1
 80043b4:	f003 031f 	and.w	r3, r3, #31
 80043b8:	2101      	movs	r1, #1
 80043ba:	fa01 f303 	lsl.w	r3, r1, r3
 80043be:	ea42 0103 	orr.w	r1, r2, r3
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d10d      	bne.n	80043ea <HAL_ADC_ConfigChannel+0x66e>
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	0e9b      	lsrs	r3, r3, #26
 80043d4:	3301      	adds	r3, #1
 80043d6:	f003 021f 	and.w	r2, r3, #31
 80043da:	4613      	mov	r3, r2
 80043dc:	005b      	lsls	r3, r3, #1
 80043de:	4413      	add	r3, r2
 80043e0:	3b1e      	subs	r3, #30
 80043e2:	051b      	lsls	r3, r3, #20
 80043e4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80043e8:	e01e      	b.n	8004428 <HAL_ADC_ConfigChannel+0x6ac>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	fa93 f3a3 	rbit	r3, r3
 80043f6:	613b      	str	r3, [r7, #16]
  return result;
 80043f8:	693b      	ldr	r3, [r7, #16]
 80043fa:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d104      	bne.n	800440c <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8004402:	2320      	movs	r3, #32
 8004404:	e006      	b.n	8004414 <HAL_ADC_ConfigChannel+0x698>
 8004406:	bf00      	nop
 8004408:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800440c:	69bb      	ldr	r3, [r7, #24]
 800440e:	fab3 f383 	clz	r3, r3
 8004412:	b2db      	uxtb	r3, r3
 8004414:	3301      	adds	r3, #1
 8004416:	f003 021f 	and.w	r2, r3, #31
 800441a:	4613      	mov	r3, r2
 800441c:	005b      	lsls	r3, r3, #1
 800441e:	4413      	add	r3, r2
 8004420:	3b1e      	subs	r3, #30
 8004422:	051b      	lsls	r3, r3, #20
 8004424:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004428:	430b      	orrs	r3, r1
 800442a:	683a      	ldr	r2, [r7, #0]
 800442c:	6892      	ldr	r2, [r2, #8]
 800442e:	4619      	mov	r1, r3
 8004430:	f7fe ff87 	bl	8003342 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	4b3f      	ldr	r3, [pc, #252]	; (8004538 <HAL_ADC_ConfigChannel+0x7bc>)
 800443a:	4013      	ands	r3, r2
 800443c:	2b00      	cmp	r3, #0
 800443e:	d071      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004440:	483e      	ldr	r0, [pc, #248]	; (800453c <HAL_ADC_ConfigChannel+0x7c0>)
 8004442:	f7fe fe93 	bl	800316c <LL_ADC_GetCommonPathInternalCh>
 8004446:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800444a:	683b      	ldr	r3, [r7, #0]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	4a3c      	ldr	r2, [pc, #240]	; (8004540 <HAL_ADC_ConfigChannel+0x7c4>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d004      	beq.n	800445e <HAL_ADC_ConfigChannel+0x6e2>
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4a3a      	ldr	r2, [pc, #232]	; (8004544 <HAL_ADC_ConfigChannel+0x7c8>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d127      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800445e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004462:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004466:	2b00      	cmp	r3, #0
 8004468:	d121      	bne.n	80044ae <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004472:	d157      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004474:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004478:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800447c:	4619      	mov	r1, r3
 800447e:	482f      	ldr	r0, [pc, #188]	; (800453c <HAL_ADC_ConfigChannel+0x7c0>)
 8004480:	f7fe fe61 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004484:	4b30      	ldr	r3, [pc, #192]	; (8004548 <HAL_ADC_ConfigChannel+0x7cc>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	099b      	lsrs	r3, r3, #6
 800448a:	4a30      	ldr	r2, [pc, #192]	; (800454c <HAL_ADC_ConfigChannel+0x7d0>)
 800448c:	fba2 2303 	umull	r2, r3, r2, r3
 8004490:	099b      	lsrs	r3, r3, #6
 8004492:	1c5a      	adds	r2, r3, #1
 8004494:	4613      	mov	r3, r2
 8004496:	005b      	lsls	r3, r3, #1
 8004498:	4413      	add	r3, r2
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800449e:	e002      	b.n	80044a6 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	3b01      	subs	r3, #1
 80044a4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1f9      	bne.n	80044a0 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80044ac:	e03a      	b.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a27      	ldr	r2, [pc, #156]	; (8004550 <HAL_ADC_ConfigChannel+0x7d4>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d113      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x764>
 80044b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d10d      	bne.n	80044e0 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4a22      	ldr	r2, [pc, #136]	; (8004554 <HAL_ADC_ConfigChannel+0x7d8>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d02a      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80044ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044d2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80044d6:	4619      	mov	r1, r3
 80044d8:	4818      	ldr	r0, [pc, #96]	; (800453c <HAL_ADC_ConfigChannel+0x7c0>)
 80044da:	f7fe fe34 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80044de:	e021      	b.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	4a1c      	ldr	r2, [pc, #112]	; (8004558 <HAL_ADC_ConfigChannel+0x7dc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d11c      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80044ea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80044ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d116      	bne.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	4a16      	ldr	r2, [pc, #88]	; (8004554 <HAL_ADC_ConfigChannel+0x7d8>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d011      	beq.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004500:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004504:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004508:	4619      	mov	r1, r3
 800450a:	480c      	ldr	r0, [pc, #48]	; (800453c <HAL_ADC_ConfigChannel+0x7c0>)
 800450c:	f7fe fe1b 	bl	8003146 <LL_ADC_SetCommonPathInternalCh>
 8004510:	e008      	b.n	8004524 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004516:	f043 0220 	orr.w	r2, r3, #32
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800452c:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004530:	4618      	mov	r0, r3
 8004532:	37d8      	adds	r7, #216	; 0xd8
 8004534:	46bd      	mov	sp, r7
 8004536:	bd80      	pop	{r7, pc}
 8004538:	80080000 	.word	0x80080000
 800453c:	50000300 	.word	0x50000300
 8004540:	c3210000 	.word	0xc3210000
 8004544:	90c00010 	.word	0x90c00010
 8004548:	20000000 	.word	0x20000000
 800454c:	053e2d63 	.word	0x053e2d63
 8004550:	c7520000 	.word	0xc7520000
 8004554:	50000100 	.word	0x50000100
 8004558:	cb840000 	.word	0xcb840000

0800455c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe ffbb 	bl	80034e4 <LL_ADC_IsEnabled>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d14d      	bne.n	8004610 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	689a      	ldr	r2, [r3, #8]
 800457a:	4b28      	ldr	r3, [pc, #160]	; (800461c <ADC_Enable+0xc0>)
 800457c:	4013      	ands	r3, r2
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00d      	beq.n	800459e <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004586:	f043 0210 	orr.w	r2, r3, #16
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004592:	f043 0201 	orr.w	r2, r3, #1
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 800459a:	2301      	movs	r3, #1
 800459c:	e039      	b.n	8004612 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	4618      	mov	r0, r3
 80045a4:	f7fe ff8a 	bl	80034bc <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80045a8:	f7fe fdae 	bl	8003108 <HAL_GetTick>
 80045ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045ae:	e028      	b.n	8004602 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	4618      	mov	r0, r3
 80045b6:	f7fe ff95 	bl	80034e4 <LL_ADC_IsEnabled>
 80045ba:	4603      	mov	r3, r0
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d104      	bne.n	80045ca <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	4618      	mov	r0, r3
 80045c6:	f7fe ff79 	bl	80034bc <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80045ca:	f7fe fd9d 	bl	8003108 <HAL_GetTick>
 80045ce:	4602      	mov	r2, r0
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	1ad3      	subs	r3, r2, r3
 80045d4:	2b02      	cmp	r3, #2
 80045d6:	d914      	bls.n	8004602 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b01      	cmp	r3, #1
 80045e4:	d00d      	beq.n	8004602 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045ea:	f043 0210 	orr.w	r2, r3, #16
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80045f6:	f043 0201 	orr.w	r2, r3, #1
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	e007      	b.n	8004612 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	f003 0301 	and.w	r3, r3, #1
 800460c:	2b01      	cmp	r3, #1
 800460e:	d1cf      	bne.n	80045b0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8004610:	2300      	movs	r3, #0
}
 8004612:	4618      	mov	r0, r3
 8004614:	3710      	adds	r7, #16
 8004616:	46bd      	mov	sp, r7
 8004618:	bd80      	pop	{r7, pc}
 800461a:	bf00      	nop
 800461c:	8000003f 	.word	0x8000003f

08004620 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b084      	sub	sp, #16
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800462c:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004632:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004636:	2b00      	cmp	r3, #0
 8004638:	d14b      	bne.n	80046d2 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800463e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 0308 	and.w	r3, r3, #8
 8004650:	2b00      	cmp	r3, #0
 8004652:	d021      	beq.n	8004698 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	4618      	mov	r0, r3
 800465a:	f7fe fe33 	bl	80032c4 <LL_ADC_REG_IsTriggerSourceSWStart>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d032      	beq.n	80046ca <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	68db      	ldr	r3, [r3, #12]
 800466a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800466e:	2b00      	cmp	r3, #0
 8004670:	d12b      	bne.n	80046ca <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004676:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004682:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004686:	2b00      	cmp	r3, #0
 8004688:	d11f      	bne.n	80046ca <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800468e:	f043 0201 	orr.w	r2, r3, #1
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	65da      	str	r2, [r3, #92]	; 0x5c
 8004696:	e018      	b.n	80046ca <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	68db      	ldr	r3, [r3, #12]
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d111      	bne.n	80046ca <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046aa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046b6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d105      	bne.n	80046ca <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046c2:	f043 0201 	orr.w	r2, r3, #1
 80046c6:	68fb      	ldr	r3, [r7, #12]
 80046c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f7ff fb37 	bl	8003d3e <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80046d0:	e00e      	b.n	80046f0 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80046d6:	f003 0310 	and.w	r3, r3, #16
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d003      	beq.n	80046e6 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7ff fb41 	bl	8003d66 <HAL_ADC_ErrorCallback>
}
 80046e4:	e004      	b.n	80046f0 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046ea:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	4798      	blx	r3
}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}

080046f8 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	b084      	sub	sp, #16
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004704:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8004706:	68f8      	ldr	r0, [r7, #12]
 8004708:	f7ff fb23 	bl	8003d52 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800470c:	bf00      	nop
 800470e:	3710      	adds	r7, #16
 8004710:	46bd      	mov	sp, r7
 8004712:	bd80      	pop	{r7, pc}

08004714 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004714:	b580      	push	{r7, lr}
 8004716:	b084      	sub	sp, #16
 8004718:	af00      	add	r7, sp, #0
 800471a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004720:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004726:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004732:	f043 0204 	orr.w	r2, r3, #4
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f7ff fb13 	bl	8003d66 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004740:	bf00      	nop
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}

08004748 <LL_ADC_IsEnabled>:
{
 8004748:	b480      	push	{r7}
 800474a:	b083      	sub	sp, #12
 800474c:	af00      	add	r7, sp, #0
 800474e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	689b      	ldr	r3, [r3, #8]
 8004754:	f003 0301 	and.w	r3, r3, #1
 8004758:	2b01      	cmp	r3, #1
 800475a:	d101      	bne.n	8004760 <LL_ADC_IsEnabled+0x18>
 800475c:	2301      	movs	r3, #1
 800475e:	e000      	b.n	8004762 <LL_ADC_IsEnabled+0x1a>
 8004760:	2300      	movs	r3, #0
}
 8004762:	4618      	mov	r0, r3
 8004764:	370c      	adds	r7, #12
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr

0800476e <LL_ADC_REG_IsConversionOngoing>:
{
 800476e:	b480      	push	{r7}
 8004770:	b083      	sub	sp, #12
 8004772:	af00      	add	r7, sp, #0
 8004774:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	f003 0304 	and.w	r3, r3, #4
 800477e:	2b04      	cmp	r3, #4
 8004780:	d101      	bne.n	8004786 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004786:	2300      	movs	r3, #0
}
 8004788:	4618      	mov	r0, r3
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8004794:	b590      	push	{r4, r7, lr}
 8004796:	b0a1      	sub	sp, #132	; 0x84
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
 800479c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800479e:	2300      	movs	r3, #0
 80047a0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d101      	bne.n	80047b2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80047ae:	2302      	movs	r3, #2
 80047b0:	e08b      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2201      	movs	r2, #1
 80047b6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80047ba:	2300      	movs	r3, #0
 80047bc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80047be:	2300      	movs	r3, #0
 80047c0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80047ca:	d102      	bne.n	80047d2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 80047cc:	4b41      	ldr	r3, [pc, #260]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80047ce:	60bb      	str	r3, [r7, #8]
 80047d0:	e001      	b.n	80047d6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80047d2:	2300      	movs	r3, #0
 80047d4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 80047d6:	68bb      	ldr	r3, [r7, #8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047e0:	f043 0220 	orr.w	r2, r3, #32
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e06a      	b.n	80048ca <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80047f4:	68bb      	ldr	r3, [r7, #8]
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff ffb9 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 80047fc:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff ffb3 	bl	800476e <LL_ADC_REG_IsConversionOngoing>
 8004808:	4603      	mov	r3, r0
 800480a:	2b00      	cmp	r3, #0
 800480c:	d14c      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 800480e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004810:	2b00      	cmp	r3, #0
 8004812:	d149      	bne.n	80048a8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004814:	4b30      	ldr	r3, [pc, #192]	; (80048d8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8004816:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	2b00      	cmp	r3, #0
 800481e:	d028      	beq.n	8004872 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004820:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004822:	689b      	ldr	r3, [r3, #8]
 8004824:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	6859      	ldr	r1, [r3, #4]
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004832:	035b      	lsls	r3, r3, #13
 8004834:	430b      	orrs	r3, r1
 8004836:	431a      	orrs	r2, r3
 8004838:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800483a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800483c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004840:	f7ff ff82 	bl	8004748 <LL_ADC_IsEnabled>
 8004844:	4604      	mov	r4, r0
 8004846:	4823      	ldr	r0, [pc, #140]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004848:	f7ff ff7e 	bl	8004748 <LL_ADC_IsEnabled>
 800484c:	4603      	mov	r3, r0
 800484e:	4323      	orrs	r3, r4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d133      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004854:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800485c:	f023 030f 	bic.w	r3, r3, #15
 8004860:	683a      	ldr	r2, [r7, #0]
 8004862:	6811      	ldr	r1, [r2, #0]
 8004864:	683a      	ldr	r2, [r7, #0]
 8004866:	6892      	ldr	r2, [r2, #8]
 8004868:	430a      	orrs	r2, r1
 800486a:	431a      	orrs	r2, r3
 800486c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800486e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004870:	e024      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8004872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004874:	689b      	ldr	r3, [r3, #8]
 8004876:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800487a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800487c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800487e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004882:	f7ff ff61 	bl	8004748 <LL_ADC_IsEnabled>
 8004886:	4604      	mov	r4, r0
 8004888:	4812      	ldr	r0, [pc, #72]	; (80048d4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800488a:	f7ff ff5d 	bl	8004748 <LL_ADC_IsEnabled>
 800488e:	4603      	mov	r3, r0
 8004890:	4323      	orrs	r3, r4
 8004892:	2b00      	cmp	r3, #0
 8004894:	d112      	bne.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004896:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004898:	689b      	ldr	r3, [r3, #8]
 800489a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800489e:	f023 030f 	bic.w	r3, r3, #15
 80048a2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80048a4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048a6:	e009      	b.n	80048bc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048ac:	f043 0220 	orr.w	r2, r3, #32
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80048b4:	2301      	movs	r3, #1
 80048b6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80048ba:	e000      	b.n	80048be <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80048bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	2200      	movs	r2, #0
 80048c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80048c6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80048ca:	4618      	mov	r0, r3
 80048cc:	3784      	adds	r7, #132	; 0x84
 80048ce:	46bd      	mov	sp, r7
 80048d0:	bd90      	pop	{r4, r7, pc}
 80048d2:	bf00      	nop
 80048d4:	50000100 	.word	0x50000100
 80048d8:	50000300 	.word	0x50000300

080048dc <__NVIC_SetPriorityGrouping>:
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	f003 0307 	and.w	r3, r3, #7
 80048ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80048ec:	4b0c      	ldr	r3, [pc, #48]	; (8004920 <__NVIC_SetPriorityGrouping+0x44>)
 80048ee:	68db      	ldr	r3, [r3, #12]
 80048f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80048f2:	68ba      	ldr	r2, [r7, #8]
 80048f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80048f8:	4013      	ands	r3, r2
 80048fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004900:	68bb      	ldr	r3, [r7, #8]
 8004902:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004904:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800490c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800490e:	4a04      	ldr	r2, [pc, #16]	; (8004920 <__NVIC_SetPriorityGrouping+0x44>)
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	60d3      	str	r3, [r2, #12]
}
 8004914:	bf00      	nop
 8004916:	3714      	adds	r7, #20
 8004918:	46bd      	mov	sp, r7
 800491a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491e:	4770      	bx	lr
 8004920:	e000ed00 	.word	0xe000ed00

08004924 <__NVIC_GetPriorityGrouping>:
{
 8004924:	b480      	push	{r7}
 8004926:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004928:	4b04      	ldr	r3, [pc, #16]	; (800493c <__NVIC_GetPriorityGrouping+0x18>)
 800492a:	68db      	ldr	r3, [r3, #12]
 800492c:	0a1b      	lsrs	r3, r3, #8
 800492e:	f003 0307 	and.w	r3, r3, #7
}
 8004932:	4618      	mov	r0, r3
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr
 800493c:	e000ed00 	.word	0xe000ed00

08004940 <__NVIC_EnableIRQ>:
{
 8004940:	b480      	push	{r7}
 8004942:	b083      	sub	sp, #12
 8004944:	af00      	add	r7, sp, #0
 8004946:	4603      	mov	r3, r0
 8004948:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800494a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800494e:	2b00      	cmp	r3, #0
 8004950:	db0b      	blt.n	800496a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004952:	79fb      	ldrb	r3, [r7, #7]
 8004954:	f003 021f 	and.w	r2, r3, #31
 8004958:	4907      	ldr	r1, [pc, #28]	; (8004978 <__NVIC_EnableIRQ+0x38>)
 800495a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800495e:	095b      	lsrs	r3, r3, #5
 8004960:	2001      	movs	r0, #1
 8004962:	fa00 f202 	lsl.w	r2, r0, r2
 8004966:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800496a:	bf00      	nop
 800496c:	370c      	adds	r7, #12
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	e000e100 	.word	0xe000e100

0800497c <__NVIC_SetPriority>:
{
 800497c:	b480      	push	{r7}
 800497e:	b083      	sub	sp, #12
 8004980:	af00      	add	r7, sp, #0
 8004982:	4603      	mov	r3, r0
 8004984:	6039      	str	r1, [r7, #0]
 8004986:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004988:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800498c:	2b00      	cmp	r3, #0
 800498e:	db0a      	blt.n	80049a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	b2da      	uxtb	r2, r3
 8004994:	490c      	ldr	r1, [pc, #48]	; (80049c8 <__NVIC_SetPriority+0x4c>)
 8004996:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800499a:	0112      	lsls	r2, r2, #4
 800499c:	b2d2      	uxtb	r2, r2
 800499e:	440b      	add	r3, r1
 80049a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80049a4:	e00a      	b.n	80049bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	b2da      	uxtb	r2, r3
 80049aa:	4908      	ldr	r1, [pc, #32]	; (80049cc <__NVIC_SetPriority+0x50>)
 80049ac:	79fb      	ldrb	r3, [r7, #7]
 80049ae:	f003 030f 	and.w	r3, r3, #15
 80049b2:	3b04      	subs	r3, #4
 80049b4:	0112      	lsls	r2, r2, #4
 80049b6:	b2d2      	uxtb	r2, r2
 80049b8:	440b      	add	r3, r1
 80049ba:	761a      	strb	r2, [r3, #24]
}
 80049bc:	bf00      	nop
 80049be:	370c      	adds	r7, #12
 80049c0:	46bd      	mov	sp, r7
 80049c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c6:	4770      	bx	lr
 80049c8:	e000e100 	.word	0xe000e100
 80049cc:	e000ed00 	.word	0xe000ed00

080049d0 <NVIC_EncodePriority>:
{
 80049d0:	b480      	push	{r7}
 80049d2:	b089      	sub	sp, #36	; 0x24
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	f003 0307 	and.w	r3, r3, #7
 80049e2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80049e4:	69fb      	ldr	r3, [r7, #28]
 80049e6:	f1c3 0307 	rsb	r3, r3, #7
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	bf28      	it	cs
 80049ee:	2304      	movcs	r3, #4
 80049f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80049f2:	69fb      	ldr	r3, [r7, #28]
 80049f4:	3304      	adds	r3, #4
 80049f6:	2b06      	cmp	r3, #6
 80049f8:	d902      	bls.n	8004a00 <NVIC_EncodePriority+0x30>
 80049fa:	69fb      	ldr	r3, [r7, #28]
 80049fc:	3b03      	subs	r3, #3
 80049fe:	e000      	b.n	8004a02 <NVIC_EncodePriority+0x32>
 8004a00:	2300      	movs	r3, #0
 8004a02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a04:	f04f 32ff 	mov.w	r2, #4294967295
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a0e:	43da      	mvns	r2, r3
 8004a10:	68bb      	ldr	r3, [r7, #8]
 8004a12:	401a      	ands	r2, r3
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a18:	f04f 31ff 	mov.w	r1, #4294967295
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004a22:	43d9      	mvns	r1, r3
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a28:	4313      	orrs	r3, r2
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3724      	adds	r7, #36	; 0x24
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
	...

08004a38 <SysTick_Config>:
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	b082      	sub	sp, #8
 8004a3c:	af00      	add	r7, sp, #0
 8004a3e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	3b01      	subs	r3, #1
 8004a44:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a48:	d301      	bcc.n	8004a4e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8004a4a:	2301      	movs	r3, #1
 8004a4c:	e00f      	b.n	8004a6e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a4e:	4a0a      	ldr	r2, [pc, #40]	; (8004a78 <SysTick_Config+0x40>)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	3b01      	subs	r3, #1
 8004a54:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004a56:	210f      	movs	r1, #15
 8004a58:	f04f 30ff 	mov.w	r0, #4294967295
 8004a5c:	f7ff ff8e 	bl	800497c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004a60:	4b05      	ldr	r3, [pc, #20]	; (8004a78 <SysTick_Config+0x40>)
 8004a62:	2200      	movs	r2, #0
 8004a64:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004a66:	4b04      	ldr	r3, [pc, #16]	; (8004a78 <SysTick_Config+0x40>)
 8004a68:	2207      	movs	r2, #7
 8004a6a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8004a6c:	2300      	movs	r3, #0
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3708      	adds	r7, #8
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}
 8004a76:	bf00      	nop
 8004a78:	e000e010 	.word	0xe000e010

08004a7c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004a7c:	b580      	push	{r7, lr}
 8004a7e:	b082      	sub	sp, #8
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004a84:	6878      	ldr	r0, [r7, #4]
 8004a86:	f7ff ff29 	bl	80048dc <__NVIC_SetPriorityGrouping>
}
 8004a8a:	bf00      	nop
 8004a8c:	3708      	adds	r7, #8
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	4603      	mov	r3, r0
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
 8004a9e:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004aa0:	f7ff ff40 	bl	8004924 <__NVIC_GetPriorityGrouping>
 8004aa4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004aa6:	687a      	ldr	r2, [r7, #4]
 8004aa8:	68b9      	ldr	r1, [r7, #8]
 8004aaa:	6978      	ldr	r0, [r7, #20]
 8004aac:	f7ff ff90 	bl	80049d0 <NVIC_EncodePriority>
 8004ab0:	4602      	mov	r2, r0
 8004ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ab6:	4611      	mov	r1, r2
 8004ab8:	4618      	mov	r0, r3
 8004aba:	f7ff ff5f 	bl	800497c <__NVIC_SetPriority>
}
 8004abe:	bf00      	nop
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	bd80      	pop	{r7, pc}

08004ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b082      	sub	sp, #8
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	4603      	mov	r3, r0
 8004ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	f7ff ff33 	bl	8004940 <__NVIC_EnableIRQ>
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}

08004ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004ae2:	b580      	push	{r7, lr}
 8004ae4:	b082      	sub	sp, #8
 8004ae6:	af00      	add	r7, sp, #0
 8004ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004aea:	6878      	ldr	r0, [r7, #4]
 8004aec:	f7ff ffa4 	bl	8004a38 <SysTick_Config>
 8004af0:	4603      	mov	r3, r0
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3708      	adds	r7, #8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
	...

08004afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d101      	bne.n	8004b0e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e08d      	b.n	8004c2a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	461a      	mov	r2, r3
 8004b14:	4b47      	ldr	r3, [pc, #284]	; (8004c34 <HAL_DMA_Init+0x138>)
 8004b16:	429a      	cmp	r2, r3
 8004b18:	d80f      	bhi.n	8004b3a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	4b45      	ldr	r3, [pc, #276]	; (8004c38 <HAL_DMA_Init+0x13c>)
 8004b22:	4413      	add	r3, r2
 8004b24:	4a45      	ldr	r2, [pc, #276]	; (8004c3c <HAL_DMA_Init+0x140>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	091b      	lsrs	r3, r3, #4
 8004b2c:	009a      	lsls	r2, r3, #2
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	4a42      	ldr	r2, [pc, #264]	; (8004c40 <HAL_DMA_Init+0x144>)
 8004b36:	641a      	str	r2, [r3, #64]	; 0x40
 8004b38:	e00e      	b.n	8004b58 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	461a      	mov	r2, r3
 8004b40:	4b40      	ldr	r3, [pc, #256]	; (8004c44 <HAL_DMA_Init+0x148>)
 8004b42:	4413      	add	r3, r2
 8004b44:	4a3d      	ldr	r2, [pc, #244]	; (8004c3c <HAL_DMA_Init+0x140>)
 8004b46:	fba2 2303 	umull	r2, r3, r2, r3
 8004b4a:	091b      	lsrs	r3, r3, #4
 8004b4c:	009a      	lsls	r2, r3, #2
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	4a3c      	ldr	r2, [pc, #240]	; (8004c48 <HAL_DMA_Init+0x14c>)
 8004b56:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2202      	movs	r2, #2
 8004b5c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8004b6e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b72:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004b7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	691b      	ldr	r3, [r3, #16]
 8004b82:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	699b      	ldr	r3, [r3, #24]
 8004b8e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	6a1b      	ldr	r3, [r3, #32]
 8004b9a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004b9c:	68fa      	ldr	r2, [r7, #12]
 8004b9e:	4313      	orrs	r3, r2
 8004ba0:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	68fa      	ldr	r2, [r7, #12]
 8004ba8:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004baa:	6878      	ldr	r0, [r7, #4]
 8004bac:	f000 f9b6 	bl	8004f1c <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	689b      	ldr	r3, [r3, #8]
 8004bb4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004bb8:	d102      	bne.n	8004bc0 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd0:	687a      	ldr	r2, [r7, #4]
 8004bd2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004bd4:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d010      	beq.n	8004c00 <HAL_DMA_Init+0x104>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	2b04      	cmp	r3, #4
 8004be4:	d80c      	bhi.n	8004c00 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004be6:	6878      	ldr	r0, [r7, #4]
 8004be8:	f000 f9d6 	bl	8004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bf8:	687a      	ldr	r2, [r7, #4]
 8004bfa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004bfc:	605a      	str	r2, [r3, #4]
 8004bfe:	e008      	b.n	8004c12 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2200      	movs	r2, #0
 8004c16:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2200      	movs	r2, #0
 8004c24:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004c28:	2300      	movs	r3, #0
}
 8004c2a:	4618      	mov	r0, r3
 8004c2c:	3710      	adds	r7, #16
 8004c2e:	46bd      	mov	sp, r7
 8004c30:	bd80      	pop	{r7, pc}
 8004c32:	bf00      	nop
 8004c34:	40020407 	.word	0x40020407
 8004c38:	bffdfff8 	.word	0xbffdfff8
 8004c3c:	cccccccd 	.word	0xcccccccd
 8004c40:	40020000 	.word	0x40020000
 8004c44:	bffdfbf8 	.word	0xbffdfbf8
 8004c48:	40020400 	.word	0x40020400

08004c4c <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b086      	sub	sp, #24
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
 8004c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004c5a:	2300      	movs	r3, #0
 8004c5c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d101      	bne.n	8004c6c <HAL_DMA_Start_IT+0x20>
 8004c68:	2302      	movs	r3, #2
 8004c6a:	e066      	b.n	8004d3a <HAL_DMA_Start_IT+0xee>
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004c7a:	b2db      	uxtb	r3, r3
 8004c7c:	2b01      	cmp	r3, #1
 8004c7e:	d155      	bne.n	8004d2c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2202      	movs	r2, #2
 8004c84:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	681a      	ldr	r2, [r3, #0]
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f022 0201 	bic.w	r2, r2, #1
 8004c9c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004c9e:	683b      	ldr	r3, [r7, #0]
 8004ca0:	687a      	ldr	r2, [r7, #4]
 8004ca2:	68b9      	ldr	r1, [r7, #8]
 8004ca4:	68f8      	ldr	r0, [r7, #12]
 8004ca6:	f000 f8fb 	bl	8004ea0 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d008      	beq.n	8004cc4 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 020e 	orr.w	r2, r2, #14
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e00f      	b.n	8004ce4 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	68fb      	ldr	r3, [r7, #12]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 020a 	orr.w	r2, r2, #10
 8004ce2:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d007      	beq.n	8004d02 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cf6:	681a      	ldr	r2, [r3, #0]
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004cfc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d00:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d007      	beq.n	8004d1a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	681a      	ldr	r2, [r3, #0]
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d14:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d18:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f042 0201 	orr.w	r2, r2, #1
 8004d28:	601a      	str	r2, [r3, #0]
 8004d2a:	e005      	b.n	8004d38 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	2200      	movs	r2, #0
 8004d30:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004d34:	2302      	movs	r3, #2
 8004d36:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004d38:	7dfb      	ldrb	r3, [r7, #23]
}
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	3718      	adds	r7, #24
 8004d3e:	46bd      	mov	sp, r7
 8004d40:	bd80      	pop	{r7, pc}

08004d42 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004d42:	b580      	push	{r7, lr}
 8004d44:	b084      	sub	sp, #16
 8004d46:	af00      	add	r7, sp, #0
 8004d48:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d5e:	f003 031f 	and.w	r3, r3, #31
 8004d62:	2204      	movs	r2, #4
 8004d64:	409a      	lsls	r2, r3
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	4013      	ands	r3, r2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d026      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x7a>
 8004d6e:	68bb      	ldr	r3, [r7, #8]
 8004d70:	f003 0304 	and.w	r3, r3, #4
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d021      	beq.n	8004dbc <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	681b      	ldr	r3, [r3, #0]
 8004d7e:	f003 0320 	and.w	r3, r3, #32
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d107      	bne.n	8004d96 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	681a      	ldr	r2, [r3, #0]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	f022 0204 	bic.w	r2, r2, #4
 8004d94:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004d9a:	f003 021f 	and.w	r2, r3, #31
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004da2:	2104      	movs	r1, #4
 8004da4:	fa01 f202 	lsl.w	r2, r1, r2
 8004da8:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d071      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8004dba:	e06c      	b.n	8004e96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dc0:	f003 031f 	and.w	r3, r3, #31
 8004dc4:	2202      	movs	r2, #2
 8004dc6:	409a      	lsls	r2, r3
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	4013      	ands	r3, r2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d02e      	beq.n	8004e2e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	f003 0302 	and.w	r3, r3, #2
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d029      	beq.n	8004e2e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	f003 0320 	and.w	r3, r3, #32
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d10b      	bne.n	8004e00 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	f022 020a 	bic.w	r2, r2, #10
 8004df6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e04:	f003 021f 	and.w	r2, r3, #31
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e0c:	2102      	movs	r1, #2
 8004e0e:	fa01 f202 	lsl.w	r2, r1, r2
 8004e12:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2200      	movs	r2, #0
 8004e18:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d038      	beq.n	8004e96 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e28:	6878      	ldr	r0, [r7, #4]
 8004e2a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004e2c:	e033      	b.n	8004e96 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e32:	f003 031f 	and.w	r3, r3, #31
 8004e36:	2208      	movs	r2, #8
 8004e38:	409a      	lsls	r2, r3
 8004e3a:	68fb      	ldr	r3, [r7, #12]
 8004e3c:	4013      	ands	r3, r2
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	d02a      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004e42:	68bb      	ldr	r3, [r7, #8]
 8004e44:	f003 0308 	and.w	r3, r3, #8
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d025      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f022 020e 	bic.w	r2, r2, #14
 8004e5a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e60:	f003 021f 	and.w	r2, r3, #31
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e68:	2101      	movs	r1, #1
 8004e6a:	fa01 f202 	lsl.w	r2, r1, r2
 8004e6e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2201      	movs	r2, #1
 8004e74:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	2200      	movs	r2, #0
 8004e82:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d004      	beq.n	8004e98 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e92:	6878      	ldr	r0, [r7, #4]
 8004e94:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004e96:	bf00      	nop
 8004e98:	bf00      	nop
}
 8004e9a:	3710      	adds	r7, #16
 8004e9c:	46bd      	mov	sp, r7
 8004e9e:	bd80      	pop	{r7, pc}

08004ea0 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004ea0:	b480      	push	{r7}
 8004ea2:	b085      	sub	sp, #20
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	60f8      	str	r0, [r7, #12]
 8004ea8:	60b9      	str	r1, [r7, #8]
 8004eaa:	607a      	str	r2, [r7, #4]
 8004eac:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	68fa      	ldr	r2, [r7, #12]
 8004eb4:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004eb6:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d004      	beq.n	8004eca <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004ec8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ece:	f003 021f 	and.w	r2, r3, #31
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ed6:	2101      	movs	r1, #1
 8004ed8:	fa01 f202 	lsl.w	r2, r1, r2
 8004edc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	683a      	ldr	r2, [r7, #0]
 8004ee4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	689b      	ldr	r3, [r3, #8]
 8004eea:	2b10      	cmp	r3, #16
 8004eec:	d108      	bne.n	8004f00 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	687a      	ldr	r2, [r7, #4]
 8004ef4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	68ba      	ldr	r2, [r7, #8]
 8004efc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004efe:	e007      	b.n	8004f10 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	68ba      	ldr	r2, [r7, #8]
 8004f06:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	687a      	ldr	r2, [r7, #4]
 8004f0e:	60da      	str	r2, [r3, #12]
}
 8004f10:	bf00      	nop
 8004f12:	3714      	adds	r7, #20
 8004f14:	46bd      	mov	sp, r7
 8004f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1a:	4770      	bx	lr

08004f1c <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b087      	sub	sp, #28
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	4b16      	ldr	r3, [pc, #88]	; (8004f84 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004f2c:	429a      	cmp	r2, r3
 8004f2e:	d802      	bhi.n	8004f36 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004f30:	4b15      	ldr	r3, [pc, #84]	; (8004f88 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004f32:	617b      	str	r3, [r7, #20]
 8004f34:	e001      	b.n	8004f3a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 8004f36:	4b15      	ldr	r3, [pc, #84]	; (8004f8c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004f38:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	b2db      	uxtb	r3, r3
 8004f44:	3b08      	subs	r3, #8
 8004f46:	4a12      	ldr	r2, [pc, #72]	; (8004f90 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004f48:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f54:	089b      	lsrs	r3, r3, #2
 8004f56:	009a      	lsls	r2, r3, #2
 8004f58:	693b      	ldr	r3, [r7, #16]
 8004f5a:	4413      	add	r3, r2
 8004f5c:	461a      	mov	r2, r3
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a0b      	ldr	r2, [pc, #44]	; (8004f94 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004f66:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	f003 031f 	and.w	r3, r3, #31
 8004f6e:	2201      	movs	r2, #1
 8004f70:	409a      	lsls	r2, r3
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004f76:	bf00      	nop
 8004f78:	371c      	adds	r7, #28
 8004f7a:	46bd      	mov	sp, r7
 8004f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	40020407 	.word	0x40020407
 8004f88:	40020800 	.word	0x40020800
 8004f8c:	40020820 	.word	0x40020820
 8004f90:	cccccccd 	.word	0xcccccccd
 8004f94:	40020880 	.word	0x40020880

08004f98 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004f98:	b480      	push	{r7}
 8004f9a:	b085      	sub	sp, #20
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	685b      	ldr	r3, [r3, #4]
 8004fa4:	b2db      	uxtb	r3, r3
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004fa8:	68fa      	ldr	r2, [r7, #12]
 8004faa:	4b0b      	ldr	r3, [pc, #44]	; (8004fd8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8004fac:	4413      	add	r3, r2
 8004fae:	009b      	lsls	r3, r3, #2
 8004fb0:	461a      	mov	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	4a08      	ldr	r2, [pc, #32]	; (8004fdc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 8004fba:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	3b01      	subs	r3, #1
 8004fc0:	f003 031f 	and.w	r3, r3, #31
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	409a      	lsls	r2, r3
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004fcc:	bf00      	nop
 8004fce:	3714      	adds	r7, #20
 8004fd0:	46bd      	mov	sp, r7
 8004fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd6:	4770      	bx	lr
 8004fd8:	1000823f 	.word	0x1000823f
 8004fdc:	40020940 	.word	0x40020940

08004fe0 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004fe0:	b580      	push	{r7, lr}
 8004fe2:	b084      	sub	sp, #16
 8004fe4:	af00      	add	r7, sp, #0
 8004fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d101      	bne.n	8004ff2 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e147      	b.n	8005282 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d106      	bne.n	800500c <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2200      	movs	r2, #0
 8005002:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7fb ffd0 	bl	8000fac <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	699a      	ldr	r2, [r3, #24]
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f022 0210 	bic.w	r2, r2, #16
 800501a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800501c:	f7fe f874 	bl	8003108 <HAL_GetTick>
 8005020:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8005022:	e012      	b.n	800504a <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005024:	f7fe f870 	bl	8003108 <HAL_GetTick>
 8005028:	4602      	mov	r2, r0
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	1ad3      	subs	r3, r2, r3
 800502e:	2b0a      	cmp	r3, #10
 8005030:	d90b      	bls.n	800504a <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005036:	f043 0201 	orr.w	r2, r3, #1
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	2203      	movs	r2, #3
 8005042:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005046:	2301      	movs	r3, #1
 8005048:	e11b      	b.n	8005282 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	699b      	ldr	r3, [r3, #24]
 8005050:	f003 0308 	and.w	r3, r3, #8
 8005054:	2b08      	cmp	r3, #8
 8005056:	d0e5      	beq.n	8005024 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699a      	ldr	r2, [r3, #24]
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f042 0201 	orr.w	r2, r2, #1
 8005066:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8005068:	f7fe f84e 	bl	8003108 <HAL_GetTick>
 800506c:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800506e:	e012      	b.n	8005096 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8005070:	f7fe f84a 	bl	8003108 <HAL_GetTick>
 8005074:	4602      	mov	r2, r0
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	1ad3      	subs	r3, r2, r3
 800507a:	2b0a      	cmp	r3, #10
 800507c:	d90b      	bls.n	8005096 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005082:	f043 0201 	orr.w	r2, r3, #1
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2203      	movs	r2, #3
 800508e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8005092:	2301      	movs	r3, #1
 8005094:	e0f5      	b.n	8005282 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	699b      	ldr	r3, [r3, #24]
 800509c:	f003 0301 	and.w	r3, r3, #1
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	d0e5      	beq.n	8005070 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699a      	ldr	r2, [r3, #24]
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f042 0202 	orr.w	r2, r2, #2
 80050b2:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	4a74      	ldr	r2, [pc, #464]	; (800528c <HAL_FDCAN_Init+0x2ac>)
 80050ba:	4293      	cmp	r3, r2
 80050bc:	d103      	bne.n	80050c6 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80050be:	4a74      	ldr	r2, [pc, #464]	; (8005290 <HAL_FDCAN_Init+0x2b0>)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	685b      	ldr	r3, [r3, #4]
 80050c4:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	7c1b      	ldrb	r3, [r3, #16]
 80050ca:	2b01      	cmp	r3, #1
 80050cc:	d108      	bne.n	80050e0 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	699a      	ldr	r2, [r3, #24]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80050dc:	619a      	str	r2, [r3, #24]
 80050de:	e007      	b.n	80050f0 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	699a      	ldr	r2, [r3, #24]
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80050ee:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	7c5b      	ldrb	r3, [r3, #17]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d108      	bne.n	800510a <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	699a      	ldr	r2, [r3, #24]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005106:	619a      	str	r2, [r3, #24]
 8005108:	e007      	b.n	800511a <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	699a      	ldr	r2, [r3, #24]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005118:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	7c9b      	ldrb	r3, [r3, #18]
 800511e:	2b01      	cmp	r3, #1
 8005120:	d108      	bne.n	8005134 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	699a      	ldr	r2, [r3, #24]
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005130:	619a      	str	r2, [r3, #24]
 8005132:	e007      	b.n	8005144 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	699a      	ldr	r2, [r3, #24]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005142:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	699b      	ldr	r3, [r3, #24]
 800514a:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	689a      	ldr	r2, [r3, #8]
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	430a      	orrs	r2, r1
 8005158:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	687b      	ldr	r3, [r7, #4]
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8005168:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	691a      	ldr	r2, [r3, #16]
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f022 0210 	bic.w	r2, r2, #16
 8005178:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	68db      	ldr	r3, [r3, #12]
 800517e:	2b01      	cmp	r3, #1
 8005180:	d108      	bne.n	8005194 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	699a      	ldr	r2, [r3, #24]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f042 0204 	orr.w	r2, r2, #4
 8005190:	619a      	str	r2, [r3, #24]
 8005192:	e02c      	b.n	80051ee <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	68db      	ldr	r3, [r3, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d028      	beq.n	80051ee <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	2b02      	cmp	r3, #2
 80051a2:	d01c      	beq.n	80051de <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	699a      	ldr	r2, [r3, #24]
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80051b2:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	691a      	ldr	r2, [r3, #16]
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	f042 0210 	orr.w	r2, r2, #16
 80051c2:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	68db      	ldr	r3, [r3, #12]
 80051c8:	2b03      	cmp	r3, #3
 80051ca:	d110      	bne.n	80051ee <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	699a      	ldr	r2, [r3, #24]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	f042 0220 	orr.w	r2, r2, #32
 80051da:	619a      	str	r2, [r3, #24]
 80051dc:	e007      	b.n	80051ee <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	699a      	ldr	r2, [r3, #24]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f042 0220 	orr.w	r2, r2, #32
 80051ec:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	699b      	ldr	r3, [r3, #24]
 80051f2:	3b01      	subs	r3, #1
 80051f4:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	69db      	ldr	r3, [r3, #28]
 80051fa:	3b01      	subs	r3, #1
 80051fc:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 80051fe:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	6a1b      	ldr	r3, [r3, #32]
 8005204:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8005206:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	3b01      	subs	r3, #1
 8005210:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8005216:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8005218:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	689b      	ldr	r3, [r3, #8]
 800521e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8005222:	d115      	bne.n	8005250 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005228:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800522e:	3b01      	subs	r3, #1
 8005230:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005232:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005238:	3b01      	subs	r3, #1
 800523a:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 800523c:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005244:	3b01      	subs	r3, #1
 8005246:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 800524c:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800524e:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	430a      	orrs	r2, r1
 8005262:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 f9c2 	bl	80055f0 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2200      	movs	r2, #0
 8005270:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	2200      	movs	r2, #0
 8005276:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8005280:	2300      	movs	r3, #0
}
 8005282:	4618      	mov	r0, r3
 8005284:	3710      	adds	r7, #16
 8005286:	46bd      	mov	sp, r7
 8005288:	bd80      	pop	{r7, pc}
 800528a:	bf00      	nop
 800528c:	40006400 	.word	0x40006400
 8005290:	40006500 	.word	0x40006500

08005294 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8005294:	b580      	push	{r7, lr}
 8005296:	b08a      	sub	sp, #40	; 0x28
 8005298:	af00      	add	r7, sp, #0
 800529a:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052a2:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80052a6:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80052b0:	4013      	ands	r3, r2
 80052b2:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ba:	f003 0307 	and.w	r3, r3, #7
 80052be:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052c6:	6a3a      	ldr	r2, [r7, #32]
 80052c8:	4013      	ands	r3, r2
 80052ca:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052d2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80052d6:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052de:	69fa      	ldr	r2, [r7, #28]
 80052e0:	4013      	ands	r3, r2
 80052e2:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052ea:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 80052ee:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052f6:	69ba      	ldr	r2, [r7, #24]
 80052f8:	4013      	ands	r3, r2
 80052fa:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005302:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8005306:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	4013      	ands	r3, r2
 8005312:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800531a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00d      	beq.n	800533e <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005328:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800532c:	2b00      	cmp	r3, #0
 800532e:	d006      	beq.n	800533e <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	2240      	movs	r2, #64	; 0x40
 8005336:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8005338:	6878      	ldr	r0, [r7, #4]
 800533a:	f000 f939 	bl	80055b0 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005344:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005348:	2b00      	cmp	r3, #0
 800534a:	d01b      	beq.n	8005384 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005352:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005356:	2b00      	cmp	r3, #0
 8005358:	d014      	beq.n	8005384 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8005362:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800536c:	693a      	ldr	r2, [r7, #16]
 800536e:	4013      	ands	r3, r2
 8005370:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f44f 7280 	mov.w	r2, #256	; 0x100
 800537a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 800537c:	6939      	ldr	r1, [r7, #16]
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f000 f8f7 	bl	8005572 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8005384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005386:	2b00      	cmp	r3, #0
 8005388:	d007      	beq.n	800539a <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8005392:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005394:	6878      	ldr	r0, [r7, #4]
 8005396:	f000 f8b6 	bl	8005506 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 800539a:	6a3b      	ldr	r3, [r7, #32]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d007      	beq.n	80053b0 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	6a3a      	ldr	r2, [r7, #32]
 80053a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80053a8:	6a39      	ldr	r1, [r7, #32]
 80053aa:	6878      	ldr	r0, [r7, #4]
 80053ac:	f000 f8b6 	bl	800551c <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80053b0:	69fb      	ldr	r3, [r7, #28]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d007      	beq.n	80053c6 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	681b      	ldr	r3, [r3, #0]
 80053ba:	69fa      	ldr	r2, [r7, #28]
 80053bc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80053be:	69f9      	ldr	r1, [r7, #28]
 80053c0:	6878      	ldr	r0, [r7, #4]
 80053c2:	f000 f8b6 	bl	8005532 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d00e      	beq.n	80053f2 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d007      	beq.n	80053f2 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80053ea:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 80053ec:	6878      	ldr	r0, [r7, #4]
 80053ee:	f000 f8ab 	bl	8005548 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d01a      	beq.n	8005436 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005406:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800540a:	2b00      	cmp	r3, #0
 800540c:	d013      	beq.n	8005436 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8005416:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8005420:	68fa      	ldr	r2, [r7, #12]
 8005422:	4013      	ands	r3, r2
 8005424:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	2280      	movs	r2, #128	; 0x80
 800542c:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800542e:	68f9      	ldr	r1, [r7, #12]
 8005430:	6878      	ldr	r0, [r7, #4]
 8005432:	f000 f893 	bl	800555c <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800543c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00e      	beq.n	8005462 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800544a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d007      	beq.n	8005462 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800545a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 800545c:	6878      	ldr	r0, [r7, #4]
 800545e:	f000 f893 	bl	8005588 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005468:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00e      	beq.n	800548e <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005476:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800547a:	2b00      	cmp	r3, #0
 800547c:	d007      	beq.n	800548e <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8005486:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8005488:	6878      	ldr	r0, [r7, #4]
 800548a:	f000 f887 	bl	800559c <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005494:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005498:	2b00      	cmp	r3, #0
 800549a:	d011      	beq.n	80054c0 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80054a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d00a      	beq.n	80054c0 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054b8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d007      	beq.n	80054d6 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	697a      	ldr	r2, [r7, #20]
 80054cc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80054ce:	6979      	ldr	r1, [r7, #20]
 80054d0:	6878      	ldr	r0, [r7, #4]
 80054d2:	f000 f881 	bl	80055d8 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d009      	beq.n	80054f0 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	69ba      	ldr	r2, [r7, #24]
 80054e2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	431a      	orrs	r2, r3
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d002      	beq.n	80054fe <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 80054f8:	6878      	ldr	r0, [r7, #4]
 80054fa:	f000 f863 	bl	80055c4 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 80054fe:	bf00      	nop
 8005500:	3728      	adds	r7, #40	; 0x28
 8005502:	46bd      	mov	sp, r7
 8005504:	bd80      	pop	{r7, pc}

08005506 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8005506:	b480      	push	{r7}
 8005508:	b083      	sub	sp, #12
 800550a:	af00      	add	r7, sp, #0
 800550c:	6078      	str	r0, [r7, #4]
 800550e:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8005510:	bf00      	nop
 8005512:	370c      	adds	r7, #12
 8005514:	46bd      	mov	sp, r7
 8005516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551a:	4770      	bx	lr

0800551c <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 800551c:	b480      	push	{r7}
 800551e:	b083      	sub	sp, #12
 8005520:	af00      	add	r7, sp, #0
 8005522:	6078      	str	r0, [r7, #4]
 8005524:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8005526:	bf00      	nop
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8005532:	b480      	push	{r7}
 8005534:	b083      	sub	sp, #12
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
 800553a:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 800553c:	bf00      	nop
 800553e:	370c      	adds	r7, #12
 8005540:	46bd      	mov	sp, r7
 8005542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005546:	4770      	bx	lr

08005548 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005548:	b480      	push	{r7}
 800554a:	b083      	sub	sp, #12
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8005550:	bf00      	nop
 8005552:	370c      	adds	r7, #12
 8005554:	46bd      	mov	sp, r7
 8005556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555a:	4770      	bx	lr

0800555c <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800555c:	b480      	push	{r7}
 800555e:	b083      	sub	sp, #12
 8005560:	af00      	add	r7, sp, #0
 8005562:	6078      	str	r0, [r7, #4]
 8005564:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 800557c:	bf00      	nop
 800557e:	370c      	adds	r7, #12
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr

08005588 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8005588:	b480      	push	{r7}
 800558a:	b083      	sub	sp, #12
 800558c:	af00      	add	r7, sp, #0
 800558e:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8005590:	bf00      	nop
 8005592:	370c      	adds	r7, #12
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 800559c:	b480      	push	{r7}
 800559e:	b083      	sub	sp, #12
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80055a4:	bf00      	nop
 80055a6:	370c      	adds	r7, #12
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b083      	sub	sp, #12
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80055b8:	bf00      	nop
 80055ba:	370c      	adds	r7, #12
 80055bc:	46bd      	mov	sp, r7
 80055be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c2:	4770      	bx	lr

080055c4 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80055c4:	b480      	push	{r7}
 80055c6:	b083      	sub	sp, #12
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
 80055e0:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 80055e2:	bf00      	nop
 80055e4:	370c      	adds	r7, #12
 80055e6:	46bd      	mov	sp, r7
 80055e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ec:	4770      	bx	lr
	...

080055f0 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b085      	sub	sp, #20
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 80055f8:	4b27      	ldr	r3, [pc, #156]	; (8005698 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 80055fa:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	68ba      	ldr	r2, [r7, #8]
 8005600:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800560a:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005612:	041a      	lsls	r2, r3, #16
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	430a      	orrs	r2, r1
 800561a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800561e:	68bb      	ldr	r3, [r7, #8]
 8005620:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005630:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005638:	061a      	lsls	r2, r3, #24
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	430a      	orrs	r2, r1
 8005640:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800564e:	68bb      	ldr	r3, [r7, #8]
 8005650:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8005658:	68bb      	ldr	r3, [r7, #8]
 800565a:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 800566c:	68bb      	ldr	r3, [r7, #8]
 800566e:	60fb      	str	r3, [r7, #12]
 8005670:	e005      	b.n	800567e <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	3304      	adds	r3, #4
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	68bb      	ldr	r3, [r7, #8]
 8005680:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8005684:	68fa      	ldr	r2, [r7, #12]
 8005686:	429a      	cmp	r2, r3
 8005688:	d3f3      	bcc.n	8005672 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 800568a:	bf00      	nop
 800568c:	bf00      	nop
 800568e:	3714      	adds	r7, #20
 8005690:	46bd      	mov	sp, r7
 8005692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005696:	4770      	bx	lr
 8005698:	4000a400 	.word	0x4000a400

0800569c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800569c:	b480      	push	{r7}
 800569e:	b087      	sub	sp, #28
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80056a6:	2300      	movs	r3, #0
 80056a8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80056aa:	e15a      	b.n	8005962 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	2101      	movs	r1, #1
 80056b2:	697b      	ldr	r3, [r7, #20]
 80056b4:	fa01 f303 	lsl.w	r3, r1, r3
 80056b8:	4013      	ands	r3, r2
 80056ba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	f000 814c 	beq.w	800595c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	685b      	ldr	r3, [r3, #4]
 80056c8:	f003 0303 	and.w	r3, r3, #3
 80056cc:	2b01      	cmp	r3, #1
 80056ce:	d005      	beq.n	80056dc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80056d8:	2b02      	cmp	r3, #2
 80056da:	d130      	bne.n	800573e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	689b      	ldr	r3, [r3, #8]
 80056e0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80056e2:	697b      	ldr	r3, [r7, #20]
 80056e4:	005b      	lsls	r3, r3, #1
 80056e6:	2203      	movs	r2, #3
 80056e8:	fa02 f303 	lsl.w	r3, r2, r3
 80056ec:	43db      	mvns	r3, r3
 80056ee:	693a      	ldr	r2, [r7, #16]
 80056f0:	4013      	ands	r3, r2
 80056f2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80056f4:	683b      	ldr	r3, [r7, #0]
 80056f6:	68da      	ldr	r2, [r3, #12]
 80056f8:	697b      	ldr	r3, [r7, #20]
 80056fa:	005b      	lsls	r3, r3, #1
 80056fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	4313      	orrs	r3, r2
 8005704:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	693a      	ldr	r2, [r7, #16]
 800570a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005712:	2201      	movs	r2, #1
 8005714:	697b      	ldr	r3, [r7, #20]
 8005716:	fa02 f303 	lsl.w	r3, r2, r3
 800571a:	43db      	mvns	r3, r3
 800571c:	693a      	ldr	r2, [r7, #16]
 800571e:	4013      	ands	r3, r2
 8005720:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	685b      	ldr	r3, [r3, #4]
 8005726:	091b      	lsrs	r3, r3, #4
 8005728:	f003 0201 	and.w	r2, r3, #1
 800572c:	697b      	ldr	r3, [r7, #20]
 800572e:	fa02 f303 	lsl.w	r3, r2, r3
 8005732:	693a      	ldr	r2, [r7, #16]
 8005734:	4313      	orrs	r3, r2
 8005736:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	693a      	ldr	r2, [r7, #16]
 800573c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800573e:	683b      	ldr	r3, [r7, #0]
 8005740:	685b      	ldr	r3, [r3, #4]
 8005742:	f003 0303 	and.w	r3, r3, #3
 8005746:	2b03      	cmp	r3, #3
 8005748:	d017      	beq.n	800577a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	68db      	ldr	r3, [r3, #12]
 800574e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005750:	697b      	ldr	r3, [r7, #20]
 8005752:	005b      	lsls	r3, r3, #1
 8005754:	2203      	movs	r2, #3
 8005756:	fa02 f303 	lsl.w	r3, r2, r3
 800575a:	43db      	mvns	r3, r3
 800575c:	693a      	ldr	r2, [r7, #16]
 800575e:	4013      	ands	r3, r2
 8005760:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	689a      	ldr	r2, [r3, #8]
 8005766:	697b      	ldr	r3, [r7, #20]
 8005768:	005b      	lsls	r3, r3, #1
 800576a:	fa02 f303 	lsl.w	r3, r2, r3
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	4313      	orrs	r3, r2
 8005772:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	693a      	ldr	r2, [r7, #16]
 8005778:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800577a:	683b      	ldr	r3, [r7, #0]
 800577c:	685b      	ldr	r3, [r3, #4]
 800577e:	f003 0303 	and.w	r3, r3, #3
 8005782:	2b02      	cmp	r3, #2
 8005784:	d123      	bne.n	80057ce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8005786:	697b      	ldr	r3, [r7, #20]
 8005788:	08da      	lsrs	r2, r3, #3
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	3208      	adds	r2, #8
 800578e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005792:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8005794:	697b      	ldr	r3, [r7, #20]
 8005796:	f003 0307 	and.w	r3, r3, #7
 800579a:	009b      	lsls	r3, r3, #2
 800579c:	220f      	movs	r2, #15
 800579e:	fa02 f303 	lsl.w	r3, r2, r3
 80057a2:	43db      	mvns	r3, r3
 80057a4:	693a      	ldr	r2, [r7, #16]
 80057a6:	4013      	ands	r3, r2
 80057a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	691a      	ldr	r2, [r3, #16]
 80057ae:	697b      	ldr	r3, [r7, #20]
 80057b0:	f003 0307 	and.w	r3, r3, #7
 80057b4:	009b      	lsls	r3, r3, #2
 80057b6:	fa02 f303 	lsl.w	r3, r2, r3
 80057ba:	693a      	ldr	r2, [r7, #16]
 80057bc:	4313      	orrs	r3, r2
 80057be:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80057c0:	697b      	ldr	r3, [r7, #20]
 80057c2:	08da      	lsrs	r2, r3, #3
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	3208      	adds	r2, #8
 80057c8:	6939      	ldr	r1, [r7, #16]
 80057ca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	005b      	lsls	r3, r3, #1
 80057d8:	2203      	movs	r2, #3
 80057da:	fa02 f303 	lsl.w	r3, r2, r3
 80057de:	43db      	mvns	r3, r3
 80057e0:	693a      	ldr	r2, [r7, #16]
 80057e2:	4013      	ands	r3, r2
 80057e4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80057e6:	683b      	ldr	r3, [r7, #0]
 80057e8:	685b      	ldr	r3, [r3, #4]
 80057ea:	f003 0203 	and.w	r2, r3, #3
 80057ee:	697b      	ldr	r3, [r7, #20]
 80057f0:	005b      	lsls	r3, r3, #1
 80057f2:	fa02 f303 	lsl.w	r3, r2, r3
 80057f6:	693a      	ldr	r2, [r7, #16]
 80057f8:	4313      	orrs	r3, r2
 80057fa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	693a      	ldr	r2, [r7, #16]
 8005800:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005802:	683b      	ldr	r3, [r7, #0]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800580a:	2b00      	cmp	r3, #0
 800580c:	f000 80a6 	beq.w	800595c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005810:	4b5b      	ldr	r3, [pc, #364]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 8005812:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005814:	4a5a      	ldr	r2, [pc, #360]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 8005816:	f043 0301 	orr.w	r3, r3, #1
 800581a:	6613      	str	r3, [r2, #96]	; 0x60
 800581c:	4b58      	ldr	r3, [pc, #352]	; (8005980 <HAL_GPIO_Init+0x2e4>)
 800581e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005820:	f003 0301 	and.w	r3, r3, #1
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005828:	4a56      	ldr	r2, [pc, #344]	; (8005984 <HAL_GPIO_Init+0x2e8>)
 800582a:	697b      	ldr	r3, [r7, #20]
 800582c:	089b      	lsrs	r3, r3, #2
 800582e:	3302      	adds	r3, #2
 8005830:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005834:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8005836:	697b      	ldr	r3, [r7, #20]
 8005838:	f003 0303 	and.w	r3, r3, #3
 800583c:	009b      	lsls	r3, r3, #2
 800583e:	220f      	movs	r2, #15
 8005840:	fa02 f303 	lsl.w	r3, r2, r3
 8005844:	43db      	mvns	r3, r3
 8005846:	693a      	ldr	r2, [r7, #16]
 8005848:	4013      	ands	r3, r2
 800584a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005852:	d01f      	beq.n	8005894 <HAL_GPIO_Init+0x1f8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a4c      	ldr	r2, [pc, #304]	; (8005988 <HAL_GPIO_Init+0x2ec>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d019      	beq.n	8005890 <HAL_GPIO_Init+0x1f4>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a4b      	ldr	r2, [pc, #300]	; (800598c <HAL_GPIO_Init+0x2f0>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d013      	beq.n	800588c <HAL_GPIO_Init+0x1f0>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a4a      	ldr	r2, [pc, #296]	; (8005990 <HAL_GPIO_Init+0x2f4>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00d      	beq.n	8005888 <HAL_GPIO_Init+0x1ec>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a49      	ldr	r2, [pc, #292]	; (8005994 <HAL_GPIO_Init+0x2f8>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <HAL_GPIO_Init+0x1e8>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a48      	ldr	r2, [pc, #288]	; (8005998 <HAL_GPIO_Init+0x2fc>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d101      	bne.n	8005880 <HAL_GPIO_Init+0x1e4>
 800587c:	2305      	movs	r3, #5
 800587e:	e00a      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 8005880:	2306      	movs	r3, #6
 8005882:	e008      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 8005884:	2304      	movs	r3, #4
 8005886:	e006      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 8005888:	2303      	movs	r3, #3
 800588a:	e004      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 800588c:	2302      	movs	r3, #2
 800588e:	e002      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <HAL_GPIO_Init+0x1fa>
 8005894:	2300      	movs	r3, #0
 8005896:	697a      	ldr	r2, [r7, #20]
 8005898:	f002 0203 	and.w	r2, r2, #3
 800589c:	0092      	lsls	r2, r2, #2
 800589e:	4093      	lsls	r3, r2
 80058a0:	693a      	ldr	r2, [r7, #16]
 80058a2:	4313      	orrs	r3, r2
 80058a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80058a6:	4937      	ldr	r1, [pc, #220]	; (8005984 <HAL_GPIO_Init+0x2e8>)
 80058a8:	697b      	ldr	r3, [r7, #20]
 80058aa:	089b      	lsrs	r3, r3, #2
 80058ac:	3302      	adds	r3, #2
 80058ae:	693a      	ldr	r2, [r7, #16]
 80058b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80058b4:	4b39      	ldr	r3, [pc, #228]	; (800599c <HAL_GPIO_Init+0x300>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	43db      	mvns	r3, r3
 80058be:	693a      	ldr	r2, [r7, #16]
 80058c0:	4013      	ands	r3, r2
 80058c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80058c4:	683b      	ldr	r3, [r7, #0]
 80058c6:	685b      	ldr	r3, [r3, #4]
 80058c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80058d0:	693a      	ldr	r2, [r7, #16]
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4313      	orrs	r3, r2
 80058d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80058d8:	4a30      	ldr	r2, [pc, #192]	; (800599c <HAL_GPIO_Init+0x300>)
 80058da:	693b      	ldr	r3, [r7, #16]
 80058dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80058de:	4b2f      	ldr	r3, [pc, #188]	; (800599c <HAL_GPIO_Init+0x300>)
 80058e0:	68db      	ldr	r3, [r3, #12]
 80058e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	43db      	mvns	r3, r3
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4013      	ands	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	685b      	ldr	r3, [r3, #4]
 80058f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f6:	2b00      	cmp	r3, #0
 80058f8:	d003      	beq.n	8005902 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80058fa:	693a      	ldr	r2, [r7, #16]
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	4313      	orrs	r3, r2
 8005900:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005902:	4a26      	ldr	r2, [pc, #152]	; (800599c <HAL_GPIO_Init+0x300>)
 8005904:	693b      	ldr	r3, [r7, #16]
 8005906:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8005908:	4b24      	ldr	r3, [pc, #144]	; (800599c <HAL_GPIO_Init+0x300>)
 800590a:	685b      	ldr	r3, [r3, #4]
 800590c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	43db      	mvns	r3, r3
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4013      	ands	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005920:	2b00      	cmp	r3, #0
 8005922:	d003      	beq.n	800592c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005924:	693a      	ldr	r2, [r7, #16]
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <HAL_GPIO_Init+0x300>)
 800592e:	693b      	ldr	r3, [r7, #16]
 8005930:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005932:	4b1a      	ldr	r3, [pc, #104]	; (800599c <HAL_GPIO_Init+0x300>)
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	43db      	mvns	r3, r3
 800593c:	693a      	ldr	r2, [r7, #16]
 800593e:	4013      	ands	r3, r2
 8005940:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005942:	683b      	ldr	r3, [r7, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800594a:	2b00      	cmp	r3, #0
 800594c:	d003      	beq.n	8005956 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	4313      	orrs	r3, r2
 8005954:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005956:	4a11      	ldr	r2, [pc, #68]	; (800599c <HAL_GPIO_Init+0x300>)
 8005958:	693b      	ldr	r3, [r7, #16]
 800595a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	3301      	adds	r3, #1
 8005960:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005962:	683b      	ldr	r3, [r7, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	fa22 f303 	lsr.w	r3, r2, r3
 800596c:	2b00      	cmp	r3, #0
 800596e:	f47f ae9d 	bne.w	80056ac <HAL_GPIO_Init+0x10>
  }
}
 8005972:	bf00      	nop
 8005974:	bf00      	nop
 8005976:	371c      	adds	r7, #28
 8005978:	46bd      	mov	sp, r7
 800597a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597e:	4770      	bx	lr
 8005980:	40021000 	.word	0x40021000
 8005984:	40010000 	.word	0x40010000
 8005988:	48000400 	.word	0x48000400
 800598c:	48000800 	.word	0x48000800
 8005990:	48000c00 	.word	0x48000c00
 8005994:	48001000 	.word	0x48001000
 8005998:	48001400 	.word	0x48001400
 800599c:	40010400 	.word	0x40010400

080059a0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80059a0:	b480      	push	{r7}
 80059a2:	b085      	sub	sp, #20
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
 80059a8:	460b      	mov	r3, r1
 80059aa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	691a      	ldr	r2, [r3, #16]
 80059b0:	887b      	ldrh	r3, [r7, #2]
 80059b2:	4013      	ands	r3, r2
 80059b4:	2b00      	cmp	r3, #0
 80059b6:	d002      	beq.n	80059be <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80059b8:	2301      	movs	r3, #1
 80059ba:	73fb      	strb	r3, [r7, #15]
 80059bc:	e001      	b.n	80059c2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80059be:	2300      	movs	r3, #0
 80059c0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80059c2:	7bfb      	ldrb	r3, [r7, #15]
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b083      	sub	sp, #12
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	460b      	mov	r3, r1
 80059da:	807b      	strh	r3, [r7, #2]
 80059dc:	4613      	mov	r3, r2
 80059de:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80059e0:	787b      	ldrb	r3, [r7, #1]
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d003      	beq.n	80059ee <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80059e6:	887a      	ldrh	r2, [r7, #2]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80059ec:	e002      	b.n	80059f4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80059ee:	887a      	ldrh	r2, [r7, #2]
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80059f4:	bf00      	nop
 80059f6:	370c      	adds	r7, #12
 80059f8:	46bd      	mov	sp, r7
 80059fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059fe:	4770      	bx	lr

08005a00 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	4603      	mov	r3, r0
 8005a08:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8005a0a:	4b08      	ldr	r3, [pc, #32]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a0c:	695a      	ldr	r2, [r3, #20]
 8005a0e:	88fb      	ldrh	r3, [r7, #6]
 8005a10:	4013      	ands	r3, r2
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d006      	beq.n	8005a24 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8005a16:	4a05      	ldr	r2, [pc, #20]	; (8005a2c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005a18:	88fb      	ldrh	r3, [r7, #6]
 8005a1a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005a1c:	88fb      	ldrh	r3, [r7, #6]
 8005a1e:	4618      	mov	r0, r3
 8005a20:	f000 f806 	bl	8005a30 <HAL_GPIO_EXTI_Callback>
  }
}
 8005a24:	bf00      	nop
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}
 8005a2c:	40010400 	.word	0x40010400

08005a30 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005a30:	b480      	push	{r7}
 8005a32:	b083      	sub	sp, #12
 8005a34:	af00      	add	r7, sp, #0
 8005a36:	4603      	mov	r3, r0
 8005a38:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8005a3a:	bf00      	nop
 8005a3c:	370c      	adds	r7, #12
 8005a3e:	46bd      	mov	sp, r7
 8005a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a44:	4770      	bx	lr
	...

08005a48 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	b085      	sub	sp, #20
 8005a4c:	af00      	add	r7, sp, #0
 8005a4e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d141      	bne.n	8005ada <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a56:	4b4b      	ldr	r3, [pc, #300]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005a5e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a62:	d131      	bne.n	8005ac8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005a64:	4b47      	ldr	r3, [pc, #284]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a66:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005a6a:	4a46      	ldr	r2, [pc, #280]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a70:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a74:	4b43      	ldr	r3, [pc, #268]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a7c:	4a41      	ldr	r2, [pc, #260]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005a7e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005a82:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a84:	4b40      	ldr	r3, [pc, #256]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	2232      	movs	r2, #50	; 0x32
 8005a8a:	fb02 f303 	mul.w	r3, r2, r3
 8005a8e:	4a3f      	ldr	r2, [pc, #252]	; (8005b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005a90:	fba2 2303 	umull	r2, r3, r2, r3
 8005a94:	0c9b      	lsrs	r3, r3, #18
 8005a96:	3301      	adds	r3, #1
 8005a98:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a9a:	e002      	b.n	8005aa2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3b01      	subs	r3, #1
 8005aa0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005aa2:	4b38      	ldr	r3, [pc, #224]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aa4:	695b      	ldr	r3, [r3, #20]
 8005aa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005aaa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aae:	d102      	bne.n	8005ab6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d1f2      	bne.n	8005a9c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005ab6:	4b33      	ldr	r3, [pc, #204]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ab8:	695b      	ldr	r3, [r3, #20]
 8005aba:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005abe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ac2:	d158      	bne.n	8005b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e057      	b.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005ac8:	4b2e      	ldr	r3, [pc, #184]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005aca:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005ace:	4a2d      	ldr	r2, [pc, #180]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ad0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ad4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005ad8:	e04d      	b.n	8005b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005ae0:	d141      	bne.n	8005b66 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005ae2:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005aea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005aee:	d131      	bne.n	8005b54 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005af0:	4b24      	ldr	r3, [pc, #144]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005af6:	4a23      	ldr	r2, [pc, #140]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005af8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005afc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005b00:	4b20      	ldr	r3, [pc, #128]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b08:	4a1e      	ldr	r2, [pc, #120]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b0a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b0e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005b10:	4b1d      	ldr	r3, [pc, #116]	; (8005b88 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	2232      	movs	r2, #50	; 0x32
 8005b16:	fb02 f303 	mul.w	r3, r2, r3
 8005b1a:	4a1c      	ldr	r2, [pc, #112]	; (8005b8c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005b1c:	fba2 2303 	umull	r2, r3, r2, r3
 8005b20:	0c9b      	lsrs	r3, r3, #18
 8005b22:	3301      	adds	r3, #1
 8005b24:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b26:	e002      	b.n	8005b2e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	3b01      	subs	r3, #1
 8005b2c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005b2e:	4b15      	ldr	r3, [pc, #84]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b30:	695b      	ldr	r3, [r3, #20]
 8005b32:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b36:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b3a:	d102      	bne.n	8005b42 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1f2      	bne.n	8005b28 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005b42:	4b10      	ldr	r3, [pc, #64]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b44:	695b      	ldr	r3, [r3, #20]
 8005b46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005b4e:	d112      	bne.n	8005b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005b50:	2303      	movs	r3, #3
 8005b52:	e011      	b.n	8005b78 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005b54:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b56:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005b5a:	4a0a      	ldr	r2, [pc, #40]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b60:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005b64:	e007      	b.n	8005b76 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005b66:	4b07      	ldr	r3, [pc, #28]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005b6e:	4a05      	ldr	r2, [pc, #20]	; (8005b84 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005b70:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005b74:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3714      	adds	r7, #20
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b82:	4770      	bx	lr
 8005b84:	40007000 	.word	0x40007000
 8005b88:	20000000 	.word	0x20000000
 8005b8c:	431bde83 	.word	0x431bde83

08005b90 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005b90:	b480      	push	{r7}
 8005b92:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005b94:	4b05      	ldr	r3, [pc, #20]	; (8005bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b96:	689b      	ldr	r3, [r3, #8]
 8005b98:	4a04      	ldr	r2, [pc, #16]	; (8005bac <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8005b9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005b9e:	6093      	str	r3, [r2, #8]
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba8:	4770      	bx	lr
 8005baa:	bf00      	nop
 8005bac:	40007000 	.word	0x40007000

08005bb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b088      	sub	sp, #32
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d101      	bne.n	8005bc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e308      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f003 0301 	and.w	r3, r3, #1
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d075      	beq.n	8005cba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005bce:	4ba3      	ldr	r3, [pc, #652]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	f003 030c 	and.w	r3, r3, #12
 8005bd6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005bd8:	4ba0      	ldr	r3, [pc, #640]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005bda:	68db      	ldr	r3, [r3, #12]
 8005bdc:	f003 0303 	and.w	r3, r3, #3
 8005be0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005be2:	69bb      	ldr	r3, [r7, #24]
 8005be4:	2b0c      	cmp	r3, #12
 8005be6:	d102      	bne.n	8005bee <HAL_RCC_OscConfig+0x3e>
 8005be8:	697b      	ldr	r3, [r7, #20]
 8005bea:	2b03      	cmp	r3, #3
 8005bec:	d002      	beq.n	8005bf4 <HAL_RCC_OscConfig+0x44>
 8005bee:	69bb      	ldr	r3, [r7, #24]
 8005bf0:	2b08      	cmp	r3, #8
 8005bf2:	d10b      	bne.n	8005c0c <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005bf4:	4b99      	ldr	r3, [pc, #612]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d05b      	beq.n	8005cb8 <HAL_RCC_OscConfig+0x108>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d157      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005c08:	2301      	movs	r3, #1
 8005c0a:	e2e3      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c14:	d106      	bne.n	8005c24 <HAL_RCC_OscConfig+0x74>
 8005c16:	4b91      	ldr	r3, [pc, #580]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	4a90      	ldr	r2, [pc, #576]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c20:	6013      	str	r3, [r2, #0]
 8005c22:	e01d      	b.n	8005c60 <HAL_RCC_OscConfig+0xb0>
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	685b      	ldr	r3, [r3, #4]
 8005c28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005c2c:	d10c      	bne.n	8005c48 <HAL_RCC_OscConfig+0x98>
 8005c2e:	4b8b      	ldr	r3, [pc, #556]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	4a8a      	ldr	r2, [pc, #552]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005c38:	6013      	str	r3, [r2, #0]
 8005c3a:	4b88      	ldr	r3, [pc, #544]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	4a87      	ldr	r2, [pc, #540]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005c44:	6013      	str	r3, [r2, #0]
 8005c46:	e00b      	b.n	8005c60 <HAL_RCC_OscConfig+0xb0>
 8005c48:	4b84      	ldr	r3, [pc, #528]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	4a83      	ldr	r2, [pc, #524]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005c52:	6013      	str	r3, [r2, #0]
 8005c54:	4b81      	ldr	r3, [pc, #516]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	4a80      	ldr	r2, [pc, #512]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005c5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	685b      	ldr	r3, [r3, #4]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d013      	beq.n	8005c90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c68:	f7fd fa4e 	bl	8003108 <HAL_GetTick>
 8005c6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c6e:	e008      	b.n	8005c82 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c70:	f7fd fa4a 	bl	8003108 <HAL_GetTick>
 8005c74:	4602      	mov	r2, r0
 8005c76:	693b      	ldr	r3, [r7, #16]
 8005c78:	1ad3      	subs	r3, r2, r3
 8005c7a:	2b64      	cmp	r3, #100	; 0x64
 8005c7c:	d901      	bls.n	8005c82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e2a8      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005c82:	4b76      	ldr	r3, [pc, #472]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d0f0      	beq.n	8005c70 <HAL_RCC_OscConfig+0xc0>
 8005c8e:	e014      	b.n	8005cba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005c90:	f7fd fa3a 	bl	8003108 <HAL_GetTick>
 8005c94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005c96:	e008      	b.n	8005caa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005c98:	f7fd fa36 	bl	8003108 <HAL_GetTick>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	1ad3      	subs	r3, r2, r3
 8005ca2:	2b64      	cmp	r3, #100	; 0x64
 8005ca4:	d901      	bls.n	8005caa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005ca6:	2303      	movs	r3, #3
 8005ca8:	e294      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005caa:	4b6c      	ldr	r3, [pc, #432]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d1f0      	bne.n	8005c98 <HAL_RCC_OscConfig+0xe8>
 8005cb6:	e000      	b.n	8005cba <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cb8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 0302 	and.w	r3, r3, #2
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d075      	beq.n	8005db2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005cc6:	4b65      	ldr	r3, [pc, #404]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005cc8:	689b      	ldr	r3, [r3, #8]
 8005cca:	f003 030c 	and.w	r3, r3, #12
 8005cce:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005cd0:	4b62      	ldr	r3, [pc, #392]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	f003 0303 	and.w	r3, r3, #3
 8005cd8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005cda:	69bb      	ldr	r3, [r7, #24]
 8005cdc:	2b0c      	cmp	r3, #12
 8005cde:	d102      	bne.n	8005ce6 <HAL_RCC_OscConfig+0x136>
 8005ce0:	697b      	ldr	r3, [r7, #20]
 8005ce2:	2b02      	cmp	r3, #2
 8005ce4:	d002      	beq.n	8005cec <HAL_RCC_OscConfig+0x13c>
 8005ce6:	69bb      	ldr	r3, [r7, #24]
 8005ce8:	2b04      	cmp	r3, #4
 8005cea:	d11f      	bne.n	8005d2c <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005cec:	4b5b      	ldr	r3, [pc, #364]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d005      	beq.n	8005d04 <HAL_RCC_OscConfig+0x154>
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005d00:	2301      	movs	r3, #1
 8005d02:	e267      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d04:	4b55      	ldr	r3, [pc, #340]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d06:	685b      	ldr	r3, [r3, #4]
 8005d08:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	691b      	ldr	r3, [r3, #16]
 8005d10:	061b      	lsls	r3, r3, #24
 8005d12:	4952      	ldr	r1, [pc, #328]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d14:	4313      	orrs	r3, r2
 8005d16:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8005d18:	4b51      	ldr	r3, [pc, #324]	; (8005e60 <HAL_RCC_OscConfig+0x2b0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	4618      	mov	r0, r3
 8005d1e:	f7fd f9a7 	bl	8003070 <HAL_InitTick>
 8005d22:	4603      	mov	r3, r0
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d043      	beq.n	8005db0 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	e253      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	68db      	ldr	r3, [r3, #12]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d023      	beq.n	8005d7c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005d34:	4b49      	ldr	r3, [pc, #292]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	4a48      	ldr	r2, [pc, #288]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d3a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005d3e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d40:	f7fd f9e2 	bl	8003108 <HAL_GetTick>
 8005d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d46:	e008      	b.n	8005d5a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d48:	f7fd f9de 	bl	8003108 <HAL_GetTick>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	693b      	ldr	r3, [r7, #16]
 8005d50:	1ad3      	subs	r3, r2, r3
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d901      	bls.n	8005d5a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8005d56:	2303      	movs	r3, #3
 8005d58:	e23c      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005d5a:	4b40      	ldr	r3, [pc, #256]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d0f0      	beq.n	8005d48 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005d66:	4b3d      	ldr	r3, [pc, #244]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d68:	685b      	ldr	r3, [r3, #4]
 8005d6a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	061b      	lsls	r3, r3, #24
 8005d74:	4939      	ldr	r1, [pc, #228]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	604b      	str	r3, [r1, #4]
 8005d7a:	e01a      	b.n	8005db2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d7c:	4b37      	ldr	r3, [pc, #220]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	4a36      	ldr	r2, [pc, #216]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005d82:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005d86:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d88:	f7fd f9be 	bl	8003108 <HAL_GetTick>
 8005d8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005d8e:	e008      	b.n	8005da2 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005d90:	f7fd f9ba 	bl	8003108 <HAL_GetTick>
 8005d94:	4602      	mov	r2, r0
 8005d96:	693b      	ldr	r3, [r7, #16]
 8005d98:	1ad3      	subs	r3, r2, r3
 8005d9a:	2b02      	cmp	r3, #2
 8005d9c:	d901      	bls.n	8005da2 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005d9e:	2303      	movs	r3, #3
 8005da0:	e218      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005da2:	4b2e      	ldr	r3, [pc, #184]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005daa:	2b00      	cmp	r3, #0
 8005dac:	d1f0      	bne.n	8005d90 <HAL_RCC_OscConfig+0x1e0>
 8005dae:	e000      	b.n	8005db2 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005db0:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d03c      	beq.n	8005e38 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	695b      	ldr	r3, [r3, #20]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d01c      	beq.n	8005e00 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005dc6:	4b25      	ldr	r3, [pc, #148]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005dcc:	4a23      	ldr	r2, [pc, #140]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005dce:	f043 0301 	orr.w	r3, r3, #1
 8005dd2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005dd6:	f7fd f997 	bl	8003108 <HAL_GetTick>
 8005dda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005ddc:	e008      	b.n	8005df0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005dde:	f7fd f993 	bl	8003108 <HAL_GetTick>
 8005de2:	4602      	mov	r2, r0
 8005de4:	693b      	ldr	r3, [r7, #16]
 8005de6:	1ad3      	subs	r3, r2, r3
 8005de8:	2b02      	cmp	r3, #2
 8005dea:	d901      	bls.n	8005df0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005dec:	2303      	movs	r3, #3
 8005dee:	e1f1      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005df0:	4b1a      	ldr	r3, [pc, #104]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005df2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d0ef      	beq.n	8005dde <HAL_RCC_OscConfig+0x22e>
 8005dfe:	e01b      	b.n	8005e38 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005e00:	4b16      	ldr	r3, [pc, #88]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005e02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e06:	4a15      	ldr	r2, [pc, #84]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005e08:	f023 0301 	bic.w	r3, r3, #1
 8005e0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e10:	f7fd f97a 	bl	8003108 <HAL_GetTick>
 8005e14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e16:	e008      	b.n	8005e2a <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005e18:	f7fd f976 	bl	8003108 <HAL_GetTick>
 8005e1c:	4602      	mov	r2, r0
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	2b02      	cmp	r3, #2
 8005e24:	d901      	bls.n	8005e2a <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8005e26:	2303      	movs	r3, #3
 8005e28:	e1d4      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005e2a:	4b0c      	ldr	r3, [pc, #48]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005e2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005e30:	f003 0302 	and.w	r3, r3, #2
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d1ef      	bne.n	8005e18 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	f000 80ab 	beq.w	8005f9c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005e46:	2300      	movs	r3, #0
 8005e48:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005e4a:	4b04      	ldr	r3, [pc, #16]	; (8005e5c <HAL_RCC_OscConfig+0x2ac>)
 8005e4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d106      	bne.n	8005e64 <HAL_RCC_OscConfig+0x2b4>
 8005e56:	2301      	movs	r3, #1
 8005e58:	e005      	b.n	8005e66 <HAL_RCC_OscConfig+0x2b6>
 8005e5a:	bf00      	nop
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	20000004 	.word	0x20000004
 8005e64:	2300      	movs	r3, #0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d00d      	beq.n	8005e86 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005e6a:	4baf      	ldr	r3, [pc, #700]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e6e:	4aae      	ldr	r2, [pc, #696]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005e70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005e74:	6593      	str	r3, [r2, #88]	; 0x58
 8005e76:	4bac      	ldr	r3, [pc, #688]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005e7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005e7e:	60fb      	str	r3, [r7, #12]
 8005e80:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005e82:	2301      	movs	r3, #1
 8005e84:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005e86:	4ba9      	ldr	r3, [pc, #676]	; (800612c <HAL_RCC_OscConfig+0x57c>)
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d118      	bne.n	8005ec4 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005e92:	4ba6      	ldr	r3, [pc, #664]	; (800612c <HAL_RCC_OscConfig+0x57c>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	4aa5      	ldr	r2, [pc, #660]	; (800612c <HAL_RCC_OscConfig+0x57c>)
 8005e98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005e9e:	f7fd f933 	bl	8003108 <HAL_GetTick>
 8005ea2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005ea4:	e008      	b.n	8005eb8 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005ea6:	f7fd f92f 	bl	8003108 <HAL_GetTick>
 8005eaa:	4602      	mov	r2, r0
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	1ad3      	subs	r3, r2, r3
 8005eb0:	2b02      	cmp	r3, #2
 8005eb2:	d901      	bls.n	8005eb8 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8005eb4:	2303      	movs	r3, #3
 8005eb6:	e18d      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005eb8:	4b9c      	ldr	r3, [pc, #624]	; (800612c <HAL_RCC_OscConfig+0x57c>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d0f0      	beq.n	8005ea6 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	689b      	ldr	r3, [r3, #8]
 8005ec8:	2b01      	cmp	r3, #1
 8005eca:	d108      	bne.n	8005ede <HAL_RCC_OscConfig+0x32e>
 8005ecc:	4b96      	ldr	r3, [pc, #600]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005ece:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ed2:	4a95      	ldr	r2, [pc, #596]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005ed4:	f043 0301 	orr.w	r3, r3, #1
 8005ed8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005edc:	e024      	b.n	8005f28 <HAL_RCC_OscConfig+0x378>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	689b      	ldr	r3, [r3, #8]
 8005ee2:	2b05      	cmp	r3, #5
 8005ee4:	d110      	bne.n	8005f08 <HAL_RCC_OscConfig+0x358>
 8005ee6:	4b90      	ldr	r3, [pc, #576]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005ee8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005eec:	4a8e      	ldr	r2, [pc, #568]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005eee:	f043 0304 	orr.w	r3, r3, #4
 8005ef2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005ef6:	4b8c      	ldr	r3, [pc, #560]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005efc:	4a8a      	ldr	r2, [pc, #552]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005efe:	f043 0301 	orr.w	r3, r3, #1
 8005f02:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f06:	e00f      	b.n	8005f28 <HAL_RCC_OscConfig+0x378>
 8005f08:	4b87      	ldr	r3, [pc, #540]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f0e:	4a86      	ldr	r2, [pc, #536]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f10:	f023 0301 	bic.w	r3, r3, #1
 8005f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005f18:	4b83      	ldr	r3, [pc, #524]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f1e:	4a82      	ldr	r2, [pc, #520]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f20:	f023 0304 	bic.w	r3, r3, #4
 8005f24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	689b      	ldr	r3, [r3, #8]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d016      	beq.n	8005f5e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f30:	f7fd f8ea 	bl	8003108 <HAL_GetTick>
 8005f34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f36:	e00a      	b.n	8005f4e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f38:	f7fd f8e6 	bl	8003108 <HAL_GetTick>
 8005f3c:	4602      	mov	r2, r0
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	1ad3      	subs	r3, r2, r3
 8005f42:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f46:	4293      	cmp	r3, r2
 8005f48:	d901      	bls.n	8005f4e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005f4a:	2303      	movs	r3, #3
 8005f4c:	e142      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005f4e:	4b76      	ldr	r3, [pc, #472]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f54:	f003 0302 	and.w	r3, r3, #2
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d0ed      	beq.n	8005f38 <HAL_RCC_OscConfig+0x388>
 8005f5c:	e015      	b.n	8005f8a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005f5e:	f7fd f8d3 	bl	8003108 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f64:	e00a      	b.n	8005f7c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005f66:	f7fd f8cf 	bl	8003108 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	f241 3288 	movw	r2, #5000	; 0x1388
 8005f74:	4293      	cmp	r3, r2
 8005f76:	d901      	bls.n	8005f7c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005f78:	2303      	movs	r3, #3
 8005f7a:	e12b      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005f7c:	4b6a      	ldr	r3, [pc, #424]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f82:	f003 0302 	and.w	r3, r3, #2
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1ed      	bne.n	8005f66 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005f8a:	7ffb      	ldrb	r3, [r7, #31]
 8005f8c:	2b01      	cmp	r3, #1
 8005f8e:	d105      	bne.n	8005f9c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005f90:	4b65      	ldr	r3, [pc, #404]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f94:	4a64      	ldr	r2, [pc, #400]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005f96:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f9a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f003 0320 	and.w	r3, r3, #32
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d03c      	beq.n	8006022 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	699b      	ldr	r3, [r3, #24]
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d01c      	beq.n	8005fea <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8005fb0:	4b5d      	ldr	r3, [pc, #372]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005fb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fb6:	4a5c      	ldr	r2, [pc, #368]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005fb8:	f043 0301 	orr.w	r3, r3, #1
 8005fbc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fc0:	f7fd f8a2 	bl	8003108 <HAL_GetTick>
 8005fc4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fc6:	e008      	b.n	8005fda <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005fc8:	f7fd f89e 	bl	8003108 <HAL_GetTick>
 8005fcc:	4602      	mov	r2, r0
 8005fce:	693b      	ldr	r3, [r7, #16]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	2b02      	cmp	r3, #2
 8005fd4:	d901      	bls.n	8005fda <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8005fd6:	2303      	movs	r3, #3
 8005fd8:	e0fc      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8005fda:	4b53      	ldr	r3, [pc, #332]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005fdc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ef      	beq.n	8005fc8 <HAL_RCC_OscConfig+0x418>
 8005fe8:	e01b      	b.n	8006022 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005fea:	4b4f      	ldr	r3, [pc, #316]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005fec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005ff0:	4a4d      	ldr	r2, [pc, #308]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8005ff2:	f023 0301 	bic.w	r3, r3, #1
 8005ff6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ffa:	f7fd f885 	bl	8003108 <HAL_GetTick>
 8005ffe:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006000:	e008      	b.n	8006014 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006002:	f7fd f881 	bl	8003108 <HAL_GetTick>
 8006006:	4602      	mov	r2, r0
 8006008:	693b      	ldr	r3, [r7, #16]
 800600a:	1ad3      	subs	r3, r2, r3
 800600c:	2b02      	cmp	r3, #2
 800600e:	d901      	bls.n	8006014 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8006010:	2303      	movs	r3, #3
 8006012:	e0df      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006014:	4b44      	ldr	r3, [pc, #272]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006016:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800601a:	f003 0302 	and.w	r3, r3, #2
 800601e:	2b00      	cmp	r3, #0
 8006020:	d1ef      	bne.n	8006002 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	69db      	ldr	r3, [r3, #28]
 8006026:	2b00      	cmp	r3, #0
 8006028:	f000 80d3 	beq.w	80061d2 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800602c:	4b3e      	ldr	r3, [pc, #248]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 800602e:	689b      	ldr	r3, [r3, #8]
 8006030:	f003 030c 	and.w	r3, r3, #12
 8006034:	2b0c      	cmp	r3, #12
 8006036:	f000 808d 	beq.w	8006154 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	69db      	ldr	r3, [r3, #28]
 800603e:	2b02      	cmp	r3, #2
 8006040:	d15a      	bne.n	80060f8 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006042:	4b39      	ldr	r3, [pc, #228]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	4a38      	ldr	r2, [pc, #224]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006048:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800604c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800604e:	f7fd f85b 	bl	8003108 <HAL_GetTick>
 8006052:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006054:	e008      	b.n	8006068 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006056:	f7fd f857 	bl	8003108 <HAL_GetTick>
 800605a:	4602      	mov	r2, r0
 800605c:	693b      	ldr	r3, [r7, #16]
 800605e:	1ad3      	subs	r3, r2, r3
 8006060:	2b02      	cmp	r3, #2
 8006062:	d901      	bls.n	8006068 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8006064:	2303      	movs	r3, #3
 8006066:	e0b5      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006068:	4b2f      	ldr	r3, [pc, #188]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006070:	2b00      	cmp	r3, #0
 8006072:	d1f0      	bne.n	8006056 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006074:	4b2c      	ldr	r3, [pc, #176]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	4b2d      	ldr	r3, [pc, #180]	; (8006130 <HAL_RCC_OscConfig+0x580>)
 800607a:	4013      	ands	r3, r2
 800607c:	687a      	ldr	r2, [r7, #4]
 800607e:	6a11      	ldr	r1, [r2, #32]
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006084:	3a01      	subs	r2, #1
 8006086:	0112      	lsls	r2, r2, #4
 8006088:	4311      	orrs	r1, r2
 800608a:	687a      	ldr	r2, [r7, #4]
 800608c:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800608e:	0212      	lsls	r2, r2, #8
 8006090:	4311      	orrs	r1, r2
 8006092:	687a      	ldr	r2, [r7, #4]
 8006094:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006096:	0852      	lsrs	r2, r2, #1
 8006098:	3a01      	subs	r2, #1
 800609a:	0552      	lsls	r2, r2, #21
 800609c:	4311      	orrs	r1, r2
 800609e:	687a      	ldr	r2, [r7, #4]
 80060a0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80060a2:	0852      	lsrs	r2, r2, #1
 80060a4:	3a01      	subs	r2, #1
 80060a6:	0652      	lsls	r2, r2, #25
 80060a8:	4311      	orrs	r1, r2
 80060aa:	687a      	ldr	r2, [r7, #4]
 80060ac:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80060ae:	06d2      	lsls	r2, r2, #27
 80060b0:	430a      	orrs	r2, r1
 80060b2:	491d      	ldr	r1, [pc, #116]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060b4:	4313      	orrs	r3, r2
 80060b6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060b8:	4b1b      	ldr	r3, [pc, #108]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	4a1a      	ldr	r2, [pc, #104]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060be:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060c2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060c4:	4b18      	ldr	r3, [pc, #96]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060c6:	68db      	ldr	r3, [r3, #12]
 80060c8:	4a17      	ldr	r2, [pc, #92]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060ca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060ce:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80060d0:	f7fd f81a 	bl	8003108 <HAL_GetTick>
 80060d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060d6:	e008      	b.n	80060ea <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060d8:	f7fd f816 	bl	8003108 <HAL_GetTick>
 80060dc:	4602      	mov	r2, r0
 80060de:	693b      	ldr	r3, [r7, #16]
 80060e0:	1ad3      	subs	r3, r2, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d901      	bls.n	80060ea <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 80060e6:	2303      	movs	r3, #3
 80060e8:	e074      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ea:	4b0f      	ldr	r3, [pc, #60]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d0f0      	beq.n	80060d8 <HAL_RCC_OscConfig+0x528>
 80060f6:	e06c      	b.n	80061d2 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060f8:	4b0b      	ldr	r3, [pc, #44]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a0a      	ldr	r2, [pc, #40]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 80060fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006102:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006106:	68db      	ldr	r3, [r3, #12]
 8006108:	4a07      	ldr	r2, [pc, #28]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 800610a:	f023 0303 	bic.w	r3, r3, #3
 800610e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8006110:	4b05      	ldr	r3, [pc, #20]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006112:	68db      	ldr	r3, [r3, #12]
 8006114:	4a04      	ldr	r2, [pc, #16]	; (8006128 <HAL_RCC_OscConfig+0x578>)
 8006116:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800611a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800611e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006120:	f7fc fff2 	bl	8003108 <HAL_GetTick>
 8006124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006126:	e00e      	b.n	8006146 <HAL_RCC_OscConfig+0x596>
 8006128:	40021000 	.word	0x40021000
 800612c:	40007000 	.word	0x40007000
 8006130:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006134:	f7fc ffe8 	bl	8003108 <HAL_GetTick>
 8006138:	4602      	mov	r2, r0
 800613a:	693b      	ldr	r3, [r7, #16]
 800613c:	1ad3      	subs	r3, r2, r3
 800613e:	2b02      	cmp	r3, #2
 8006140:	d901      	bls.n	8006146 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8006142:	2303      	movs	r3, #3
 8006144:	e046      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006146:	4b25      	ldr	r3, [pc, #148]	; (80061dc <HAL_RCC_OscConfig+0x62c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800614e:	2b00      	cmp	r3, #0
 8006150:	d1f0      	bne.n	8006134 <HAL_RCC_OscConfig+0x584>
 8006152:	e03e      	b.n	80061d2 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	69db      	ldr	r3, [r3, #28]
 8006158:	2b01      	cmp	r3, #1
 800615a:	d101      	bne.n	8006160 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 800615c:	2301      	movs	r3, #1
 800615e:	e039      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8006160:	4b1e      	ldr	r3, [pc, #120]	; (80061dc <HAL_RCC_OscConfig+0x62c>)
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f003 0203 	and.w	r2, r3, #3
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a1b      	ldr	r3, [r3, #32]
 8006170:	429a      	cmp	r2, r3
 8006172:	d12c      	bne.n	80061ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617e:	3b01      	subs	r3, #1
 8006180:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d123      	bne.n	80061ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8006186:	697b      	ldr	r3, [r7, #20]
 8006188:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006190:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006192:	429a      	cmp	r2, r3
 8006194:	d11b      	bne.n	80061ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006196:	697b      	ldr	r3, [r7, #20]
 8006198:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80061a2:	429a      	cmp	r2, r3
 80061a4:	d113      	bne.n	80061ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061a6:	697b      	ldr	r3, [r7, #20]
 80061a8:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061b0:	085b      	lsrs	r3, r3, #1
 80061b2:	3b01      	subs	r3, #1
 80061b4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80061b6:	429a      	cmp	r2, r3
 80061b8:	d109      	bne.n	80061ce <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061ba:	697b      	ldr	r3, [r7, #20]
 80061bc:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061c4:	085b      	lsrs	r3, r3, #1
 80061c6:	3b01      	subs	r3, #1
 80061c8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d001      	beq.n	80061d2 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80061ce:	2301      	movs	r3, #1
 80061d0:	e000      	b.n	80061d4 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80061d2:	2300      	movs	r3, #0
}
 80061d4:	4618      	mov	r0, r3
 80061d6:	3720      	adds	r7, #32
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}
 80061dc:	40021000 	.word	0x40021000

080061e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061e0:	b580      	push	{r7, lr}
 80061e2:	b086      	sub	sp, #24
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
 80061e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80061ea:	2300      	movs	r3, #0
 80061ec:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d101      	bne.n	80061f8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	e11e      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80061f8:	4b91      	ldr	r3, [pc, #580]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	f003 030f 	and.w	r3, r3, #15
 8006200:	683a      	ldr	r2, [r7, #0]
 8006202:	429a      	cmp	r2, r3
 8006204:	d910      	bls.n	8006228 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006206:	4b8e      	ldr	r3, [pc, #568]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	f023 020f 	bic.w	r2, r3, #15
 800620e:	498c      	ldr	r1, [pc, #560]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 8006210:	683b      	ldr	r3, [r7, #0]
 8006212:	4313      	orrs	r3, r2
 8006214:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006216:	4b8a      	ldr	r3, [pc, #552]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	f003 030f 	and.w	r3, r3, #15
 800621e:	683a      	ldr	r2, [r7, #0]
 8006220:	429a      	cmp	r2, r3
 8006222:	d001      	beq.n	8006228 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e106      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f003 0301 	and.w	r3, r3, #1
 8006230:	2b00      	cmp	r3, #0
 8006232:	d073      	beq.n	800631c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	685b      	ldr	r3, [r3, #4]
 8006238:	2b03      	cmp	r3, #3
 800623a:	d129      	bne.n	8006290 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800623c:	4b81      	ldr	r3, [pc, #516]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d101      	bne.n	800624c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8006248:	2301      	movs	r3, #1
 800624a:	e0f4      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800624c:	f000 f966 	bl	800651c <RCC_GetSysClockFreqFromPLLSource>
 8006250:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	4a7c      	ldr	r2, [pc, #496]	; (8006448 <HAL_RCC_ClockConfig+0x268>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d93f      	bls.n	80062da <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800625a:	4b7a      	ldr	r3, [pc, #488]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800625c:	689b      	ldr	r3, [r3, #8]
 800625e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006262:	2b00      	cmp	r3, #0
 8006264:	d009      	beq.n	800627a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800626e:	2b00      	cmp	r3, #0
 8006270:	d033      	beq.n	80062da <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8006276:	2b00      	cmp	r3, #0
 8006278:	d12f      	bne.n	80062da <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800627a:	4b72      	ldr	r3, [pc, #456]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800627c:	689b      	ldr	r3, [r3, #8]
 800627e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006282:	4a70      	ldr	r2, [pc, #448]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006288:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800628a:	2380      	movs	r3, #128	; 0x80
 800628c:	617b      	str	r3, [r7, #20]
 800628e:	e024      	b.n	80062da <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	685b      	ldr	r3, [r3, #4]
 8006294:	2b02      	cmp	r3, #2
 8006296:	d107      	bne.n	80062a8 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006298:	4b6a      	ldr	r3, [pc, #424]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d109      	bne.n	80062b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062a4:	2301      	movs	r3, #1
 80062a6:	e0c6      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80062a8:	4b66      	ldr	r3, [pc, #408]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d101      	bne.n	80062b8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80062b4:	2301      	movs	r3, #1
 80062b6:	e0be      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80062b8:	f000 f8ce 	bl	8006458 <HAL_RCC_GetSysClockFreq>
 80062bc:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	4a61      	ldr	r2, [pc, #388]	; (8006448 <HAL_RCC_ClockConfig+0x268>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d909      	bls.n	80062da <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80062c6:	4b5f      	ldr	r3, [pc, #380]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80062c8:	689b      	ldr	r3, [r3, #8]
 80062ca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ce:	4a5d      	ldr	r2, [pc, #372]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80062d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80062d4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80062d6:	2380      	movs	r3, #128	; 0x80
 80062d8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80062da:	4b5a      	ldr	r3, [pc, #360]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80062dc:	689b      	ldr	r3, [r3, #8]
 80062de:	f023 0203 	bic.w	r2, r3, #3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	685b      	ldr	r3, [r3, #4]
 80062e6:	4957      	ldr	r1, [pc, #348]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80062e8:	4313      	orrs	r3, r2
 80062ea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80062ec:	f7fc ff0c 	bl	8003108 <HAL_GetTick>
 80062f0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062f2:	e00a      	b.n	800630a <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80062f4:	f7fc ff08 	bl	8003108 <HAL_GetTick>
 80062f8:	4602      	mov	r2, r0
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	1ad3      	subs	r3, r2, r3
 80062fe:	f241 3288 	movw	r2, #5000	; 0x1388
 8006302:	4293      	cmp	r3, r2
 8006304:	d901      	bls.n	800630a <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8006306:	2303      	movs	r3, #3
 8006308:	e095      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800630a:	4b4e      	ldr	r3, [pc, #312]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	f003 020c 	and.w	r2, r3, #12
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	685b      	ldr	r3, [r3, #4]
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	429a      	cmp	r2, r3
 800631a:	d1eb      	bne.n	80062f4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	f003 0302 	and.w	r3, r3, #2
 8006324:	2b00      	cmp	r3, #0
 8006326:	d023      	beq.n	8006370 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f003 0304 	and.w	r3, r3, #4
 8006330:	2b00      	cmp	r3, #0
 8006332:	d005      	beq.n	8006340 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006334:	4b43      	ldr	r3, [pc, #268]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006336:	689b      	ldr	r3, [r3, #8]
 8006338:	4a42      	ldr	r2, [pc, #264]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800633a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800633e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	f003 0308 	and.w	r3, r3, #8
 8006348:	2b00      	cmp	r3, #0
 800634a:	d007      	beq.n	800635c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800634c:	4b3d      	ldr	r3, [pc, #244]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800634e:	689b      	ldr	r3, [r3, #8]
 8006350:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8006354:	4a3b      	ldr	r2, [pc, #236]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006356:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800635a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800635c:	4b39      	ldr	r3, [pc, #228]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	4936      	ldr	r1, [pc, #216]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800636a:	4313      	orrs	r3, r2
 800636c:	608b      	str	r3, [r1, #8]
 800636e:	e008      	b.n	8006382 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8006370:	697b      	ldr	r3, [r7, #20]
 8006372:	2b80      	cmp	r3, #128	; 0x80
 8006374:	d105      	bne.n	8006382 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8006376:	4b33      	ldr	r3, [pc, #204]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006378:	689b      	ldr	r3, [r3, #8]
 800637a:	4a32      	ldr	r2, [pc, #200]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 800637c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006380:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006382:	4b2f      	ldr	r3, [pc, #188]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	f003 030f 	and.w	r3, r3, #15
 800638a:	683a      	ldr	r2, [r7, #0]
 800638c:	429a      	cmp	r2, r3
 800638e:	d21d      	bcs.n	80063cc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006390:	4b2b      	ldr	r3, [pc, #172]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f023 020f 	bic.w	r2, r3, #15
 8006398:	4929      	ldr	r1, [pc, #164]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	4313      	orrs	r3, r2
 800639e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80063a0:	f7fc feb2 	bl	8003108 <HAL_GetTick>
 80063a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063a6:	e00a      	b.n	80063be <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80063a8:	f7fc feae 	bl	8003108 <HAL_GetTick>
 80063ac:	4602      	mov	r2, r0
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80063b6:	4293      	cmp	r3, r2
 80063b8:	d901      	bls.n	80063be <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80063ba:	2303      	movs	r3, #3
 80063bc:	e03b      	b.n	8006436 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80063be:	4b20      	ldr	r3, [pc, #128]	; (8006440 <HAL_RCC_ClockConfig+0x260>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f003 030f 	and.w	r3, r3, #15
 80063c6:	683a      	ldr	r2, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d1ed      	bne.n	80063a8 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f003 0304 	and.w	r3, r3, #4
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d008      	beq.n	80063ea <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80063d8:	4b1a      	ldr	r3, [pc, #104]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80063da:	689b      	ldr	r3, [r3, #8]
 80063dc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	4917      	ldr	r1, [pc, #92]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80063e6:	4313      	orrs	r3, r2
 80063e8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f003 0308 	and.w	r3, r3, #8
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d009      	beq.n	800640a <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80063f6:	4b13      	ldr	r3, [pc, #76]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	00db      	lsls	r3, r3, #3
 8006404:	490f      	ldr	r1, [pc, #60]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006406:	4313      	orrs	r3, r2
 8006408:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800640a:	f000 f825 	bl	8006458 <HAL_RCC_GetSysClockFreq>
 800640e:	4602      	mov	r2, r0
 8006410:	4b0c      	ldr	r3, [pc, #48]	; (8006444 <HAL_RCC_ClockConfig+0x264>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	091b      	lsrs	r3, r3, #4
 8006416:	f003 030f 	and.w	r3, r3, #15
 800641a:	490c      	ldr	r1, [pc, #48]	; (800644c <HAL_RCC_ClockConfig+0x26c>)
 800641c:	5ccb      	ldrb	r3, [r1, r3]
 800641e:	f003 031f 	and.w	r3, r3, #31
 8006422:	fa22 f303 	lsr.w	r3, r2, r3
 8006426:	4a0a      	ldr	r2, [pc, #40]	; (8006450 <HAL_RCC_ClockConfig+0x270>)
 8006428:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800642a:	4b0a      	ldr	r3, [pc, #40]	; (8006454 <HAL_RCC_ClockConfig+0x274>)
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4618      	mov	r0, r3
 8006430:	f7fc fe1e 	bl	8003070 <HAL_InitTick>
 8006434:	4603      	mov	r3, r0
}
 8006436:	4618      	mov	r0, r3
 8006438:	3718      	adds	r7, #24
 800643a:	46bd      	mov	sp, r7
 800643c:	bd80      	pop	{r7, pc}
 800643e:	bf00      	nop
 8006440:	40022000 	.word	0x40022000
 8006444:	40021000 	.word	0x40021000
 8006448:	04c4b400 	.word	0x04c4b400
 800644c:	0800a860 	.word	0x0800a860
 8006450:	20000000 	.word	0x20000000
 8006454:	20000004 	.word	0x20000004

08006458 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006458:	b480      	push	{r7}
 800645a:	b087      	sub	sp, #28
 800645c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800645e:	4b2c      	ldr	r3, [pc, #176]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006460:	689b      	ldr	r3, [r3, #8]
 8006462:	f003 030c 	and.w	r3, r3, #12
 8006466:	2b04      	cmp	r3, #4
 8006468:	d102      	bne.n	8006470 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800646a:	4b2a      	ldr	r3, [pc, #168]	; (8006514 <HAL_RCC_GetSysClockFreq+0xbc>)
 800646c:	613b      	str	r3, [r7, #16]
 800646e:	e047      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8006470:	4b27      	ldr	r3, [pc, #156]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006472:	689b      	ldr	r3, [r3, #8]
 8006474:	f003 030c 	and.w	r3, r3, #12
 8006478:	2b08      	cmp	r3, #8
 800647a:	d102      	bne.n	8006482 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800647c:	4b26      	ldr	r3, [pc, #152]	; (8006518 <HAL_RCC_GetSysClockFreq+0xc0>)
 800647e:	613b      	str	r3, [r7, #16]
 8006480:	e03e      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8006482:	4b23      	ldr	r3, [pc, #140]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006484:	689b      	ldr	r3, [r3, #8]
 8006486:	f003 030c 	and.w	r3, r3, #12
 800648a:	2b0c      	cmp	r3, #12
 800648c:	d136      	bne.n	80064fc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800648e:	4b20      	ldr	r3, [pc, #128]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0303 	and.w	r3, r3, #3
 8006496:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8006498:	4b1d      	ldr	r3, [pc, #116]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	091b      	lsrs	r3, r3, #4
 800649e:	f003 030f 	and.w	r3, r3, #15
 80064a2:	3301      	adds	r3, #1
 80064a4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2b03      	cmp	r3, #3
 80064aa:	d10c      	bne.n	80064c6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064ac:	4a1a      	ldr	r2, [pc, #104]	; (8006518 <HAL_RCC_GetSysClockFreq+0xc0>)
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80064b4:	4a16      	ldr	r2, [pc, #88]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064b6:	68d2      	ldr	r2, [r2, #12]
 80064b8:	0a12      	lsrs	r2, r2, #8
 80064ba:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064be:	fb02 f303 	mul.w	r3, r2, r3
 80064c2:	617b      	str	r3, [r7, #20]
      break;
 80064c4:	e00c      	b.n	80064e0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80064c6:	4a13      	ldr	r2, [pc, #76]	; (8006514 <HAL_RCC_GetSysClockFreq+0xbc>)
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80064ce:	4a10      	ldr	r2, [pc, #64]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064d0:	68d2      	ldr	r2, [r2, #12]
 80064d2:	0a12      	lsrs	r2, r2, #8
 80064d4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80064d8:	fb02 f303 	mul.w	r3, r2, r3
 80064dc:	617b      	str	r3, [r7, #20]
      break;
 80064de:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80064e0:	4b0b      	ldr	r3, [pc, #44]	; (8006510 <HAL_RCC_GetSysClockFreq+0xb8>)
 80064e2:	68db      	ldr	r3, [r3, #12]
 80064e4:	0e5b      	lsrs	r3, r3, #25
 80064e6:	f003 0303 	and.w	r3, r3, #3
 80064ea:	3301      	adds	r3, #1
 80064ec:	005b      	lsls	r3, r3, #1
 80064ee:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80064f8:	613b      	str	r3, [r7, #16]
 80064fa:	e001      	b.n	8006500 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80064fc:	2300      	movs	r3, #0
 80064fe:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8006500:	693b      	ldr	r3, [r7, #16]
}
 8006502:	4618      	mov	r0, r3
 8006504:	371c      	adds	r7, #28
 8006506:	46bd      	mov	sp, r7
 8006508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800650c:	4770      	bx	lr
 800650e:	bf00      	nop
 8006510:	40021000 	.word	0x40021000
 8006514:	00f42400 	.word	0x00f42400
 8006518:	00b71b00 	.word	0x00b71b00

0800651c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800651c:	b480      	push	{r7}
 800651e:	b087      	sub	sp, #28
 8006520:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8006522:	4b1e      	ldr	r3, [pc, #120]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006524:	68db      	ldr	r3, [r3, #12]
 8006526:	f003 0303 	and.w	r3, r3, #3
 800652a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800652c:	4b1b      	ldr	r3, [pc, #108]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800652e:	68db      	ldr	r3, [r3, #12]
 8006530:	091b      	lsrs	r3, r3, #4
 8006532:	f003 030f 	and.w	r3, r3, #15
 8006536:	3301      	adds	r3, #1
 8006538:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	2b03      	cmp	r3, #3
 800653e:	d10c      	bne.n	800655a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8006540:	4a17      	ldr	r2, [pc, #92]	; (80065a0 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	fbb2 f3f3 	udiv	r3, r2, r3
 8006548:	4a14      	ldr	r2, [pc, #80]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800654a:	68d2      	ldr	r2, [r2, #12]
 800654c:	0a12      	lsrs	r2, r2, #8
 800654e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006552:	fb02 f303 	mul.w	r3, r2, r3
 8006556:	617b      	str	r3, [r7, #20]
    break;
 8006558:	e00c      	b.n	8006574 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800655a:	4a12      	ldr	r2, [pc, #72]	; (80065a4 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006562:	4a0e      	ldr	r2, [pc, #56]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006564:	68d2      	ldr	r2, [r2, #12]
 8006566:	0a12      	lsrs	r2, r2, #8
 8006568:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800656c:	fb02 f303 	mul.w	r3, r2, r3
 8006570:	617b      	str	r3, [r7, #20]
    break;
 8006572:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8006574:	4b09      	ldr	r3, [pc, #36]	; (800659c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8006576:	68db      	ldr	r3, [r3, #12]
 8006578:	0e5b      	lsrs	r3, r3, #25
 800657a:	f003 0303 	and.w	r3, r3, #3
 800657e:	3301      	adds	r3, #1
 8006580:	005b      	lsls	r3, r3, #1
 8006582:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8006584:	697a      	ldr	r2, [r7, #20]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	fbb2 f3f3 	udiv	r3, r2, r3
 800658c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800658e:	687b      	ldr	r3, [r7, #4]
}
 8006590:	4618      	mov	r0, r3
 8006592:	371c      	adds	r7, #28
 8006594:	46bd      	mov	sp, r7
 8006596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800659a:	4770      	bx	lr
 800659c:	40021000 	.word	0x40021000
 80065a0:	00b71b00 	.word	0x00b71b00
 80065a4:	00f42400 	.word	0x00f42400

080065a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b086      	sub	sp, #24
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80065b0:	2300      	movs	r3, #0
 80065b2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80065b4:	2300      	movs	r3, #0
 80065b6:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8098 	beq.w	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80065c6:	2300      	movs	r3, #0
 80065c8:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80065ca:	4b43      	ldr	r3, [pc, #268]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d10d      	bne.n	80065f2 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065d6:	4b40      	ldr	r3, [pc, #256]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065da:	4a3f      	ldr	r2, [pc, #252]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80065e0:	6593      	str	r3, [r2, #88]	; 0x58
 80065e2:	4b3d      	ldr	r3, [pc, #244]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80065e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ea:	60bb      	str	r3, [r7, #8]
 80065ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065ee:	2301      	movs	r3, #1
 80065f0:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80065f2:	4b3a      	ldr	r3, [pc, #232]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4a39      	ldr	r2, [pc, #228]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80065f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80065fc:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80065fe:	f7fc fd83 	bl	8003108 <HAL_GetTick>
 8006602:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006604:	e009      	b.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006606:	f7fc fd7f 	bl	8003108 <HAL_GetTick>
 800660a:	4602      	mov	r2, r0
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	1ad3      	subs	r3, r2, r3
 8006610:	2b02      	cmp	r3, #2
 8006612:	d902      	bls.n	800661a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8006614:	2303      	movs	r3, #3
 8006616:	74fb      	strb	r3, [r7, #19]
        break;
 8006618:	e005      	b.n	8006626 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800661a:	4b30      	ldr	r3, [pc, #192]	; (80066dc <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0ef      	beq.n	8006606 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8006626:	7cfb      	ldrb	r3, [r7, #19]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d159      	bne.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800662c:	4b2a      	ldr	r3, [pc, #168]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006632:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006636:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006638:	697b      	ldr	r3, [r7, #20]
 800663a:	2b00      	cmp	r3, #0
 800663c:	d01e      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006642:	697a      	ldr	r2, [r7, #20]
 8006644:	429a      	cmp	r2, r3
 8006646:	d019      	beq.n	800667c <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006648:	4b23      	ldr	r3, [pc, #140]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800664a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800664e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006652:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8006654:	4b20      	ldr	r3, [pc, #128]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006656:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800665a:	4a1f      	ldr	r2, [pc, #124]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800665c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006660:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800666a:	4a1b      	ldr	r2, [pc, #108]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800666c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006670:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8006674:	4a18      	ldr	r2, [pc, #96]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	f003 0301 	and.w	r3, r3, #1
 8006682:	2b00      	cmp	r3, #0
 8006684:	d016      	beq.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006686:	f7fc fd3f 	bl	8003108 <HAL_GetTick>
 800668a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800668c:	e00b      	b.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800668e:	f7fc fd3b 	bl	8003108 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	f241 3288 	movw	r2, #5000	; 0x1388
 800669c:	4293      	cmp	r3, r2
 800669e:	d902      	bls.n	80066a6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80066a0:	2303      	movs	r3, #3
 80066a2:	74fb      	strb	r3, [r7, #19]
            break;
 80066a4:	e006      	b.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80066a6:	4b0c      	ldr	r3, [pc, #48]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066ac:	f003 0302 	and.w	r3, r3, #2
 80066b0:	2b00      	cmp	r3, #0
 80066b2:	d0ec      	beq.n	800668e <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80066b4:	7cfb      	ldrb	r3, [r7, #19]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d10b      	bne.n	80066d2 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80066ba:	4b07      	ldr	r3, [pc, #28]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80066c0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066c8:	4903      	ldr	r1, [pc, #12]	; (80066d8 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80066ca:	4313      	orrs	r3, r2
 80066cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80066d0:	e008      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80066d2:	7cfb      	ldrb	r3, [r7, #19]
 80066d4:	74bb      	strb	r3, [r7, #18]
 80066d6:	e005      	b.n	80066e4 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80066d8:	40021000 	.word	0x40021000
 80066dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80066e0:	7cfb      	ldrb	r3, [r7, #19]
 80066e2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80066e4:	7c7b      	ldrb	r3, [r7, #17]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d105      	bne.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066ea:	4ba6      	ldr	r3, [pc, #664]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80066ee:	4aa5      	ldr	r2, [pc, #660]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80066f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80066f4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f003 0301 	and.w	r3, r3, #1
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00a      	beq.n	8006718 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006702:	4ba0      	ldr	r3, [pc, #640]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006708:	f023 0203 	bic.w	r2, r3, #3
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	499c      	ldr	r1, [pc, #624]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006712:	4313      	orrs	r3, r2
 8006714:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f003 0302 	and.w	r3, r3, #2
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00a      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006724:	4b97      	ldr	r3, [pc, #604]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006726:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800672a:	f023 020c 	bic.w	r2, r3, #12
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	689b      	ldr	r3, [r3, #8]
 8006732:	4994      	ldr	r1, [pc, #592]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006734:	4313      	orrs	r3, r2
 8006736:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	f003 0304 	and.w	r3, r3, #4
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006746:	4b8f      	ldr	r3, [pc, #572]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800674c:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	68db      	ldr	r3, [r3, #12]
 8006754:	498b      	ldr	r1, [pc, #556]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006756:	4313      	orrs	r3, r2
 8006758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 0308 	and.w	r3, r3, #8
 8006764:	2b00      	cmp	r3, #0
 8006766:	d00a      	beq.n	800677e <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006768:	4b86      	ldr	r3, [pc, #536]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800676a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800676e:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	691b      	ldr	r3, [r3, #16]
 8006776:	4983      	ldr	r1, [pc, #524]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006778:	4313      	orrs	r3, r2
 800677a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f003 0320 	and.w	r3, r3, #32
 8006786:	2b00      	cmp	r3, #0
 8006788:	d00a      	beq.n	80067a0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800678a:	4b7e      	ldr	r3, [pc, #504]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800678c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006790:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	695b      	ldr	r3, [r3, #20]
 8006798:	497a      	ldr	r1, [pc, #488]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800679a:	4313      	orrs	r3, r2
 800679c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00a      	beq.n	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80067ac:	4b75      	ldr	r3, [pc, #468]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067b2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	4972      	ldr	r1, [pc, #456]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067bc:	4313      	orrs	r3, r2
 80067be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00a      	beq.n	80067e4 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80067ce:	4b6d      	ldr	r3, [pc, #436]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067d4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	69db      	ldr	r3, [r3, #28]
 80067dc:	4969      	ldr	r1, [pc, #420]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067de:	4313      	orrs	r3, r2
 80067e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d00a      	beq.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80067f0:	4b64      	ldr	r3, [pc, #400]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80067f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80067f6:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	6a1b      	ldr	r3, [r3, #32]
 80067fe:	4961      	ldr	r1, [pc, #388]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006800:	4313      	orrs	r3, r2
 8006802:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800680e:	2b00      	cmp	r3, #0
 8006810:	d00a      	beq.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006812:	4b5c      	ldr	r3, [pc, #368]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006814:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006818:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006820:	4958      	ldr	r1, [pc, #352]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006822:	4313      	orrs	r3, r2
 8006824:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006830:	2b00      	cmp	r3, #0
 8006832:	d015      	beq.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006834:	4b53      	ldr	r3, [pc, #332]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006836:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800683a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006842:	4950      	ldr	r1, [pc, #320]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006844:	4313      	orrs	r3, r2
 8006846:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800684e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006852:	d105      	bne.n	8006860 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006854:	4b4b      	ldr	r3, [pc, #300]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	4a4a      	ldr	r2, [pc, #296]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800685a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800685e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006868:	2b00      	cmp	r3, #0
 800686a:	d015      	beq.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800686c:	4b45      	ldr	r3, [pc, #276]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800686e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006872:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800687a:	4942      	ldr	r1, [pc, #264]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800687c:	4313      	orrs	r3, r2
 800687e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006886:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800688a:	d105      	bne.n	8006898 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800688c:	4b3d      	ldr	r3, [pc, #244]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800688e:	68db      	ldr	r3, [r3, #12]
 8006890:	4a3c      	ldr	r2, [pc, #240]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006892:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006896:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80068a0:	2b00      	cmp	r3, #0
 80068a2:	d015      	beq.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80068a4:	4b37      	ldr	r3, [pc, #220]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068aa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	4934      	ldr	r1, [pc, #208]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068b4:	4313      	orrs	r3, r2
 80068b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068be:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80068c2:	d105      	bne.n	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068c4:	4b2f      	ldr	r3, [pc, #188]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068c6:	68db      	ldr	r3, [r3, #12]
 80068c8:	4a2e      	ldr	r2, [pc, #184]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80068ce:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d015      	beq.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80068dc:	4b29      	ldr	r3, [pc, #164]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80068e2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068ea:	4926      	ldr	r1, [pc, #152]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068ec:	4313      	orrs	r3, r2
 80068ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80068f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80068fa:	d105      	bne.n	8006908 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068fc:	4b21      	ldr	r3, [pc, #132]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	4a20      	ldr	r2, [pc, #128]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006902:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006906:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006910:	2b00      	cmp	r3, #0
 8006912:	d015      	beq.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006914:	4b1b      	ldr	r3, [pc, #108]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006916:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800691a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006922:	4918      	ldr	r1, [pc, #96]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006924:	4313      	orrs	r3, r2
 8006926:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800692e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006932:	d105      	bne.n	8006940 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006934:	4b13      	ldr	r3, [pc, #76]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006936:	68db      	ldr	r3, [r3, #12]
 8006938:	4a12      	ldr	r2, [pc, #72]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800693a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800693e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006948:	2b00      	cmp	r3, #0
 800694a:	d015      	beq.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800694c:	4b0d      	ldr	r3, [pc, #52]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800694e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006952:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800695a:	490a      	ldr	r1, [pc, #40]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800695c:	4313      	orrs	r3, r2
 800695e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006966:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800696a:	d105      	bne.n	8006978 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800696c:	4b05      	ldr	r3, [pc, #20]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800696e:	68db      	ldr	r3, [r3, #12]
 8006970:	4a04      	ldr	r2, [pc, #16]	; (8006984 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006972:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006976:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8006978:	7cbb      	ldrb	r3, [r7, #18]
}
 800697a:	4618      	mov	r0, r3
 800697c:	3718      	adds	r7, #24
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	40021000 	.word	0x40021000

08006988 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006988:	b580      	push	{r7, lr}
 800698a:	b084      	sub	sp, #16
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	2b00      	cmp	r3, #0
 8006994:	d101      	bne.n	800699a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
 8006998:	e09d      	b.n	8006ad6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d108      	bne.n	80069b4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	685b      	ldr	r3, [r3, #4]
 80069a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069aa:	d009      	beq.n	80069c0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	61da      	str	r2, [r3, #28]
 80069b2:	e005      	b.n	80069c0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2200      	movs	r2, #0
 80069b8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2200      	movs	r2, #0
 80069be:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	2200      	movs	r2, #0
 80069c4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069cc:	b2db      	uxtb	r3, r3
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d106      	bne.n	80069e0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80069da:	6878      	ldr	r0, [r7, #4]
 80069dc:	f7fc f8a0 	bl	8002b20 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	2202      	movs	r2, #2
 80069e4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	681a      	ldr	r2, [r3, #0]
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80069f6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	68db      	ldr	r3, [r3, #12]
 80069fc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a00:	d902      	bls.n	8006a08 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60fb      	str	r3, [r7, #12]
 8006a06:	e002      	b.n	8006a0e <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a08:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006a0c:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	68db      	ldr	r3, [r3, #12]
 8006a12:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8006a16:	d007      	beq.n	8006a28 <HAL_SPI_Init+0xa0>
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	68db      	ldr	r3, [r3, #12]
 8006a1c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a20:	d002      	beq.n	8006a28 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2200      	movs	r2, #0
 8006a26:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	689b      	ldr	r3, [r3, #8]
 8006a34:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8006a38:	431a      	orrs	r2, r3
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	691b      	ldr	r3, [r3, #16]
 8006a3e:	f003 0302 	and.w	r3, r3, #2
 8006a42:	431a      	orrs	r2, r3
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	695b      	ldr	r3, [r3, #20]
 8006a48:	f003 0301 	and.w	r3, r3, #1
 8006a4c:	431a      	orrs	r2, r3
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	699b      	ldr	r3, [r3, #24]
 8006a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a56:	431a      	orrs	r2, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	69db      	ldr	r3, [r3, #28]
 8006a5c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006a60:	431a      	orrs	r2, r3
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6a1b      	ldr	r3, [r3, #32]
 8006a66:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a6a:	ea42 0103 	orr.w	r1, r2, r3
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a72:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	430a      	orrs	r2, r1
 8006a7c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	699b      	ldr	r3, [r3, #24]
 8006a82:	0c1b      	lsrs	r3, r3, #16
 8006a84:	f003 0204 	and.w	r2, r3, #4
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	f003 0310 	and.w	r3, r3, #16
 8006a90:	431a      	orrs	r2, r3
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a96:	f003 0308 	and.w	r3, r3, #8
 8006a9a:	431a      	orrs	r2, r3
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	68db      	ldr	r3, [r3, #12]
 8006aa0:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8006aa4:	ea42 0103 	orr.w	r1, r2, r3
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	430a      	orrs	r2, r1
 8006ab4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	69da      	ldr	r2, [r3, #28]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006ac4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	2200      	movs	r2, #0
 8006aca:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2201      	movs	r2, #1
 8006ad0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006ad4:	2300      	movs	r3, #0
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}

08006ade <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006ade:	b580      	push	{r7, lr}
 8006ae0:	b088      	sub	sp, #32
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	60f8      	str	r0, [r7, #12]
 8006ae6:	60b9      	str	r1, [r7, #8]
 8006ae8:	603b      	str	r3, [r7, #0]
 8006aea:	4613      	mov	r3, r2
 8006aec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006aee:	2300      	movs	r3, #0
 8006af0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006af8:	2b01      	cmp	r3, #1
 8006afa:	d101      	bne.n	8006b00 <HAL_SPI_Transmit+0x22>
 8006afc:	2302      	movs	r3, #2
 8006afe:	e158      	b.n	8006db2 <HAL_SPI_Transmit+0x2d4>
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	2201      	movs	r2, #1
 8006b04:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006b08:	f7fc fafe 	bl	8003108 <HAL_GetTick>
 8006b0c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006b0e:	88fb      	ldrh	r3, [r7, #6]
 8006b10:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006b18:	b2db      	uxtb	r3, r3
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d002      	beq.n	8006b24 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006b1e:	2302      	movs	r3, #2
 8006b20:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b22:	e13d      	b.n	8006da0 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d002      	beq.n	8006b30 <HAL_SPI_Transmit+0x52>
 8006b2a:	88fb      	ldrh	r3, [r7, #6]
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d102      	bne.n	8006b36 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006b30:	2301      	movs	r3, #1
 8006b32:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006b34:	e134      	b.n	8006da0 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	2203      	movs	r2, #3
 8006b3a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006b3e:	68fb      	ldr	r3, [r7, #12]
 8006b40:	2200      	movs	r2, #0
 8006b42:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	68ba      	ldr	r2, [r7, #8]
 8006b48:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	88fa      	ldrh	r2, [r7, #6]
 8006b4e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	88fa      	ldrh	r2, [r7, #6]
 8006b54:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	2200      	movs	r2, #0
 8006b5a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006b64:	68fb      	ldr	r3, [r7, #12]
 8006b66:	2200      	movs	r2, #0
 8006b68:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	2200      	movs	r2, #0
 8006b70:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8006b72:	68fb      	ldr	r3, [r7, #12]
 8006b74:	2200      	movs	r2, #0
 8006b76:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	689b      	ldr	r3, [r3, #8]
 8006b7c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006b80:	d10f      	bne.n	8006ba2 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681a      	ldr	r2, [r3, #0]
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b90:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	681a      	ldr	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006ba0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bac:	2b40      	cmp	r3, #64	; 0x40
 8006bae:	d007      	beq.n	8006bc0 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	681a      	ldr	r2, [r3, #0]
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bbe:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	68db      	ldr	r3, [r3, #12]
 8006bc4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006bc8:	d94b      	bls.n	8006c62 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d002      	beq.n	8006bd8 <HAL_SPI_Transmit+0xfa>
 8006bd2:	8afb      	ldrh	r3, [r7, #22]
 8006bd4:	2b01      	cmp	r3, #1
 8006bd6:	d13e      	bne.n	8006c56 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bdc:	881a      	ldrh	r2, [r3, #0]
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	681b      	ldr	r3, [r3, #0]
 8006be2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006be8:	1c9a      	adds	r2, r3, #2
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	b29a      	uxth	r2, r3
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006bfc:	e02b      	b.n	8006c56 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	f003 0302 	and.w	r3, r3, #2
 8006c08:	2b02      	cmp	r3, #2
 8006c0a:	d112      	bne.n	8006c32 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c10:	881a      	ldrh	r2, [r3, #0]
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c18:	68fb      	ldr	r3, [r7, #12]
 8006c1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c1c:	1c9a      	adds	r2, r3, #2
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	3b01      	subs	r3, #1
 8006c2a:	b29a      	uxth	r2, r3
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c30:	e011      	b.n	8006c56 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c32:	f7fc fa69 	bl	8003108 <HAL_GetTick>
 8006c36:	4602      	mov	r2, r0
 8006c38:	69bb      	ldr	r3, [r7, #24]
 8006c3a:	1ad3      	subs	r3, r2, r3
 8006c3c:	683a      	ldr	r2, [r7, #0]
 8006c3e:	429a      	cmp	r2, r3
 8006c40:	d803      	bhi.n	8006c4a <HAL_SPI_Transmit+0x16c>
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c48:	d102      	bne.n	8006c50 <HAL_SPI_Transmit+0x172>
 8006c4a:	683b      	ldr	r3, [r7, #0]
 8006c4c:	2b00      	cmp	r3, #0
 8006c4e:	d102      	bne.n	8006c56 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006c50:	2303      	movs	r3, #3
 8006c52:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006c54:	e0a4      	b.n	8006da0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1ce      	bne.n	8006bfe <HAL_SPI_Transmit+0x120>
 8006c60:	e07c      	b.n	8006d5c <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	685b      	ldr	r3, [r3, #4]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d002      	beq.n	8006c70 <HAL_SPI_Transmit+0x192>
 8006c6a:	8afb      	ldrh	r3, [r7, #22]
 8006c6c:	2b01      	cmp	r3, #1
 8006c6e:	d170      	bne.n	8006d52 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c74:	b29b      	uxth	r3, r3
 8006c76:	2b01      	cmp	r3, #1
 8006c78:	d912      	bls.n	8006ca0 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c7a:	68fb      	ldr	r3, [r7, #12]
 8006c7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c7e:	881a      	ldrh	r2, [r3, #0]
 8006c80:	68fb      	ldr	r3, [r7, #12]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c8a:	1c9a      	adds	r2, r3, #2
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c94:	b29b      	uxth	r3, r3
 8006c96:	3b02      	subs	r3, #2
 8006c98:	b29a      	uxth	r2, r3
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c9e:	e058      	b.n	8006d52 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	7812      	ldrb	r2, [r2, #0]
 8006cac:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	1c5a      	adds	r2, r3, #1
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006cb8:	68fb      	ldr	r3, [r7, #12]
 8006cba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cbc:	b29b      	uxth	r3, r3
 8006cbe:	3b01      	subs	r3, #1
 8006cc0:	b29a      	uxth	r2, r3
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8006cc6:	e044      	b.n	8006d52 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	689b      	ldr	r3, [r3, #8]
 8006cce:	f003 0302 	and.w	r3, r3, #2
 8006cd2:	2b02      	cmp	r3, #2
 8006cd4:	d12b      	bne.n	8006d2e <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cda:	b29b      	uxth	r3, r3
 8006cdc:	2b01      	cmp	r3, #1
 8006cde:	d912      	bls.n	8006d06 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ce0:	68fb      	ldr	r3, [r7, #12]
 8006ce2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ce4:	881a      	ldrh	r2, [r3, #0]
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cf0:	1c9a      	adds	r2, r3, #2
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006cfa:	b29b      	uxth	r3, r3
 8006cfc:	3b02      	subs	r3, #2
 8006cfe:	b29a      	uxth	r2, r3
 8006d00:	68fb      	ldr	r3, [r7, #12]
 8006d02:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d04:	e025      	b.n	8006d52 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006d06:	68fb      	ldr	r3, [r7, #12]
 8006d08:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	330c      	adds	r3, #12
 8006d10:	7812      	ldrb	r2, [r2, #0]
 8006d12:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	1c5a      	adds	r2, r3, #1
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	3b01      	subs	r3, #1
 8006d26:	b29a      	uxth	r2, r3
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006d2c:	e011      	b.n	8006d52 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006d2e:	f7fc f9eb 	bl	8003108 <HAL_GetTick>
 8006d32:	4602      	mov	r2, r0
 8006d34:	69bb      	ldr	r3, [r7, #24]
 8006d36:	1ad3      	subs	r3, r2, r3
 8006d38:	683a      	ldr	r2, [r7, #0]
 8006d3a:	429a      	cmp	r2, r3
 8006d3c:	d803      	bhi.n	8006d46 <HAL_SPI_Transmit+0x268>
 8006d3e:	683b      	ldr	r3, [r7, #0]
 8006d40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d44:	d102      	bne.n	8006d4c <HAL_SPI_Transmit+0x26e>
 8006d46:	683b      	ldr	r3, [r7, #0]
 8006d48:	2b00      	cmp	r3, #0
 8006d4a:	d102      	bne.n	8006d52 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006d4c:	2303      	movs	r3, #3
 8006d4e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006d50:	e026      	b.n	8006da0 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d56:	b29b      	uxth	r3, r3
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d1b5      	bne.n	8006cc8 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d5c:	69ba      	ldr	r2, [r7, #24]
 8006d5e:	6839      	ldr	r1, [r7, #0]
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f000 fce3 	bl	800772c <SPI_EndRxTxTransaction>
 8006d66:	4603      	mov	r3, r0
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	2220      	movs	r2, #32
 8006d70:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	689b      	ldr	r3, [r3, #8]
 8006d76:	2b00      	cmp	r3, #0
 8006d78:	d10a      	bne.n	8006d90 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006d7a:	2300      	movs	r3, #0
 8006d7c:	613b      	str	r3, [r7, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	68db      	ldr	r3, [r3, #12]
 8006d84:	613b      	str	r3, [r7, #16]
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	689b      	ldr	r3, [r3, #8]
 8006d8c:	613b      	str	r3, [r7, #16]
 8006d8e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d002      	beq.n	8006d9e <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	77fb      	strb	r3, [r7, #31]
 8006d9c:	e000      	b.n	8006da0 <HAL_SPI_Transmit+0x2c2>
  }

error:
 8006d9e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006da0:	68fb      	ldr	r3, [r7, #12]
 8006da2:	2201      	movs	r2, #1
 8006da4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	2200      	movs	r2, #0
 8006dac:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006db0:	7ffb      	ldrb	r3, [r7, #31]
}
 8006db2:	4618      	mov	r0, r3
 8006db4:	3720      	adds	r7, #32
 8006db6:	46bd      	mov	sp, r7
 8006db8:	bd80      	pop	{r7, pc}

08006dba <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006dba:	b580      	push	{r7, lr}
 8006dbc:	b088      	sub	sp, #32
 8006dbe:	af02      	add	r7, sp, #8
 8006dc0:	60f8      	str	r0, [r7, #12]
 8006dc2:	60b9      	str	r1, [r7, #8]
 8006dc4:	603b      	str	r3, [r7, #0]
 8006dc6:	4613      	mov	r3, r2
 8006dc8:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006dca:	2300      	movs	r3, #0
 8006dcc:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006dd6:	d112      	bne.n	8006dfe <HAL_SPI_Receive+0x44>
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	689b      	ldr	r3, [r3, #8]
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d10e      	bne.n	8006dfe <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2204      	movs	r2, #4
 8006de4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006de8:	88fa      	ldrh	r2, [r7, #6]
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	4613      	mov	r3, r2
 8006df0:	68ba      	ldr	r2, [r7, #8]
 8006df2:	68b9      	ldr	r1, [r7, #8]
 8006df4:	68f8      	ldr	r0, [r7, #12]
 8006df6:	f000 f910 	bl	800701a <HAL_SPI_TransmitReceive>
 8006dfa:	4603      	mov	r3, r0
 8006dfc:	e109      	b.n	8007012 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006e04:	2b01      	cmp	r3, #1
 8006e06:	d101      	bne.n	8006e0c <HAL_SPI_Receive+0x52>
 8006e08:	2302      	movs	r3, #2
 8006e0a:	e102      	b.n	8007012 <HAL_SPI_Receive+0x258>
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2201      	movs	r2, #1
 8006e10:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006e14:	f7fc f978 	bl	8003108 <HAL_GetTick>
 8006e18:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006e20:	b2db      	uxtb	r3, r3
 8006e22:	2b01      	cmp	r3, #1
 8006e24:	d002      	beq.n	8006e2c <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8006e26:	2302      	movs	r3, #2
 8006e28:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e2a:	e0e9      	b.n	8007000 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006e2c:	68bb      	ldr	r3, [r7, #8]
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d002      	beq.n	8006e38 <HAL_SPI_Receive+0x7e>
 8006e32:	88fb      	ldrh	r3, [r7, #6]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d102      	bne.n	8006e3e <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8006e38:	2301      	movs	r3, #1
 8006e3a:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006e3c:	e0e0      	b.n	8007000 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	2204      	movs	r2, #4
 8006e42:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	2200      	movs	r2, #0
 8006e4a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	68ba      	ldr	r2, [r7, #8]
 8006e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	88fa      	ldrh	r2, [r7, #6]
 8006e56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	88fa      	ldrh	r2, [r7, #6]
 8006e5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	2200      	movs	r2, #0
 8006e66:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2200      	movs	r2, #0
 8006e72:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	2200      	movs	r2, #0
 8006e78:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	2200      	movs	r2, #0
 8006e7e:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	68db      	ldr	r3, [r3, #12]
 8006e84:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006e88:	d908      	bls.n	8006e9c <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	685a      	ldr	r2, [r3, #4]
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006e98:	605a      	str	r2, [r3, #4]
 8006e9a:	e007      	b.n	8006eac <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	685a      	ldr	r2, [r3, #4]
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006eaa:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006eb4:	d10f      	bne.n	8006ed6 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006ec4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006ed4:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ee0:	2b40      	cmp	r3, #64	; 0x40
 8006ee2:	d007      	beq.n	8006ef4 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	681a      	ldr	r2, [r3, #0]
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006ef2:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006efc:	d867      	bhi.n	8006fce <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006efe:	e030      	b.n	8006f62 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	681b      	ldr	r3, [r3, #0]
 8006f04:	689b      	ldr	r3, [r3, #8]
 8006f06:	f003 0301 	and.w	r3, r3, #1
 8006f0a:	2b01      	cmp	r3, #1
 8006f0c:	d117      	bne.n	8006f3e <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006f0e:	68fb      	ldr	r3, [r7, #12]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	f103 020c 	add.w	r2, r3, #12
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f1a:	7812      	ldrb	r2, [r2, #0]
 8006f1c:	b2d2      	uxtb	r2, r2
 8006f1e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f24:	1c5a      	adds	r2, r3, #1
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f2a:	68fb      	ldr	r3, [r7, #12]
 8006f2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f30:	b29b      	uxth	r3, r3
 8006f32:	3b01      	subs	r3, #1
 8006f34:	b29a      	uxth	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006f3c:	e011      	b.n	8006f62 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006f3e:	f7fc f8e3 	bl	8003108 <HAL_GetTick>
 8006f42:	4602      	mov	r2, r0
 8006f44:	693b      	ldr	r3, [r7, #16]
 8006f46:	1ad3      	subs	r3, r2, r3
 8006f48:	683a      	ldr	r2, [r7, #0]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d803      	bhi.n	8006f56 <HAL_SPI_Receive+0x19c>
 8006f4e:	683b      	ldr	r3, [r7, #0]
 8006f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f54:	d102      	bne.n	8006f5c <HAL_SPI_Receive+0x1a2>
 8006f56:	683b      	ldr	r3, [r7, #0]
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d102      	bne.n	8006f62 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006f60:	e04e      	b.n	8007000 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f68:	b29b      	uxth	r3, r3
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1c8      	bne.n	8006f00 <HAL_SPI_Receive+0x146>
 8006f6e:	e034      	b.n	8006fda <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	f003 0301 	and.w	r3, r3, #1
 8006f7a:	2b01      	cmp	r3, #1
 8006f7c:	d115      	bne.n	8006faa <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	68da      	ldr	r2, [r3, #12]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f88:	b292      	uxth	r2, r2
 8006f8a:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f90:	1c9a      	adds	r2, r3, #2
 8006f92:	68fb      	ldr	r3, [r7, #12]
 8006f94:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	3b01      	subs	r3, #1
 8006fa0:	b29a      	uxth	r2, r3
 8006fa2:	68fb      	ldr	r3, [r7, #12]
 8006fa4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006fa8:	e011      	b.n	8006fce <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006faa:	f7fc f8ad 	bl	8003108 <HAL_GetTick>
 8006fae:	4602      	mov	r2, r0
 8006fb0:	693b      	ldr	r3, [r7, #16]
 8006fb2:	1ad3      	subs	r3, r2, r3
 8006fb4:	683a      	ldr	r2, [r7, #0]
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	d803      	bhi.n	8006fc2 <HAL_SPI_Receive+0x208>
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fc0:	d102      	bne.n	8006fc8 <HAL_SPI_Receive+0x20e>
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d102      	bne.n	8006fce <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 8006fc8:	2303      	movs	r3, #3
 8006fca:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006fcc:	e018      	b.n	8007000 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006fd4:	b29b      	uxth	r3, r3
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d1ca      	bne.n	8006f70 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fda:	693a      	ldr	r2, [r7, #16]
 8006fdc:	6839      	ldr	r1, [r7, #0]
 8006fde:	68f8      	ldr	r0, [r7, #12]
 8006fe0:	f000 fb4c 	bl	800767c <SPI_EndRxTransaction>
 8006fe4:	4603      	mov	r3, r0
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d002      	beq.n	8006ff0 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	2220      	movs	r2, #32
 8006fee:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006ff4:	2b00      	cmp	r3, #0
 8006ff6:	d002      	beq.n	8006ffe <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8006ff8:	2301      	movs	r3, #1
 8006ffa:	75fb      	strb	r3, [r7, #23]
 8006ffc:	e000      	b.n	8007000 <HAL_SPI_Receive+0x246>
  }

error :
 8006ffe:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	2200      	movs	r2, #0
 800700c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007010:	7dfb      	ldrb	r3, [r7, #23]
}
 8007012:	4618      	mov	r0, r3
 8007014:	3718      	adds	r7, #24
 8007016:	46bd      	mov	sp, r7
 8007018:	bd80      	pop	{r7, pc}

0800701a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800701a:	b580      	push	{r7, lr}
 800701c:	b08a      	sub	sp, #40	; 0x28
 800701e:	af00      	add	r7, sp, #0
 8007020:	60f8      	str	r0, [r7, #12]
 8007022:	60b9      	str	r1, [r7, #8]
 8007024:	607a      	str	r2, [r7, #4]
 8007026:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007028:	2301      	movs	r3, #1
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800702c:	2300      	movs	r3, #0
 800702e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8007038:	2b01      	cmp	r3, #1
 800703a:	d101      	bne.n	8007040 <HAL_SPI_TransmitReceive+0x26>
 800703c:	2302      	movs	r3, #2
 800703e:	e1fb      	b.n	8007438 <HAL_SPI_TransmitReceive+0x41e>
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2201      	movs	r2, #1
 8007044:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8007048:	f7fc f85e 	bl	8003108 <HAL_GetTick>
 800704c:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8007054:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	685b      	ldr	r3, [r3, #4]
 800705a:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 800705c:	887b      	ldrh	r3, [r7, #2]
 800705e:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8007060:	887b      	ldrh	r3, [r7, #2]
 8007062:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8007064:	7efb      	ldrb	r3, [r7, #27]
 8007066:	2b01      	cmp	r3, #1
 8007068:	d00e      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x6e>
 800706a:	697b      	ldr	r3, [r7, #20]
 800706c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007070:	d106      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	689b      	ldr	r3, [r3, #8]
 8007076:	2b00      	cmp	r3, #0
 8007078:	d102      	bne.n	8007080 <HAL_SPI_TransmitReceive+0x66>
 800707a:	7efb      	ldrb	r3, [r7, #27]
 800707c:	2b04      	cmp	r3, #4
 800707e:	d003      	beq.n	8007088 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 8007080:	2302      	movs	r3, #2
 8007082:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 8007086:	e1cd      	b.n	8007424 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8007088:	68bb      	ldr	r3, [r7, #8]
 800708a:	2b00      	cmp	r3, #0
 800708c:	d005      	beq.n	800709a <HAL_SPI_TransmitReceive+0x80>
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	2b00      	cmp	r3, #0
 8007092:	d002      	beq.n	800709a <HAL_SPI_TransmitReceive+0x80>
 8007094:	887b      	ldrh	r3, [r7, #2]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d103      	bne.n	80070a2 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80070a0:	e1c0      	b.n	8007424 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80070a8:	b2db      	uxtb	r3, r3
 80070aa:	2b04      	cmp	r3, #4
 80070ac:	d003      	beq.n	80070b6 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80070ae:	68fb      	ldr	r3, [r7, #12]
 80070b0:	2205      	movs	r2, #5
 80070b2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	687a      	ldr	r2, [r7, #4]
 80070c0:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	887a      	ldrh	r2, [r7, #2]
 80070c6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	887a      	ldrh	r2, [r7, #2]
 80070ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	68ba      	ldr	r2, [r7, #8]
 80070d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	887a      	ldrh	r2, [r7, #2]
 80070dc:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	887a      	ldrh	r2, [r7, #2]
 80070e2:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	2200      	movs	r2, #0
 80070e8:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	2200      	movs	r2, #0
 80070ee:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	68db      	ldr	r3, [r3, #12]
 80070f4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80070f8:	d802      	bhi.n	8007100 <HAL_SPI_TransmitReceive+0xe6>
 80070fa:	8a3b      	ldrh	r3, [r7, #16]
 80070fc:	2b01      	cmp	r3, #1
 80070fe:	d908      	bls.n	8007112 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	685a      	ldr	r2, [r3, #4]
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	e007      	b.n	8007122 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	685a      	ldr	r2, [r3, #4]
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007120:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800712c:	2b40      	cmp	r3, #64	; 0x40
 800712e:	d007      	beq.n	8007140 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007130:	68fb      	ldr	r3, [r7, #12]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	681a      	ldr	r2, [r3, #0]
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800713e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8007140:	68fb      	ldr	r3, [r7, #12]
 8007142:	68db      	ldr	r3, [r3, #12]
 8007144:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8007148:	d97c      	bls.n	8007244 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	685b      	ldr	r3, [r3, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d002      	beq.n	8007158 <HAL_SPI_TransmitReceive+0x13e>
 8007152:	8a7b      	ldrh	r3, [r7, #18]
 8007154:	2b01      	cmp	r3, #1
 8007156:	d169      	bne.n	800722c <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800715c:	881a      	ldrh	r2, [r3, #0]
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8007164:	68fb      	ldr	r3, [r7, #12]
 8007166:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007168:	1c9a      	adds	r2, r3, #2
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007172:	b29b      	uxth	r3, r3
 8007174:	3b01      	subs	r3, #1
 8007176:	b29a      	uxth	r2, r3
 8007178:	68fb      	ldr	r3, [r7, #12]
 800717a:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800717c:	e056      	b.n	800722c <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800717e:	68fb      	ldr	r3, [r7, #12]
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	689b      	ldr	r3, [r3, #8]
 8007184:	f003 0302 	and.w	r3, r3, #2
 8007188:	2b02      	cmp	r3, #2
 800718a:	d11b      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x1aa>
 800718c:	68fb      	ldr	r3, [r7, #12]
 800718e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007190:	b29b      	uxth	r3, r3
 8007192:	2b00      	cmp	r3, #0
 8007194:	d016      	beq.n	80071c4 <HAL_SPI_TransmitReceive+0x1aa>
 8007196:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007198:	2b01      	cmp	r3, #1
 800719a:	d113      	bne.n	80071c4 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a0:	881a      	ldrh	r2, [r3, #0]
 80071a2:	68fb      	ldr	r3, [r7, #12]
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071ac:	1c9a      	adds	r2, r3, #2
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80071b6:	b29b      	uxth	r3, r3
 80071b8:	3b01      	subs	r3, #1
 80071ba:	b29a      	uxth	r2, r3
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80071c0:	2300      	movs	r3, #0
 80071c2:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	681b      	ldr	r3, [r3, #0]
 80071c8:	689b      	ldr	r3, [r3, #8]
 80071ca:	f003 0301 	and.w	r3, r3, #1
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	d11c      	bne.n	800720c <HAL_SPI_TransmitReceive+0x1f2>
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071d8:	b29b      	uxth	r3, r3
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d016      	beq.n	800720c <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	68da      	ldr	r2, [r3, #12]
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071e8:	b292      	uxth	r2, r2
 80071ea:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f0:	1c9a      	adds	r2, r3, #2
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80071fc:	b29b      	uxth	r3, r3
 80071fe:	3b01      	subs	r3, #1
 8007200:	b29a      	uxth	r2, r3
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007208:	2301      	movs	r3, #1
 800720a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800720c:	f7fb ff7c 	bl	8003108 <HAL_GetTick>
 8007210:	4602      	mov	r2, r0
 8007212:	69fb      	ldr	r3, [r7, #28]
 8007214:	1ad3      	subs	r3, r2, r3
 8007216:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007218:	429a      	cmp	r2, r3
 800721a:	d807      	bhi.n	800722c <HAL_SPI_TransmitReceive+0x212>
 800721c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800721e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007222:	d003      	beq.n	800722c <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 800722a:	e0fb      	b.n	8007424 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007230:	b29b      	uxth	r3, r3
 8007232:	2b00      	cmp	r3, #0
 8007234:	d1a3      	bne.n	800717e <HAL_SPI_TransmitReceive+0x164>
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800723c:	b29b      	uxth	r3, r3
 800723e:	2b00      	cmp	r3, #0
 8007240:	d19d      	bne.n	800717e <HAL_SPI_TransmitReceive+0x164>
 8007242:	e0df      	b.n	8007404 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	685b      	ldr	r3, [r3, #4]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d003      	beq.n	8007254 <HAL_SPI_TransmitReceive+0x23a>
 800724c:	8a7b      	ldrh	r3, [r7, #18]
 800724e:	2b01      	cmp	r3, #1
 8007250:	f040 80cb 	bne.w	80073ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007258:	b29b      	uxth	r3, r3
 800725a:	2b01      	cmp	r3, #1
 800725c:	d912      	bls.n	8007284 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007262:	881a      	ldrh	r2, [r3, #0]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800726e:	1c9a      	adds	r2, r3, #2
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007278:	b29b      	uxth	r3, r3
 800727a:	3b02      	subs	r3, #2
 800727c:	b29a      	uxth	r2, r3
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	87da      	strh	r2, [r3, #62]	; 0x3e
 8007282:	e0b2      	b.n	80073ea <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007288:	68fb      	ldr	r3, [r7, #12]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	330c      	adds	r3, #12
 800728e:	7812      	ldrb	r2, [r2, #0]
 8007290:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007296:	1c5a      	adds	r2, r3, #1
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072a0:	b29b      	uxth	r3, r3
 80072a2:	3b01      	subs	r3, #1
 80072a4:	b29a      	uxth	r2, r3
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072aa:	e09e      	b.n	80073ea <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	681b      	ldr	r3, [r3, #0]
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f003 0302 	and.w	r3, r3, #2
 80072b6:	2b02      	cmp	r3, #2
 80072b8:	d134      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x30a>
 80072ba:	68fb      	ldr	r3, [r7, #12]
 80072bc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072be:	b29b      	uxth	r3, r3
 80072c0:	2b00      	cmp	r3, #0
 80072c2:	d02f      	beq.n	8007324 <HAL_SPI_TransmitReceive+0x30a>
 80072c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c6:	2b01      	cmp	r3, #1
 80072c8:	d12c      	bne.n	8007324 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ce:	b29b      	uxth	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	d912      	bls.n	80072fa <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072d8:	881a      	ldrh	r2, [r3, #0]
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80072e4:	1c9a      	adds	r2, r3, #2
 80072e6:	68fb      	ldr	r3, [r7, #12]
 80072e8:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80072ee:	b29b      	uxth	r3, r3
 80072f0:	3b02      	subs	r3, #2
 80072f2:	b29a      	uxth	r2, r3
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	87da      	strh	r2, [r3, #62]	; 0x3e
 80072f8:	e012      	b.n	8007320 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	330c      	adds	r3, #12
 8007304:	7812      	ldrb	r2, [r2, #0]
 8007306:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730c:	1c5a      	adds	r2, r3, #1
 800730e:	68fb      	ldr	r3, [r7, #12]
 8007310:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8007316:	b29b      	uxth	r3, r3
 8007318:	3b01      	subs	r3, #1
 800731a:	b29a      	uxth	r2, r3
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8007320:	2300      	movs	r3, #0
 8007322:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	681b      	ldr	r3, [r3, #0]
 8007328:	689b      	ldr	r3, [r3, #8]
 800732a:	f003 0301 	and.w	r3, r3, #1
 800732e:	2b01      	cmp	r3, #1
 8007330:	d148      	bne.n	80073c4 <HAL_SPI_TransmitReceive+0x3aa>
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007338:	b29b      	uxth	r3, r3
 800733a:	2b00      	cmp	r3, #0
 800733c:	d042      	beq.n	80073c4 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007344:	b29b      	uxth	r3, r3
 8007346:	2b01      	cmp	r3, #1
 8007348:	d923      	bls.n	8007392 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	68da      	ldr	r2, [r3, #12]
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007354:	b292      	uxth	r2, r2
 8007356:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800735c:	1c9a      	adds	r2, r3, #2
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8007368:	b29b      	uxth	r3, r3
 800736a:	3b02      	subs	r3, #2
 800736c:	b29a      	uxth	r2, r3
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800737a:	b29b      	uxth	r3, r3
 800737c:	2b01      	cmp	r3, #1
 800737e:	d81f      	bhi.n	80073c0 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	685a      	ldr	r2, [r3, #4]
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	681b      	ldr	r3, [r3, #0]
 800738a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800738e:	605a      	str	r2, [r3, #4]
 8007390:	e016      	b.n	80073c0 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f103 020c 	add.w	r2, r3, #12
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	7812      	ldrb	r2, [r2, #0]
 80073a0:	b2d2      	uxtb	r2, r2
 80073a2:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073a8:	1c5a      	adds	r2, r3, #1
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80073ae:	68fb      	ldr	r3, [r7, #12]
 80073b0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073b4:	b29b      	uxth	r3, r3
 80073b6:	3b01      	subs	r3, #1
 80073b8:	b29a      	uxth	r2, r3
 80073ba:	68fb      	ldr	r3, [r7, #12]
 80073bc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80073c0:	2301      	movs	r3, #1
 80073c2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80073c4:	f7fb fea0 	bl	8003108 <HAL_GetTick>
 80073c8:	4602      	mov	r2, r0
 80073ca:	69fb      	ldr	r3, [r7, #28]
 80073cc:	1ad3      	subs	r3, r2, r3
 80073ce:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d803      	bhi.n	80073dc <HAL_SPI_TransmitReceive+0x3c2>
 80073d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80073da:	d102      	bne.n	80073e2 <HAL_SPI_TransmitReceive+0x3c8>
 80073dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d103      	bne.n	80073ea <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 80073e2:	2303      	movs	r3, #3
 80073e4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 80073e8:	e01c      	b.n	8007424 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073ea:	68fb      	ldr	r3, [r7, #12]
 80073ec:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80073ee:	b29b      	uxth	r3, r3
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f47f af5b 	bne.w	80072ac <HAL_SPI_TransmitReceive+0x292>
 80073f6:	68fb      	ldr	r3, [r7, #12]
 80073f8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80073fc:	b29b      	uxth	r3, r3
 80073fe:	2b00      	cmp	r3, #0
 8007400:	f47f af54 	bne.w	80072ac <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007404:	69fa      	ldr	r2, [r7, #28]
 8007406:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007408:	68f8      	ldr	r0, [r7, #12]
 800740a:	f000 f98f 	bl	800772c <SPI_EndRxTxTransaction>
 800740e:	4603      	mov	r3, r0
 8007410:	2b00      	cmp	r3, #0
 8007412:	d006      	beq.n	8007422 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8007414:	2301      	movs	r3, #1
 8007416:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	2220      	movs	r2, #32
 800741e:	661a      	str	r2, [r3, #96]	; 0x60
 8007420:	e000      	b.n	8007424 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8007422:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2200      	movs	r2, #0
 8007430:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8007434:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8007438:	4618      	mov	r0, r3
 800743a:	3728      	adds	r7, #40	; 0x28
 800743c:	46bd      	mov	sp, r7
 800743e:	bd80      	pop	{r7, pc}

08007440 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b088      	sub	sp, #32
 8007444:	af00      	add	r7, sp, #0
 8007446:	60f8      	str	r0, [r7, #12]
 8007448:	60b9      	str	r1, [r7, #8]
 800744a:	603b      	str	r3, [r7, #0]
 800744c:	4613      	mov	r3, r2
 800744e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8007450:	f7fb fe5a 	bl	8003108 <HAL_GetTick>
 8007454:	4602      	mov	r2, r0
 8007456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007458:	1a9b      	subs	r3, r3, r2
 800745a:	683a      	ldr	r2, [r7, #0]
 800745c:	4413      	add	r3, r2
 800745e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8007460:	f7fb fe52 	bl	8003108 <HAL_GetTick>
 8007464:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007466:	4b39      	ldr	r3, [pc, #228]	; (800754c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	015b      	lsls	r3, r3, #5
 800746c:	0d1b      	lsrs	r3, r3, #20
 800746e:	69fa      	ldr	r2, [r7, #28]
 8007470:	fb02 f303 	mul.w	r3, r2, r3
 8007474:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007476:	e054      	b.n	8007522 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007478:	683b      	ldr	r3, [r7, #0]
 800747a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800747e:	d050      	beq.n	8007522 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8007480:	f7fb fe42 	bl	8003108 <HAL_GetTick>
 8007484:	4602      	mov	r2, r0
 8007486:	69bb      	ldr	r3, [r7, #24]
 8007488:	1ad3      	subs	r3, r2, r3
 800748a:	69fa      	ldr	r2, [r7, #28]
 800748c:	429a      	cmp	r2, r3
 800748e:	d902      	bls.n	8007496 <SPI_WaitFlagStateUntilTimeout+0x56>
 8007490:	69fb      	ldr	r3, [r7, #28]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d13d      	bne.n	8007512 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	685a      	ldr	r2, [r3, #4]
 800749c:	68fb      	ldr	r3, [r7, #12]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80074a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	685b      	ldr	r3, [r3, #4]
 80074aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80074ae:	d111      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80074b8:	d004      	beq.n	80074c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074c2:	d107      	bne.n	80074d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	681a      	ldr	r2, [r3, #0]
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80074d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80074dc:	d10f      	bne.n	80074fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	681a      	ldr	r2, [r3, #0]
 80074e4:	68fb      	ldr	r3, [r7, #12]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80074ec:	601a      	str	r2, [r3, #0]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	681a      	ldr	r2, [r3, #0]
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80074fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	2201      	movs	r2, #1
 8007502:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007506:	68fb      	ldr	r3, [r7, #12]
 8007508:	2200      	movs	r2, #0
 800750a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800750e:	2303      	movs	r3, #3
 8007510:	e017      	b.n	8007542 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8007512:	697b      	ldr	r3, [r7, #20]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8007518:	2300      	movs	r3, #0
 800751a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800751c:	697b      	ldr	r3, [r7, #20]
 800751e:	3b01      	subs	r3, #1
 8007520:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007522:	68fb      	ldr	r3, [r7, #12]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	68bb      	ldr	r3, [r7, #8]
 800752a:	4013      	ands	r3, r2
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	429a      	cmp	r2, r3
 8007530:	bf0c      	ite	eq
 8007532:	2301      	moveq	r3, #1
 8007534:	2300      	movne	r3, #0
 8007536:	b2db      	uxtb	r3, r3
 8007538:	461a      	mov	r2, r3
 800753a:	79fb      	ldrb	r3, [r7, #7]
 800753c:	429a      	cmp	r2, r3
 800753e:	d19b      	bne.n	8007478 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8007540:	2300      	movs	r3, #0
}
 8007542:	4618      	mov	r0, r3
 8007544:	3720      	adds	r7, #32
 8007546:	46bd      	mov	sp, r7
 8007548:	bd80      	pop	{r7, pc}
 800754a:	bf00      	nop
 800754c:	20000000 	.word	0x20000000

08007550 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8007550:	b580      	push	{r7, lr}
 8007552:	b08a      	sub	sp, #40	; 0x28
 8007554:	af00      	add	r7, sp, #0
 8007556:	60f8      	str	r0, [r7, #12]
 8007558:	60b9      	str	r1, [r7, #8]
 800755a:	607a      	str	r2, [r7, #4]
 800755c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800755e:	2300      	movs	r3, #0
 8007560:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8007562:	f7fb fdd1 	bl	8003108 <HAL_GetTick>
 8007566:	4602      	mov	r2, r0
 8007568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800756a:	1a9b      	subs	r3, r3, r2
 800756c:	683a      	ldr	r2, [r7, #0]
 800756e:	4413      	add	r3, r2
 8007570:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8007572:	f7fb fdc9 	bl	8003108 <HAL_GetTick>
 8007576:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	330c      	adds	r3, #12
 800757e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8007580:	4b3d      	ldr	r3, [pc, #244]	; (8007678 <SPI_WaitFifoStateUntilTimeout+0x128>)
 8007582:	681a      	ldr	r2, [r3, #0]
 8007584:	4613      	mov	r3, r2
 8007586:	009b      	lsls	r3, r3, #2
 8007588:	4413      	add	r3, r2
 800758a:	00da      	lsls	r2, r3, #3
 800758c:	1ad3      	subs	r3, r2, r3
 800758e:	0d1b      	lsrs	r3, r3, #20
 8007590:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007592:	fb02 f303 	mul.w	r3, r2, r3
 8007596:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8007598:	e060      	b.n	800765c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80075a0:	d107      	bne.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x62>
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d104      	bne.n	80075b2 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80075a8:	69fb      	ldr	r3, [r7, #28]
 80075aa:	781b      	ldrb	r3, [r3, #0]
 80075ac:	b2db      	uxtb	r3, r3
 80075ae:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80075b0:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80075b2:	683b      	ldr	r3, [r7, #0]
 80075b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075b8:	d050      	beq.n	800765c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80075ba:	f7fb fda5 	bl	8003108 <HAL_GetTick>
 80075be:	4602      	mov	r2, r0
 80075c0:	6a3b      	ldr	r3, [r7, #32]
 80075c2:	1ad3      	subs	r3, r2, r3
 80075c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d902      	bls.n	80075d0 <SPI_WaitFifoStateUntilTimeout+0x80>
 80075ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	d13d      	bne.n	800764c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	685a      	ldr	r2, [r3, #4]
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80075de:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	685b      	ldr	r3, [r3, #4]
 80075e4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80075e8:	d111      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0xbe>
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	689b      	ldr	r3, [r3, #8]
 80075ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075f2:	d004      	beq.n	80075fe <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	689b      	ldr	r3, [r3, #8]
 80075f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80075fc:	d107      	bne.n	800760e <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	681b      	ldr	r3, [r3, #0]
 8007602:	681a      	ldr	r2, [r3, #0]
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	681b      	ldr	r3, [r3, #0]
 8007608:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800760c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007612:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007616:	d10f      	bne.n	8007638 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	681a      	ldr	r2, [r3, #0]
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007626:	601a      	str	r2, [r3, #0]
 8007628:	68fb      	ldr	r3, [r7, #12]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	681a      	ldr	r2, [r3, #0]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007636:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8007638:	68fb      	ldr	r3, [r7, #12]
 800763a:	2201      	movs	r2, #1
 800763c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	2200      	movs	r2, #0
 8007644:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8007648:	2303      	movs	r3, #3
 800764a:	e010      	b.n	800766e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800764c:	69bb      	ldr	r3, [r7, #24]
 800764e:	2b00      	cmp	r3, #0
 8007650:	d101      	bne.n	8007656 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8007652:	2300      	movs	r3, #0
 8007654:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8007656:	69bb      	ldr	r3, [r7, #24]
 8007658:	3b01      	subs	r3, #1
 800765a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800765c:	68fb      	ldr	r3, [r7, #12]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	689a      	ldr	r2, [r3, #8]
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	4013      	ands	r3, r2
 8007666:	687a      	ldr	r2, [r7, #4]
 8007668:	429a      	cmp	r2, r3
 800766a:	d196      	bne.n	800759a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800766c:	2300      	movs	r3, #0
}
 800766e:	4618      	mov	r0, r3
 8007670:	3728      	adds	r7, #40	; 0x28
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}
 8007676:	bf00      	nop
 8007678:	20000000 	.word	0x20000000

0800767c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b086      	sub	sp, #24
 8007680:	af02      	add	r7, sp, #8
 8007682:	60f8      	str	r0, [r7, #12]
 8007684:	60b9      	str	r1, [r7, #8]
 8007686:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007690:	d111      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	689b      	ldr	r3, [r3, #8]
 8007696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800769a:	d004      	beq.n	80076a6 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076a4:	d107      	bne.n	80076b6 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80076b4:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	9300      	str	r3, [sp, #0]
 80076ba:	68bb      	ldr	r3, [r7, #8]
 80076bc:	2200      	movs	r2, #0
 80076be:	2180      	movs	r1, #128	; 0x80
 80076c0:	68f8      	ldr	r0, [r7, #12]
 80076c2:	f7ff febd 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 80076c6:	4603      	mov	r3, r0
 80076c8:	2b00      	cmp	r3, #0
 80076ca:	d007      	beq.n	80076dc <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076cc:	68fb      	ldr	r3, [r7, #12]
 80076ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80076d0:	f043 0220 	orr.w	r2, r3, #32
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80076d8:	2303      	movs	r3, #3
 80076da:	e023      	b.n	8007724 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80076e4:	d11d      	bne.n	8007722 <SPI_EndRxTransaction+0xa6>
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	689b      	ldr	r3, [r3, #8]
 80076ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ee:	d004      	beq.n	80076fa <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80076f0:	68fb      	ldr	r3, [r7, #12]
 80076f2:	689b      	ldr	r3, [r3, #8]
 80076f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f8:	d113      	bne.n	8007722 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	9300      	str	r3, [sp, #0]
 80076fe:	68bb      	ldr	r3, [r7, #8]
 8007700:	2200      	movs	r2, #0
 8007702:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007706:	68f8      	ldr	r0, [r7, #12]
 8007708:	f7ff ff22 	bl	8007550 <SPI_WaitFifoStateUntilTimeout>
 800770c:	4603      	mov	r3, r0
 800770e:	2b00      	cmp	r3, #0
 8007710:	d007      	beq.n	8007722 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007716:	f043 0220 	orr.w	r2, r3, #32
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800771e:	2303      	movs	r3, #3
 8007720:	e000      	b.n	8007724 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007722:	2300      	movs	r3, #0
}
 8007724:	4618      	mov	r0, r3
 8007726:	3710      	adds	r7, #16
 8007728:	46bd      	mov	sp, r7
 800772a:	bd80      	pop	{r7, pc}

0800772c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800772c:	b580      	push	{r7, lr}
 800772e:	b086      	sub	sp, #24
 8007730:	af02      	add	r7, sp, #8
 8007732:	60f8      	str	r0, [r7, #12]
 8007734:	60b9      	str	r1, [r7, #8]
 8007736:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	2200      	movs	r2, #0
 8007740:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007744:	68f8      	ldr	r0, [r7, #12]
 8007746:	f7ff ff03 	bl	8007550 <SPI_WaitFifoStateUntilTimeout>
 800774a:	4603      	mov	r3, r0
 800774c:	2b00      	cmp	r3, #0
 800774e:	d007      	beq.n	8007760 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007750:	68fb      	ldr	r3, [r7, #12]
 8007752:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007754:	f043 0220 	orr.w	r2, r3, #32
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800775c:	2303      	movs	r3, #3
 800775e:	e027      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	9300      	str	r3, [sp, #0]
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	2180      	movs	r1, #128	; 0x80
 800776a:	68f8      	ldr	r0, [r7, #12]
 800776c:	f7ff fe68 	bl	8007440 <SPI_WaitFlagStateUntilTimeout>
 8007770:	4603      	mov	r3, r0
 8007772:	2b00      	cmp	r3, #0
 8007774:	d007      	beq.n	8007786 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800777a:	f043 0220 	orr.w	r2, r3, #32
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007782:	2303      	movs	r3, #3
 8007784:	e014      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	9300      	str	r3, [sp, #0]
 800778a:	68bb      	ldr	r3, [r7, #8]
 800778c:	2200      	movs	r2, #0
 800778e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007792:	68f8      	ldr	r0, [r7, #12]
 8007794:	f7ff fedc 	bl	8007550 <SPI_WaitFifoStateUntilTimeout>
 8007798:	4603      	mov	r3, r0
 800779a:	2b00      	cmp	r3, #0
 800779c:	d007      	beq.n	80077ae <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80077a2:	f043 0220 	orr.w	r2, r3, #32
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80077aa:	2303      	movs	r3, #3
 80077ac:	e000      	b.n	80077b0 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80077ae:	2300      	movs	r3, #0
}
 80077b0:	4618      	mov	r0, r3
 80077b2:	3710      	adds	r7, #16
 80077b4:	46bd      	mov	sp, r7
 80077b6:	bd80      	pop	{r7, pc}

080077b8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80077b8:	b580      	push	{r7, lr}
 80077ba:	b082      	sub	sp, #8
 80077bc:	af00      	add	r7, sp, #0
 80077be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2b00      	cmp	r3, #0
 80077c4:	d101      	bne.n	80077ca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80077c6:	2301      	movs	r3, #1
 80077c8:	e049      	b.n	800785e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80077d0:	b2db      	uxtb	r3, r3
 80077d2:	2b00      	cmp	r3, #0
 80077d4:	d106      	bne.n	80077e4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	2200      	movs	r2, #0
 80077da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80077de:	6878      	ldr	r0, [r7, #4]
 80077e0:	f7fb fbac 	bl	8002f3c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2202      	movs	r2, #2
 80077e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681a      	ldr	r2, [r3, #0]
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	3304      	adds	r3, #4
 80077f4:	4619      	mov	r1, r3
 80077f6:	4610      	mov	r0, r2
 80077f8:	f000 fdc2 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	2201      	movs	r2, #1
 8007800:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2201      	movs	r2, #1
 8007808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	2201      	movs	r2, #1
 8007810:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	2201      	movs	r2, #1
 8007818:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	2201      	movs	r2, #1
 8007828:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2201      	movs	r2, #1
 8007830:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2201      	movs	r2, #1
 8007838:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	2201      	movs	r2, #1
 8007840:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	2201      	movs	r2, #1
 8007848:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	2201      	movs	r2, #1
 8007850:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2201      	movs	r2, #1
 8007858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800785c:	2300      	movs	r3, #0
}
 800785e:	4618      	mov	r0, r3
 8007860:	3708      	adds	r7, #8
 8007862:	46bd      	mov	sp, r7
 8007864:	bd80      	pop	{r7, pc}
	...

08007868 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007868:	b480      	push	{r7}
 800786a:	b085      	sub	sp, #20
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007876:	b2db      	uxtb	r3, r3
 8007878:	2b01      	cmp	r3, #1
 800787a:	d001      	beq.n	8007880 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800787c:	2301      	movs	r3, #1
 800787e:	e04a      	b.n	8007916 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	2202      	movs	r2, #2
 8007884:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	68da      	ldr	r2, [r3, #12]
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	f042 0201 	orr.w	r2, r2, #1
 8007896:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a21      	ldr	r2, [pc, #132]	; (8007924 <HAL_TIM_Base_Start_IT+0xbc>)
 800789e:	4293      	cmp	r3, r2
 80078a0:	d018      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x6c>
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80078aa:	d013      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x6c>
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	4a1d      	ldr	r2, [pc, #116]	; (8007928 <HAL_TIM_Base_Start_IT+0xc0>)
 80078b2:	4293      	cmp	r3, r2
 80078b4:	d00e      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x6c>
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a1c      	ldr	r2, [pc, #112]	; (800792c <HAL_TIM_Base_Start_IT+0xc4>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d009      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x6c>
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a1a      	ldr	r2, [pc, #104]	; (8007930 <HAL_TIM_Base_Start_IT+0xc8>)
 80078c6:	4293      	cmp	r3, r2
 80078c8:	d004      	beq.n	80078d4 <HAL_TIM_Base_Start_IT+0x6c>
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	4a19      	ldr	r2, [pc, #100]	; (8007934 <HAL_TIM_Base_Start_IT+0xcc>)
 80078d0:	4293      	cmp	r3, r2
 80078d2:	d115      	bne.n	8007900 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	689a      	ldr	r2, [r3, #8]
 80078da:	4b17      	ldr	r3, [pc, #92]	; (8007938 <HAL_TIM_Base_Start_IT+0xd0>)
 80078dc:	4013      	ands	r3, r2
 80078de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	2b06      	cmp	r3, #6
 80078e4:	d015      	beq.n	8007912 <HAL_TIM_Base_Start_IT+0xaa>
 80078e6:	68fb      	ldr	r3, [r7, #12]
 80078e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80078ec:	d011      	beq.n	8007912 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	681b      	ldr	r3, [r3, #0]
 80078f2:	681a      	ldr	r2, [r3, #0]
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	f042 0201 	orr.w	r2, r2, #1
 80078fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80078fe:	e008      	b.n	8007912 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	681a      	ldr	r2, [r3, #0]
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	f042 0201 	orr.w	r2, r2, #1
 800790e:	601a      	str	r2, [r3, #0]
 8007910:	e000      	b.n	8007914 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007912:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007914:	2300      	movs	r3, #0
}
 8007916:	4618      	mov	r0, r3
 8007918:	3714      	adds	r7, #20
 800791a:	46bd      	mov	sp, r7
 800791c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007920:	4770      	bx	lr
 8007922:	bf00      	nop
 8007924:	40012c00 	.word	0x40012c00
 8007928:	40000400 	.word	0x40000400
 800792c:	40000800 	.word	0x40000800
 8007930:	40013400 	.word	0x40013400
 8007934:	40014000 	.word	0x40014000
 8007938:	00010007 	.word	0x00010007

0800793c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d101      	bne.n	800794e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e049      	b.n	80079e2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007954:	b2db      	uxtb	r3, r3
 8007956:	2b00      	cmp	r3, #0
 8007958:	d106      	bne.n	8007968 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8007962:	6878      	ldr	r0, [r7, #4]
 8007964:	f000 f841 	bl	80079ea <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2202      	movs	r2, #2
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	681a      	ldr	r2, [r3, #0]
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	3304      	adds	r3, #4
 8007978:	4619      	mov	r1, r3
 800797a:	4610      	mov	r0, r2
 800797c:	f000 fd00 	bl	8008380 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	2201      	movs	r2, #1
 8007984:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2201      	movs	r2, #1
 800798c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	2201      	movs	r2, #1
 8007994:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	2201      	movs	r2, #1
 800799c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	2201      	movs	r2, #1
 80079a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	2201      	movs	r2, #1
 80079ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	2201      	movs	r2, #1
 80079b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2201      	movs	r2, #1
 80079bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	2201      	movs	r2, #1
 80079c4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2201      	movs	r2, #1
 80079cc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	2201      	movs	r2, #1
 80079d4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079e0:	2300      	movs	r3, #0
}
 80079e2:	4618      	mov	r0, r3
 80079e4:	3708      	adds	r7, #8
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}

080079ea <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80079ea:	b480      	push	{r7}
 80079ec:	b083      	sub	sp, #12
 80079ee:	af00      	add	r7, sp, #0
 80079f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80079f2:	bf00      	nop
 80079f4:	370c      	adds	r7, #12
 80079f6:	46bd      	mov	sp, r7
 80079f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079fc:	4770      	bx	lr
	...

08007a00 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b084      	sub	sp, #16
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
 8007a08:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d109      	bne.n	8007a24 <HAL_TIM_PWM_Start+0x24>
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a16:	b2db      	uxtb	r3, r3
 8007a18:	2b01      	cmp	r3, #1
 8007a1a:	bf14      	ite	ne
 8007a1c:	2301      	movne	r3, #1
 8007a1e:	2300      	moveq	r3, #0
 8007a20:	b2db      	uxtb	r3, r3
 8007a22:	e03c      	b.n	8007a9e <HAL_TIM_PWM_Start+0x9e>
 8007a24:	683b      	ldr	r3, [r7, #0]
 8007a26:	2b04      	cmp	r3, #4
 8007a28:	d109      	bne.n	8007a3e <HAL_TIM_PWM_Start+0x3e>
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007a30:	b2db      	uxtb	r3, r3
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	bf14      	ite	ne
 8007a36:	2301      	movne	r3, #1
 8007a38:	2300      	moveq	r3, #0
 8007a3a:	b2db      	uxtb	r3, r3
 8007a3c:	e02f      	b.n	8007a9e <HAL_TIM_PWM_Start+0x9e>
 8007a3e:	683b      	ldr	r3, [r7, #0]
 8007a40:	2b08      	cmp	r3, #8
 8007a42:	d109      	bne.n	8007a58 <HAL_TIM_PWM_Start+0x58>
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007a4a:	b2db      	uxtb	r3, r3
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	bf14      	ite	ne
 8007a50:	2301      	movne	r3, #1
 8007a52:	2300      	moveq	r3, #0
 8007a54:	b2db      	uxtb	r3, r3
 8007a56:	e022      	b.n	8007a9e <HAL_TIM_PWM_Start+0x9e>
 8007a58:	683b      	ldr	r3, [r7, #0]
 8007a5a:	2b0c      	cmp	r3, #12
 8007a5c:	d109      	bne.n	8007a72 <HAL_TIM_PWM_Start+0x72>
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007a64:	b2db      	uxtb	r3, r3
 8007a66:	2b01      	cmp	r3, #1
 8007a68:	bf14      	ite	ne
 8007a6a:	2301      	movne	r3, #1
 8007a6c:	2300      	moveq	r3, #0
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	e015      	b.n	8007a9e <HAL_TIM_PWM_Start+0x9e>
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	2b10      	cmp	r3, #16
 8007a76:	d109      	bne.n	8007a8c <HAL_TIM_PWM_Start+0x8c>
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007a7e:	b2db      	uxtb	r3, r3
 8007a80:	2b01      	cmp	r3, #1
 8007a82:	bf14      	ite	ne
 8007a84:	2301      	movne	r3, #1
 8007a86:	2300      	moveq	r3, #0
 8007a88:	b2db      	uxtb	r3, r3
 8007a8a:	e008      	b.n	8007a9e <HAL_TIM_PWM_Start+0x9e>
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007a92:	b2db      	uxtb	r3, r3
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	bf14      	ite	ne
 8007a98:	2301      	movne	r3, #1
 8007a9a:	2300      	moveq	r3, #0
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	d001      	beq.n	8007aa6 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	e097      	b.n	8007bd6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007aa6:	683b      	ldr	r3, [r7, #0]
 8007aa8:	2b00      	cmp	r3, #0
 8007aaa:	d104      	bne.n	8007ab6 <HAL_TIM_PWM_Start+0xb6>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2202      	movs	r2, #2
 8007ab0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007ab4:	e023      	b.n	8007afe <HAL_TIM_PWM_Start+0xfe>
 8007ab6:	683b      	ldr	r3, [r7, #0]
 8007ab8:	2b04      	cmp	r3, #4
 8007aba:	d104      	bne.n	8007ac6 <HAL_TIM_PWM_Start+0xc6>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ac4:	e01b      	b.n	8007afe <HAL_TIM_PWM_Start+0xfe>
 8007ac6:	683b      	ldr	r3, [r7, #0]
 8007ac8:	2b08      	cmp	r3, #8
 8007aca:	d104      	bne.n	8007ad6 <HAL_TIM_PWM_Start+0xd6>
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	2202      	movs	r2, #2
 8007ad0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ad4:	e013      	b.n	8007afe <HAL_TIM_PWM_Start+0xfe>
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b0c      	cmp	r3, #12
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0xe6>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007ae4:	e00b      	b.n	8007afe <HAL_TIM_PWM_Start+0xfe>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b10      	cmp	r3, #16
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start+0xf6>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007af4:	e003      	b.n	8007afe <HAL_TIM_PWM_Start+0xfe>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	2202      	movs	r2, #2
 8007afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	681b      	ldr	r3, [r3, #0]
 8007b02:	2201      	movs	r2, #1
 8007b04:	6839      	ldr	r1, [r7, #0]
 8007b06:	4618      	mov	r0, r3
 8007b08:	f001 f85c 	bl	8008bc4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	4a33      	ldr	r2, [pc, #204]	; (8007be0 <HAL_TIM_PWM_Start+0x1e0>)
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d013      	beq.n	8007b3e <HAL_TIM_PWM_Start+0x13e>
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	4a32      	ldr	r2, [pc, #200]	; (8007be4 <HAL_TIM_PWM_Start+0x1e4>)
 8007b1c:	4293      	cmp	r3, r2
 8007b1e:	d00e      	beq.n	8007b3e <HAL_TIM_PWM_Start+0x13e>
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	4a30      	ldr	r2, [pc, #192]	; (8007be8 <HAL_TIM_PWM_Start+0x1e8>)
 8007b26:	4293      	cmp	r3, r2
 8007b28:	d009      	beq.n	8007b3e <HAL_TIM_PWM_Start+0x13e>
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	681b      	ldr	r3, [r3, #0]
 8007b2e:	4a2f      	ldr	r2, [pc, #188]	; (8007bec <HAL_TIM_PWM_Start+0x1ec>)
 8007b30:	4293      	cmp	r3, r2
 8007b32:	d004      	beq.n	8007b3e <HAL_TIM_PWM_Start+0x13e>
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	4a2d      	ldr	r2, [pc, #180]	; (8007bf0 <HAL_TIM_PWM_Start+0x1f0>)
 8007b3a:	4293      	cmp	r3, r2
 8007b3c:	d101      	bne.n	8007b42 <HAL_TIM_PWM_Start+0x142>
 8007b3e:	2301      	movs	r3, #1
 8007b40:	e000      	b.n	8007b44 <HAL_TIM_PWM_Start+0x144>
 8007b42:	2300      	movs	r3, #0
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d007      	beq.n	8007b58 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b56:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a20      	ldr	r2, [pc, #128]	; (8007be0 <HAL_TIM_PWM_Start+0x1e0>)
 8007b5e:	4293      	cmp	r3, r2
 8007b60:	d018      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x194>
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	681b      	ldr	r3, [r3, #0]
 8007b66:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007b6a:	d013      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x194>
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a20      	ldr	r2, [pc, #128]	; (8007bf4 <HAL_TIM_PWM_Start+0x1f4>)
 8007b72:	4293      	cmp	r3, r2
 8007b74:	d00e      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x194>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	681b      	ldr	r3, [r3, #0]
 8007b7a:	4a1f      	ldr	r2, [pc, #124]	; (8007bf8 <HAL_TIM_PWM_Start+0x1f8>)
 8007b7c:	4293      	cmp	r3, r2
 8007b7e:	d009      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x194>
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	4a17      	ldr	r2, [pc, #92]	; (8007be4 <HAL_TIM_PWM_Start+0x1e4>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	d004      	beq.n	8007b94 <HAL_TIM_PWM_Start+0x194>
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	681b      	ldr	r3, [r3, #0]
 8007b8e:	4a16      	ldr	r2, [pc, #88]	; (8007be8 <HAL_TIM_PWM_Start+0x1e8>)
 8007b90:	4293      	cmp	r3, r2
 8007b92:	d115      	bne.n	8007bc0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	689a      	ldr	r2, [r3, #8]
 8007b9a:	4b18      	ldr	r3, [pc, #96]	; (8007bfc <HAL_TIM_PWM_Start+0x1fc>)
 8007b9c:	4013      	ands	r3, r2
 8007b9e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba0:	68fb      	ldr	r3, [r7, #12]
 8007ba2:	2b06      	cmp	r3, #6
 8007ba4:	d015      	beq.n	8007bd2 <HAL_TIM_PWM_Start+0x1d2>
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bac:	d011      	beq.n	8007bd2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	681a      	ldr	r2, [r3, #0]
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	681b      	ldr	r3, [r3, #0]
 8007bb8:	f042 0201 	orr.w	r2, r2, #1
 8007bbc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbe:	e008      	b.n	8007bd2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	681a      	ldr	r2, [r3, #0]
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	f042 0201 	orr.w	r2, r2, #1
 8007bce:	601a      	str	r2, [r3, #0]
 8007bd0:	e000      	b.n	8007bd4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bd2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007bd4:	2300      	movs	r3, #0
}
 8007bd6:	4618      	mov	r0, r3
 8007bd8:	3710      	adds	r7, #16
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}
 8007bde:	bf00      	nop
 8007be0:	40012c00 	.word	0x40012c00
 8007be4:	40013400 	.word	0x40013400
 8007be8:	40014000 	.word	0x40014000
 8007bec:	40014400 	.word	0x40014400
 8007bf0:	40014800 	.word	0x40014800
 8007bf4:	40000400 	.word	0x40000400
 8007bf8:	40000800 	.word	0x40000800
 8007bfc:	00010007 	.word	0x00010007

08007c00 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007c00:	b580      	push	{r7, lr}
 8007c02:	b082      	sub	sp, #8
 8007c04:	af00      	add	r7, sp, #0
 8007c06:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	691b      	ldr	r3, [r3, #16]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b02      	cmp	r3, #2
 8007c14:	d122      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	68db      	ldr	r3, [r3, #12]
 8007c1c:	f003 0302 	and.w	r3, r3, #2
 8007c20:	2b02      	cmp	r3, #2
 8007c22:	d11b      	bne.n	8007c5c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	f06f 0202 	mvn.w	r2, #2
 8007c2c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	2201      	movs	r2, #1
 8007c32:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	699b      	ldr	r3, [r3, #24]
 8007c3a:	f003 0303 	and.w	r3, r3, #3
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fb7e 	bl	8008344 <HAL_TIM_IC_CaptureCallback>
 8007c48:	e005      	b.n	8007c56 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c4a:	6878      	ldr	r0, [r7, #4]
 8007c4c:	f000 fb70 	bl	8008330 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c50:	6878      	ldr	r0, [r7, #4]
 8007c52:	f000 fb81 	bl	8008358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	691b      	ldr	r3, [r3, #16]
 8007c62:	f003 0304 	and.w	r3, r3, #4
 8007c66:	2b04      	cmp	r3, #4
 8007c68:	d122      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	68db      	ldr	r3, [r3, #12]
 8007c70:	f003 0304 	and.w	r3, r3, #4
 8007c74:	2b04      	cmp	r3, #4
 8007c76:	d11b      	bne.n	8007cb0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	f06f 0204 	mvn.w	r2, #4
 8007c80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	2202      	movs	r2, #2
 8007c86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	699b      	ldr	r3, [r3, #24]
 8007c8e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d003      	beq.n	8007c9e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c96:	6878      	ldr	r0, [r7, #4]
 8007c98:	f000 fb54 	bl	8008344 <HAL_TIM_IC_CaptureCallback>
 8007c9c:	e005      	b.n	8007caa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c9e:	6878      	ldr	r0, [r7, #4]
 8007ca0:	f000 fb46 	bl	8008330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ca4:	6878      	ldr	r0, [r7, #4]
 8007ca6:	f000 fb57 	bl	8008358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2200      	movs	r2, #0
 8007cae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	691b      	ldr	r3, [r3, #16]
 8007cb6:	f003 0308 	and.w	r3, r3, #8
 8007cba:	2b08      	cmp	r3, #8
 8007cbc:	d122      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f003 0308 	and.w	r3, r3, #8
 8007cc8:	2b08      	cmp	r3, #8
 8007cca:	d11b      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f06f 0208 	mvn.w	r2, #8
 8007cd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	2204      	movs	r2, #4
 8007cda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	69db      	ldr	r3, [r3, #28]
 8007ce2:	f003 0303 	and.w	r3, r3, #3
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	d003      	beq.n	8007cf2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f000 fb2a 	bl	8008344 <HAL_TIM_IC_CaptureCallback>
 8007cf0:	e005      	b.n	8007cfe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cf2:	6878      	ldr	r0, [r7, #4]
 8007cf4:	f000 fb1c 	bl	8008330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007cf8:	6878      	ldr	r0, [r7, #4]
 8007cfa:	f000 fb2d 	bl	8008358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	2200      	movs	r2, #0
 8007d02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0310 	and.w	r3, r3, #16
 8007d0e:	2b10      	cmp	r3, #16
 8007d10:	d122      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0310 	and.w	r3, r3, #16
 8007d1c:	2b10      	cmp	r3, #16
 8007d1e:	d11b      	bne.n	8007d58 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0210 	mvn.w	r2, #16
 8007d28:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	2208      	movs	r2, #8
 8007d2e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d30:	687b      	ldr	r3, [r7, #4]
 8007d32:	681b      	ldr	r3, [r3, #0]
 8007d34:	69db      	ldr	r3, [r3, #28]
 8007d36:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d003      	beq.n	8007d46 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d3e:	6878      	ldr	r0, [r7, #4]
 8007d40:	f000 fb00 	bl	8008344 <HAL_TIM_IC_CaptureCallback>
 8007d44:	e005      	b.n	8007d52 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d46:	6878      	ldr	r0, [r7, #4]
 8007d48:	f000 faf2 	bl	8008330 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d4c:	6878      	ldr	r0, [r7, #4]
 8007d4e:	f000 fb03 	bl	8008358 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	2200      	movs	r2, #0
 8007d56:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	691b      	ldr	r3, [r3, #16]
 8007d5e:	f003 0301 	and.w	r3, r3, #1
 8007d62:	2b01      	cmp	r3, #1
 8007d64:	d10e      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d66:	687b      	ldr	r3, [r7, #4]
 8007d68:	681b      	ldr	r3, [r3, #0]
 8007d6a:	68db      	ldr	r3, [r3, #12]
 8007d6c:	f003 0301 	and.w	r3, r3, #1
 8007d70:	2b01      	cmp	r3, #1
 8007d72:	d107      	bne.n	8007d84 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0201 	mvn.w	r2, #1
 8007d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 facc 	bl	800831c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	691b      	ldr	r3, [r3, #16]
 8007d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d8e:	2b80      	cmp	r3, #128	; 0x80
 8007d90:	d10e      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d9c:	2b80      	cmp	r3, #128	; 0x80
 8007d9e:	d107      	bne.n	8007db0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007daa:	6878      	ldr	r0, [r7, #4]
 8007dac:	f000 ffbc 	bl	8008d28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007dbe:	d10e      	bne.n	8007dde <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	68db      	ldr	r3, [r3, #12]
 8007dc6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007dca:	2b80      	cmp	r3, #128	; 0x80
 8007dcc:	d107      	bne.n	8007dde <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	681b      	ldr	r3, [r3, #0]
 8007dd2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007dd6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 ffaf 	bl	8008d3c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	681b      	ldr	r3, [r3, #0]
 8007de2:	691b      	ldr	r3, [r3, #16]
 8007de4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007de8:	2b40      	cmp	r3, #64	; 0x40
 8007dea:	d10e      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007df6:	2b40      	cmp	r3, #64	; 0x40
 8007df8:	d107      	bne.n	8007e0a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e02:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007e04:	6878      	ldr	r0, [r7, #4]
 8007e06:	f000 fab1 	bl	800836c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	f003 0320 	and.w	r3, r3, #32
 8007e14:	2b20      	cmp	r3, #32
 8007e16:	d10e      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	68db      	ldr	r3, [r3, #12]
 8007e1e:	f003 0320 	and.w	r3, r3, #32
 8007e22:	2b20      	cmp	r3, #32
 8007e24:	d107      	bne.n	8007e36 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f06f 0220 	mvn.w	r2, #32
 8007e2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007e30:	6878      	ldr	r0, [r7, #4]
 8007e32:	f000 ff6f 	bl	8008d14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	681b      	ldr	r3, [r3, #0]
 8007e3a:	691b      	ldr	r3, [r3, #16]
 8007e3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e44:	d10f      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007e50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e54:	d107      	bne.n	8007e66 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007e5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007e60:	6878      	ldr	r0, [r7, #4]
 8007e62:	f000 ff75 	bl	8008d50 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	691b      	ldr	r3, [r3, #16]
 8007e6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e70:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e74:	d10f      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	68db      	ldr	r3, [r3, #12]
 8007e7c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007e80:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8007e84:	d107      	bne.n	8007e96 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007e8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007e90:	6878      	ldr	r0, [r7, #4]
 8007e92:	f000 ff67 	bl	8008d64 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	691b      	ldr	r3, [r3, #16]
 8007e9c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ea0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007ea4:	d10f      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	68db      	ldr	r3, [r3, #12]
 8007eac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007eb0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007eb4:	d107      	bne.n	8007ec6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8007ebe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007ec0:	6878      	ldr	r0, [r7, #4]
 8007ec2:	f000 ff59 	bl	8008d78 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	691b      	ldr	r3, [r3, #16]
 8007ecc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ed0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ed4:	d10f      	bne.n	8007ef6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	68db      	ldr	r3, [r3, #12]
 8007edc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007ee0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007ee4:	d107      	bne.n	8007ef6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8007ee6:	687b      	ldr	r3, [r7, #4]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8007eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007ef0:	6878      	ldr	r0, [r7, #4]
 8007ef2:	f000 ff4b 	bl	8008d8c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007ef6:	bf00      	nop
 8007ef8:	3708      	adds	r7, #8
 8007efa:	46bd      	mov	sp, r7
 8007efc:	bd80      	pop	{r7, pc}
	...

08007f00 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007f00:	b580      	push	{r7, lr}
 8007f02:	b086      	sub	sp, #24
 8007f04:	af00      	add	r7, sp, #0
 8007f06:	60f8      	str	r0, [r7, #12]
 8007f08:	60b9      	str	r1, [r7, #8]
 8007f0a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007f0c:	2300      	movs	r3, #0
 8007f0e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d101      	bne.n	8007f1e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007f1a:	2302      	movs	r3, #2
 8007f1c:	e0ff      	b.n	800811e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2201      	movs	r2, #1
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2b14      	cmp	r3, #20
 8007f2a:	f200 80f0 	bhi.w	800810e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007f2e:	a201      	add	r2, pc, #4	; (adr r2, 8007f34 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f34:	08007f89 	.word	0x08007f89
 8007f38:	0800810f 	.word	0x0800810f
 8007f3c:	0800810f 	.word	0x0800810f
 8007f40:	0800810f 	.word	0x0800810f
 8007f44:	08007fc9 	.word	0x08007fc9
 8007f48:	0800810f 	.word	0x0800810f
 8007f4c:	0800810f 	.word	0x0800810f
 8007f50:	0800810f 	.word	0x0800810f
 8007f54:	0800800b 	.word	0x0800800b
 8007f58:	0800810f 	.word	0x0800810f
 8007f5c:	0800810f 	.word	0x0800810f
 8007f60:	0800810f 	.word	0x0800810f
 8007f64:	0800804b 	.word	0x0800804b
 8007f68:	0800810f 	.word	0x0800810f
 8007f6c:	0800810f 	.word	0x0800810f
 8007f70:	0800810f 	.word	0x0800810f
 8007f74:	0800808d 	.word	0x0800808d
 8007f78:	0800810f 	.word	0x0800810f
 8007f7c:	0800810f 	.word	0x0800810f
 8007f80:	0800810f 	.word	0x0800810f
 8007f84:	080080cd 	.word	0x080080cd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007f88:	68fb      	ldr	r3, [r7, #12]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	68b9      	ldr	r1, [r7, #8]
 8007f8e:	4618      	mov	r0, r3
 8007f90:	f000 fa86 	bl	80084a0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	681b      	ldr	r3, [r3, #0]
 8007f98:	699a      	ldr	r2, [r3, #24]
 8007f9a:	68fb      	ldr	r3, [r7, #12]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f042 0208 	orr.w	r2, r2, #8
 8007fa2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007fa4:	68fb      	ldr	r3, [r7, #12]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	699a      	ldr	r2, [r3, #24]
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	681b      	ldr	r3, [r3, #0]
 8007fae:	f022 0204 	bic.w	r2, r2, #4
 8007fb2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	6999      	ldr	r1, [r3, #24]
 8007fba:	68bb      	ldr	r3, [r7, #8]
 8007fbc:	691a      	ldr	r2, [r3, #16]
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	619a      	str	r2, [r3, #24]
      break;
 8007fc6:	e0a5      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	681b      	ldr	r3, [r3, #0]
 8007fcc:	68b9      	ldr	r1, [r7, #8]
 8007fce:	4618      	mov	r0, r3
 8007fd0:	f000 faf6 	bl	80085c0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	699a      	ldr	r2, [r3, #24]
 8007fda:	68fb      	ldr	r3, [r7, #12]
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007fe2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	699a      	ldr	r2, [r3, #24]
 8007fea:	68fb      	ldr	r3, [r7, #12]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007ff2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	6999      	ldr	r1, [r3, #24]
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	691b      	ldr	r3, [r3, #16]
 8007ffe:	021a      	lsls	r2, r3, #8
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	430a      	orrs	r2, r1
 8008006:	619a      	str	r2, [r3, #24]
      break;
 8008008:	e084      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	681b      	ldr	r3, [r3, #0]
 800800e:	68b9      	ldr	r1, [r7, #8]
 8008010:	4618      	mov	r0, r3
 8008012:	f000 fb5f 	bl	80086d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	69da      	ldr	r2, [r3, #28]
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	f042 0208 	orr.w	r2, r2, #8
 8008024:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	69da      	ldr	r2, [r3, #28]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f022 0204 	bic.w	r2, r2, #4
 8008034:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	69d9      	ldr	r1, [r3, #28]
 800803c:	68bb      	ldr	r3, [r7, #8]
 800803e:	691a      	ldr	r2, [r3, #16]
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	430a      	orrs	r2, r1
 8008046:	61da      	str	r2, [r3, #28]
      break;
 8008048:	e064      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800804a:	68fb      	ldr	r3, [r7, #12]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	68b9      	ldr	r1, [r7, #8]
 8008050:	4618      	mov	r0, r3
 8008052:	f000 fbc7 	bl	80087e4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	69da      	ldr	r2, [r3, #28]
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8008064:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	69da      	ldr	r2, [r3, #28]
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8008074:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	69d9      	ldr	r1, [r3, #28]
 800807c:	68bb      	ldr	r3, [r7, #8]
 800807e:	691b      	ldr	r3, [r3, #16]
 8008080:	021a      	lsls	r2, r3, #8
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	430a      	orrs	r2, r1
 8008088:	61da      	str	r2, [r3, #28]
      break;
 800808a:	e043      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	68b9      	ldr	r1, [r7, #8]
 8008092:	4618      	mov	r0, r3
 8008094:	f000 fc30 	bl	80088f8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8008098:	68fb      	ldr	r3, [r7, #12]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f042 0208 	orr.w	r2, r2, #8
 80080a6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ae:	68fb      	ldr	r3, [r7, #12]
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f022 0204 	bic.w	r2, r2, #4
 80080b6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80080be:	68bb      	ldr	r3, [r7, #8]
 80080c0:	691a      	ldr	r2, [r3, #16]
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	430a      	orrs	r2, r1
 80080c8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80080ca:	e023      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	68b9      	ldr	r1, [r7, #8]
 80080d2:	4618      	mov	r0, r3
 80080d4:	f000 fc74 	bl	80089c0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80080e6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80080e8:	68fb      	ldr	r3, [r7, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80080f6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	681b      	ldr	r3, [r3, #0]
 80080fc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80080fe:	68bb      	ldr	r3, [r7, #8]
 8008100:	691b      	ldr	r3, [r3, #16]
 8008102:	021a      	lsls	r2, r3, #8
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	430a      	orrs	r2, r1
 800810a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 800810c:	e002      	b.n	8008114 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800810e:	2301      	movs	r3, #1
 8008110:	75fb      	strb	r3, [r7, #23]
      break;
 8008112:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800811c:	7dfb      	ldrb	r3, [r7, #23]
}
 800811e:	4618      	mov	r0, r3
 8008120:	3718      	adds	r7, #24
 8008122:	46bd      	mov	sp, r7
 8008124:	bd80      	pop	{r7, pc}
 8008126:	bf00      	nop

08008128 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008132:	2300      	movs	r3, #0
 8008134:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008136:	687b      	ldr	r3, [r7, #4]
 8008138:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800813c:	2b01      	cmp	r3, #1
 800813e:	d101      	bne.n	8008144 <HAL_TIM_ConfigClockSource+0x1c>
 8008140:	2302      	movs	r3, #2
 8008142:	e0de      	b.n	8008302 <HAL_TIM_ConfigClockSource+0x1da>
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	2201      	movs	r2, #1
 8008148:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2202      	movs	r2, #2
 8008150:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	689b      	ldr	r3, [r3, #8]
 800815a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800815c:	68bb      	ldr	r3, [r7, #8]
 800815e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8008162:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008166:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008168:	68bb      	ldr	r3, [r7, #8]
 800816a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800816e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	68ba      	ldr	r2, [r7, #8]
 8008176:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008178:	683b      	ldr	r3, [r7, #0]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a63      	ldr	r2, [pc, #396]	; (800830c <HAL_TIM_ConfigClockSource+0x1e4>)
 800817e:	4293      	cmp	r3, r2
 8008180:	f000 80a9 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008184:	4a61      	ldr	r2, [pc, #388]	; (800830c <HAL_TIM_ConfigClockSource+0x1e4>)
 8008186:	4293      	cmp	r3, r2
 8008188:	f200 80ae 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800818c:	4a60      	ldr	r2, [pc, #384]	; (8008310 <HAL_TIM_ConfigClockSource+0x1e8>)
 800818e:	4293      	cmp	r3, r2
 8008190:	f000 80a1 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008194:	4a5e      	ldr	r2, [pc, #376]	; (8008310 <HAL_TIM_ConfigClockSource+0x1e8>)
 8008196:	4293      	cmp	r3, r2
 8008198:	f200 80a6 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 800819c:	4a5d      	ldr	r2, [pc, #372]	; (8008314 <HAL_TIM_ConfigClockSource+0x1ec>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	f000 8099 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80081a4:	4a5b      	ldr	r2, [pc, #364]	; (8008314 <HAL_TIM_ConfigClockSource+0x1ec>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	f200 809e 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081ac:	4a5a      	ldr	r2, [pc, #360]	; (8008318 <HAL_TIM_ConfigClockSource+0x1f0>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	f000 8091 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80081b4:	4a58      	ldr	r2, [pc, #352]	; (8008318 <HAL_TIM_ConfigClockSource+0x1f0>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	f200 8096 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081bc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081c0:	f000 8089 	beq.w	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 80081c4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80081c8:	f200 808e 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081cc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d0:	d03e      	beq.n	8008250 <HAL_TIM_ConfigClockSource+0x128>
 80081d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80081d6:	f200 8087 	bhi.w	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081de:	f000 8086 	beq.w	80082ee <HAL_TIM_ConfigClockSource+0x1c6>
 80081e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081e6:	d87f      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081e8:	2b70      	cmp	r3, #112	; 0x70
 80081ea:	d01a      	beq.n	8008222 <HAL_TIM_ConfigClockSource+0xfa>
 80081ec:	2b70      	cmp	r3, #112	; 0x70
 80081ee:	d87b      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081f0:	2b60      	cmp	r3, #96	; 0x60
 80081f2:	d050      	beq.n	8008296 <HAL_TIM_ConfigClockSource+0x16e>
 80081f4:	2b60      	cmp	r3, #96	; 0x60
 80081f6:	d877      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 80081f8:	2b50      	cmp	r3, #80	; 0x50
 80081fa:	d03c      	beq.n	8008276 <HAL_TIM_ConfigClockSource+0x14e>
 80081fc:	2b50      	cmp	r3, #80	; 0x50
 80081fe:	d873      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	d058      	beq.n	80082b6 <HAL_TIM_ConfigClockSource+0x18e>
 8008204:	2b40      	cmp	r3, #64	; 0x40
 8008206:	d86f      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008208:	2b30      	cmp	r3, #48	; 0x30
 800820a:	d064      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800820c:	2b30      	cmp	r3, #48	; 0x30
 800820e:	d86b      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008210:	2b20      	cmp	r3, #32
 8008212:	d060      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008214:	2b20      	cmp	r3, #32
 8008216:	d867      	bhi.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
 8008218:	2b00      	cmp	r3, #0
 800821a:	d05c      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 800821c:	2b10      	cmp	r3, #16
 800821e:	d05a      	beq.n	80082d6 <HAL_TIM_ConfigClockSource+0x1ae>
 8008220:	e062      	b.n	80082e8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	6818      	ldr	r0, [r3, #0]
 8008226:	683b      	ldr	r3, [r7, #0]
 8008228:	6899      	ldr	r1, [r3, #8]
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	685a      	ldr	r2, [r3, #4]
 800822e:	683b      	ldr	r3, [r7, #0]
 8008230:	68db      	ldr	r3, [r3, #12]
 8008232:	f000 fca7 	bl	8008b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	689b      	ldr	r3, [r3, #8]
 800823c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800823e:	68bb      	ldr	r3, [r7, #8]
 8008240:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008244:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	68ba      	ldr	r2, [r7, #8]
 800824c:	609a      	str	r2, [r3, #8]
      break;
 800824e:	e04f      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6818      	ldr	r0, [r3, #0]
 8008254:	683b      	ldr	r3, [r7, #0]
 8008256:	6899      	ldr	r1, [r3, #8]
 8008258:	683b      	ldr	r3, [r7, #0]
 800825a:	685a      	ldr	r2, [r3, #4]
 800825c:	683b      	ldr	r3, [r7, #0]
 800825e:	68db      	ldr	r3, [r3, #12]
 8008260:	f000 fc90 	bl	8008b84 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	689a      	ldr	r2, [r3, #8]
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008272:	609a      	str	r2, [r3, #8]
      break;
 8008274:	e03c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	6818      	ldr	r0, [r3, #0]
 800827a:	683b      	ldr	r3, [r7, #0]
 800827c:	6859      	ldr	r1, [r3, #4]
 800827e:	683b      	ldr	r3, [r7, #0]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	461a      	mov	r2, r3
 8008284:	f000 fc02 	bl	8008a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	2150      	movs	r1, #80	; 0x50
 800828e:	4618      	mov	r0, r3
 8008290:	f000 fc5b 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 8008294:	e02c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6818      	ldr	r0, [r3, #0]
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	6859      	ldr	r1, [r3, #4]
 800829e:	683b      	ldr	r3, [r7, #0]
 80082a0:	68db      	ldr	r3, [r3, #12]
 80082a2:	461a      	mov	r2, r3
 80082a4:	f000 fc21 	bl	8008aea <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	2160      	movs	r1, #96	; 0x60
 80082ae:	4618      	mov	r0, r3
 80082b0:	f000 fc4b 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80082b4:	e01c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	6818      	ldr	r0, [r3, #0]
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	6859      	ldr	r1, [r3, #4]
 80082be:	683b      	ldr	r3, [r7, #0]
 80082c0:	68db      	ldr	r3, [r3, #12]
 80082c2:	461a      	mov	r2, r3
 80082c4:	f000 fbe2 	bl	8008a8c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	2140      	movs	r1, #64	; 0x40
 80082ce:	4618      	mov	r0, r3
 80082d0:	f000 fc3b 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80082d4:	e00c      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80082d6:	687b      	ldr	r3, [r7, #4]
 80082d8:	681a      	ldr	r2, [r3, #0]
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	681b      	ldr	r3, [r3, #0]
 80082de:	4619      	mov	r1, r3
 80082e0:	4610      	mov	r0, r2
 80082e2:	f000 fc32 	bl	8008b4a <TIM_ITRx_SetConfig>
      break;
 80082e6:	e003      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80082e8:	2301      	movs	r3, #1
 80082ea:	73fb      	strb	r3, [r7, #15]
      break;
 80082ec:	e000      	b.n	80082f0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80082ee:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	2201      	movs	r2, #1
 80082f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	2200      	movs	r2, #0
 80082fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008300:	7bfb      	ldrb	r3, [r7, #15]
}
 8008302:	4618      	mov	r0, r3
 8008304:	3710      	adds	r7, #16
 8008306:	46bd      	mov	sp, r7
 8008308:	bd80      	pop	{r7, pc}
 800830a:	bf00      	nop
 800830c:	00100070 	.word	0x00100070
 8008310:	00100040 	.word	0x00100040
 8008314:	00100030 	.word	0x00100030
 8008318:	00100020 	.word	0x00100020

0800831c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8008324:	bf00      	nop
 8008326:	370c      	adds	r7, #12
 8008328:	46bd      	mov	sp, r7
 800832a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800832e:	4770      	bx	lr

08008330 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008330:	b480      	push	{r7}
 8008332:	b083      	sub	sp, #12
 8008334:	af00      	add	r7, sp, #0
 8008336:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008338:	bf00      	nop
 800833a:	370c      	adds	r7, #12
 800833c:	46bd      	mov	sp, r7
 800833e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008342:	4770      	bx	lr

08008344 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008344:	b480      	push	{r7}
 8008346:	b083      	sub	sp, #12
 8008348:	af00      	add	r7, sp, #0
 800834a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800834c:	bf00      	nop
 800834e:	370c      	adds	r7, #12
 8008350:	46bd      	mov	sp, r7
 8008352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008356:	4770      	bx	lr

08008358 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008358:	b480      	push	{r7}
 800835a:	b083      	sub	sp, #12
 800835c:	af00      	add	r7, sp, #0
 800835e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008360:	bf00      	nop
 8008362:	370c      	adds	r7, #12
 8008364:	46bd      	mov	sp, r7
 8008366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800836a:	4770      	bx	lr

0800836c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800836c:	b480      	push	{r7}
 800836e:	b083      	sub	sp, #12
 8008370:	af00      	add	r7, sp, #0
 8008372:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008374:	bf00      	nop
 8008376:	370c      	adds	r7, #12
 8008378:	46bd      	mov	sp, r7
 800837a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837e:	4770      	bx	lr

08008380 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008380:	b480      	push	{r7}
 8008382:	b085      	sub	sp, #20
 8008384:	af00      	add	r7, sp, #0
 8008386:	6078      	str	r0, [r7, #4]
 8008388:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	4a3c      	ldr	r2, [pc, #240]	; (8008484 <TIM_Base_SetConfig+0x104>)
 8008394:	4293      	cmp	r3, r2
 8008396:	d00f      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839e:	d00b      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	4a39      	ldr	r2, [pc, #228]	; (8008488 <TIM_Base_SetConfig+0x108>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d007      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	4a38      	ldr	r2, [pc, #224]	; (800848c <TIM_Base_SetConfig+0x10c>)
 80083ac:	4293      	cmp	r3, r2
 80083ae:	d003      	beq.n	80083b8 <TIM_Base_SetConfig+0x38>
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	4a37      	ldr	r2, [pc, #220]	; (8008490 <TIM_Base_SetConfig+0x110>)
 80083b4:	4293      	cmp	r3, r2
 80083b6:	d108      	bne.n	80083ca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80083be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80083c0:	683b      	ldr	r3, [r7, #0]
 80083c2:	685b      	ldr	r3, [r3, #4]
 80083c4:	68fa      	ldr	r2, [r7, #12]
 80083c6:	4313      	orrs	r3, r2
 80083c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	4a2d      	ldr	r2, [pc, #180]	; (8008484 <TIM_Base_SetConfig+0x104>)
 80083ce:	4293      	cmp	r3, r2
 80083d0:	d01b      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083d8:	d017      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	4a2a      	ldr	r2, [pc, #168]	; (8008488 <TIM_Base_SetConfig+0x108>)
 80083de:	4293      	cmp	r3, r2
 80083e0:	d013      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	4a29      	ldr	r2, [pc, #164]	; (800848c <TIM_Base_SetConfig+0x10c>)
 80083e6:	4293      	cmp	r3, r2
 80083e8:	d00f      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083ea:	687b      	ldr	r3, [r7, #4]
 80083ec:	4a28      	ldr	r2, [pc, #160]	; (8008490 <TIM_Base_SetConfig+0x110>)
 80083ee:	4293      	cmp	r3, r2
 80083f0:	d00b      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	4a27      	ldr	r2, [pc, #156]	; (8008494 <TIM_Base_SetConfig+0x114>)
 80083f6:	4293      	cmp	r3, r2
 80083f8:	d007      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	4a26      	ldr	r2, [pc, #152]	; (8008498 <TIM_Base_SetConfig+0x118>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d003      	beq.n	800840a <TIM_Base_SetConfig+0x8a>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	4a25      	ldr	r2, [pc, #148]	; (800849c <TIM_Base_SetConfig+0x11c>)
 8008406:	4293      	cmp	r3, r2
 8008408:	d108      	bne.n	800841c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800840a:	68fb      	ldr	r3, [r7, #12]
 800840c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008410:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008412:	683b      	ldr	r3, [r7, #0]
 8008414:	68db      	ldr	r3, [r3, #12]
 8008416:	68fa      	ldr	r2, [r7, #12]
 8008418:	4313      	orrs	r3, r2
 800841a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008422:	683b      	ldr	r3, [r7, #0]
 8008424:	695b      	ldr	r3, [r3, #20]
 8008426:	4313      	orrs	r3, r2
 8008428:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	68fa      	ldr	r2, [r7, #12]
 800842e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008430:	683b      	ldr	r3, [r7, #0]
 8008432:	689a      	ldr	r2, [r3, #8]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	681a      	ldr	r2, [r3, #0]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	4a10      	ldr	r2, [pc, #64]	; (8008484 <TIM_Base_SetConfig+0x104>)
 8008444:	4293      	cmp	r3, r2
 8008446:	d00f      	beq.n	8008468 <TIM_Base_SetConfig+0xe8>
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	4a11      	ldr	r2, [pc, #68]	; (8008490 <TIM_Base_SetConfig+0x110>)
 800844c:	4293      	cmp	r3, r2
 800844e:	d00b      	beq.n	8008468 <TIM_Base_SetConfig+0xe8>
 8008450:	687b      	ldr	r3, [r7, #4]
 8008452:	4a10      	ldr	r2, [pc, #64]	; (8008494 <TIM_Base_SetConfig+0x114>)
 8008454:	4293      	cmp	r3, r2
 8008456:	d007      	beq.n	8008468 <TIM_Base_SetConfig+0xe8>
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	4a0f      	ldr	r2, [pc, #60]	; (8008498 <TIM_Base_SetConfig+0x118>)
 800845c:	4293      	cmp	r3, r2
 800845e:	d003      	beq.n	8008468 <TIM_Base_SetConfig+0xe8>
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	4a0e      	ldr	r2, [pc, #56]	; (800849c <TIM_Base_SetConfig+0x11c>)
 8008464:	4293      	cmp	r3, r2
 8008466:	d103      	bne.n	8008470 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	691a      	ldr	r2, [r3, #16]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	2201      	movs	r2, #1
 8008474:	615a      	str	r2, [r3, #20]
}
 8008476:	bf00      	nop
 8008478:	3714      	adds	r7, #20
 800847a:	46bd      	mov	sp, r7
 800847c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008480:	4770      	bx	lr
 8008482:	bf00      	nop
 8008484:	40012c00 	.word	0x40012c00
 8008488:	40000400 	.word	0x40000400
 800848c:	40000800 	.word	0x40000800
 8008490:	40013400 	.word	0x40013400
 8008494:	40014000 	.word	0x40014000
 8008498:	40014400 	.word	0x40014400
 800849c:	40014800 	.word	0x40014800

080084a0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80084a0:	b480      	push	{r7}
 80084a2:	b087      	sub	sp, #28
 80084a4:	af00      	add	r7, sp, #0
 80084a6:	6078      	str	r0, [r7, #4]
 80084a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6a1b      	ldr	r3, [r3, #32]
 80084ae:	f023 0201 	bic.w	r2, r3, #1
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a1b      	ldr	r3, [r3, #32]
 80084ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	685b      	ldr	r3, [r3, #4]
 80084c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	699b      	ldr	r3, [r3, #24]
 80084c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80084c8:	68fb      	ldr	r3, [r7, #12]
 80084ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80084ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	f023 0303 	bic.w	r3, r3, #3
 80084da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80084dc:	683b      	ldr	r3, [r7, #0]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	68fa      	ldr	r2, [r7, #12]
 80084e2:	4313      	orrs	r3, r2
 80084e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80084e6:	697b      	ldr	r3, [r7, #20]
 80084e8:	f023 0302 	bic.w	r3, r3, #2
 80084ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80084ee:	683b      	ldr	r3, [r7, #0]
 80084f0:	689b      	ldr	r3, [r3, #8]
 80084f2:	697a      	ldr	r2, [r7, #20]
 80084f4:	4313      	orrs	r3, r2
 80084f6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4a2c      	ldr	r2, [pc, #176]	; (80085ac <TIM_OC1_SetConfig+0x10c>)
 80084fc:	4293      	cmp	r3, r2
 80084fe:	d00f      	beq.n	8008520 <TIM_OC1_SetConfig+0x80>
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	4a2b      	ldr	r2, [pc, #172]	; (80085b0 <TIM_OC1_SetConfig+0x110>)
 8008504:	4293      	cmp	r3, r2
 8008506:	d00b      	beq.n	8008520 <TIM_OC1_SetConfig+0x80>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	4a2a      	ldr	r2, [pc, #168]	; (80085b4 <TIM_OC1_SetConfig+0x114>)
 800850c:	4293      	cmp	r3, r2
 800850e:	d007      	beq.n	8008520 <TIM_OC1_SetConfig+0x80>
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	4a29      	ldr	r2, [pc, #164]	; (80085b8 <TIM_OC1_SetConfig+0x118>)
 8008514:	4293      	cmp	r3, r2
 8008516:	d003      	beq.n	8008520 <TIM_OC1_SetConfig+0x80>
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	4a28      	ldr	r2, [pc, #160]	; (80085bc <TIM_OC1_SetConfig+0x11c>)
 800851c:	4293      	cmp	r3, r2
 800851e:	d10c      	bne.n	800853a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f023 0308 	bic.w	r3, r3, #8
 8008526:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	68db      	ldr	r3, [r3, #12]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	4313      	orrs	r3, r2
 8008530:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008532:	697b      	ldr	r3, [r7, #20]
 8008534:	f023 0304 	bic.w	r3, r3, #4
 8008538:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	4a1b      	ldr	r2, [pc, #108]	; (80085ac <TIM_OC1_SetConfig+0x10c>)
 800853e:	4293      	cmp	r3, r2
 8008540:	d00f      	beq.n	8008562 <TIM_OC1_SetConfig+0xc2>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	4a1a      	ldr	r2, [pc, #104]	; (80085b0 <TIM_OC1_SetConfig+0x110>)
 8008546:	4293      	cmp	r3, r2
 8008548:	d00b      	beq.n	8008562 <TIM_OC1_SetConfig+0xc2>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	4a19      	ldr	r2, [pc, #100]	; (80085b4 <TIM_OC1_SetConfig+0x114>)
 800854e:	4293      	cmp	r3, r2
 8008550:	d007      	beq.n	8008562 <TIM_OC1_SetConfig+0xc2>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a18      	ldr	r2, [pc, #96]	; (80085b8 <TIM_OC1_SetConfig+0x118>)
 8008556:	4293      	cmp	r3, r2
 8008558:	d003      	beq.n	8008562 <TIM_OC1_SetConfig+0xc2>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	4a17      	ldr	r2, [pc, #92]	; (80085bc <TIM_OC1_SetConfig+0x11c>)
 800855e:	4293      	cmp	r3, r2
 8008560:	d111      	bne.n	8008586 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8008562:	693b      	ldr	r3, [r7, #16]
 8008564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800856a:	693b      	ldr	r3, [r7, #16]
 800856c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8008572:	683b      	ldr	r3, [r7, #0]
 8008574:	695b      	ldr	r3, [r3, #20]
 8008576:	693a      	ldr	r2, [r7, #16]
 8008578:	4313      	orrs	r3, r2
 800857a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	699b      	ldr	r3, [r3, #24]
 8008580:	693a      	ldr	r2, [r7, #16]
 8008582:	4313      	orrs	r3, r2
 8008584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	693a      	ldr	r2, [r7, #16]
 800858a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	68fa      	ldr	r2, [r7, #12]
 8008590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8008592:	683b      	ldr	r3, [r7, #0]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800859a:	687b      	ldr	r3, [r7, #4]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	621a      	str	r2, [r3, #32]
}
 80085a0:	bf00      	nop
 80085a2:	371c      	adds	r7, #28
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr
 80085ac:	40012c00 	.word	0x40012c00
 80085b0:	40013400 	.word	0x40013400
 80085b4:	40014000 	.word	0x40014000
 80085b8:	40014400 	.word	0x40014400
 80085bc:	40014800 	.word	0x40014800

080085c0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80085c0:	b480      	push	{r7}
 80085c2:	b087      	sub	sp, #28
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
 80085c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	f023 0210 	bic.w	r2, r3, #16
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	685b      	ldr	r3, [r3, #4]
 80085e0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	699b      	ldr	r3, [r3, #24]
 80085e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80085ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80085f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80085f4:	68fb      	ldr	r3, [r7, #12]
 80085f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80085fa:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80085fc:	683b      	ldr	r3, [r7, #0]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	021b      	lsls	r3, r3, #8
 8008602:	68fa      	ldr	r2, [r7, #12]
 8008604:	4313      	orrs	r3, r2
 8008606:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008608:	697b      	ldr	r3, [r7, #20]
 800860a:	f023 0320 	bic.w	r3, r3, #32
 800860e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008610:	683b      	ldr	r3, [r7, #0]
 8008612:	689b      	ldr	r3, [r3, #8]
 8008614:	011b      	lsls	r3, r3, #4
 8008616:	697a      	ldr	r2, [r7, #20]
 8008618:	4313      	orrs	r3, r2
 800861a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	4a28      	ldr	r2, [pc, #160]	; (80086c0 <TIM_OC2_SetConfig+0x100>)
 8008620:	4293      	cmp	r3, r2
 8008622:	d003      	beq.n	800862c <TIM_OC2_SetConfig+0x6c>
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	4a27      	ldr	r2, [pc, #156]	; (80086c4 <TIM_OC2_SetConfig+0x104>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d10d      	bne.n	8008648 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800862c:	697b      	ldr	r3, [r7, #20]
 800862e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008632:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	68db      	ldr	r3, [r3, #12]
 8008638:	011b      	lsls	r3, r3, #4
 800863a:	697a      	ldr	r2, [r7, #20]
 800863c:	4313      	orrs	r3, r2
 800863e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008640:	697b      	ldr	r3, [r7, #20]
 8008642:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008646:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	4a1d      	ldr	r2, [pc, #116]	; (80086c0 <TIM_OC2_SetConfig+0x100>)
 800864c:	4293      	cmp	r3, r2
 800864e:	d00f      	beq.n	8008670 <TIM_OC2_SetConfig+0xb0>
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	4a1c      	ldr	r2, [pc, #112]	; (80086c4 <TIM_OC2_SetConfig+0x104>)
 8008654:	4293      	cmp	r3, r2
 8008656:	d00b      	beq.n	8008670 <TIM_OC2_SetConfig+0xb0>
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	4a1b      	ldr	r2, [pc, #108]	; (80086c8 <TIM_OC2_SetConfig+0x108>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d007      	beq.n	8008670 <TIM_OC2_SetConfig+0xb0>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	4a1a      	ldr	r2, [pc, #104]	; (80086cc <TIM_OC2_SetConfig+0x10c>)
 8008664:	4293      	cmp	r3, r2
 8008666:	d003      	beq.n	8008670 <TIM_OC2_SetConfig+0xb0>
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	4a19      	ldr	r2, [pc, #100]	; (80086d0 <TIM_OC2_SetConfig+0x110>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d113      	bne.n	8008698 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008670:	693b      	ldr	r3, [r7, #16]
 8008672:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008676:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008678:	693b      	ldr	r3, [r7, #16]
 800867a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800867e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	695b      	ldr	r3, [r3, #20]
 8008684:	009b      	lsls	r3, r3, #2
 8008686:	693a      	ldr	r2, [r7, #16]
 8008688:	4313      	orrs	r3, r2
 800868a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800868c:	683b      	ldr	r3, [r7, #0]
 800868e:	699b      	ldr	r3, [r3, #24]
 8008690:	009b      	lsls	r3, r3, #2
 8008692:	693a      	ldr	r2, [r7, #16]
 8008694:	4313      	orrs	r3, r2
 8008696:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	693a      	ldr	r2, [r7, #16]
 800869c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	68fa      	ldr	r2, [r7, #12]
 80086a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	685a      	ldr	r2, [r3, #4]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	697a      	ldr	r2, [r7, #20]
 80086b0:	621a      	str	r2, [r3, #32]
}
 80086b2:	bf00      	nop
 80086b4:	371c      	adds	r7, #28
 80086b6:	46bd      	mov	sp, r7
 80086b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	40012c00 	.word	0x40012c00
 80086c4:	40013400 	.word	0x40013400
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40014400 	.word	0x40014400
 80086d0:	40014800 	.word	0x40014800

080086d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80086d4:	b480      	push	{r7}
 80086d6:	b087      	sub	sp, #28
 80086d8:	af00      	add	r7, sp, #0
 80086da:	6078      	str	r0, [r7, #4]
 80086dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6a1b      	ldr	r3, [r3, #32]
 80086e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6a1b      	ldr	r3, [r3, #32]
 80086ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	69db      	ldr	r3, [r3, #28]
 80086fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80086fc:	68fb      	ldr	r3, [r7, #12]
 80086fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008702:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	f023 0303 	bic.w	r3, r3, #3
 800870e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008710:	683b      	ldr	r3, [r7, #0]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68fa      	ldr	r2, [r7, #12]
 8008716:	4313      	orrs	r3, r2
 8008718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800871a:	697b      	ldr	r3, [r7, #20]
 800871c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8008722:	683b      	ldr	r3, [r7, #0]
 8008724:	689b      	ldr	r3, [r3, #8]
 8008726:	021b      	lsls	r3, r3, #8
 8008728:	697a      	ldr	r2, [r7, #20]
 800872a:	4313      	orrs	r3, r2
 800872c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	4a27      	ldr	r2, [pc, #156]	; (80087d0 <TIM_OC3_SetConfig+0xfc>)
 8008732:	4293      	cmp	r3, r2
 8008734:	d003      	beq.n	800873e <TIM_OC3_SetConfig+0x6a>
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	4a26      	ldr	r2, [pc, #152]	; (80087d4 <TIM_OC3_SetConfig+0x100>)
 800873a:	4293      	cmp	r3, r2
 800873c:	d10d      	bne.n	800875a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008744:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8008746:	683b      	ldr	r3, [r7, #0]
 8008748:	68db      	ldr	r3, [r3, #12]
 800874a:	021b      	lsls	r3, r3, #8
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	4313      	orrs	r3, r2
 8008750:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8008752:	697b      	ldr	r3, [r7, #20]
 8008754:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008758:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a1c      	ldr	r2, [pc, #112]	; (80087d0 <TIM_OC3_SetConfig+0xfc>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d00f      	beq.n	8008782 <TIM_OC3_SetConfig+0xae>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a1b      	ldr	r2, [pc, #108]	; (80087d4 <TIM_OC3_SetConfig+0x100>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d00b      	beq.n	8008782 <TIM_OC3_SetConfig+0xae>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a1a      	ldr	r2, [pc, #104]	; (80087d8 <TIM_OC3_SetConfig+0x104>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d007      	beq.n	8008782 <TIM_OC3_SetConfig+0xae>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a19      	ldr	r2, [pc, #100]	; (80087dc <TIM_OC3_SetConfig+0x108>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d003      	beq.n	8008782 <TIM_OC3_SetConfig+0xae>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a18      	ldr	r2, [pc, #96]	; (80087e0 <TIM_OC3_SetConfig+0x10c>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d113      	bne.n	80087aa <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8008782:	693b      	ldr	r3, [r7, #16]
 8008784:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008788:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800878a:	693b      	ldr	r3, [r7, #16]
 800878c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008790:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8008792:	683b      	ldr	r3, [r7, #0]
 8008794:	695b      	ldr	r3, [r3, #20]
 8008796:	011b      	lsls	r3, r3, #4
 8008798:	693a      	ldr	r2, [r7, #16]
 800879a:	4313      	orrs	r3, r2
 800879c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800879e:	683b      	ldr	r3, [r7, #0]
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	011b      	lsls	r3, r3, #4
 80087a4:	693a      	ldr	r2, [r7, #16]
 80087a6:	4313      	orrs	r3, r2
 80087a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	693a      	ldr	r2, [r7, #16]
 80087ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	68fa      	ldr	r2, [r7, #12]
 80087b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	685a      	ldr	r2, [r3, #4]
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	697a      	ldr	r2, [r7, #20]
 80087c2:	621a      	str	r2, [r3, #32]
}
 80087c4:	bf00      	nop
 80087c6:	371c      	adds	r7, #28
 80087c8:	46bd      	mov	sp, r7
 80087ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ce:	4770      	bx	lr
 80087d0:	40012c00 	.word	0x40012c00
 80087d4:	40013400 	.word	0x40013400
 80087d8:	40014000 	.word	0x40014000
 80087dc:	40014400 	.word	0x40014400
 80087e0:	40014800 	.word	0x40014800

080087e4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80087e4:	b480      	push	{r7}
 80087e6:	b087      	sub	sp, #28
 80087e8:	af00      	add	r7, sp, #0
 80087ea:	6078      	str	r0, [r7, #4]
 80087ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	6a1b      	ldr	r3, [r3, #32]
 80087f2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	6a1b      	ldr	r3, [r3, #32]
 80087fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008800:	687b      	ldr	r3, [r7, #4]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	69db      	ldr	r3, [r3, #28]
 800880a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008812:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008816:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800881e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	021b      	lsls	r3, r3, #8
 8008826:	68fa      	ldr	r2, [r7, #12]
 8008828:	4313      	orrs	r3, r2
 800882a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800882c:	697b      	ldr	r3, [r7, #20]
 800882e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008832:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008834:	683b      	ldr	r3, [r7, #0]
 8008836:	689b      	ldr	r3, [r3, #8]
 8008838:	031b      	lsls	r3, r3, #12
 800883a:	697a      	ldr	r2, [r7, #20]
 800883c:	4313      	orrs	r3, r2
 800883e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	4a28      	ldr	r2, [pc, #160]	; (80088e4 <TIM_OC4_SetConfig+0x100>)
 8008844:	4293      	cmp	r3, r2
 8008846:	d003      	beq.n	8008850 <TIM_OC4_SetConfig+0x6c>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a27      	ldr	r2, [pc, #156]	; (80088e8 <TIM_OC4_SetConfig+0x104>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d10d      	bne.n	800886c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8008856:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008858:	683b      	ldr	r3, [r7, #0]
 800885a:	68db      	ldr	r3, [r3, #12]
 800885c:	031b      	lsls	r3, r3, #12
 800885e:	697a      	ldr	r2, [r7, #20]
 8008860:	4313      	orrs	r3, r2
 8008862:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8008864:	697b      	ldr	r3, [r7, #20]
 8008866:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800886a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	4a1d      	ldr	r2, [pc, #116]	; (80088e4 <TIM_OC4_SetConfig+0x100>)
 8008870:	4293      	cmp	r3, r2
 8008872:	d00f      	beq.n	8008894 <TIM_OC4_SetConfig+0xb0>
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	4a1c      	ldr	r2, [pc, #112]	; (80088e8 <TIM_OC4_SetConfig+0x104>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d00b      	beq.n	8008894 <TIM_OC4_SetConfig+0xb0>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	4a1b      	ldr	r2, [pc, #108]	; (80088ec <TIM_OC4_SetConfig+0x108>)
 8008880:	4293      	cmp	r3, r2
 8008882:	d007      	beq.n	8008894 <TIM_OC4_SetConfig+0xb0>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	4a1a      	ldr	r2, [pc, #104]	; (80088f0 <TIM_OC4_SetConfig+0x10c>)
 8008888:	4293      	cmp	r3, r2
 800888a:	d003      	beq.n	8008894 <TIM_OC4_SetConfig+0xb0>
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	4a19      	ldr	r2, [pc, #100]	; (80088f4 <TIM_OC4_SetConfig+0x110>)
 8008890:	4293      	cmp	r3, r2
 8008892:	d113      	bne.n	80088bc <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008894:	693b      	ldr	r3, [r7, #16]
 8008896:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800889a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800889c:	693b      	ldr	r3, [r7, #16]
 800889e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80088a2:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80088a4:	683b      	ldr	r3, [r7, #0]
 80088a6:	695b      	ldr	r3, [r3, #20]
 80088a8:	019b      	lsls	r3, r3, #6
 80088aa:	693a      	ldr	r2, [r7, #16]
 80088ac:	4313      	orrs	r3, r2
 80088ae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80088b0:	683b      	ldr	r3, [r7, #0]
 80088b2:	699b      	ldr	r3, [r3, #24]
 80088b4:	019b      	lsls	r3, r3, #6
 80088b6:	693a      	ldr	r2, [r7, #16]
 80088b8:	4313      	orrs	r3, r2
 80088ba:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	693a      	ldr	r2, [r7, #16]
 80088c0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	68fa      	ldr	r2, [r7, #12]
 80088c6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80088c8:	683b      	ldr	r3, [r7, #0]
 80088ca:	685a      	ldr	r2, [r3, #4]
 80088cc:	687b      	ldr	r3, [r7, #4]
 80088ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	697a      	ldr	r2, [r7, #20]
 80088d4:	621a      	str	r2, [r3, #32]
}
 80088d6:	bf00      	nop
 80088d8:	371c      	adds	r7, #28
 80088da:	46bd      	mov	sp, r7
 80088dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088e0:	4770      	bx	lr
 80088e2:	bf00      	nop
 80088e4:	40012c00 	.word	0x40012c00
 80088e8:	40013400 	.word	0x40013400
 80088ec:	40014000 	.word	0x40014000
 80088f0:	40014400 	.word	0x40014400
 80088f4:	40014800 	.word	0x40014800

080088f8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80088f8:	b480      	push	{r7}
 80088fa:	b087      	sub	sp, #28
 80088fc:	af00      	add	r7, sp, #0
 80088fe:	6078      	str	r0, [r7, #4]
 8008900:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	6a1b      	ldr	r3, [r3, #32]
 8008906:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6a1b      	ldr	r3, [r3, #32]
 8008912:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	685b      	ldr	r3, [r3, #4]
 8008918:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800891e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008920:	68fb      	ldr	r3, [r7, #12]
 8008922:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008926:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800892a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800892c:	683b      	ldr	r3, [r7, #0]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	68fa      	ldr	r2, [r7, #12]
 8008932:	4313      	orrs	r3, r2
 8008934:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8008936:	693b      	ldr	r3, [r7, #16]
 8008938:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800893c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800893e:	683b      	ldr	r3, [r7, #0]
 8008940:	689b      	ldr	r3, [r3, #8]
 8008942:	041b      	lsls	r3, r3, #16
 8008944:	693a      	ldr	r2, [r7, #16]
 8008946:	4313      	orrs	r3, r2
 8008948:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	4a17      	ldr	r2, [pc, #92]	; (80089ac <TIM_OC5_SetConfig+0xb4>)
 800894e:	4293      	cmp	r3, r2
 8008950:	d00f      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 8008952:	687b      	ldr	r3, [r7, #4]
 8008954:	4a16      	ldr	r2, [pc, #88]	; (80089b0 <TIM_OC5_SetConfig+0xb8>)
 8008956:	4293      	cmp	r3, r2
 8008958:	d00b      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	4a15      	ldr	r2, [pc, #84]	; (80089b4 <TIM_OC5_SetConfig+0xbc>)
 800895e:	4293      	cmp	r3, r2
 8008960:	d007      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 8008962:	687b      	ldr	r3, [r7, #4]
 8008964:	4a14      	ldr	r2, [pc, #80]	; (80089b8 <TIM_OC5_SetConfig+0xc0>)
 8008966:	4293      	cmp	r3, r2
 8008968:	d003      	beq.n	8008972 <TIM_OC5_SetConfig+0x7a>
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4a13      	ldr	r2, [pc, #76]	; (80089bc <TIM_OC5_SetConfig+0xc4>)
 800896e:	4293      	cmp	r3, r2
 8008970:	d109      	bne.n	8008986 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008978:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800897a:	683b      	ldr	r3, [r7, #0]
 800897c:	695b      	ldr	r3, [r3, #20]
 800897e:	021b      	lsls	r3, r3, #8
 8008980:	697a      	ldr	r2, [r7, #20]
 8008982:	4313      	orrs	r3, r2
 8008984:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008986:	687b      	ldr	r3, [r7, #4]
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	68fa      	ldr	r2, [r7, #12]
 8008990:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8008992:	683b      	ldr	r3, [r7, #0]
 8008994:	685a      	ldr	r2, [r3, #4]
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	621a      	str	r2, [r3, #32]
}
 80089a0:	bf00      	nop
 80089a2:	371c      	adds	r7, #28
 80089a4:	46bd      	mov	sp, r7
 80089a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089aa:	4770      	bx	lr
 80089ac:	40012c00 	.word	0x40012c00
 80089b0:	40013400 	.word	0x40013400
 80089b4:	40014000 	.word	0x40014000
 80089b8:	40014400 	.word	0x40014400
 80089bc:	40014800 	.word	0x40014800

080089c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80089c0:	b480      	push	{r7}
 80089c2:	b087      	sub	sp, #28
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	6078      	str	r0, [r7, #4]
 80089c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	6a1b      	ldr	r3, [r3, #32]
 80089ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a1b      	ldr	r3, [r3, #32]
 80089da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	685b      	ldr	r3, [r3, #4]
 80089e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80089e2:	687b      	ldr	r3, [r7, #4]
 80089e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80089e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ee:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80089f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80089f4:	683b      	ldr	r3, [r7, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	021b      	lsls	r3, r3, #8
 80089fa:	68fa      	ldr	r2, [r7, #12]
 80089fc:	4313      	orrs	r3, r2
 80089fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8008a00:	693b      	ldr	r3, [r7, #16]
 8008a02:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8008a06:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	689b      	ldr	r3, [r3, #8]
 8008a0c:	051b      	lsls	r3, r3, #20
 8008a0e:	693a      	ldr	r2, [r7, #16]
 8008a10:	4313      	orrs	r3, r2
 8008a12:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008a14:	687b      	ldr	r3, [r7, #4]
 8008a16:	4a18      	ldr	r2, [pc, #96]	; (8008a78 <TIM_OC6_SetConfig+0xb8>)
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d00f      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	4a17      	ldr	r2, [pc, #92]	; (8008a7c <TIM_OC6_SetConfig+0xbc>)
 8008a20:	4293      	cmp	r3, r2
 8008a22:	d00b      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a24:	687b      	ldr	r3, [r7, #4]
 8008a26:	4a16      	ldr	r2, [pc, #88]	; (8008a80 <TIM_OC6_SetConfig+0xc0>)
 8008a28:	4293      	cmp	r3, r2
 8008a2a:	d007      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	4a15      	ldr	r2, [pc, #84]	; (8008a84 <TIM_OC6_SetConfig+0xc4>)
 8008a30:	4293      	cmp	r3, r2
 8008a32:	d003      	beq.n	8008a3c <TIM_OC6_SetConfig+0x7c>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	4a14      	ldr	r2, [pc, #80]	; (8008a88 <TIM_OC6_SetConfig+0xc8>)
 8008a38:	4293      	cmp	r3, r2
 8008a3a:	d109      	bne.n	8008a50 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008a42:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8008a44:	683b      	ldr	r3, [r7, #0]
 8008a46:	695b      	ldr	r3, [r3, #20]
 8008a48:	029b      	lsls	r3, r3, #10
 8008a4a:	697a      	ldr	r2, [r7, #20]
 8008a4c:	4313      	orrs	r3, r2
 8008a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	697a      	ldr	r2, [r7, #20]
 8008a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	68fa      	ldr	r2, [r7, #12]
 8008a5a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008a5c:	683b      	ldr	r3, [r7, #0]
 8008a5e:	685a      	ldr	r2, [r3, #4]
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	693a      	ldr	r2, [r7, #16]
 8008a68:	621a      	str	r2, [r3, #32]
}
 8008a6a:	bf00      	nop
 8008a6c:	371c      	adds	r7, #28
 8008a6e:	46bd      	mov	sp, r7
 8008a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a74:	4770      	bx	lr
 8008a76:	bf00      	nop
 8008a78:	40012c00 	.word	0x40012c00
 8008a7c:	40013400 	.word	0x40013400
 8008a80:	40014000 	.word	0x40014000
 8008a84:	40014400 	.word	0x40014400
 8008a88:	40014800 	.word	0x40014800

08008a8c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a8c:	b480      	push	{r7}
 8008a8e:	b087      	sub	sp, #28
 8008a90:	af00      	add	r7, sp, #0
 8008a92:	60f8      	str	r0, [r7, #12]
 8008a94:	60b9      	str	r1, [r7, #8]
 8008a96:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	6a1b      	ldr	r3, [r3, #32]
 8008a9c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	6a1b      	ldr	r3, [r3, #32]
 8008aa2:	f023 0201 	bic.w	r2, r3, #1
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008aaa:	68fb      	ldr	r3, [r7, #12]
 8008aac:	699b      	ldr	r3, [r3, #24]
 8008aae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008ab0:	693b      	ldr	r3, [r7, #16]
 8008ab2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008ab6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	011b      	lsls	r3, r3, #4
 8008abc:	693a      	ldr	r2, [r7, #16]
 8008abe:	4313      	orrs	r3, r2
 8008ac0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008ac2:	697b      	ldr	r3, [r7, #20]
 8008ac4:	f023 030a 	bic.w	r3, r3, #10
 8008ac8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008aca:	697a      	ldr	r2, [r7, #20]
 8008acc:	68bb      	ldr	r3, [r7, #8]
 8008ace:	4313      	orrs	r3, r2
 8008ad0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	697a      	ldr	r2, [r7, #20]
 8008adc:	621a      	str	r2, [r3, #32]
}
 8008ade:	bf00      	nop
 8008ae0:	371c      	adds	r7, #28
 8008ae2:	46bd      	mov	sp, r7
 8008ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ae8:	4770      	bx	lr

08008aea <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008aea:	b480      	push	{r7}
 8008aec:	b087      	sub	sp, #28
 8008aee:	af00      	add	r7, sp, #0
 8008af0:	60f8      	str	r0, [r7, #12]
 8008af2:	60b9      	str	r1, [r7, #8]
 8008af4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6a1b      	ldr	r3, [r3, #32]
 8008afa:	f023 0210 	bic.w	r2, r3, #16
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	699b      	ldr	r3, [r3, #24]
 8008b06:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	6a1b      	ldr	r3, [r3, #32]
 8008b0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b0e:	697b      	ldr	r3, [r7, #20]
 8008b10:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b14:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	031b      	lsls	r3, r3, #12
 8008b1a:	697a      	ldr	r2, [r7, #20]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b20:	693b      	ldr	r3, [r7, #16]
 8008b22:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b26:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b28:	68bb      	ldr	r3, [r7, #8]
 8008b2a:	011b      	lsls	r3, r3, #4
 8008b2c:	693a      	ldr	r2, [r7, #16]
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b32:	68fb      	ldr	r3, [r7, #12]
 8008b34:	697a      	ldr	r2, [r7, #20]
 8008b36:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	621a      	str	r2, [r3, #32]
}
 8008b3e:	bf00      	nop
 8008b40:	371c      	adds	r7, #28
 8008b42:	46bd      	mov	sp, r7
 8008b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b48:	4770      	bx	lr

08008b4a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008b4a:	b480      	push	{r7}
 8008b4c:	b085      	sub	sp, #20
 8008b4e:	af00      	add	r7, sp, #0
 8008b50:	6078      	str	r0, [r7, #4]
 8008b52:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	689b      	ldr	r3, [r3, #8]
 8008b58:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008b60:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008b64:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008b66:	683a      	ldr	r2, [r7, #0]
 8008b68:	68fb      	ldr	r3, [r7, #12]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	f043 0307 	orr.w	r3, r3, #7
 8008b70:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	68fa      	ldr	r2, [r7, #12]
 8008b76:	609a      	str	r2, [r3, #8]
}
 8008b78:	bf00      	nop
 8008b7a:	3714      	adds	r7, #20
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b82:	4770      	bx	lr

08008b84 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008b84:	b480      	push	{r7}
 8008b86:	b087      	sub	sp, #28
 8008b88:	af00      	add	r7, sp, #0
 8008b8a:	60f8      	str	r0, [r7, #12]
 8008b8c:	60b9      	str	r1, [r7, #8]
 8008b8e:	607a      	str	r2, [r7, #4]
 8008b90:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	689b      	ldr	r3, [r3, #8]
 8008b96:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008b9e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008ba0:	683b      	ldr	r3, [r7, #0]
 8008ba2:	021a      	lsls	r2, r3, #8
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	431a      	orrs	r2, r3
 8008ba8:	68bb      	ldr	r3, [r7, #8]
 8008baa:	4313      	orrs	r3, r2
 8008bac:	697a      	ldr	r2, [r7, #20]
 8008bae:	4313      	orrs	r3, r2
 8008bb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	697a      	ldr	r2, [r7, #20]
 8008bb6:	609a      	str	r2, [r3, #8]
}
 8008bb8:	bf00      	nop
 8008bba:	371c      	adds	r7, #28
 8008bbc:	46bd      	mov	sp, r7
 8008bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc2:	4770      	bx	lr

08008bc4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008bc4:	b480      	push	{r7}
 8008bc6:	b087      	sub	sp, #28
 8008bc8:	af00      	add	r7, sp, #0
 8008bca:	60f8      	str	r0, [r7, #12]
 8008bcc:	60b9      	str	r1, [r7, #8]
 8008bce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008bd0:	68bb      	ldr	r3, [r7, #8]
 8008bd2:	f003 031f 	and.w	r3, r3, #31
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	fa02 f303 	lsl.w	r3, r2, r3
 8008bdc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	6a1a      	ldr	r2, [r3, #32]
 8008be2:	697b      	ldr	r3, [r7, #20]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	401a      	ands	r2, r3
 8008be8:	68fb      	ldr	r3, [r7, #12]
 8008bea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6a1a      	ldr	r2, [r3, #32]
 8008bf0:	68bb      	ldr	r3, [r7, #8]
 8008bf2:	f003 031f 	and.w	r3, r3, #31
 8008bf6:	6879      	ldr	r1, [r7, #4]
 8008bf8:	fa01 f303 	lsl.w	r3, r1, r3
 8008bfc:	431a      	orrs	r2, r3
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	621a      	str	r2, [r3, #32]
}
 8008c02:	bf00      	nop
 8008c04:	371c      	adds	r7, #28
 8008c06:	46bd      	mov	sp, r7
 8008c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0c:	4770      	bx	lr
	...

08008c10 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b085      	sub	sp, #20
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
 8008c18:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c20:	2b01      	cmp	r3, #1
 8008c22:	d101      	bne.n	8008c28 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c24:	2302      	movs	r3, #2
 8008c26:	e065      	b.n	8008cf4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	2201      	movs	r2, #1
 8008c2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	2202      	movs	r2, #2
 8008c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	681b      	ldr	r3, [r3, #0]
 8008c3c:	685b      	ldr	r3, [r3, #4]
 8008c3e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	681b      	ldr	r3, [r3, #0]
 8008c4c:	4a2c      	ldr	r2, [pc, #176]	; (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c4e:	4293      	cmp	r3, r2
 8008c50:	d004      	beq.n	8008c5c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	4a2b      	ldr	r2, [pc, #172]	; (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008c58:	4293      	cmp	r3, r2
 8008c5a:	d108      	bne.n	8008c6e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008c62:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008c64:	683b      	ldr	r3, [r7, #0]
 8008c66:	685b      	ldr	r3, [r3, #4]
 8008c68:	68fa      	ldr	r2, [r7, #12]
 8008c6a:	4313      	orrs	r3, r2
 8008c6c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008c6e:	68fb      	ldr	r3, [r7, #12]
 8008c70:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8008c74:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c78:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008c7a:	683b      	ldr	r3, [r7, #0]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	68fa      	ldr	r2, [r7, #12]
 8008c80:	4313      	orrs	r3, r2
 8008c82:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68fa      	ldr	r2, [r7, #12]
 8008c8a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	4a1b      	ldr	r2, [pc, #108]	; (8008d00 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008c92:	4293      	cmp	r3, r2
 8008c94:	d018      	beq.n	8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c9e:	d013      	beq.n	8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	4a18      	ldr	r2, [pc, #96]	; (8008d08 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8008ca6:	4293      	cmp	r3, r2
 8008ca8:	d00e      	beq.n	8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a17      	ldr	r2, [pc, #92]	; (8008d0c <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8008cb0:	4293      	cmp	r3, r2
 8008cb2:	d009      	beq.n	8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	681b      	ldr	r3, [r3, #0]
 8008cb8:	4a12      	ldr	r2, [pc, #72]	; (8008d04 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d004      	beq.n	8008cc8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	4a13      	ldr	r2, [pc, #76]	; (8008d10 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8008cc4:	4293      	cmp	r3, r2
 8008cc6:	d10c      	bne.n	8008ce2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008cc8:	68bb      	ldr	r3, [r7, #8]
 8008cca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008cce:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008cd0:	683b      	ldr	r3, [r7, #0]
 8008cd2:	689b      	ldr	r3, [r3, #8]
 8008cd4:	68ba      	ldr	r2, [r7, #8]
 8008cd6:	4313      	orrs	r3, r2
 8008cd8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	681b      	ldr	r3, [r3, #0]
 8008cde:	68ba      	ldr	r2, [r7, #8]
 8008ce0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	2201      	movs	r2, #1
 8008ce6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2200      	movs	r2, #0
 8008cee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008cf2:	2300      	movs	r3, #0
}
 8008cf4:	4618      	mov	r0, r3
 8008cf6:	3714      	adds	r7, #20
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr
 8008d00:	40012c00 	.word	0x40012c00
 8008d04:	40013400 	.word	0x40013400
 8008d08:	40000400 	.word	0x40000400
 8008d0c:	40000800 	.word	0x40000800
 8008d10:	40014000 	.word	0x40014000

08008d14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d14:	b480      	push	{r7}
 8008d16:	b083      	sub	sp, #12
 8008d18:	af00      	add	r7, sp, #0
 8008d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d1c:	bf00      	nop
 8008d1e:	370c      	adds	r7, #12
 8008d20:	46bd      	mov	sp, r7
 8008d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d26:	4770      	bx	lr

08008d28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d28:	b480      	push	{r7}
 8008d2a:	b083      	sub	sp, #12
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d30:	bf00      	nop
 8008d32:	370c      	adds	r7, #12
 8008d34:	46bd      	mov	sp, r7
 8008d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d3a:	4770      	bx	lr

08008d3c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008d3c:	b480      	push	{r7}
 8008d3e:	b083      	sub	sp, #12
 8008d40:	af00      	add	r7, sp, #0
 8008d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008d44:	bf00      	nop
 8008d46:	370c      	adds	r7, #12
 8008d48:	46bd      	mov	sp, r7
 8008d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d4e:	4770      	bx	lr

08008d50 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008d50:	b480      	push	{r7}
 8008d52:	b083      	sub	sp, #12
 8008d54:	af00      	add	r7, sp, #0
 8008d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008d58:	bf00      	nop
 8008d5a:	370c      	adds	r7, #12
 8008d5c:	46bd      	mov	sp, r7
 8008d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d62:	4770      	bx	lr

08008d64 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8008d64:	b480      	push	{r7}
 8008d66:	b083      	sub	sp, #12
 8008d68:	af00      	add	r7, sp, #0
 8008d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008d6c:	bf00      	nop
 8008d6e:	370c      	adds	r7, #12
 8008d70:	46bd      	mov	sp, r7
 8008d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d76:	4770      	bx	lr

08008d78 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d78:	b480      	push	{r7}
 8008d7a:	b083      	sub	sp, #12
 8008d7c:	af00      	add	r7, sp, #0
 8008d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008d80:	bf00      	nop
 8008d82:	370c      	adds	r7, #12
 8008d84:	46bd      	mov	sp, r7
 8008d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d8a:	4770      	bx	lr

08008d8c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008d8c:	b480      	push	{r7}
 8008d8e:	b083      	sub	sp, #12
 8008d90:	af00      	add	r7, sp, #0
 8008d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8008d94:	bf00      	nop
 8008d96:	370c      	adds	r7, #12
 8008d98:	46bd      	mov	sp, r7
 8008d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9e:	4770      	bx	lr

08008da0 <__errno>:
 8008da0:	4b01      	ldr	r3, [pc, #4]	; (8008da8 <__errno+0x8>)
 8008da2:	6818      	ldr	r0, [r3, #0]
 8008da4:	4770      	bx	lr
 8008da6:	bf00      	nop
 8008da8:	2000000c 	.word	0x2000000c

08008dac <__libc_init_array>:
 8008dac:	b570      	push	{r4, r5, r6, lr}
 8008dae:	4d0d      	ldr	r5, [pc, #52]	; (8008de4 <__libc_init_array+0x38>)
 8008db0:	4c0d      	ldr	r4, [pc, #52]	; (8008de8 <__libc_init_array+0x3c>)
 8008db2:	1b64      	subs	r4, r4, r5
 8008db4:	10a4      	asrs	r4, r4, #2
 8008db6:	2600      	movs	r6, #0
 8008db8:	42a6      	cmp	r6, r4
 8008dba:	d109      	bne.n	8008dd0 <__libc_init_array+0x24>
 8008dbc:	4d0b      	ldr	r5, [pc, #44]	; (8008dec <__libc_init_array+0x40>)
 8008dbe:	4c0c      	ldr	r4, [pc, #48]	; (8008df0 <__libc_init_array+0x44>)
 8008dc0:	f001 f978 	bl	800a0b4 <_init>
 8008dc4:	1b64      	subs	r4, r4, r5
 8008dc6:	10a4      	asrs	r4, r4, #2
 8008dc8:	2600      	movs	r6, #0
 8008dca:	42a6      	cmp	r6, r4
 8008dcc:	d105      	bne.n	8008dda <__libc_init_array+0x2e>
 8008dce:	bd70      	pop	{r4, r5, r6, pc}
 8008dd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dd4:	4798      	blx	r3
 8008dd6:	3601      	adds	r6, #1
 8008dd8:	e7ee      	b.n	8008db8 <__libc_init_array+0xc>
 8008dda:	f855 3b04 	ldr.w	r3, [r5], #4
 8008dde:	4798      	blx	r3
 8008de0:	3601      	adds	r6, #1
 8008de2:	e7f2      	b.n	8008dca <__libc_init_array+0x1e>
 8008de4:	0800a910 	.word	0x0800a910
 8008de8:	0800a910 	.word	0x0800a910
 8008dec:	0800a910 	.word	0x0800a910
 8008df0:	0800a914 	.word	0x0800a914

08008df4 <memset>:
 8008df4:	4402      	add	r2, r0
 8008df6:	4603      	mov	r3, r0
 8008df8:	4293      	cmp	r3, r2
 8008dfa:	d100      	bne.n	8008dfe <memset+0xa>
 8008dfc:	4770      	bx	lr
 8008dfe:	f803 1b01 	strb.w	r1, [r3], #1
 8008e02:	e7f9      	b.n	8008df8 <memset+0x4>

08008e04 <iprintf>:
 8008e04:	b40f      	push	{r0, r1, r2, r3}
 8008e06:	4b0a      	ldr	r3, [pc, #40]	; (8008e30 <iprintf+0x2c>)
 8008e08:	b513      	push	{r0, r1, r4, lr}
 8008e0a:	681c      	ldr	r4, [r3, #0]
 8008e0c:	b124      	cbz	r4, 8008e18 <iprintf+0x14>
 8008e0e:	69a3      	ldr	r3, [r4, #24]
 8008e10:	b913      	cbnz	r3, 8008e18 <iprintf+0x14>
 8008e12:	4620      	mov	r0, r4
 8008e14:	f000 fa74 	bl	8009300 <__sinit>
 8008e18:	ab05      	add	r3, sp, #20
 8008e1a:	9a04      	ldr	r2, [sp, #16]
 8008e1c:	68a1      	ldr	r1, [r4, #8]
 8008e1e:	9301      	str	r3, [sp, #4]
 8008e20:	4620      	mov	r0, r4
 8008e22:	f000 fc45 	bl	80096b0 <_vfiprintf_r>
 8008e26:	b002      	add	sp, #8
 8008e28:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e2c:	b004      	add	sp, #16
 8008e2e:	4770      	bx	lr
 8008e30:	2000000c 	.word	0x2000000c

08008e34 <putchar>:
 8008e34:	4b09      	ldr	r3, [pc, #36]	; (8008e5c <putchar+0x28>)
 8008e36:	b513      	push	{r0, r1, r4, lr}
 8008e38:	681c      	ldr	r4, [r3, #0]
 8008e3a:	4601      	mov	r1, r0
 8008e3c:	b134      	cbz	r4, 8008e4c <putchar+0x18>
 8008e3e:	69a3      	ldr	r3, [r4, #24]
 8008e40:	b923      	cbnz	r3, 8008e4c <putchar+0x18>
 8008e42:	9001      	str	r0, [sp, #4]
 8008e44:	4620      	mov	r0, r4
 8008e46:	f000 fa5b 	bl	8009300 <__sinit>
 8008e4a:	9901      	ldr	r1, [sp, #4]
 8008e4c:	68a2      	ldr	r2, [r4, #8]
 8008e4e:	4620      	mov	r0, r4
 8008e50:	b002      	add	sp, #8
 8008e52:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008e56:	f000 beef 	b.w	8009c38 <_putc_r>
 8008e5a:	bf00      	nop
 8008e5c:	2000000c 	.word	0x2000000c

08008e60 <_puts_r>:
 8008e60:	b570      	push	{r4, r5, r6, lr}
 8008e62:	460e      	mov	r6, r1
 8008e64:	4605      	mov	r5, r0
 8008e66:	b118      	cbz	r0, 8008e70 <_puts_r+0x10>
 8008e68:	6983      	ldr	r3, [r0, #24]
 8008e6a:	b90b      	cbnz	r3, 8008e70 <_puts_r+0x10>
 8008e6c:	f000 fa48 	bl	8009300 <__sinit>
 8008e70:	69ab      	ldr	r3, [r5, #24]
 8008e72:	68ac      	ldr	r4, [r5, #8]
 8008e74:	b913      	cbnz	r3, 8008e7c <_puts_r+0x1c>
 8008e76:	4628      	mov	r0, r5
 8008e78:	f000 fa42 	bl	8009300 <__sinit>
 8008e7c:	4b2c      	ldr	r3, [pc, #176]	; (8008f30 <_puts_r+0xd0>)
 8008e7e:	429c      	cmp	r4, r3
 8008e80:	d120      	bne.n	8008ec4 <_puts_r+0x64>
 8008e82:	686c      	ldr	r4, [r5, #4]
 8008e84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008e86:	07db      	lsls	r3, r3, #31
 8008e88:	d405      	bmi.n	8008e96 <_puts_r+0x36>
 8008e8a:	89a3      	ldrh	r3, [r4, #12]
 8008e8c:	0598      	lsls	r0, r3, #22
 8008e8e:	d402      	bmi.n	8008e96 <_puts_r+0x36>
 8008e90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008e92:	f000 fad3 	bl	800943c <__retarget_lock_acquire_recursive>
 8008e96:	89a3      	ldrh	r3, [r4, #12]
 8008e98:	0719      	lsls	r1, r3, #28
 8008e9a:	d51d      	bpl.n	8008ed8 <_puts_r+0x78>
 8008e9c:	6923      	ldr	r3, [r4, #16]
 8008e9e:	b1db      	cbz	r3, 8008ed8 <_puts_r+0x78>
 8008ea0:	3e01      	subs	r6, #1
 8008ea2:	68a3      	ldr	r3, [r4, #8]
 8008ea4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008ea8:	3b01      	subs	r3, #1
 8008eaa:	60a3      	str	r3, [r4, #8]
 8008eac:	bb39      	cbnz	r1, 8008efe <_puts_r+0x9e>
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	da38      	bge.n	8008f24 <_puts_r+0xc4>
 8008eb2:	4622      	mov	r2, r4
 8008eb4:	210a      	movs	r1, #10
 8008eb6:	4628      	mov	r0, r5
 8008eb8:	f000 f848 	bl	8008f4c <__swbuf_r>
 8008ebc:	3001      	adds	r0, #1
 8008ebe:	d011      	beq.n	8008ee4 <_puts_r+0x84>
 8008ec0:	250a      	movs	r5, #10
 8008ec2:	e011      	b.n	8008ee8 <_puts_r+0x88>
 8008ec4:	4b1b      	ldr	r3, [pc, #108]	; (8008f34 <_puts_r+0xd4>)
 8008ec6:	429c      	cmp	r4, r3
 8008ec8:	d101      	bne.n	8008ece <_puts_r+0x6e>
 8008eca:	68ac      	ldr	r4, [r5, #8]
 8008ecc:	e7da      	b.n	8008e84 <_puts_r+0x24>
 8008ece:	4b1a      	ldr	r3, [pc, #104]	; (8008f38 <_puts_r+0xd8>)
 8008ed0:	429c      	cmp	r4, r3
 8008ed2:	bf08      	it	eq
 8008ed4:	68ec      	ldreq	r4, [r5, #12]
 8008ed6:	e7d5      	b.n	8008e84 <_puts_r+0x24>
 8008ed8:	4621      	mov	r1, r4
 8008eda:	4628      	mov	r0, r5
 8008edc:	f000 f888 	bl	8008ff0 <__swsetup_r>
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	d0dd      	beq.n	8008ea0 <_puts_r+0x40>
 8008ee4:	f04f 35ff 	mov.w	r5, #4294967295
 8008ee8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008eea:	07da      	lsls	r2, r3, #31
 8008eec:	d405      	bmi.n	8008efa <_puts_r+0x9a>
 8008eee:	89a3      	ldrh	r3, [r4, #12]
 8008ef0:	059b      	lsls	r3, r3, #22
 8008ef2:	d402      	bmi.n	8008efa <_puts_r+0x9a>
 8008ef4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008ef6:	f000 faa2 	bl	800943e <__retarget_lock_release_recursive>
 8008efa:	4628      	mov	r0, r5
 8008efc:	bd70      	pop	{r4, r5, r6, pc}
 8008efe:	2b00      	cmp	r3, #0
 8008f00:	da04      	bge.n	8008f0c <_puts_r+0xac>
 8008f02:	69a2      	ldr	r2, [r4, #24]
 8008f04:	429a      	cmp	r2, r3
 8008f06:	dc06      	bgt.n	8008f16 <_puts_r+0xb6>
 8008f08:	290a      	cmp	r1, #10
 8008f0a:	d004      	beq.n	8008f16 <_puts_r+0xb6>
 8008f0c:	6823      	ldr	r3, [r4, #0]
 8008f0e:	1c5a      	adds	r2, r3, #1
 8008f10:	6022      	str	r2, [r4, #0]
 8008f12:	7019      	strb	r1, [r3, #0]
 8008f14:	e7c5      	b.n	8008ea2 <_puts_r+0x42>
 8008f16:	4622      	mov	r2, r4
 8008f18:	4628      	mov	r0, r5
 8008f1a:	f000 f817 	bl	8008f4c <__swbuf_r>
 8008f1e:	3001      	adds	r0, #1
 8008f20:	d1bf      	bne.n	8008ea2 <_puts_r+0x42>
 8008f22:	e7df      	b.n	8008ee4 <_puts_r+0x84>
 8008f24:	6823      	ldr	r3, [r4, #0]
 8008f26:	250a      	movs	r5, #10
 8008f28:	1c5a      	adds	r2, r3, #1
 8008f2a:	6022      	str	r2, [r4, #0]
 8008f2c:	701d      	strb	r5, [r3, #0]
 8008f2e:	e7db      	b.n	8008ee8 <_puts_r+0x88>
 8008f30:	0800a894 	.word	0x0800a894
 8008f34:	0800a8b4 	.word	0x0800a8b4
 8008f38:	0800a874 	.word	0x0800a874

08008f3c <puts>:
 8008f3c:	4b02      	ldr	r3, [pc, #8]	; (8008f48 <puts+0xc>)
 8008f3e:	4601      	mov	r1, r0
 8008f40:	6818      	ldr	r0, [r3, #0]
 8008f42:	f7ff bf8d 	b.w	8008e60 <_puts_r>
 8008f46:	bf00      	nop
 8008f48:	2000000c 	.word	0x2000000c

08008f4c <__swbuf_r>:
 8008f4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f4e:	460e      	mov	r6, r1
 8008f50:	4614      	mov	r4, r2
 8008f52:	4605      	mov	r5, r0
 8008f54:	b118      	cbz	r0, 8008f5e <__swbuf_r+0x12>
 8008f56:	6983      	ldr	r3, [r0, #24]
 8008f58:	b90b      	cbnz	r3, 8008f5e <__swbuf_r+0x12>
 8008f5a:	f000 f9d1 	bl	8009300 <__sinit>
 8008f5e:	4b21      	ldr	r3, [pc, #132]	; (8008fe4 <__swbuf_r+0x98>)
 8008f60:	429c      	cmp	r4, r3
 8008f62:	d12b      	bne.n	8008fbc <__swbuf_r+0x70>
 8008f64:	686c      	ldr	r4, [r5, #4]
 8008f66:	69a3      	ldr	r3, [r4, #24]
 8008f68:	60a3      	str	r3, [r4, #8]
 8008f6a:	89a3      	ldrh	r3, [r4, #12]
 8008f6c:	071a      	lsls	r2, r3, #28
 8008f6e:	d52f      	bpl.n	8008fd0 <__swbuf_r+0x84>
 8008f70:	6923      	ldr	r3, [r4, #16]
 8008f72:	b36b      	cbz	r3, 8008fd0 <__swbuf_r+0x84>
 8008f74:	6923      	ldr	r3, [r4, #16]
 8008f76:	6820      	ldr	r0, [r4, #0]
 8008f78:	1ac0      	subs	r0, r0, r3
 8008f7a:	6963      	ldr	r3, [r4, #20]
 8008f7c:	b2f6      	uxtb	r6, r6
 8008f7e:	4283      	cmp	r3, r0
 8008f80:	4637      	mov	r7, r6
 8008f82:	dc04      	bgt.n	8008f8e <__swbuf_r+0x42>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4628      	mov	r0, r5
 8008f88:	f000 f926 	bl	80091d8 <_fflush_r>
 8008f8c:	bb30      	cbnz	r0, 8008fdc <__swbuf_r+0x90>
 8008f8e:	68a3      	ldr	r3, [r4, #8]
 8008f90:	3b01      	subs	r3, #1
 8008f92:	60a3      	str	r3, [r4, #8]
 8008f94:	6823      	ldr	r3, [r4, #0]
 8008f96:	1c5a      	adds	r2, r3, #1
 8008f98:	6022      	str	r2, [r4, #0]
 8008f9a:	701e      	strb	r6, [r3, #0]
 8008f9c:	6963      	ldr	r3, [r4, #20]
 8008f9e:	3001      	adds	r0, #1
 8008fa0:	4283      	cmp	r3, r0
 8008fa2:	d004      	beq.n	8008fae <__swbuf_r+0x62>
 8008fa4:	89a3      	ldrh	r3, [r4, #12]
 8008fa6:	07db      	lsls	r3, r3, #31
 8008fa8:	d506      	bpl.n	8008fb8 <__swbuf_r+0x6c>
 8008faa:	2e0a      	cmp	r6, #10
 8008fac:	d104      	bne.n	8008fb8 <__swbuf_r+0x6c>
 8008fae:	4621      	mov	r1, r4
 8008fb0:	4628      	mov	r0, r5
 8008fb2:	f000 f911 	bl	80091d8 <_fflush_r>
 8008fb6:	b988      	cbnz	r0, 8008fdc <__swbuf_r+0x90>
 8008fb8:	4638      	mov	r0, r7
 8008fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fbc:	4b0a      	ldr	r3, [pc, #40]	; (8008fe8 <__swbuf_r+0x9c>)
 8008fbe:	429c      	cmp	r4, r3
 8008fc0:	d101      	bne.n	8008fc6 <__swbuf_r+0x7a>
 8008fc2:	68ac      	ldr	r4, [r5, #8]
 8008fc4:	e7cf      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fc6:	4b09      	ldr	r3, [pc, #36]	; (8008fec <__swbuf_r+0xa0>)
 8008fc8:	429c      	cmp	r4, r3
 8008fca:	bf08      	it	eq
 8008fcc:	68ec      	ldreq	r4, [r5, #12]
 8008fce:	e7ca      	b.n	8008f66 <__swbuf_r+0x1a>
 8008fd0:	4621      	mov	r1, r4
 8008fd2:	4628      	mov	r0, r5
 8008fd4:	f000 f80c 	bl	8008ff0 <__swsetup_r>
 8008fd8:	2800      	cmp	r0, #0
 8008fda:	d0cb      	beq.n	8008f74 <__swbuf_r+0x28>
 8008fdc:	f04f 37ff 	mov.w	r7, #4294967295
 8008fe0:	e7ea      	b.n	8008fb8 <__swbuf_r+0x6c>
 8008fe2:	bf00      	nop
 8008fe4:	0800a894 	.word	0x0800a894
 8008fe8:	0800a8b4 	.word	0x0800a8b4
 8008fec:	0800a874 	.word	0x0800a874

08008ff0 <__swsetup_r>:
 8008ff0:	4b32      	ldr	r3, [pc, #200]	; (80090bc <__swsetup_r+0xcc>)
 8008ff2:	b570      	push	{r4, r5, r6, lr}
 8008ff4:	681d      	ldr	r5, [r3, #0]
 8008ff6:	4606      	mov	r6, r0
 8008ff8:	460c      	mov	r4, r1
 8008ffa:	b125      	cbz	r5, 8009006 <__swsetup_r+0x16>
 8008ffc:	69ab      	ldr	r3, [r5, #24]
 8008ffe:	b913      	cbnz	r3, 8009006 <__swsetup_r+0x16>
 8009000:	4628      	mov	r0, r5
 8009002:	f000 f97d 	bl	8009300 <__sinit>
 8009006:	4b2e      	ldr	r3, [pc, #184]	; (80090c0 <__swsetup_r+0xd0>)
 8009008:	429c      	cmp	r4, r3
 800900a:	d10f      	bne.n	800902c <__swsetup_r+0x3c>
 800900c:	686c      	ldr	r4, [r5, #4]
 800900e:	89a3      	ldrh	r3, [r4, #12]
 8009010:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009014:	0719      	lsls	r1, r3, #28
 8009016:	d42c      	bmi.n	8009072 <__swsetup_r+0x82>
 8009018:	06dd      	lsls	r5, r3, #27
 800901a:	d411      	bmi.n	8009040 <__swsetup_r+0x50>
 800901c:	2309      	movs	r3, #9
 800901e:	6033      	str	r3, [r6, #0]
 8009020:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009024:	81a3      	strh	r3, [r4, #12]
 8009026:	f04f 30ff 	mov.w	r0, #4294967295
 800902a:	e03e      	b.n	80090aa <__swsetup_r+0xba>
 800902c:	4b25      	ldr	r3, [pc, #148]	; (80090c4 <__swsetup_r+0xd4>)
 800902e:	429c      	cmp	r4, r3
 8009030:	d101      	bne.n	8009036 <__swsetup_r+0x46>
 8009032:	68ac      	ldr	r4, [r5, #8]
 8009034:	e7eb      	b.n	800900e <__swsetup_r+0x1e>
 8009036:	4b24      	ldr	r3, [pc, #144]	; (80090c8 <__swsetup_r+0xd8>)
 8009038:	429c      	cmp	r4, r3
 800903a:	bf08      	it	eq
 800903c:	68ec      	ldreq	r4, [r5, #12]
 800903e:	e7e6      	b.n	800900e <__swsetup_r+0x1e>
 8009040:	0758      	lsls	r0, r3, #29
 8009042:	d512      	bpl.n	800906a <__swsetup_r+0x7a>
 8009044:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8009046:	b141      	cbz	r1, 800905a <__swsetup_r+0x6a>
 8009048:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800904c:	4299      	cmp	r1, r3
 800904e:	d002      	beq.n	8009056 <__swsetup_r+0x66>
 8009050:	4630      	mov	r0, r6
 8009052:	f000 fa59 	bl	8009508 <_free_r>
 8009056:	2300      	movs	r3, #0
 8009058:	6363      	str	r3, [r4, #52]	; 0x34
 800905a:	89a3      	ldrh	r3, [r4, #12]
 800905c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8009060:	81a3      	strh	r3, [r4, #12]
 8009062:	2300      	movs	r3, #0
 8009064:	6063      	str	r3, [r4, #4]
 8009066:	6923      	ldr	r3, [r4, #16]
 8009068:	6023      	str	r3, [r4, #0]
 800906a:	89a3      	ldrh	r3, [r4, #12]
 800906c:	f043 0308 	orr.w	r3, r3, #8
 8009070:	81a3      	strh	r3, [r4, #12]
 8009072:	6923      	ldr	r3, [r4, #16]
 8009074:	b94b      	cbnz	r3, 800908a <__swsetup_r+0x9a>
 8009076:	89a3      	ldrh	r3, [r4, #12]
 8009078:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800907c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009080:	d003      	beq.n	800908a <__swsetup_r+0x9a>
 8009082:	4621      	mov	r1, r4
 8009084:	4630      	mov	r0, r6
 8009086:	f000 f9ff 	bl	8009488 <__smakebuf_r>
 800908a:	89a0      	ldrh	r0, [r4, #12]
 800908c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009090:	f010 0301 	ands.w	r3, r0, #1
 8009094:	d00a      	beq.n	80090ac <__swsetup_r+0xbc>
 8009096:	2300      	movs	r3, #0
 8009098:	60a3      	str	r3, [r4, #8]
 800909a:	6963      	ldr	r3, [r4, #20]
 800909c:	425b      	negs	r3, r3
 800909e:	61a3      	str	r3, [r4, #24]
 80090a0:	6923      	ldr	r3, [r4, #16]
 80090a2:	b943      	cbnz	r3, 80090b6 <__swsetup_r+0xc6>
 80090a4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090a8:	d1ba      	bne.n	8009020 <__swsetup_r+0x30>
 80090aa:	bd70      	pop	{r4, r5, r6, pc}
 80090ac:	0781      	lsls	r1, r0, #30
 80090ae:	bf58      	it	pl
 80090b0:	6963      	ldrpl	r3, [r4, #20]
 80090b2:	60a3      	str	r3, [r4, #8]
 80090b4:	e7f4      	b.n	80090a0 <__swsetup_r+0xb0>
 80090b6:	2000      	movs	r0, #0
 80090b8:	e7f7      	b.n	80090aa <__swsetup_r+0xba>
 80090ba:	bf00      	nop
 80090bc:	2000000c 	.word	0x2000000c
 80090c0:	0800a894 	.word	0x0800a894
 80090c4:	0800a8b4 	.word	0x0800a8b4
 80090c8:	0800a874 	.word	0x0800a874

080090cc <__sflush_r>:
 80090cc:	898a      	ldrh	r2, [r1, #12]
 80090ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	0710      	lsls	r0, r2, #28
 80090d6:	460c      	mov	r4, r1
 80090d8:	d458      	bmi.n	800918c <__sflush_r+0xc0>
 80090da:	684b      	ldr	r3, [r1, #4]
 80090dc:	2b00      	cmp	r3, #0
 80090de:	dc05      	bgt.n	80090ec <__sflush_r+0x20>
 80090e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	dc02      	bgt.n	80090ec <__sflush_r+0x20>
 80090e6:	2000      	movs	r0, #0
 80090e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80090ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80090ee:	2e00      	cmp	r6, #0
 80090f0:	d0f9      	beq.n	80090e6 <__sflush_r+0x1a>
 80090f2:	2300      	movs	r3, #0
 80090f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80090f8:	682f      	ldr	r7, [r5, #0]
 80090fa:	602b      	str	r3, [r5, #0]
 80090fc:	d032      	beq.n	8009164 <__sflush_r+0x98>
 80090fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009100:	89a3      	ldrh	r3, [r4, #12]
 8009102:	075a      	lsls	r2, r3, #29
 8009104:	d505      	bpl.n	8009112 <__sflush_r+0x46>
 8009106:	6863      	ldr	r3, [r4, #4]
 8009108:	1ac0      	subs	r0, r0, r3
 800910a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800910c:	b10b      	cbz	r3, 8009112 <__sflush_r+0x46>
 800910e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009110:	1ac0      	subs	r0, r0, r3
 8009112:	2300      	movs	r3, #0
 8009114:	4602      	mov	r2, r0
 8009116:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009118:	6a21      	ldr	r1, [r4, #32]
 800911a:	4628      	mov	r0, r5
 800911c:	47b0      	blx	r6
 800911e:	1c43      	adds	r3, r0, #1
 8009120:	89a3      	ldrh	r3, [r4, #12]
 8009122:	d106      	bne.n	8009132 <__sflush_r+0x66>
 8009124:	6829      	ldr	r1, [r5, #0]
 8009126:	291d      	cmp	r1, #29
 8009128:	d82c      	bhi.n	8009184 <__sflush_r+0xb8>
 800912a:	4a2a      	ldr	r2, [pc, #168]	; (80091d4 <__sflush_r+0x108>)
 800912c:	40ca      	lsrs	r2, r1
 800912e:	07d6      	lsls	r6, r2, #31
 8009130:	d528      	bpl.n	8009184 <__sflush_r+0xb8>
 8009132:	2200      	movs	r2, #0
 8009134:	6062      	str	r2, [r4, #4]
 8009136:	04d9      	lsls	r1, r3, #19
 8009138:	6922      	ldr	r2, [r4, #16]
 800913a:	6022      	str	r2, [r4, #0]
 800913c:	d504      	bpl.n	8009148 <__sflush_r+0x7c>
 800913e:	1c42      	adds	r2, r0, #1
 8009140:	d101      	bne.n	8009146 <__sflush_r+0x7a>
 8009142:	682b      	ldr	r3, [r5, #0]
 8009144:	b903      	cbnz	r3, 8009148 <__sflush_r+0x7c>
 8009146:	6560      	str	r0, [r4, #84]	; 0x54
 8009148:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800914a:	602f      	str	r7, [r5, #0]
 800914c:	2900      	cmp	r1, #0
 800914e:	d0ca      	beq.n	80090e6 <__sflush_r+0x1a>
 8009150:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009154:	4299      	cmp	r1, r3
 8009156:	d002      	beq.n	800915e <__sflush_r+0x92>
 8009158:	4628      	mov	r0, r5
 800915a:	f000 f9d5 	bl	8009508 <_free_r>
 800915e:	2000      	movs	r0, #0
 8009160:	6360      	str	r0, [r4, #52]	; 0x34
 8009162:	e7c1      	b.n	80090e8 <__sflush_r+0x1c>
 8009164:	6a21      	ldr	r1, [r4, #32]
 8009166:	2301      	movs	r3, #1
 8009168:	4628      	mov	r0, r5
 800916a:	47b0      	blx	r6
 800916c:	1c41      	adds	r1, r0, #1
 800916e:	d1c7      	bne.n	8009100 <__sflush_r+0x34>
 8009170:	682b      	ldr	r3, [r5, #0]
 8009172:	2b00      	cmp	r3, #0
 8009174:	d0c4      	beq.n	8009100 <__sflush_r+0x34>
 8009176:	2b1d      	cmp	r3, #29
 8009178:	d001      	beq.n	800917e <__sflush_r+0xb2>
 800917a:	2b16      	cmp	r3, #22
 800917c:	d101      	bne.n	8009182 <__sflush_r+0xb6>
 800917e:	602f      	str	r7, [r5, #0]
 8009180:	e7b1      	b.n	80090e6 <__sflush_r+0x1a>
 8009182:	89a3      	ldrh	r3, [r4, #12]
 8009184:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009188:	81a3      	strh	r3, [r4, #12]
 800918a:	e7ad      	b.n	80090e8 <__sflush_r+0x1c>
 800918c:	690f      	ldr	r7, [r1, #16]
 800918e:	2f00      	cmp	r7, #0
 8009190:	d0a9      	beq.n	80090e6 <__sflush_r+0x1a>
 8009192:	0793      	lsls	r3, r2, #30
 8009194:	680e      	ldr	r6, [r1, #0]
 8009196:	bf08      	it	eq
 8009198:	694b      	ldreq	r3, [r1, #20]
 800919a:	600f      	str	r7, [r1, #0]
 800919c:	bf18      	it	ne
 800919e:	2300      	movne	r3, #0
 80091a0:	eba6 0807 	sub.w	r8, r6, r7
 80091a4:	608b      	str	r3, [r1, #8]
 80091a6:	f1b8 0f00 	cmp.w	r8, #0
 80091aa:	dd9c      	ble.n	80090e6 <__sflush_r+0x1a>
 80091ac:	6a21      	ldr	r1, [r4, #32]
 80091ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80091b0:	4643      	mov	r3, r8
 80091b2:	463a      	mov	r2, r7
 80091b4:	4628      	mov	r0, r5
 80091b6:	47b0      	blx	r6
 80091b8:	2800      	cmp	r0, #0
 80091ba:	dc06      	bgt.n	80091ca <__sflush_r+0xfe>
 80091bc:	89a3      	ldrh	r3, [r4, #12]
 80091be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091c2:	81a3      	strh	r3, [r4, #12]
 80091c4:	f04f 30ff 	mov.w	r0, #4294967295
 80091c8:	e78e      	b.n	80090e8 <__sflush_r+0x1c>
 80091ca:	4407      	add	r7, r0
 80091cc:	eba8 0800 	sub.w	r8, r8, r0
 80091d0:	e7e9      	b.n	80091a6 <__sflush_r+0xda>
 80091d2:	bf00      	nop
 80091d4:	20400001 	.word	0x20400001

080091d8 <_fflush_r>:
 80091d8:	b538      	push	{r3, r4, r5, lr}
 80091da:	690b      	ldr	r3, [r1, #16]
 80091dc:	4605      	mov	r5, r0
 80091de:	460c      	mov	r4, r1
 80091e0:	b913      	cbnz	r3, 80091e8 <_fflush_r+0x10>
 80091e2:	2500      	movs	r5, #0
 80091e4:	4628      	mov	r0, r5
 80091e6:	bd38      	pop	{r3, r4, r5, pc}
 80091e8:	b118      	cbz	r0, 80091f2 <_fflush_r+0x1a>
 80091ea:	6983      	ldr	r3, [r0, #24]
 80091ec:	b90b      	cbnz	r3, 80091f2 <_fflush_r+0x1a>
 80091ee:	f000 f887 	bl	8009300 <__sinit>
 80091f2:	4b14      	ldr	r3, [pc, #80]	; (8009244 <_fflush_r+0x6c>)
 80091f4:	429c      	cmp	r4, r3
 80091f6:	d11b      	bne.n	8009230 <_fflush_r+0x58>
 80091f8:	686c      	ldr	r4, [r5, #4]
 80091fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80091fe:	2b00      	cmp	r3, #0
 8009200:	d0ef      	beq.n	80091e2 <_fflush_r+0xa>
 8009202:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009204:	07d0      	lsls	r0, r2, #31
 8009206:	d404      	bmi.n	8009212 <_fflush_r+0x3a>
 8009208:	0599      	lsls	r1, r3, #22
 800920a:	d402      	bmi.n	8009212 <_fflush_r+0x3a>
 800920c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800920e:	f000 f915 	bl	800943c <__retarget_lock_acquire_recursive>
 8009212:	4628      	mov	r0, r5
 8009214:	4621      	mov	r1, r4
 8009216:	f7ff ff59 	bl	80090cc <__sflush_r>
 800921a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800921c:	07da      	lsls	r2, r3, #31
 800921e:	4605      	mov	r5, r0
 8009220:	d4e0      	bmi.n	80091e4 <_fflush_r+0xc>
 8009222:	89a3      	ldrh	r3, [r4, #12]
 8009224:	059b      	lsls	r3, r3, #22
 8009226:	d4dd      	bmi.n	80091e4 <_fflush_r+0xc>
 8009228:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800922a:	f000 f908 	bl	800943e <__retarget_lock_release_recursive>
 800922e:	e7d9      	b.n	80091e4 <_fflush_r+0xc>
 8009230:	4b05      	ldr	r3, [pc, #20]	; (8009248 <_fflush_r+0x70>)
 8009232:	429c      	cmp	r4, r3
 8009234:	d101      	bne.n	800923a <_fflush_r+0x62>
 8009236:	68ac      	ldr	r4, [r5, #8]
 8009238:	e7df      	b.n	80091fa <_fflush_r+0x22>
 800923a:	4b04      	ldr	r3, [pc, #16]	; (800924c <_fflush_r+0x74>)
 800923c:	429c      	cmp	r4, r3
 800923e:	bf08      	it	eq
 8009240:	68ec      	ldreq	r4, [r5, #12]
 8009242:	e7da      	b.n	80091fa <_fflush_r+0x22>
 8009244:	0800a894 	.word	0x0800a894
 8009248:	0800a8b4 	.word	0x0800a8b4
 800924c:	0800a874 	.word	0x0800a874

08009250 <std>:
 8009250:	2300      	movs	r3, #0
 8009252:	b510      	push	{r4, lr}
 8009254:	4604      	mov	r4, r0
 8009256:	e9c0 3300 	strd	r3, r3, [r0]
 800925a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800925e:	6083      	str	r3, [r0, #8]
 8009260:	8181      	strh	r1, [r0, #12]
 8009262:	6643      	str	r3, [r0, #100]	; 0x64
 8009264:	81c2      	strh	r2, [r0, #14]
 8009266:	6183      	str	r3, [r0, #24]
 8009268:	4619      	mov	r1, r3
 800926a:	2208      	movs	r2, #8
 800926c:	305c      	adds	r0, #92	; 0x5c
 800926e:	f7ff fdc1 	bl	8008df4 <memset>
 8009272:	4b05      	ldr	r3, [pc, #20]	; (8009288 <std+0x38>)
 8009274:	6263      	str	r3, [r4, #36]	; 0x24
 8009276:	4b05      	ldr	r3, [pc, #20]	; (800928c <std+0x3c>)
 8009278:	62a3      	str	r3, [r4, #40]	; 0x28
 800927a:	4b05      	ldr	r3, [pc, #20]	; (8009290 <std+0x40>)
 800927c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800927e:	4b05      	ldr	r3, [pc, #20]	; (8009294 <std+0x44>)
 8009280:	6224      	str	r4, [r4, #32]
 8009282:	6323      	str	r3, [r4, #48]	; 0x30
 8009284:	bd10      	pop	{r4, pc}
 8009286:	bf00      	nop
 8009288:	08009ce9 	.word	0x08009ce9
 800928c:	08009d0b 	.word	0x08009d0b
 8009290:	08009d43 	.word	0x08009d43
 8009294:	08009d67 	.word	0x08009d67

08009298 <_cleanup_r>:
 8009298:	4901      	ldr	r1, [pc, #4]	; (80092a0 <_cleanup_r+0x8>)
 800929a:	f000 b8af 	b.w	80093fc <_fwalk_reent>
 800929e:	bf00      	nop
 80092a0:	080091d9 	.word	0x080091d9

080092a4 <__sfmoreglue>:
 80092a4:	b570      	push	{r4, r5, r6, lr}
 80092a6:	1e4a      	subs	r2, r1, #1
 80092a8:	2568      	movs	r5, #104	; 0x68
 80092aa:	4355      	muls	r5, r2
 80092ac:	460e      	mov	r6, r1
 80092ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80092b2:	f000 f979 	bl	80095a8 <_malloc_r>
 80092b6:	4604      	mov	r4, r0
 80092b8:	b140      	cbz	r0, 80092cc <__sfmoreglue+0x28>
 80092ba:	2100      	movs	r1, #0
 80092bc:	e9c0 1600 	strd	r1, r6, [r0]
 80092c0:	300c      	adds	r0, #12
 80092c2:	60a0      	str	r0, [r4, #8]
 80092c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80092c8:	f7ff fd94 	bl	8008df4 <memset>
 80092cc:	4620      	mov	r0, r4
 80092ce:	bd70      	pop	{r4, r5, r6, pc}

080092d0 <__sfp_lock_acquire>:
 80092d0:	4801      	ldr	r0, [pc, #4]	; (80092d8 <__sfp_lock_acquire+0x8>)
 80092d2:	f000 b8b3 	b.w	800943c <__retarget_lock_acquire_recursive>
 80092d6:	bf00      	nop
 80092d8:	200004c0 	.word	0x200004c0

080092dc <__sfp_lock_release>:
 80092dc:	4801      	ldr	r0, [pc, #4]	; (80092e4 <__sfp_lock_release+0x8>)
 80092de:	f000 b8ae 	b.w	800943e <__retarget_lock_release_recursive>
 80092e2:	bf00      	nop
 80092e4:	200004c0 	.word	0x200004c0

080092e8 <__sinit_lock_acquire>:
 80092e8:	4801      	ldr	r0, [pc, #4]	; (80092f0 <__sinit_lock_acquire+0x8>)
 80092ea:	f000 b8a7 	b.w	800943c <__retarget_lock_acquire_recursive>
 80092ee:	bf00      	nop
 80092f0:	200004bb 	.word	0x200004bb

080092f4 <__sinit_lock_release>:
 80092f4:	4801      	ldr	r0, [pc, #4]	; (80092fc <__sinit_lock_release+0x8>)
 80092f6:	f000 b8a2 	b.w	800943e <__retarget_lock_release_recursive>
 80092fa:	bf00      	nop
 80092fc:	200004bb 	.word	0x200004bb

08009300 <__sinit>:
 8009300:	b510      	push	{r4, lr}
 8009302:	4604      	mov	r4, r0
 8009304:	f7ff fff0 	bl	80092e8 <__sinit_lock_acquire>
 8009308:	69a3      	ldr	r3, [r4, #24]
 800930a:	b11b      	cbz	r3, 8009314 <__sinit+0x14>
 800930c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009310:	f7ff bff0 	b.w	80092f4 <__sinit_lock_release>
 8009314:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8009318:	6523      	str	r3, [r4, #80]	; 0x50
 800931a:	4b13      	ldr	r3, [pc, #76]	; (8009368 <__sinit+0x68>)
 800931c:	4a13      	ldr	r2, [pc, #76]	; (800936c <__sinit+0x6c>)
 800931e:	681b      	ldr	r3, [r3, #0]
 8009320:	62a2      	str	r2, [r4, #40]	; 0x28
 8009322:	42a3      	cmp	r3, r4
 8009324:	bf04      	itt	eq
 8009326:	2301      	moveq	r3, #1
 8009328:	61a3      	streq	r3, [r4, #24]
 800932a:	4620      	mov	r0, r4
 800932c:	f000 f820 	bl	8009370 <__sfp>
 8009330:	6060      	str	r0, [r4, #4]
 8009332:	4620      	mov	r0, r4
 8009334:	f000 f81c 	bl	8009370 <__sfp>
 8009338:	60a0      	str	r0, [r4, #8]
 800933a:	4620      	mov	r0, r4
 800933c:	f000 f818 	bl	8009370 <__sfp>
 8009340:	2200      	movs	r2, #0
 8009342:	60e0      	str	r0, [r4, #12]
 8009344:	2104      	movs	r1, #4
 8009346:	6860      	ldr	r0, [r4, #4]
 8009348:	f7ff ff82 	bl	8009250 <std>
 800934c:	68a0      	ldr	r0, [r4, #8]
 800934e:	2201      	movs	r2, #1
 8009350:	2109      	movs	r1, #9
 8009352:	f7ff ff7d 	bl	8009250 <std>
 8009356:	68e0      	ldr	r0, [r4, #12]
 8009358:	2202      	movs	r2, #2
 800935a:	2112      	movs	r1, #18
 800935c:	f7ff ff78 	bl	8009250 <std>
 8009360:	2301      	movs	r3, #1
 8009362:	61a3      	str	r3, [r4, #24]
 8009364:	e7d2      	b.n	800930c <__sinit+0xc>
 8009366:	bf00      	nop
 8009368:	0800a870 	.word	0x0800a870
 800936c:	08009299 	.word	0x08009299

08009370 <__sfp>:
 8009370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009372:	4607      	mov	r7, r0
 8009374:	f7ff ffac 	bl	80092d0 <__sfp_lock_acquire>
 8009378:	4b1e      	ldr	r3, [pc, #120]	; (80093f4 <__sfp+0x84>)
 800937a:	681e      	ldr	r6, [r3, #0]
 800937c:	69b3      	ldr	r3, [r6, #24]
 800937e:	b913      	cbnz	r3, 8009386 <__sfp+0x16>
 8009380:	4630      	mov	r0, r6
 8009382:	f7ff ffbd 	bl	8009300 <__sinit>
 8009386:	3648      	adds	r6, #72	; 0x48
 8009388:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800938c:	3b01      	subs	r3, #1
 800938e:	d503      	bpl.n	8009398 <__sfp+0x28>
 8009390:	6833      	ldr	r3, [r6, #0]
 8009392:	b30b      	cbz	r3, 80093d8 <__sfp+0x68>
 8009394:	6836      	ldr	r6, [r6, #0]
 8009396:	e7f7      	b.n	8009388 <__sfp+0x18>
 8009398:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800939c:	b9d5      	cbnz	r5, 80093d4 <__sfp+0x64>
 800939e:	4b16      	ldr	r3, [pc, #88]	; (80093f8 <__sfp+0x88>)
 80093a0:	60e3      	str	r3, [r4, #12]
 80093a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80093a6:	6665      	str	r5, [r4, #100]	; 0x64
 80093a8:	f000 f847 	bl	800943a <__retarget_lock_init_recursive>
 80093ac:	f7ff ff96 	bl	80092dc <__sfp_lock_release>
 80093b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80093b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80093b8:	6025      	str	r5, [r4, #0]
 80093ba:	61a5      	str	r5, [r4, #24]
 80093bc:	2208      	movs	r2, #8
 80093be:	4629      	mov	r1, r5
 80093c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80093c4:	f7ff fd16 	bl	8008df4 <memset>
 80093c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80093cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80093d0:	4620      	mov	r0, r4
 80093d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80093d4:	3468      	adds	r4, #104	; 0x68
 80093d6:	e7d9      	b.n	800938c <__sfp+0x1c>
 80093d8:	2104      	movs	r1, #4
 80093da:	4638      	mov	r0, r7
 80093dc:	f7ff ff62 	bl	80092a4 <__sfmoreglue>
 80093e0:	4604      	mov	r4, r0
 80093e2:	6030      	str	r0, [r6, #0]
 80093e4:	2800      	cmp	r0, #0
 80093e6:	d1d5      	bne.n	8009394 <__sfp+0x24>
 80093e8:	f7ff ff78 	bl	80092dc <__sfp_lock_release>
 80093ec:	230c      	movs	r3, #12
 80093ee:	603b      	str	r3, [r7, #0]
 80093f0:	e7ee      	b.n	80093d0 <__sfp+0x60>
 80093f2:	bf00      	nop
 80093f4:	0800a870 	.word	0x0800a870
 80093f8:	ffff0001 	.word	0xffff0001

080093fc <_fwalk_reent>:
 80093fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009400:	4606      	mov	r6, r0
 8009402:	4688      	mov	r8, r1
 8009404:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8009408:	2700      	movs	r7, #0
 800940a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800940e:	f1b9 0901 	subs.w	r9, r9, #1
 8009412:	d505      	bpl.n	8009420 <_fwalk_reent+0x24>
 8009414:	6824      	ldr	r4, [r4, #0]
 8009416:	2c00      	cmp	r4, #0
 8009418:	d1f7      	bne.n	800940a <_fwalk_reent+0xe>
 800941a:	4638      	mov	r0, r7
 800941c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009420:	89ab      	ldrh	r3, [r5, #12]
 8009422:	2b01      	cmp	r3, #1
 8009424:	d907      	bls.n	8009436 <_fwalk_reent+0x3a>
 8009426:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800942a:	3301      	adds	r3, #1
 800942c:	d003      	beq.n	8009436 <_fwalk_reent+0x3a>
 800942e:	4629      	mov	r1, r5
 8009430:	4630      	mov	r0, r6
 8009432:	47c0      	blx	r8
 8009434:	4307      	orrs	r7, r0
 8009436:	3568      	adds	r5, #104	; 0x68
 8009438:	e7e9      	b.n	800940e <_fwalk_reent+0x12>

0800943a <__retarget_lock_init_recursive>:
 800943a:	4770      	bx	lr

0800943c <__retarget_lock_acquire_recursive>:
 800943c:	4770      	bx	lr

0800943e <__retarget_lock_release_recursive>:
 800943e:	4770      	bx	lr

08009440 <__swhatbuf_r>:
 8009440:	b570      	push	{r4, r5, r6, lr}
 8009442:	460e      	mov	r6, r1
 8009444:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009448:	2900      	cmp	r1, #0
 800944a:	b096      	sub	sp, #88	; 0x58
 800944c:	4614      	mov	r4, r2
 800944e:	461d      	mov	r5, r3
 8009450:	da07      	bge.n	8009462 <__swhatbuf_r+0x22>
 8009452:	2300      	movs	r3, #0
 8009454:	602b      	str	r3, [r5, #0]
 8009456:	89b3      	ldrh	r3, [r6, #12]
 8009458:	061a      	lsls	r2, r3, #24
 800945a:	d410      	bmi.n	800947e <__swhatbuf_r+0x3e>
 800945c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009460:	e00e      	b.n	8009480 <__swhatbuf_r+0x40>
 8009462:	466a      	mov	r2, sp
 8009464:	f000 fca6 	bl	8009db4 <_fstat_r>
 8009468:	2800      	cmp	r0, #0
 800946a:	dbf2      	blt.n	8009452 <__swhatbuf_r+0x12>
 800946c:	9a01      	ldr	r2, [sp, #4]
 800946e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009472:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009476:	425a      	negs	r2, r3
 8009478:	415a      	adcs	r2, r3
 800947a:	602a      	str	r2, [r5, #0]
 800947c:	e7ee      	b.n	800945c <__swhatbuf_r+0x1c>
 800947e:	2340      	movs	r3, #64	; 0x40
 8009480:	2000      	movs	r0, #0
 8009482:	6023      	str	r3, [r4, #0]
 8009484:	b016      	add	sp, #88	; 0x58
 8009486:	bd70      	pop	{r4, r5, r6, pc}

08009488 <__smakebuf_r>:
 8009488:	898b      	ldrh	r3, [r1, #12]
 800948a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800948c:	079d      	lsls	r5, r3, #30
 800948e:	4606      	mov	r6, r0
 8009490:	460c      	mov	r4, r1
 8009492:	d507      	bpl.n	80094a4 <__smakebuf_r+0x1c>
 8009494:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009498:	6023      	str	r3, [r4, #0]
 800949a:	6123      	str	r3, [r4, #16]
 800949c:	2301      	movs	r3, #1
 800949e:	6163      	str	r3, [r4, #20]
 80094a0:	b002      	add	sp, #8
 80094a2:	bd70      	pop	{r4, r5, r6, pc}
 80094a4:	ab01      	add	r3, sp, #4
 80094a6:	466a      	mov	r2, sp
 80094a8:	f7ff ffca 	bl	8009440 <__swhatbuf_r>
 80094ac:	9900      	ldr	r1, [sp, #0]
 80094ae:	4605      	mov	r5, r0
 80094b0:	4630      	mov	r0, r6
 80094b2:	f000 f879 	bl	80095a8 <_malloc_r>
 80094b6:	b948      	cbnz	r0, 80094cc <__smakebuf_r+0x44>
 80094b8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80094bc:	059a      	lsls	r2, r3, #22
 80094be:	d4ef      	bmi.n	80094a0 <__smakebuf_r+0x18>
 80094c0:	f023 0303 	bic.w	r3, r3, #3
 80094c4:	f043 0302 	orr.w	r3, r3, #2
 80094c8:	81a3      	strh	r3, [r4, #12]
 80094ca:	e7e3      	b.n	8009494 <__smakebuf_r+0xc>
 80094cc:	4b0d      	ldr	r3, [pc, #52]	; (8009504 <__smakebuf_r+0x7c>)
 80094ce:	62b3      	str	r3, [r6, #40]	; 0x28
 80094d0:	89a3      	ldrh	r3, [r4, #12]
 80094d2:	6020      	str	r0, [r4, #0]
 80094d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d8:	81a3      	strh	r3, [r4, #12]
 80094da:	9b00      	ldr	r3, [sp, #0]
 80094dc:	6163      	str	r3, [r4, #20]
 80094de:	9b01      	ldr	r3, [sp, #4]
 80094e0:	6120      	str	r0, [r4, #16]
 80094e2:	b15b      	cbz	r3, 80094fc <__smakebuf_r+0x74>
 80094e4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80094e8:	4630      	mov	r0, r6
 80094ea:	f000 fc75 	bl	8009dd8 <_isatty_r>
 80094ee:	b128      	cbz	r0, 80094fc <__smakebuf_r+0x74>
 80094f0:	89a3      	ldrh	r3, [r4, #12]
 80094f2:	f023 0303 	bic.w	r3, r3, #3
 80094f6:	f043 0301 	orr.w	r3, r3, #1
 80094fa:	81a3      	strh	r3, [r4, #12]
 80094fc:	89a0      	ldrh	r0, [r4, #12]
 80094fe:	4305      	orrs	r5, r0
 8009500:	81a5      	strh	r5, [r4, #12]
 8009502:	e7cd      	b.n	80094a0 <__smakebuf_r+0x18>
 8009504:	08009299 	.word	0x08009299

08009508 <_free_r>:
 8009508:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800950a:	2900      	cmp	r1, #0
 800950c:	d048      	beq.n	80095a0 <_free_r+0x98>
 800950e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009512:	9001      	str	r0, [sp, #4]
 8009514:	2b00      	cmp	r3, #0
 8009516:	f1a1 0404 	sub.w	r4, r1, #4
 800951a:	bfb8      	it	lt
 800951c:	18e4      	addlt	r4, r4, r3
 800951e:	f000 fc7d 	bl	8009e1c <__malloc_lock>
 8009522:	4a20      	ldr	r2, [pc, #128]	; (80095a4 <_free_r+0x9c>)
 8009524:	9801      	ldr	r0, [sp, #4]
 8009526:	6813      	ldr	r3, [r2, #0]
 8009528:	4615      	mov	r5, r2
 800952a:	b933      	cbnz	r3, 800953a <_free_r+0x32>
 800952c:	6063      	str	r3, [r4, #4]
 800952e:	6014      	str	r4, [r2, #0]
 8009530:	b003      	add	sp, #12
 8009532:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009536:	f000 bc77 	b.w	8009e28 <__malloc_unlock>
 800953a:	42a3      	cmp	r3, r4
 800953c:	d90b      	bls.n	8009556 <_free_r+0x4e>
 800953e:	6821      	ldr	r1, [r4, #0]
 8009540:	1862      	adds	r2, r4, r1
 8009542:	4293      	cmp	r3, r2
 8009544:	bf04      	itt	eq
 8009546:	681a      	ldreq	r2, [r3, #0]
 8009548:	685b      	ldreq	r3, [r3, #4]
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	bf04      	itt	eq
 800954e:	1852      	addeq	r2, r2, r1
 8009550:	6022      	streq	r2, [r4, #0]
 8009552:	602c      	str	r4, [r5, #0]
 8009554:	e7ec      	b.n	8009530 <_free_r+0x28>
 8009556:	461a      	mov	r2, r3
 8009558:	685b      	ldr	r3, [r3, #4]
 800955a:	b10b      	cbz	r3, 8009560 <_free_r+0x58>
 800955c:	42a3      	cmp	r3, r4
 800955e:	d9fa      	bls.n	8009556 <_free_r+0x4e>
 8009560:	6811      	ldr	r1, [r2, #0]
 8009562:	1855      	adds	r5, r2, r1
 8009564:	42a5      	cmp	r5, r4
 8009566:	d10b      	bne.n	8009580 <_free_r+0x78>
 8009568:	6824      	ldr	r4, [r4, #0]
 800956a:	4421      	add	r1, r4
 800956c:	1854      	adds	r4, r2, r1
 800956e:	42a3      	cmp	r3, r4
 8009570:	6011      	str	r1, [r2, #0]
 8009572:	d1dd      	bne.n	8009530 <_free_r+0x28>
 8009574:	681c      	ldr	r4, [r3, #0]
 8009576:	685b      	ldr	r3, [r3, #4]
 8009578:	6053      	str	r3, [r2, #4]
 800957a:	4421      	add	r1, r4
 800957c:	6011      	str	r1, [r2, #0]
 800957e:	e7d7      	b.n	8009530 <_free_r+0x28>
 8009580:	d902      	bls.n	8009588 <_free_r+0x80>
 8009582:	230c      	movs	r3, #12
 8009584:	6003      	str	r3, [r0, #0]
 8009586:	e7d3      	b.n	8009530 <_free_r+0x28>
 8009588:	6825      	ldr	r5, [r4, #0]
 800958a:	1961      	adds	r1, r4, r5
 800958c:	428b      	cmp	r3, r1
 800958e:	bf04      	itt	eq
 8009590:	6819      	ldreq	r1, [r3, #0]
 8009592:	685b      	ldreq	r3, [r3, #4]
 8009594:	6063      	str	r3, [r4, #4]
 8009596:	bf04      	itt	eq
 8009598:	1949      	addeq	r1, r1, r5
 800959a:	6021      	streq	r1, [r4, #0]
 800959c:	6054      	str	r4, [r2, #4]
 800959e:	e7c7      	b.n	8009530 <_free_r+0x28>
 80095a0:	b003      	add	sp, #12
 80095a2:	bd30      	pop	{r4, r5, pc}
 80095a4:	2000009c 	.word	0x2000009c

080095a8 <_malloc_r>:
 80095a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095aa:	1ccd      	adds	r5, r1, #3
 80095ac:	f025 0503 	bic.w	r5, r5, #3
 80095b0:	3508      	adds	r5, #8
 80095b2:	2d0c      	cmp	r5, #12
 80095b4:	bf38      	it	cc
 80095b6:	250c      	movcc	r5, #12
 80095b8:	2d00      	cmp	r5, #0
 80095ba:	4606      	mov	r6, r0
 80095bc:	db01      	blt.n	80095c2 <_malloc_r+0x1a>
 80095be:	42a9      	cmp	r1, r5
 80095c0:	d903      	bls.n	80095ca <_malloc_r+0x22>
 80095c2:	230c      	movs	r3, #12
 80095c4:	6033      	str	r3, [r6, #0]
 80095c6:	2000      	movs	r0, #0
 80095c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80095ca:	f000 fc27 	bl	8009e1c <__malloc_lock>
 80095ce:	4921      	ldr	r1, [pc, #132]	; (8009654 <_malloc_r+0xac>)
 80095d0:	680a      	ldr	r2, [r1, #0]
 80095d2:	4614      	mov	r4, r2
 80095d4:	b99c      	cbnz	r4, 80095fe <_malloc_r+0x56>
 80095d6:	4f20      	ldr	r7, [pc, #128]	; (8009658 <_malloc_r+0xb0>)
 80095d8:	683b      	ldr	r3, [r7, #0]
 80095da:	b923      	cbnz	r3, 80095e6 <_malloc_r+0x3e>
 80095dc:	4621      	mov	r1, r4
 80095de:	4630      	mov	r0, r6
 80095e0:	f000 fb72 	bl	8009cc8 <_sbrk_r>
 80095e4:	6038      	str	r0, [r7, #0]
 80095e6:	4629      	mov	r1, r5
 80095e8:	4630      	mov	r0, r6
 80095ea:	f000 fb6d 	bl	8009cc8 <_sbrk_r>
 80095ee:	1c43      	adds	r3, r0, #1
 80095f0:	d123      	bne.n	800963a <_malloc_r+0x92>
 80095f2:	230c      	movs	r3, #12
 80095f4:	6033      	str	r3, [r6, #0]
 80095f6:	4630      	mov	r0, r6
 80095f8:	f000 fc16 	bl	8009e28 <__malloc_unlock>
 80095fc:	e7e3      	b.n	80095c6 <_malloc_r+0x1e>
 80095fe:	6823      	ldr	r3, [r4, #0]
 8009600:	1b5b      	subs	r3, r3, r5
 8009602:	d417      	bmi.n	8009634 <_malloc_r+0x8c>
 8009604:	2b0b      	cmp	r3, #11
 8009606:	d903      	bls.n	8009610 <_malloc_r+0x68>
 8009608:	6023      	str	r3, [r4, #0]
 800960a:	441c      	add	r4, r3
 800960c:	6025      	str	r5, [r4, #0]
 800960e:	e004      	b.n	800961a <_malloc_r+0x72>
 8009610:	6863      	ldr	r3, [r4, #4]
 8009612:	42a2      	cmp	r2, r4
 8009614:	bf0c      	ite	eq
 8009616:	600b      	streq	r3, [r1, #0]
 8009618:	6053      	strne	r3, [r2, #4]
 800961a:	4630      	mov	r0, r6
 800961c:	f000 fc04 	bl	8009e28 <__malloc_unlock>
 8009620:	f104 000b 	add.w	r0, r4, #11
 8009624:	1d23      	adds	r3, r4, #4
 8009626:	f020 0007 	bic.w	r0, r0, #7
 800962a:	1ac2      	subs	r2, r0, r3
 800962c:	d0cc      	beq.n	80095c8 <_malloc_r+0x20>
 800962e:	1a1b      	subs	r3, r3, r0
 8009630:	50a3      	str	r3, [r4, r2]
 8009632:	e7c9      	b.n	80095c8 <_malloc_r+0x20>
 8009634:	4622      	mov	r2, r4
 8009636:	6864      	ldr	r4, [r4, #4]
 8009638:	e7cc      	b.n	80095d4 <_malloc_r+0x2c>
 800963a:	1cc4      	adds	r4, r0, #3
 800963c:	f024 0403 	bic.w	r4, r4, #3
 8009640:	42a0      	cmp	r0, r4
 8009642:	d0e3      	beq.n	800960c <_malloc_r+0x64>
 8009644:	1a21      	subs	r1, r4, r0
 8009646:	4630      	mov	r0, r6
 8009648:	f000 fb3e 	bl	8009cc8 <_sbrk_r>
 800964c:	3001      	adds	r0, #1
 800964e:	d1dd      	bne.n	800960c <_malloc_r+0x64>
 8009650:	e7cf      	b.n	80095f2 <_malloc_r+0x4a>
 8009652:	bf00      	nop
 8009654:	2000009c 	.word	0x2000009c
 8009658:	200000a0 	.word	0x200000a0

0800965c <__sfputc_r>:
 800965c:	6893      	ldr	r3, [r2, #8]
 800965e:	3b01      	subs	r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	b410      	push	{r4}
 8009664:	6093      	str	r3, [r2, #8]
 8009666:	da08      	bge.n	800967a <__sfputc_r+0x1e>
 8009668:	6994      	ldr	r4, [r2, #24]
 800966a:	42a3      	cmp	r3, r4
 800966c:	db01      	blt.n	8009672 <__sfputc_r+0x16>
 800966e:	290a      	cmp	r1, #10
 8009670:	d103      	bne.n	800967a <__sfputc_r+0x1e>
 8009672:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009676:	f7ff bc69 	b.w	8008f4c <__swbuf_r>
 800967a:	6813      	ldr	r3, [r2, #0]
 800967c:	1c58      	adds	r0, r3, #1
 800967e:	6010      	str	r0, [r2, #0]
 8009680:	7019      	strb	r1, [r3, #0]
 8009682:	4608      	mov	r0, r1
 8009684:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009688:	4770      	bx	lr

0800968a <__sfputs_r>:
 800968a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800968c:	4606      	mov	r6, r0
 800968e:	460f      	mov	r7, r1
 8009690:	4614      	mov	r4, r2
 8009692:	18d5      	adds	r5, r2, r3
 8009694:	42ac      	cmp	r4, r5
 8009696:	d101      	bne.n	800969c <__sfputs_r+0x12>
 8009698:	2000      	movs	r0, #0
 800969a:	e007      	b.n	80096ac <__sfputs_r+0x22>
 800969c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80096a0:	463a      	mov	r2, r7
 80096a2:	4630      	mov	r0, r6
 80096a4:	f7ff ffda 	bl	800965c <__sfputc_r>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d1f3      	bne.n	8009694 <__sfputs_r+0xa>
 80096ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080096b0 <_vfiprintf_r>:
 80096b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80096b4:	460d      	mov	r5, r1
 80096b6:	b09d      	sub	sp, #116	; 0x74
 80096b8:	4614      	mov	r4, r2
 80096ba:	4698      	mov	r8, r3
 80096bc:	4606      	mov	r6, r0
 80096be:	b118      	cbz	r0, 80096c8 <_vfiprintf_r+0x18>
 80096c0:	6983      	ldr	r3, [r0, #24]
 80096c2:	b90b      	cbnz	r3, 80096c8 <_vfiprintf_r+0x18>
 80096c4:	f7ff fe1c 	bl	8009300 <__sinit>
 80096c8:	4b89      	ldr	r3, [pc, #548]	; (80098f0 <_vfiprintf_r+0x240>)
 80096ca:	429d      	cmp	r5, r3
 80096cc:	d11b      	bne.n	8009706 <_vfiprintf_r+0x56>
 80096ce:	6875      	ldr	r5, [r6, #4]
 80096d0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096d2:	07d9      	lsls	r1, r3, #31
 80096d4:	d405      	bmi.n	80096e2 <_vfiprintf_r+0x32>
 80096d6:	89ab      	ldrh	r3, [r5, #12]
 80096d8:	059a      	lsls	r2, r3, #22
 80096da:	d402      	bmi.n	80096e2 <_vfiprintf_r+0x32>
 80096dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80096de:	f7ff fead 	bl	800943c <__retarget_lock_acquire_recursive>
 80096e2:	89ab      	ldrh	r3, [r5, #12]
 80096e4:	071b      	lsls	r3, r3, #28
 80096e6:	d501      	bpl.n	80096ec <_vfiprintf_r+0x3c>
 80096e8:	692b      	ldr	r3, [r5, #16]
 80096ea:	b9eb      	cbnz	r3, 8009728 <_vfiprintf_r+0x78>
 80096ec:	4629      	mov	r1, r5
 80096ee:	4630      	mov	r0, r6
 80096f0:	f7ff fc7e 	bl	8008ff0 <__swsetup_r>
 80096f4:	b1c0      	cbz	r0, 8009728 <_vfiprintf_r+0x78>
 80096f6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80096f8:	07dc      	lsls	r4, r3, #31
 80096fa:	d50e      	bpl.n	800971a <_vfiprintf_r+0x6a>
 80096fc:	f04f 30ff 	mov.w	r0, #4294967295
 8009700:	b01d      	add	sp, #116	; 0x74
 8009702:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009706:	4b7b      	ldr	r3, [pc, #492]	; (80098f4 <_vfiprintf_r+0x244>)
 8009708:	429d      	cmp	r5, r3
 800970a:	d101      	bne.n	8009710 <_vfiprintf_r+0x60>
 800970c:	68b5      	ldr	r5, [r6, #8]
 800970e:	e7df      	b.n	80096d0 <_vfiprintf_r+0x20>
 8009710:	4b79      	ldr	r3, [pc, #484]	; (80098f8 <_vfiprintf_r+0x248>)
 8009712:	429d      	cmp	r5, r3
 8009714:	bf08      	it	eq
 8009716:	68f5      	ldreq	r5, [r6, #12]
 8009718:	e7da      	b.n	80096d0 <_vfiprintf_r+0x20>
 800971a:	89ab      	ldrh	r3, [r5, #12]
 800971c:	0598      	lsls	r0, r3, #22
 800971e:	d4ed      	bmi.n	80096fc <_vfiprintf_r+0x4c>
 8009720:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009722:	f7ff fe8c 	bl	800943e <__retarget_lock_release_recursive>
 8009726:	e7e9      	b.n	80096fc <_vfiprintf_r+0x4c>
 8009728:	2300      	movs	r3, #0
 800972a:	9309      	str	r3, [sp, #36]	; 0x24
 800972c:	2320      	movs	r3, #32
 800972e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009732:	f8cd 800c 	str.w	r8, [sp, #12]
 8009736:	2330      	movs	r3, #48	; 0x30
 8009738:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80098fc <_vfiprintf_r+0x24c>
 800973c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009740:	f04f 0901 	mov.w	r9, #1
 8009744:	4623      	mov	r3, r4
 8009746:	469a      	mov	sl, r3
 8009748:	f813 2b01 	ldrb.w	r2, [r3], #1
 800974c:	b10a      	cbz	r2, 8009752 <_vfiprintf_r+0xa2>
 800974e:	2a25      	cmp	r2, #37	; 0x25
 8009750:	d1f9      	bne.n	8009746 <_vfiprintf_r+0x96>
 8009752:	ebba 0b04 	subs.w	fp, sl, r4
 8009756:	d00b      	beq.n	8009770 <_vfiprintf_r+0xc0>
 8009758:	465b      	mov	r3, fp
 800975a:	4622      	mov	r2, r4
 800975c:	4629      	mov	r1, r5
 800975e:	4630      	mov	r0, r6
 8009760:	f7ff ff93 	bl	800968a <__sfputs_r>
 8009764:	3001      	adds	r0, #1
 8009766:	f000 80aa 	beq.w	80098be <_vfiprintf_r+0x20e>
 800976a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800976c:	445a      	add	r2, fp
 800976e:	9209      	str	r2, [sp, #36]	; 0x24
 8009770:	f89a 3000 	ldrb.w	r3, [sl]
 8009774:	2b00      	cmp	r3, #0
 8009776:	f000 80a2 	beq.w	80098be <_vfiprintf_r+0x20e>
 800977a:	2300      	movs	r3, #0
 800977c:	f04f 32ff 	mov.w	r2, #4294967295
 8009780:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009784:	f10a 0a01 	add.w	sl, sl, #1
 8009788:	9304      	str	r3, [sp, #16]
 800978a:	9307      	str	r3, [sp, #28]
 800978c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009790:	931a      	str	r3, [sp, #104]	; 0x68
 8009792:	4654      	mov	r4, sl
 8009794:	2205      	movs	r2, #5
 8009796:	f814 1b01 	ldrb.w	r1, [r4], #1
 800979a:	4858      	ldr	r0, [pc, #352]	; (80098fc <_vfiprintf_r+0x24c>)
 800979c:	f7f6 fd40 	bl	8000220 <memchr>
 80097a0:	9a04      	ldr	r2, [sp, #16]
 80097a2:	b9d8      	cbnz	r0, 80097dc <_vfiprintf_r+0x12c>
 80097a4:	06d1      	lsls	r1, r2, #27
 80097a6:	bf44      	itt	mi
 80097a8:	2320      	movmi	r3, #32
 80097aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097ae:	0713      	lsls	r3, r2, #28
 80097b0:	bf44      	itt	mi
 80097b2:	232b      	movmi	r3, #43	; 0x2b
 80097b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80097b8:	f89a 3000 	ldrb.w	r3, [sl]
 80097bc:	2b2a      	cmp	r3, #42	; 0x2a
 80097be:	d015      	beq.n	80097ec <_vfiprintf_r+0x13c>
 80097c0:	9a07      	ldr	r2, [sp, #28]
 80097c2:	4654      	mov	r4, sl
 80097c4:	2000      	movs	r0, #0
 80097c6:	f04f 0c0a 	mov.w	ip, #10
 80097ca:	4621      	mov	r1, r4
 80097cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80097d0:	3b30      	subs	r3, #48	; 0x30
 80097d2:	2b09      	cmp	r3, #9
 80097d4:	d94e      	bls.n	8009874 <_vfiprintf_r+0x1c4>
 80097d6:	b1b0      	cbz	r0, 8009806 <_vfiprintf_r+0x156>
 80097d8:	9207      	str	r2, [sp, #28]
 80097da:	e014      	b.n	8009806 <_vfiprintf_r+0x156>
 80097dc:	eba0 0308 	sub.w	r3, r0, r8
 80097e0:	fa09 f303 	lsl.w	r3, r9, r3
 80097e4:	4313      	orrs	r3, r2
 80097e6:	9304      	str	r3, [sp, #16]
 80097e8:	46a2      	mov	sl, r4
 80097ea:	e7d2      	b.n	8009792 <_vfiprintf_r+0xe2>
 80097ec:	9b03      	ldr	r3, [sp, #12]
 80097ee:	1d19      	adds	r1, r3, #4
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	9103      	str	r1, [sp, #12]
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	bfbb      	ittet	lt
 80097f8:	425b      	neglt	r3, r3
 80097fa:	f042 0202 	orrlt.w	r2, r2, #2
 80097fe:	9307      	strge	r3, [sp, #28]
 8009800:	9307      	strlt	r3, [sp, #28]
 8009802:	bfb8      	it	lt
 8009804:	9204      	strlt	r2, [sp, #16]
 8009806:	7823      	ldrb	r3, [r4, #0]
 8009808:	2b2e      	cmp	r3, #46	; 0x2e
 800980a:	d10c      	bne.n	8009826 <_vfiprintf_r+0x176>
 800980c:	7863      	ldrb	r3, [r4, #1]
 800980e:	2b2a      	cmp	r3, #42	; 0x2a
 8009810:	d135      	bne.n	800987e <_vfiprintf_r+0x1ce>
 8009812:	9b03      	ldr	r3, [sp, #12]
 8009814:	1d1a      	adds	r2, r3, #4
 8009816:	681b      	ldr	r3, [r3, #0]
 8009818:	9203      	str	r2, [sp, #12]
 800981a:	2b00      	cmp	r3, #0
 800981c:	bfb8      	it	lt
 800981e:	f04f 33ff 	movlt.w	r3, #4294967295
 8009822:	3402      	adds	r4, #2
 8009824:	9305      	str	r3, [sp, #20]
 8009826:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800990c <_vfiprintf_r+0x25c>
 800982a:	7821      	ldrb	r1, [r4, #0]
 800982c:	2203      	movs	r2, #3
 800982e:	4650      	mov	r0, sl
 8009830:	f7f6 fcf6 	bl	8000220 <memchr>
 8009834:	b140      	cbz	r0, 8009848 <_vfiprintf_r+0x198>
 8009836:	2340      	movs	r3, #64	; 0x40
 8009838:	eba0 000a 	sub.w	r0, r0, sl
 800983c:	fa03 f000 	lsl.w	r0, r3, r0
 8009840:	9b04      	ldr	r3, [sp, #16]
 8009842:	4303      	orrs	r3, r0
 8009844:	3401      	adds	r4, #1
 8009846:	9304      	str	r3, [sp, #16]
 8009848:	f814 1b01 	ldrb.w	r1, [r4], #1
 800984c:	482c      	ldr	r0, [pc, #176]	; (8009900 <_vfiprintf_r+0x250>)
 800984e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009852:	2206      	movs	r2, #6
 8009854:	f7f6 fce4 	bl	8000220 <memchr>
 8009858:	2800      	cmp	r0, #0
 800985a:	d03f      	beq.n	80098dc <_vfiprintf_r+0x22c>
 800985c:	4b29      	ldr	r3, [pc, #164]	; (8009904 <_vfiprintf_r+0x254>)
 800985e:	bb1b      	cbnz	r3, 80098a8 <_vfiprintf_r+0x1f8>
 8009860:	9b03      	ldr	r3, [sp, #12]
 8009862:	3307      	adds	r3, #7
 8009864:	f023 0307 	bic.w	r3, r3, #7
 8009868:	3308      	adds	r3, #8
 800986a:	9303      	str	r3, [sp, #12]
 800986c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800986e:	443b      	add	r3, r7
 8009870:	9309      	str	r3, [sp, #36]	; 0x24
 8009872:	e767      	b.n	8009744 <_vfiprintf_r+0x94>
 8009874:	fb0c 3202 	mla	r2, ip, r2, r3
 8009878:	460c      	mov	r4, r1
 800987a:	2001      	movs	r0, #1
 800987c:	e7a5      	b.n	80097ca <_vfiprintf_r+0x11a>
 800987e:	2300      	movs	r3, #0
 8009880:	3401      	adds	r4, #1
 8009882:	9305      	str	r3, [sp, #20]
 8009884:	4619      	mov	r1, r3
 8009886:	f04f 0c0a 	mov.w	ip, #10
 800988a:	4620      	mov	r0, r4
 800988c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009890:	3a30      	subs	r2, #48	; 0x30
 8009892:	2a09      	cmp	r2, #9
 8009894:	d903      	bls.n	800989e <_vfiprintf_r+0x1ee>
 8009896:	2b00      	cmp	r3, #0
 8009898:	d0c5      	beq.n	8009826 <_vfiprintf_r+0x176>
 800989a:	9105      	str	r1, [sp, #20]
 800989c:	e7c3      	b.n	8009826 <_vfiprintf_r+0x176>
 800989e:	fb0c 2101 	mla	r1, ip, r1, r2
 80098a2:	4604      	mov	r4, r0
 80098a4:	2301      	movs	r3, #1
 80098a6:	e7f0      	b.n	800988a <_vfiprintf_r+0x1da>
 80098a8:	ab03      	add	r3, sp, #12
 80098aa:	9300      	str	r3, [sp, #0]
 80098ac:	462a      	mov	r2, r5
 80098ae:	4b16      	ldr	r3, [pc, #88]	; (8009908 <_vfiprintf_r+0x258>)
 80098b0:	a904      	add	r1, sp, #16
 80098b2:	4630      	mov	r0, r6
 80098b4:	f3af 8000 	nop.w
 80098b8:	4607      	mov	r7, r0
 80098ba:	1c78      	adds	r0, r7, #1
 80098bc:	d1d6      	bne.n	800986c <_vfiprintf_r+0x1bc>
 80098be:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80098c0:	07d9      	lsls	r1, r3, #31
 80098c2:	d405      	bmi.n	80098d0 <_vfiprintf_r+0x220>
 80098c4:	89ab      	ldrh	r3, [r5, #12]
 80098c6:	059a      	lsls	r2, r3, #22
 80098c8:	d402      	bmi.n	80098d0 <_vfiprintf_r+0x220>
 80098ca:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80098cc:	f7ff fdb7 	bl	800943e <__retarget_lock_release_recursive>
 80098d0:	89ab      	ldrh	r3, [r5, #12]
 80098d2:	065b      	lsls	r3, r3, #25
 80098d4:	f53f af12 	bmi.w	80096fc <_vfiprintf_r+0x4c>
 80098d8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80098da:	e711      	b.n	8009700 <_vfiprintf_r+0x50>
 80098dc:	ab03      	add	r3, sp, #12
 80098de:	9300      	str	r3, [sp, #0]
 80098e0:	462a      	mov	r2, r5
 80098e2:	4b09      	ldr	r3, [pc, #36]	; (8009908 <_vfiprintf_r+0x258>)
 80098e4:	a904      	add	r1, sp, #16
 80098e6:	4630      	mov	r0, r6
 80098e8:	f000 f880 	bl	80099ec <_printf_i>
 80098ec:	e7e4      	b.n	80098b8 <_vfiprintf_r+0x208>
 80098ee:	bf00      	nop
 80098f0:	0800a894 	.word	0x0800a894
 80098f4:	0800a8b4 	.word	0x0800a8b4
 80098f8:	0800a874 	.word	0x0800a874
 80098fc:	0800a8d4 	.word	0x0800a8d4
 8009900:	0800a8de 	.word	0x0800a8de
 8009904:	00000000 	.word	0x00000000
 8009908:	0800968b 	.word	0x0800968b
 800990c:	0800a8da 	.word	0x0800a8da

08009910 <_printf_common>:
 8009910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009914:	4616      	mov	r6, r2
 8009916:	4699      	mov	r9, r3
 8009918:	688a      	ldr	r2, [r1, #8]
 800991a:	690b      	ldr	r3, [r1, #16]
 800991c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009920:	4293      	cmp	r3, r2
 8009922:	bfb8      	it	lt
 8009924:	4613      	movlt	r3, r2
 8009926:	6033      	str	r3, [r6, #0]
 8009928:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800992c:	4607      	mov	r7, r0
 800992e:	460c      	mov	r4, r1
 8009930:	b10a      	cbz	r2, 8009936 <_printf_common+0x26>
 8009932:	3301      	adds	r3, #1
 8009934:	6033      	str	r3, [r6, #0]
 8009936:	6823      	ldr	r3, [r4, #0]
 8009938:	0699      	lsls	r1, r3, #26
 800993a:	bf42      	ittt	mi
 800993c:	6833      	ldrmi	r3, [r6, #0]
 800993e:	3302      	addmi	r3, #2
 8009940:	6033      	strmi	r3, [r6, #0]
 8009942:	6825      	ldr	r5, [r4, #0]
 8009944:	f015 0506 	ands.w	r5, r5, #6
 8009948:	d106      	bne.n	8009958 <_printf_common+0x48>
 800994a:	f104 0a19 	add.w	sl, r4, #25
 800994e:	68e3      	ldr	r3, [r4, #12]
 8009950:	6832      	ldr	r2, [r6, #0]
 8009952:	1a9b      	subs	r3, r3, r2
 8009954:	42ab      	cmp	r3, r5
 8009956:	dc26      	bgt.n	80099a6 <_printf_common+0x96>
 8009958:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800995c:	1e13      	subs	r3, r2, #0
 800995e:	6822      	ldr	r2, [r4, #0]
 8009960:	bf18      	it	ne
 8009962:	2301      	movne	r3, #1
 8009964:	0692      	lsls	r2, r2, #26
 8009966:	d42b      	bmi.n	80099c0 <_printf_common+0xb0>
 8009968:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800996c:	4649      	mov	r1, r9
 800996e:	4638      	mov	r0, r7
 8009970:	47c0      	blx	r8
 8009972:	3001      	adds	r0, #1
 8009974:	d01e      	beq.n	80099b4 <_printf_common+0xa4>
 8009976:	6823      	ldr	r3, [r4, #0]
 8009978:	68e5      	ldr	r5, [r4, #12]
 800997a:	6832      	ldr	r2, [r6, #0]
 800997c:	f003 0306 	and.w	r3, r3, #6
 8009980:	2b04      	cmp	r3, #4
 8009982:	bf08      	it	eq
 8009984:	1aad      	subeq	r5, r5, r2
 8009986:	68a3      	ldr	r3, [r4, #8]
 8009988:	6922      	ldr	r2, [r4, #16]
 800998a:	bf0c      	ite	eq
 800998c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009990:	2500      	movne	r5, #0
 8009992:	4293      	cmp	r3, r2
 8009994:	bfc4      	itt	gt
 8009996:	1a9b      	subgt	r3, r3, r2
 8009998:	18ed      	addgt	r5, r5, r3
 800999a:	2600      	movs	r6, #0
 800999c:	341a      	adds	r4, #26
 800999e:	42b5      	cmp	r5, r6
 80099a0:	d11a      	bne.n	80099d8 <_printf_common+0xc8>
 80099a2:	2000      	movs	r0, #0
 80099a4:	e008      	b.n	80099b8 <_printf_common+0xa8>
 80099a6:	2301      	movs	r3, #1
 80099a8:	4652      	mov	r2, sl
 80099aa:	4649      	mov	r1, r9
 80099ac:	4638      	mov	r0, r7
 80099ae:	47c0      	blx	r8
 80099b0:	3001      	adds	r0, #1
 80099b2:	d103      	bne.n	80099bc <_printf_common+0xac>
 80099b4:	f04f 30ff 	mov.w	r0, #4294967295
 80099b8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099bc:	3501      	adds	r5, #1
 80099be:	e7c6      	b.n	800994e <_printf_common+0x3e>
 80099c0:	18e1      	adds	r1, r4, r3
 80099c2:	1c5a      	adds	r2, r3, #1
 80099c4:	2030      	movs	r0, #48	; 0x30
 80099c6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099ca:	4422      	add	r2, r4
 80099cc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099d0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099d4:	3302      	adds	r3, #2
 80099d6:	e7c7      	b.n	8009968 <_printf_common+0x58>
 80099d8:	2301      	movs	r3, #1
 80099da:	4622      	mov	r2, r4
 80099dc:	4649      	mov	r1, r9
 80099de:	4638      	mov	r0, r7
 80099e0:	47c0      	blx	r8
 80099e2:	3001      	adds	r0, #1
 80099e4:	d0e6      	beq.n	80099b4 <_printf_common+0xa4>
 80099e6:	3601      	adds	r6, #1
 80099e8:	e7d9      	b.n	800999e <_printf_common+0x8e>
	...

080099ec <_printf_i>:
 80099ec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099f0:	460c      	mov	r4, r1
 80099f2:	4691      	mov	r9, r2
 80099f4:	7e27      	ldrb	r7, [r4, #24]
 80099f6:	990c      	ldr	r1, [sp, #48]	; 0x30
 80099f8:	2f78      	cmp	r7, #120	; 0x78
 80099fa:	4680      	mov	r8, r0
 80099fc:	469a      	mov	sl, r3
 80099fe:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009a02:	d807      	bhi.n	8009a14 <_printf_i+0x28>
 8009a04:	2f62      	cmp	r7, #98	; 0x62
 8009a06:	d80a      	bhi.n	8009a1e <_printf_i+0x32>
 8009a08:	2f00      	cmp	r7, #0
 8009a0a:	f000 80d8 	beq.w	8009bbe <_printf_i+0x1d2>
 8009a0e:	2f58      	cmp	r7, #88	; 0x58
 8009a10:	f000 80a3 	beq.w	8009b5a <_printf_i+0x16e>
 8009a14:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a18:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a1c:	e03a      	b.n	8009a94 <_printf_i+0xa8>
 8009a1e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a22:	2b15      	cmp	r3, #21
 8009a24:	d8f6      	bhi.n	8009a14 <_printf_i+0x28>
 8009a26:	a001      	add	r0, pc, #4	; (adr r0, 8009a2c <_printf_i+0x40>)
 8009a28:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009a2c:	08009a85 	.word	0x08009a85
 8009a30:	08009a99 	.word	0x08009a99
 8009a34:	08009a15 	.word	0x08009a15
 8009a38:	08009a15 	.word	0x08009a15
 8009a3c:	08009a15 	.word	0x08009a15
 8009a40:	08009a15 	.word	0x08009a15
 8009a44:	08009a99 	.word	0x08009a99
 8009a48:	08009a15 	.word	0x08009a15
 8009a4c:	08009a15 	.word	0x08009a15
 8009a50:	08009a15 	.word	0x08009a15
 8009a54:	08009a15 	.word	0x08009a15
 8009a58:	08009ba5 	.word	0x08009ba5
 8009a5c:	08009ac9 	.word	0x08009ac9
 8009a60:	08009b87 	.word	0x08009b87
 8009a64:	08009a15 	.word	0x08009a15
 8009a68:	08009a15 	.word	0x08009a15
 8009a6c:	08009bc7 	.word	0x08009bc7
 8009a70:	08009a15 	.word	0x08009a15
 8009a74:	08009ac9 	.word	0x08009ac9
 8009a78:	08009a15 	.word	0x08009a15
 8009a7c:	08009a15 	.word	0x08009a15
 8009a80:	08009b8f 	.word	0x08009b8f
 8009a84:	680b      	ldr	r3, [r1, #0]
 8009a86:	1d1a      	adds	r2, r3, #4
 8009a88:	681b      	ldr	r3, [r3, #0]
 8009a8a:	600a      	str	r2, [r1, #0]
 8009a8c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009a90:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a94:	2301      	movs	r3, #1
 8009a96:	e0a3      	b.n	8009be0 <_printf_i+0x1f4>
 8009a98:	6825      	ldr	r5, [r4, #0]
 8009a9a:	6808      	ldr	r0, [r1, #0]
 8009a9c:	062e      	lsls	r6, r5, #24
 8009a9e:	f100 0304 	add.w	r3, r0, #4
 8009aa2:	d50a      	bpl.n	8009aba <_printf_i+0xce>
 8009aa4:	6805      	ldr	r5, [r0, #0]
 8009aa6:	600b      	str	r3, [r1, #0]
 8009aa8:	2d00      	cmp	r5, #0
 8009aaa:	da03      	bge.n	8009ab4 <_printf_i+0xc8>
 8009aac:	232d      	movs	r3, #45	; 0x2d
 8009aae:	426d      	negs	r5, r5
 8009ab0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009ab4:	485e      	ldr	r0, [pc, #376]	; (8009c30 <_printf_i+0x244>)
 8009ab6:	230a      	movs	r3, #10
 8009ab8:	e019      	b.n	8009aee <_printf_i+0x102>
 8009aba:	f015 0f40 	tst.w	r5, #64	; 0x40
 8009abe:	6805      	ldr	r5, [r0, #0]
 8009ac0:	600b      	str	r3, [r1, #0]
 8009ac2:	bf18      	it	ne
 8009ac4:	b22d      	sxthne	r5, r5
 8009ac6:	e7ef      	b.n	8009aa8 <_printf_i+0xbc>
 8009ac8:	680b      	ldr	r3, [r1, #0]
 8009aca:	6825      	ldr	r5, [r4, #0]
 8009acc:	1d18      	adds	r0, r3, #4
 8009ace:	6008      	str	r0, [r1, #0]
 8009ad0:	0628      	lsls	r0, r5, #24
 8009ad2:	d501      	bpl.n	8009ad8 <_printf_i+0xec>
 8009ad4:	681d      	ldr	r5, [r3, #0]
 8009ad6:	e002      	b.n	8009ade <_printf_i+0xf2>
 8009ad8:	0669      	lsls	r1, r5, #25
 8009ada:	d5fb      	bpl.n	8009ad4 <_printf_i+0xe8>
 8009adc:	881d      	ldrh	r5, [r3, #0]
 8009ade:	4854      	ldr	r0, [pc, #336]	; (8009c30 <_printf_i+0x244>)
 8009ae0:	2f6f      	cmp	r7, #111	; 0x6f
 8009ae2:	bf0c      	ite	eq
 8009ae4:	2308      	moveq	r3, #8
 8009ae6:	230a      	movne	r3, #10
 8009ae8:	2100      	movs	r1, #0
 8009aea:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009aee:	6866      	ldr	r6, [r4, #4]
 8009af0:	60a6      	str	r6, [r4, #8]
 8009af2:	2e00      	cmp	r6, #0
 8009af4:	bfa2      	ittt	ge
 8009af6:	6821      	ldrge	r1, [r4, #0]
 8009af8:	f021 0104 	bicge.w	r1, r1, #4
 8009afc:	6021      	strge	r1, [r4, #0]
 8009afe:	b90d      	cbnz	r5, 8009b04 <_printf_i+0x118>
 8009b00:	2e00      	cmp	r6, #0
 8009b02:	d04d      	beq.n	8009ba0 <_printf_i+0x1b4>
 8009b04:	4616      	mov	r6, r2
 8009b06:	fbb5 f1f3 	udiv	r1, r5, r3
 8009b0a:	fb03 5711 	mls	r7, r3, r1, r5
 8009b0e:	5dc7      	ldrb	r7, [r0, r7]
 8009b10:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009b14:	462f      	mov	r7, r5
 8009b16:	42bb      	cmp	r3, r7
 8009b18:	460d      	mov	r5, r1
 8009b1a:	d9f4      	bls.n	8009b06 <_printf_i+0x11a>
 8009b1c:	2b08      	cmp	r3, #8
 8009b1e:	d10b      	bne.n	8009b38 <_printf_i+0x14c>
 8009b20:	6823      	ldr	r3, [r4, #0]
 8009b22:	07df      	lsls	r7, r3, #31
 8009b24:	d508      	bpl.n	8009b38 <_printf_i+0x14c>
 8009b26:	6923      	ldr	r3, [r4, #16]
 8009b28:	6861      	ldr	r1, [r4, #4]
 8009b2a:	4299      	cmp	r1, r3
 8009b2c:	bfde      	ittt	le
 8009b2e:	2330      	movle	r3, #48	; 0x30
 8009b30:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009b34:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009b38:	1b92      	subs	r2, r2, r6
 8009b3a:	6122      	str	r2, [r4, #16]
 8009b3c:	f8cd a000 	str.w	sl, [sp]
 8009b40:	464b      	mov	r3, r9
 8009b42:	aa03      	add	r2, sp, #12
 8009b44:	4621      	mov	r1, r4
 8009b46:	4640      	mov	r0, r8
 8009b48:	f7ff fee2 	bl	8009910 <_printf_common>
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d14c      	bne.n	8009bea <_printf_i+0x1fe>
 8009b50:	f04f 30ff 	mov.w	r0, #4294967295
 8009b54:	b004      	add	sp, #16
 8009b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b5a:	4835      	ldr	r0, [pc, #212]	; (8009c30 <_printf_i+0x244>)
 8009b5c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009b60:	6823      	ldr	r3, [r4, #0]
 8009b62:	680e      	ldr	r6, [r1, #0]
 8009b64:	061f      	lsls	r7, r3, #24
 8009b66:	f856 5b04 	ldr.w	r5, [r6], #4
 8009b6a:	600e      	str	r6, [r1, #0]
 8009b6c:	d514      	bpl.n	8009b98 <_printf_i+0x1ac>
 8009b6e:	07d9      	lsls	r1, r3, #31
 8009b70:	bf44      	itt	mi
 8009b72:	f043 0320 	orrmi.w	r3, r3, #32
 8009b76:	6023      	strmi	r3, [r4, #0]
 8009b78:	b91d      	cbnz	r5, 8009b82 <_printf_i+0x196>
 8009b7a:	6823      	ldr	r3, [r4, #0]
 8009b7c:	f023 0320 	bic.w	r3, r3, #32
 8009b80:	6023      	str	r3, [r4, #0]
 8009b82:	2310      	movs	r3, #16
 8009b84:	e7b0      	b.n	8009ae8 <_printf_i+0xfc>
 8009b86:	6823      	ldr	r3, [r4, #0]
 8009b88:	f043 0320 	orr.w	r3, r3, #32
 8009b8c:	6023      	str	r3, [r4, #0]
 8009b8e:	2378      	movs	r3, #120	; 0x78
 8009b90:	4828      	ldr	r0, [pc, #160]	; (8009c34 <_printf_i+0x248>)
 8009b92:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b96:	e7e3      	b.n	8009b60 <_printf_i+0x174>
 8009b98:	065e      	lsls	r6, r3, #25
 8009b9a:	bf48      	it	mi
 8009b9c:	b2ad      	uxthmi	r5, r5
 8009b9e:	e7e6      	b.n	8009b6e <_printf_i+0x182>
 8009ba0:	4616      	mov	r6, r2
 8009ba2:	e7bb      	b.n	8009b1c <_printf_i+0x130>
 8009ba4:	680b      	ldr	r3, [r1, #0]
 8009ba6:	6826      	ldr	r6, [r4, #0]
 8009ba8:	6960      	ldr	r0, [r4, #20]
 8009baa:	1d1d      	adds	r5, r3, #4
 8009bac:	600d      	str	r5, [r1, #0]
 8009bae:	0635      	lsls	r5, r6, #24
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	d501      	bpl.n	8009bb8 <_printf_i+0x1cc>
 8009bb4:	6018      	str	r0, [r3, #0]
 8009bb6:	e002      	b.n	8009bbe <_printf_i+0x1d2>
 8009bb8:	0671      	lsls	r1, r6, #25
 8009bba:	d5fb      	bpl.n	8009bb4 <_printf_i+0x1c8>
 8009bbc:	8018      	strh	r0, [r3, #0]
 8009bbe:	2300      	movs	r3, #0
 8009bc0:	6123      	str	r3, [r4, #16]
 8009bc2:	4616      	mov	r6, r2
 8009bc4:	e7ba      	b.n	8009b3c <_printf_i+0x150>
 8009bc6:	680b      	ldr	r3, [r1, #0]
 8009bc8:	1d1a      	adds	r2, r3, #4
 8009bca:	600a      	str	r2, [r1, #0]
 8009bcc:	681e      	ldr	r6, [r3, #0]
 8009bce:	6862      	ldr	r2, [r4, #4]
 8009bd0:	2100      	movs	r1, #0
 8009bd2:	4630      	mov	r0, r6
 8009bd4:	f7f6 fb24 	bl	8000220 <memchr>
 8009bd8:	b108      	cbz	r0, 8009bde <_printf_i+0x1f2>
 8009bda:	1b80      	subs	r0, r0, r6
 8009bdc:	6060      	str	r0, [r4, #4]
 8009bde:	6863      	ldr	r3, [r4, #4]
 8009be0:	6123      	str	r3, [r4, #16]
 8009be2:	2300      	movs	r3, #0
 8009be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009be8:	e7a8      	b.n	8009b3c <_printf_i+0x150>
 8009bea:	6923      	ldr	r3, [r4, #16]
 8009bec:	4632      	mov	r2, r6
 8009bee:	4649      	mov	r1, r9
 8009bf0:	4640      	mov	r0, r8
 8009bf2:	47d0      	blx	sl
 8009bf4:	3001      	adds	r0, #1
 8009bf6:	d0ab      	beq.n	8009b50 <_printf_i+0x164>
 8009bf8:	6823      	ldr	r3, [r4, #0]
 8009bfa:	079b      	lsls	r3, r3, #30
 8009bfc:	d413      	bmi.n	8009c26 <_printf_i+0x23a>
 8009bfe:	68e0      	ldr	r0, [r4, #12]
 8009c00:	9b03      	ldr	r3, [sp, #12]
 8009c02:	4298      	cmp	r0, r3
 8009c04:	bfb8      	it	lt
 8009c06:	4618      	movlt	r0, r3
 8009c08:	e7a4      	b.n	8009b54 <_printf_i+0x168>
 8009c0a:	2301      	movs	r3, #1
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	4649      	mov	r1, r9
 8009c10:	4640      	mov	r0, r8
 8009c12:	47d0      	blx	sl
 8009c14:	3001      	adds	r0, #1
 8009c16:	d09b      	beq.n	8009b50 <_printf_i+0x164>
 8009c18:	3501      	adds	r5, #1
 8009c1a:	68e3      	ldr	r3, [r4, #12]
 8009c1c:	9903      	ldr	r1, [sp, #12]
 8009c1e:	1a5b      	subs	r3, r3, r1
 8009c20:	42ab      	cmp	r3, r5
 8009c22:	dcf2      	bgt.n	8009c0a <_printf_i+0x21e>
 8009c24:	e7eb      	b.n	8009bfe <_printf_i+0x212>
 8009c26:	2500      	movs	r5, #0
 8009c28:	f104 0619 	add.w	r6, r4, #25
 8009c2c:	e7f5      	b.n	8009c1a <_printf_i+0x22e>
 8009c2e:	bf00      	nop
 8009c30:	0800a8e5 	.word	0x0800a8e5
 8009c34:	0800a8f6 	.word	0x0800a8f6

08009c38 <_putc_r>:
 8009c38:	b570      	push	{r4, r5, r6, lr}
 8009c3a:	460d      	mov	r5, r1
 8009c3c:	4614      	mov	r4, r2
 8009c3e:	4606      	mov	r6, r0
 8009c40:	b118      	cbz	r0, 8009c4a <_putc_r+0x12>
 8009c42:	6983      	ldr	r3, [r0, #24]
 8009c44:	b90b      	cbnz	r3, 8009c4a <_putc_r+0x12>
 8009c46:	f7ff fb5b 	bl	8009300 <__sinit>
 8009c4a:	4b1c      	ldr	r3, [pc, #112]	; (8009cbc <_putc_r+0x84>)
 8009c4c:	429c      	cmp	r4, r3
 8009c4e:	d124      	bne.n	8009c9a <_putc_r+0x62>
 8009c50:	6874      	ldr	r4, [r6, #4]
 8009c52:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c54:	07d8      	lsls	r0, r3, #31
 8009c56:	d405      	bmi.n	8009c64 <_putc_r+0x2c>
 8009c58:	89a3      	ldrh	r3, [r4, #12]
 8009c5a:	0599      	lsls	r1, r3, #22
 8009c5c:	d402      	bmi.n	8009c64 <_putc_r+0x2c>
 8009c5e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c60:	f7ff fbec 	bl	800943c <__retarget_lock_acquire_recursive>
 8009c64:	68a3      	ldr	r3, [r4, #8]
 8009c66:	3b01      	subs	r3, #1
 8009c68:	2b00      	cmp	r3, #0
 8009c6a:	60a3      	str	r3, [r4, #8]
 8009c6c:	da05      	bge.n	8009c7a <_putc_r+0x42>
 8009c6e:	69a2      	ldr	r2, [r4, #24]
 8009c70:	4293      	cmp	r3, r2
 8009c72:	db1c      	blt.n	8009cae <_putc_r+0x76>
 8009c74:	b2eb      	uxtb	r3, r5
 8009c76:	2b0a      	cmp	r3, #10
 8009c78:	d019      	beq.n	8009cae <_putc_r+0x76>
 8009c7a:	6823      	ldr	r3, [r4, #0]
 8009c7c:	1c5a      	adds	r2, r3, #1
 8009c7e:	6022      	str	r2, [r4, #0]
 8009c80:	701d      	strb	r5, [r3, #0]
 8009c82:	b2ed      	uxtb	r5, r5
 8009c84:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009c86:	07da      	lsls	r2, r3, #31
 8009c88:	d405      	bmi.n	8009c96 <_putc_r+0x5e>
 8009c8a:	89a3      	ldrh	r3, [r4, #12]
 8009c8c:	059b      	lsls	r3, r3, #22
 8009c8e:	d402      	bmi.n	8009c96 <_putc_r+0x5e>
 8009c90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009c92:	f7ff fbd4 	bl	800943e <__retarget_lock_release_recursive>
 8009c96:	4628      	mov	r0, r5
 8009c98:	bd70      	pop	{r4, r5, r6, pc}
 8009c9a:	4b09      	ldr	r3, [pc, #36]	; (8009cc0 <_putc_r+0x88>)
 8009c9c:	429c      	cmp	r4, r3
 8009c9e:	d101      	bne.n	8009ca4 <_putc_r+0x6c>
 8009ca0:	68b4      	ldr	r4, [r6, #8]
 8009ca2:	e7d6      	b.n	8009c52 <_putc_r+0x1a>
 8009ca4:	4b07      	ldr	r3, [pc, #28]	; (8009cc4 <_putc_r+0x8c>)
 8009ca6:	429c      	cmp	r4, r3
 8009ca8:	bf08      	it	eq
 8009caa:	68f4      	ldreq	r4, [r6, #12]
 8009cac:	e7d1      	b.n	8009c52 <_putc_r+0x1a>
 8009cae:	4629      	mov	r1, r5
 8009cb0:	4622      	mov	r2, r4
 8009cb2:	4630      	mov	r0, r6
 8009cb4:	f7ff f94a 	bl	8008f4c <__swbuf_r>
 8009cb8:	4605      	mov	r5, r0
 8009cba:	e7e3      	b.n	8009c84 <_putc_r+0x4c>
 8009cbc:	0800a894 	.word	0x0800a894
 8009cc0:	0800a8b4 	.word	0x0800a8b4
 8009cc4:	0800a874 	.word	0x0800a874

08009cc8 <_sbrk_r>:
 8009cc8:	b538      	push	{r3, r4, r5, lr}
 8009cca:	4d06      	ldr	r5, [pc, #24]	; (8009ce4 <_sbrk_r+0x1c>)
 8009ccc:	2300      	movs	r3, #0
 8009cce:	4604      	mov	r4, r0
 8009cd0:	4608      	mov	r0, r1
 8009cd2:	602b      	str	r3, [r5, #0]
 8009cd4:	f7f9 f85e 	bl	8002d94 <_sbrk>
 8009cd8:	1c43      	adds	r3, r0, #1
 8009cda:	d102      	bne.n	8009ce2 <_sbrk_r+0x1a>
 8009cdc:	682b      	ldr	r3, [r5, #0]
 8009cde:	b103      	cbz	r3, 8009ce2 <_sbrk_r+0x1a>
 8009ce0:	6023      	str	r3, [r4, #0]
 8009ce2:	bd38      	pop	{r3, r4, r5, pc}
 8009ce4:	200004c4 	.word	0x200004c4

08009ce8 <__sread>:
 8009ce8:	b510      	push	{r4, lr}
 8009cea:	460c      	mov	r4, r1
 8009cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009cf0:	f000 f8a0 	bl	8009e34 <_read_r>
 8009cf4:	2800      	cmp	r0, #0
 8009cf6:	bfab      	itete	ge
 8009cf8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009cfa:	89a3      	ldrhlt	r3, [r4, #12]
 8009cfc:	181b      	addge	r3, r3, r0
 8009cfe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009d02:	bfac      	ite	ge
 8009d04:	6563      	strge	r3, [r4, #84]	; 0x54
 8009d06:	81a3      	strhlt	r3, [r4, #12]
 8009d08:	bd10      	pop	{r4, pc}

08009d0a <__swrite>:
 8009d0a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009d0e:	461f      	mov	r7, r3
 8009d10:	898b      	ldrh	r3, [r1, #12]
 8009d12:	05db      	lsls	r3, r3, #23
 8009d14:	4605      	mov	r5, r0
 8009d16:	460c      	mov	r4, r1
 8009d18:	4616      	mov	r6, r2
 8009d1a:	d505      	bpl.n	8009d28 <__swrite+0x1e>
 8009d1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d20:	2302      	movs	r3, #2
 8009d22:	2200      	movs	r2, #0
 8009d24:	f000 f868 	bl	8009df8 <_lseek_r>
 8009d28:	89a3      	ldrh	r3, [r4, #12]
 8009d2a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009d2e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009d32:	81a3      	strh	r3, [r4, #12]
 8009d34:	4632      	mov	r2, r6
 8009d36:	463b      	mov	r3, r7
 8009d38:	4628      	mov	r0, r5
 8009d3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009d3e:	f000 b817 	b.w	8009d70 <_write_r>

08009d42 <__sseek>:
 8009d42:	b510      	push	{r4, lr}
 8009d44:	460c      	mov	r4, r1
 8009d46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d4a:	f000 f855 	bl	8009df8 <_lseek_r>
 8009d4e:	1c43      	adds	r3, r0, #1
 8009d50:	89a3      	ldrh	r3, [r4, #12]
 8009d52:	bf15      	itete	ne
 8009d54:	6560      	strne	r0, [r4, #84]	; 0x54
 8009d56:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009d5a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009d5e:	81a3      	strheq	r3, [r4, #12]
 8009d60:	bf18      	it	ne
 8009d62:	81a3      	strhne	r3, [r4, #12]
 8009d64:	bd10      	pop	{r4, pc}

08009d66 <__sclose>:
 8009d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009d6a:	f000 b813 	b.w	8009d94 <_close_r>
	...

08009d70 <_write_r>:
 8009d70:	b538      	push	{r3, r4, r5, lr}
 8009d72:	4d07      	ldr	r5, [pc, #28]	; (8009d90 <_write_r+0x20>)
 8009d74:	4604      	mov	r4, r0
 8009d76:	4608      	mov	r0, r1
 8009d78:	4611      	mov	r1, r2
 8009d7a:	2200      	movs	r2, #0
 8009d7c:	602a      	str	r2, [r5, #0]
 8009d7e:	461a      	mov	r2, r3
 8009d80:	f7f7 fa31 	bl	80011e6 <_write>
 8009d84:	1c43      	adds	r3, r0, #1
 8009d86:	d102      	bne.n	8009d8e <_write_r+0x1e>
 8009d88:	682b      	ldr	r3, [r5, #0]
 8009d8a:	b103      	cbz	r3, 8009d8e <_write_r+0x1e>
 8009d8c:	6023      	str	r3, [r4, #0]
 8009d8e:	bd38      	pop	{r3, r4, r5, pc}
 8009d90:	200004c4 	.word	0x200004c4

08009d94 <_close_r>:
 8009d94:	b538      	push	{r3, r4, r5, lr}
 8009d96:	4d06      	ldr	r5, [pc, #24]	; (8009db0 <_close_r+0x1c>)
 8009d98:	2300      	movs	r3, #0
 8009d9a:	4604      	mov	r4, r0
 8009d9c:	4608      	mov	r0, r1
 8009d9e:	602b      	str	r3, [r5, #0]
 8009da0:	f7f8 ffc3 	bl	8002d2a <_close>
 8009da4:	1c43      	adds	r3, r0, #1
 8009da6:	d102      	bne.n	8009dae <_close_r+0x1a>
 8009da8:	682b      	ldr	r3, [r5, #0]
 8009daa:	b103      	cbz	r3, 8009dae <_close_r+0x1a>
 8009dac:	6023      	str	r3, [r4, #0]
 8009dae:	bd38      	pop	{r3, r4, r5, pc}
 8009db0:	200004c4 	.word	0x200004c4

08009db4 <_fstat_r>:
 8009db4:	b538      	push	{r3, r4, r5, lr}
 8009db6:	4d07      	ldr	r5, [pc, #28]	; (8009dd4 <_fstat_r+0x20>)
 8009db8:	2300      	movs	r3, #0
 8009dba:	4604      	mov	r4, r0
 8009dbc:	4608      	mov	r0, r1
 8009dbe:	4611      	mov	r1, r2
 8009dc0:	602b      	str	r3, [r5, #0]
 8009dc2:	f7f8 ffbe 	bl	8002d42 <_fstat>
 8009dc6:	1c43      	adds	r3, r0, #1
 8009dc8:	d102      	bne.n	8009dd0 <_fstat_r+0x1c>
 8009dca:	682b      	ldr	r3, [r5, #0]
 8009dcc:	b103      	cbz	r3, 8009dd0 <_fstat_r+0x1c>
 8009dce:	6023      	str	r3, [r4, #0]
 8009dd0:	bd38      	pop	{r3, r4, r5, pc}
 8009dd2:	bf00      	nop
 8009dd4:	200004c4 	.word	0x200004c4

08009dd8 <_isatty_r>:
 8009dd8:	b538      	push	{r3, r4, r5, lr}
 8009dda:	4d06      	ldr	r5, [pc, #24]	; (8009df4 <_isatty_r+0x1c>)
 8009ddc:	2300      	movs	r3, #0
 8009dde:	4604      	mov	r4, r0
 8009de0:	4608      	mov	r0, r1
 8009de2:	602b      	str	r3, [r5, #0]
 8009de4:	f7f8 ffbd 	bl	8002d62 <_isatty>
 8009de8:	1c43      	adds	r3, r0, #1
 8009dea:	d102      	bne.n	8009df2 <_isatty_r+0x1a>
 8009dec:	682b      	ldr	r3, [r5, #0]
 8009dee:	b103      	cbz	r3, 8009df2 <_isatty_r+0x1a>
 8009df0:	6023      	str	r3, [r4, #0]
 8009df2:	bd38      	pop	{r3, r4, r5, pc}
 8009df4:	200004c4 	.word	0x200004c4

08009df8 <_lseek_r>:
 8009df8:	b538      	push	{r3, r4, r5, lr}
 8009dfa:	4d07      	ldr	r5, [pc, #28]	; (8009e18 <_lseek_r+0x20>)
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	4608      	mov	r0, r1
 8009e00:	4611      	mov	r1, r2
 8009e02:	2200      	movs	r2, #0
 8009e04:	602a      	str	r2, [r5, #0]
 8009e06:	461a      	mov	r2, r3
 8009e08:	f7f8 ffb6 	bl	8002d78 <_lseek>
 8009e0c:	1c43      	adds	r3, r0, #1
 8009e0e:	d102      	bne.n	8009e16 <_lseek_r+0x1e>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	b103      	cbz	r3, 8009e16 <_lseek_r+0x1e>
 8009e14:	6023      	str	r3, [r4, #0]
 8009e16:	bd38      	pop	{r3, r4, r5, pc}
 8009e18:	200004c4 	.word	0x200004c4

08009e1c <__malloc_lock>:
 8009e1c:	4801      	ldr	r0, [pc, #4]	; (8009e24 <__malloc_lock+0x8>)
 8009e1e:	f7ff bb0d 	b.w	800943c <__retarget_lock_acquire_recursive>
 8009e22:	bf00      	nop
 8009e24:	200004bc 	.word	0x200004bc

08009e28 <__malloc_unlock>:
 8009e28:	4801      	ldr	r0, [pc, #4]	; (8009e30 <__malloc_unlock+0x8>)
 8009e2a:	f7ff bb08 	b.w	800943e <__retarget_lock_release_recursive>
 8009e2e:	bf00      	nop
 8009e30:	200004bc 	.word	0x200004bc

08009e34 <_read_r>:
 8009e34:	b538      	push	{r3, r4, r5, lr}
 8009e36:	4d07      	ldr	r5, [pc, #28]	; (8009e54 <_read_r+0x20>)
 8009e38:	4604      	mov	r4, r0
 8009e3a:	4608      	mov	r0, r1
 8009e3c:	4611      	mov	r1, r2
 8009e3e:	2200      	movs	r2, #0
 8009e40:	602a      	str	r2, [r5, #0]
 8009e42:	461a      	mov	r2, r3
 8009e44:	f7f8 ff54 	bl	8002cf0 <_read>
 8009e48:	1c43      	adds	r3, r0, #1
 8009e4a:	d102      	bne.n	8009e52 <_read_r+0x1e>
 8009e4c:	682b      	ldr	r3, [r5, #0]
 8009e4e:	b103      	cbz	r3, 8009e52 <_read_r+0x1e>
 8009e50:	6023      	str	r3, [r4, #0]
 8009e52:	bd38      	pop	{r3, r4, r5, pc}
 8009e54:	200004c4 	.word	0x200004c4

08009e58 <floor>:
 8009e58:	ec51 0b10 	vmov	r0, r1, d0
 8009e5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e60:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8009e64:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009e68:	2e13      	cmp	r6, #19
 8009e6a:	ee10 5a10 	vmov	r5, s0
 8009e6e:	ee10 8a10 	vmov	r8, s0
 8009e72:	460c      	mov	r4, r1
 8009e74:	dc32      	bgt.n	8009edc <floor+0x84>
 8009e76:	2e00      	cmp	r6, #0
 8009e78:	da14      	bge.n	8009ea4 <floor+0x4c>
 8009e7a:	a333      	add	r3, pc, #204	; (adr r3, 8009f48 <floor+0xf0>)
 8009e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e80:	f7f6 fb4e 	bl	8000520 <__adddf3>
 8009e84:	2200      	movs	r2, #0
 8009e86:	2300      	movs	r3, #0
 8009e88:	f7f6 fd7e 	bl	8000988 <__aeabi_dcmpgt>
 8009e8c:	b138      	cbz	r0, 8009e9e <floor+0x46>
 8009e8e:	2c00      	cmp	r4, #0
 8009e90:	da57      	bge.n	8009f42 <floor+0xea>
 8009e92:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8009e96:	431d      	orrs	r5, r3
 8009e98:	d001      	beq.n	8009e9e <floor+0x46>
 8009e9a:	4c2d      	ldr	r4, [pc, #180]	; (8009f50 <floor+0xf8>)
 8009e9c:	2500      	movs	r5, #0
 8009e9e:	4621      	mov	r1, r4
 8009ea0:	4628      	mov	r0, r5
 8009ea2:	e025      	b.n	8009ef0 <floor+0x98>
 8009ea4:	4f2b      	ldr	r7, [pc, #172]	; (8009f54 <floor+0xfc>)
 8009ea6:	4137      	asrs	r7, r6
 8009ea8:	ea01 0307 	and.w	r3, r1, r7
 8009eac:	4303      	orrs	r3, r0
 8009eae:	d01f      	beq.n	8009ef0 <floor+0x98>
 8009eb0:	a325      	add	r3, pc, #148	; (adr r3, 8009f48 <floor+0xf0>)
 8009eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009eb6:	f7f6 fb33 	bl	8000520 <__adddf3>
 8009eba:	2200      	movs	r2, #0
 8009ebc:	2300      	movs	r3, #0
 8009ebe:	f7f6 fd63 	bl	8000988 <__aeabi_dcmpgt>
 8009ec2:	2800      	cmp	r0, #0
 8009ec4:	d0eb      	beq.n	8009e9e <floor+0x46>
 8009ec6:	2c00      	cmp	r4, #0
 8009ec8:	bfbe      	ittt	lt
 8009eca:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8009ece:	fa43 f606 	asrlt.w	r6, r3, r6
 8009ed2:	19a4      	addlt	r4, r4, r6
 8009ed4:	ea24 0407 	bic.w	r4, r4, r7
 8009ed8:	2500      	movs	r5, #0
 8009eda:	e7e0      	b.n	8009e9e <floor+0x46>
 8009edc:	2e33      	cmp	r6, #51	; 0x33
 8009ede:	dd0b      	ble.n	8009ef8 <floor+0xa0>
 8009ee0:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009ee4:	d104      	bne.n	8009ef0 <floor+0x98>
 8009ee6:	ee10 2a10 	vmov	r2, s0
 8009eea:	460b      	mov	r3, r1
 8009eec:	f7f6 fb18 	bl	8000520 <__adddf3>
 8009ef0:	ec41 0b10 	vmov	d0, r0, r1
 8009ef4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009ef8:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8009efc:	f04f 33ff 	mov.w	r3, #4294967295
 8009f00:	fa23 f707 	lsr.w	r7, r3, r7
 8009f04:	4207      	tst	r7, r0
 8009f06:	d0f3      	beq.n	8009ef0 <floor+0x98>
 8009f08:	a30f      	add	r3, pc, #60	; (adr r3, 8009f48 <floor+0xf0>)
 8009f0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f0e:	f7f6 fb07 	bl	8000520 <__adddf3>
 8009f12:	2200      	movs	r2, #0
 8009f14:	2300      	movs	r3, #0
 8009f16:	f7f6 fd37 	bl	8000988 <__aeabi_dcmpgt>
 8009f1a:	2800      	cmp	r0, #0
 8009f1c:	d0bf      	beq.n	8009e9e <floor+0x46>
 8009f1e:	2c00      	cmp	r4, #0
 8009f20:	da02      	bge.n	8009f28 <floor+0xd0>
 8009f22:	2e14      	cmp	r6, #20
 8009f24:	d103      	bne.n	8009f2e <floor+0xd6>
 8009f26:	3401      	adds	r4, #1
 8009f28:	ea25 0507 	bic.w	r5, r5, r7
 8009f2c:	e7b7      	b.n	8009e9e <floor+0x46>
 8009f2e:	2301      	movs	r3, #1
 8009f30:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8009f34:	fa03 f606 	lsl.w	r6, r3, r6
 8009f38:	4435      	add	r5, r6
 8009f3a:	4545      	cmp	r5, r8
 8009f3c:	bf38      	it	cc
 8009f3e:	18e4      	addcc	r4, r4, r3
 8009f40:	e7f2      	b.n	8009f28 <floor+0xd0>
 8009f42:	2500      	movs	r5, #0
 8009f44:	462c      	mov	r4, r5
 8009f46:	e7aa      	b.n	8009e9e <floor+0x46>
 8009f48:	8800759c 	.word	0x8800759c
 8009f4c:	7e37e43c 	.word	0x7e37e43c
 8009f50:	bff00000 	.word	0xbff00000
 8009f54:	000fffff 	.word	0x000fffff

08009f58 <fmodf>:
 8009f58:	b508      	push	{r3, lr}
 8009f5a:	ed2d 8b02 	vpush	{d8}
 8009f5e:	eef0 8a40 	vmov.f32	s17, s0
 8009f62:	eeb0 8a60 	vmov.f32	s16, s1
 8009f66:	f000 f823 	bl	8009fb0 <__ieee754_fmodf>
 8009f6a:	4b0f      	ldr	r3, [pc, #60]	; (8009fa8 <fmodf+0x50>)
 8009f6c:	f993 3000 	ldrsb.w	r3, [r3]
 8009f70:	3301      	adds	r3, #1
 8009f72:	d016      	beq.n	8009fa2 <fmodf+0x4a>
 8009f74:	eeb4 8a48 	vcmp.f32	s16, s16
 8009f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7c:	d611      	bvs.n	8009fa2 <fmodf+0x4a>
 8009f7e:	eef4 8a68 	vcmp.f32	s17, s17
 8009f82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f86:	d60c      	bvs.n	8009fa2 <fmodf+0x4a>
 8009f88:	eddf 8a08 	vldr	s17, [pc, #32]	; 8009fac <fmodf+0x54>
 8009f8c:	eeb4 8a68 	vcmp.f32	s16, s17
 8009f90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f94:	d105      	bne.n	8009fa2 <fmodf+0x4a>
 8009f96:	f7fe ff03 	bl	8008da0 <__errno>
 8009f9a:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009f9e:	2321      	movs	r3, #33	; 0x21
 8009fa0:	6003      	str	r3, [r0, #0]
 8009fa2:	ecbd 8b02 	vpop	{d8}
 8009fa6:	bd08      	pop	{r3, pc}
 8009fa8:	20000070 	.word	0x20000070
 8009fac:	00000000 	.word	0x00000000

08009fb0 <__ieee754_fmodf>:
 8009fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009fb2:	ee10 6a90 	vmov	r6, s1
 8009fb6:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 8009fba:	d009      	beq.n	8009fd0 <__ieee754_fmodf+0x20>
 8009fbc:	ee10 2a10 	vmov	r2, s0
 8009fc0:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009fc4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009fc8:	da02      	bge.n	8009fd0 <__ieee754_fmodf+0x20>
 8009fca:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 8009fce:	dd04      	ble.n	8009fda <__ieee754_fmodf+0x2a>
 8009fd0:	ee60 0a20 	vmul.f32	s1, s0, s1
 8009fd4:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 8009fd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fda:	42ab      	cmp	r3, r5
 8009fdc:	dbfc      	blt.n	8009fd8 <__ieee754_fmodf+0x28>
 8009fde:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 8009fe2:	d106      	bne.n	8009ff2 <__ieee754_fmodf+0x42>
 8009fe4:	4a32      	ldr	r2, [pc, #200]	; (800a0b0 <__ieee754_fmodf+0x100>)
 8009fe6:	0fe3      	lsrs	r3, r4, #31
 8009fe8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009fec:	ed93 0a00 	vldr	s0, [r3]
 8009ff0:	e7f2      	b.n	8009fd8 <__ieee754_fmodf+0x28>
 8009ff2:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 8009ff6:	d13f      	bne.n	800a078 <__ieee754_fmodf+0xc8>
 8009ff8:	0219      	lsls	r1, r3, #8
 8009ffa:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 8009ffe:	2900      	cmp	r1, #0
 800a000:	dc37      	bgt.n	800a072 <__ieee754_fmodf+0xc2>
 800a002:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 800a006:	d13d      	bne.n	800a084 <__ieee754_fmodf+0xd4>
 800a008:	022f      	lsls	r7, r5, #8
 800a00a:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 800a00e:	2f00      	cmp	r7, #0
 800a010:	da35      	bge.n	800a07e <__ieee754_fmodf+0xce>
 800a012:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800a016:	bfbb      	ittet	lt
 800a018:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a01c:	1a12      	sublt	r2, r2, r0
 800a01e:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 800a022:	4093      	lsllt	r3, r2
 800a024:	bfa8      	it	ge
 800a026:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 800a02a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a02e:	bfb5      	itete	lt
 800a030:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 800a034:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800a038:	1a52      	sublt	r2, r2, r1
 800a03a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800a03e:	bfb8      	it	lt
 800a040:	4095      	lsllt	r5, r2
 800a042:	1a40      	subs	r0, r0, r1
 800a044:	1b5a      	subs	r2, r3, r5
 800a046:	bb00      	cbnz	r0, 800a08a <__ieee754_fmodf+0xda>
 800a048:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 800a04c:	bf38      	it	cc
 800a04e:	4613      	movcc	r3, r2
 800a050:	2b00      	cmp	r3, #0
 800a052:	d0c7      	beq.n	8009fe4 <__ieee754_fmodf+0x34>
 800a054:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a058:	db1f      	blt.n	800a09a <__ieee754_fmodf+0xea>
 800a05a:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 800a05e:	db1f      	blt.n	800a0a0 <__ieee754_fmodf+0xf0>
 800a060:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800a064:	317f      	adds	r1, #127	; 0x7f
 800a066:	4323      	orrs	r3, r4
 800a068:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 800a06c:	ee00 3a10 	vmov	s0, r3
 800a070:	e7b2      	b.n	8009fd8 <__ieee754_fmodf+0x28>
 800a072:	3801      	subs	r0, #1
 800a074:	0049      	lsls	r1, r1, #1
 800a076:	e7c2      	b.n	8009ffe <__ieee754_fmodf+0x4e>
 800a078:	15d8      	asrs	r0, r3, #23
 800a07a:	387f      	subs	r0, #127	; 0x7f
 800a07c:	e7c1      	b.n	800a002 <__ieee754_fmodf+0x52>
 800a07e:	3901      	subs	r1, #1
 800a080:	007f      	lsls	r7, r7, #1
 800a082:	e7c4      	b.n	800a00e <__ieee754_fmodf+0x5e>
 800a084:	15e9      	asrs	r1, r5, #23
 800a086:	397f      	subs	r1, #127	; 0x7f
 800a088:	e7c3      	b.n	800a012 <__ieee754_fmodf+0x62>
 800a08a:	2a00      	cmp	r2, #0
 800a08c:	da02      	bge.n	800a094 <__ieee754_fmodf+0xe4>
 800a08e:	005b      	lsls	r3, r3, #1
 800a090:	3801      	subs	r0, #1
 800a092:	e7d7      	b.n	800a044 <__ieee754_fmodf+0x94>
 800a094:	d0a6      	beq.n	8009fe4 <__ieee754_fmodf+0x34>
 800a096:	0053      	lsls	r3, r2, #1
 800a098:	e7fa      	b.n	800a090 <__ieee754_fmodf+0xe0>
 800a09a:	005b      	lsls	r3, r3, #1
 800a09c:	3901      	subs	r1, #1
 800a09e:	e7d9      	b.n	800a054 <__ieee754_fmodf+0xa4>
 800a0a0:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 800a0a4:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 800a0a8:	3182      	adds	r1, #130	; 0x82
 800a0aa:	410b      	asrs	r3, r1
 800a0ac:	4323      	orrs	r3, r4
 800a0ae:	e7dd      	b.n	800a06c <__ieee754_fmodf+0xbc>
 800a0b0:	0800a908 	.word	0x0800a908

0800a0b4 <_init>:
 800a0b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0b6:	bf00      	nop
 800a0b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0ba:	bc08      	pop	{r3}
 800a0bc:	469e      	mov	lr, r3
 800a0be:	4770      	bx	lr

0800a0c0 <_fini>:
 800a0c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a0c2:	bf00      	nop
 800a0c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a0c6:	bc08      	pop	{r3}
 800a0c8:	469e      	mov	lr, r3
 800a0ca:	4770      	bx	lr
