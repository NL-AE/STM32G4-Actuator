
STM32G431_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098e4  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000708  08009ac4  08009ac4  00019ac4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a1cc  0800a1cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000000  0800a1cc  0800a1cc  00020074  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800a1cc  0800a1cc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a1cc  0800a1cc  0001a1cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a1d0  0800a1d0  0001a1d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800a1d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000494  20000078  0800a248  00020078  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000050c  0800a248  0002050c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce89  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003546  00000000  00000000  0003cf2d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001748  00000000  00000000  00040478  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00041bc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022956  00000000  00000000  00043170  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000192c0  00000000  00000000  00065ac6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df66d  00000000  00000000  0007ed86  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015e3f3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006e18  00000000  00000000  0015e448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000078 	.word	0x20000078
 80001fc:	00000000 	.word	0x00000000
 8000200:	08009aac 	.word	0x08009aac

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000007c 	.word	0x2000007c
 800021c:	08009aac 	.word	0x08009aac

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_dmul>:
 80002c0:	b570      	push	{r4, r5, r6, lr}
 80002c2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80002c6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80002ca:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80002ce:	bf1d      	ittte	ne
 80002d0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80002d4:	ea94 0f0c 	teqne	r4, ip
 80002d8:	ea95 0f0c 	teqne	r5, ip
 80002dc:	f000 f8de 	bleq	800049c <__aeabi_dmul+0x1dc>
 80002e0:	442c      	add	r4, r5
 80002e2:	ea81 0603 	eor.w	r6, r1, r3
 80002e6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80002ea:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80002ee:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002f2:	bf18      	it	ne
 80002f4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002f8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002fc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000300:	d038      	beq.n	8000374 <__aeabi_dmul+0xb4>
 8000302:	fba0 ce02 	umull	ip, lr, r0, r2
 8000306:	f04f 0500 	mov.w	r5, #0
 800030a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800030e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000312:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000316:	f04f 0600 	mov.w	r6, #0
 800031a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800031e:	f09c 0f00 	teq	ip, #0
 8000322:	bf18      	it	ne
 8000324:	f04e 0e01 	orrne.w	lr, lr, #1
 8000328:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800032c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000330:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8000334:	d204      	bcs.n	8000340 <__aeabi_dmul+0x80>
 8000336:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800033a:	416d      	adcs	r5, r5
 800033c:	eb46 0606 	adc.w	r6, r6, r6
 8000340:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000344:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000348:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800034c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000350:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000354:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000358:	bf88      	it	hi
 800035a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800035e:	d81e      	bhi.n	800039e <__aeabi_dmul+0xde>
 8000360:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000364:	bf08      	it	eq
 8000366:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800036a:	f150 0000 	adcs.w	r0, r0, #0
 800036e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000378:	ea46 0101 	orr.w	r1, r6, r1
 800037c:	ea40 0002 	orr.w	r0, r0, r2
 8000380:	ea81 0103 	eor.w	r1, r1, r3
 8000384:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000388:	bfc2      	ittt	gt
 800038a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800038e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000392:	bd70      	popgt	{r4, r5, r6, pc}
 8000394:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000398:	f04f 0e00 	mov.w	lr, #0
 800039c:	3c01      	subs	r4, #1
 800039e:	f300 80ab 	bgt.w	80004f8 <__aeabi_dmul+0x238>
 80003a2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80003a6:	bfde      	ittt	le
 80003a8:	2000      	movle	r0, #0
 80003aa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80003ae:	bd70      	pople	{r4, r5, r6, pc}
 80003b0:	f1c4 0400 	rsb	r4, r4, #0
 80003b4:	3c20      	subs	r4, #32
 80003b6:	da35      	bge.n	8000424 <__aeabi_dmul+0x164>
 80003b8:	340c      	adds	r4, #12
 80003ba:	dc1b      	bgt.n	80003f4 <__aeabi_dmul+0x134>
 80003bc:	f104 0414 	add.w	r4, r4, #20
 80003c0:	f1c4 0520 	rsb	r5, r4, #32
 80003c4:	fa00 f305 	lsl.w	r3, r0, r5
 80003c8:	fa20 f004 	lsr.w	r0, r0, r4
 80003cc:	fa01 f205 	lsl.w	r2, r1, r5
 80003d0:	ea40 0002 	orr.w	r0, r0, r2
 80003d4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80003d8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80003dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003e0:	fa21 f604 	lsr.w	r6, r1, r4
 80003e4:	eb42 0106 	adc.w	r1, r2, r6
 80003e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003ec:	bf08      	it	eq
 80003ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003f2:	bd70      	pop	{r4, r5, r6, pc}
 80003f4:	f1c4 040c 	rsb	r4, r4, #12
 80003f8:	f1c4 0520 	rsb	r5, r4, #32
 80003fc:	fa00 f304 	lsl.w	r3, r0, r4
 8000400:	fa20 f005 	lsr.w	r0, r0, r5
 8000404:	fa01 f204 	lsl.w	r2, r1, r4
 8000408:	ea40 0002 	orr.w	r0, r0, r2
 800040c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000410:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000414:	f141 0100 	adc.w	r1, r1, #0
 8000418:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800041c:	bf08      	it	eq
 800041e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000422:	bd70      	pop	{r4, r5, r6, pc}
 8000424:	f1c4 0520 	rsb	r5, r4, #32
 8000428:	fa00 f205 	lsl.w	r2, r0, r5
 800042c:	ea4e 0e02 	orr.w	lr, lr, r2
 8000430:	fa20 f304 	lsr.w	r3, r0, r4
 8000434:	fa01 f205 	lsl.w	r2, r1, r5
 8000438:	ea43 0302 	orr.w	r3, r3, r2
 800043c:	fa21 f004 	lsr.w	r0, r1, r4
 8000440:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000444:	fa21 f204 	lsr.w	r2, r1, r4
 8000448:	ea20 0002 	bic.w	r0, r0, r2
 800044c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000450:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000454:	bf08      	it	eq
 8000456:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800045a:	bd70      	pop	{r4, r5, r6, pc}
 800045c:	f094 0f00 	teq	r4, #0
 8000460:	d10f      	bne.n	8000482 <__aeabi_dmul+0x1c2>
 8000462:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000466:	0040      	lsls	r0, r0, #1
 8000468:	eb41 0101 	adc.w	r1, r1, r1
 800046c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000470:	bf08      	it	eq
 8000472:	3c01      	subeq	r4, #1
 8000474:	d0f7      	beq.n	8000466 <__aeabi_dmul+0x1a6>
 8000476:	ea41 0106 	orr.w	r1, r1, r6
 800047a:	f095 0f00 	teq	r5, #0
 800047e:	bf18      	it	ne
 8000480:	4770      	bxne	lr
 8000482:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000486:	0052      	lsls	r2, r2, #1
 8000488:	eb43 0303 	adc.w	r3, r3, r3
 800048c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000490:	bf08      	it	eq
 8000492:	3d01      	subeq	r5, #1
 8000494:	d0f7      	beq.n	8000486 <__aeabi_dmul+0x1c6>
 8000496:	ea43 0306 	orr.w	r3, r3, r6
 800049a:	4770      	bx	lr
 800049c:	ea94 0f0c 	teq	r4, ip
 80004a0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80004a4:	bf18      	it	ne
 80004a6:	ea95 0f0c 	teqne	r5, ip
 80004aa:	d00c      	beq.n	80004c6 <__aeabi_dmul+0x206>
 80004ac:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004b0:	bf18      	it	ne
 80004b2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004b6:	d1d1      	bne.n	800045c <__aeabi_dmul+0x19c>
 80004b8:	ea81 0103 	eor.w	r1, r1, r3
 80004bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004c0:	f04f 0000 	mov.w	r0, #0
 80004c4:	bd70      	pop	{r4, r5, r6, pc}
 80004c6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80004ca:	bf06      	itte	eq
 80004cc:	4610      	moveq	r0, r2
 80004ce:	4619      	moveq	r1, r3
 80004d0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80004d4:	d019      	beq.n	800050a <__aeabi_dmul+0x24a>
 80004d6:	ea94 0f0c 	teq	r4, ip
 80004da:	d102      	bne.n	80004e2 <__aeabi_dmul+0x222>
 80004dc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80004e0:	d113      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004e2:	ea95 0f0c 	teq	r5, ip
 80004e6:	d105      	bne.n	80004f4 <__aeabi_dmul+0x234>
 80004e8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80004ec:	bf1c      	itt	ne
 80004ee:	4610      	movne	r0, r2
 80004f0:	4619      	movne	r1, r3
 80004f2:	d10a      	bne.n	800050a <__aeabi_dmul+0x24a>
 80004f4:	ea81 0103 	eor.w	r1, r1, r3
 80004f8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004fc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000500:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000504:	f04f 0000 	mov.w	r0, #0
 8000508:	bd70      	pop	{r4, r5, r6, pc}
 800050a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800050e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000512:	bd70      	pop	{r4, r5, r6, pc}

08000514 <__aeabi_drsub>:
 8000514:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000518:	e002      	b.n	8000520 <__adddf3>
 800051a:	bf00      	nop

0800051c <__aeabi_dsub>:
 800051c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000520 <__adddf3>:
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000526:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800052a:	ea94 0f05 	teq	r4, r5
 800052e:	bf08      	it	eq
 8000530:	ea90 0f02 	teqeq	r0, r2
 8000534:	bf1f      	itttt	ne
 8000536:	ea54 0c00 	orrsne.w	ip, r4, r0
 800053a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800053e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000542:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000546:	f000 80e2 	beq.w	800070e <__adddf3+0x1ee>
 800054a:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800054e:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000552:	bfb8      	it	lt
 8000554:	426d      	neglt	r5, r5
 8000556:	dd0c      	ble.n	8000572 <__adddf3+0x52>
 8000558:	442c      	add	r4, r5
 800055a:	ea80 0202 	eor.w	r2, r0, r2
 800055e:	ea81 0303 	eor.w	r3, r1, r3
 8000562:	ea82 0000 	eor.w	r0, r2, r0
 8000566:	ea83 0101 	eor.w	r1, r3, r1
 800056a:	ea80 0202 	eor.w	r2, r0, r2
 800056e:	ea81 0303 	eor.w	r3, r1, r3
 8000572:	2d36      	cmp	r5, #54	; 0x36
 8000574:	bf88      	it	hi
 8000576:	bd30      	pophi	{r4, r5, pc}
 8000578:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800057c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000580:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000584:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000588:	d002      	beq.n	8000590 <__adddf3+0x70>
 800058a:	4240      	negs	r0, r0
 800058c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000590:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000594:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000598:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800059c:	d002      	beq.n	80005a4 <__adddf3+0x84>
 800059e:	4252      	negs	r2, r2
 80005a0:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80005a4:	ea94 0f05 	teq	r4, r5
 80005a8:	f000 80a7 	beq.w	80006fa <__adddf3+0x1da>
 80005ac:	f1a4 0401 	sub.w	r4, r4, #1
 80005b0:	f1d5 0e20 	rsbs	lr, r5, #32
 80005b4:	db0d      	blt.n	80005d2 <__adddf3+0xb2>
 80005b6:	fa02 fc0e 	lsl.w	ip, r2, lr
 80005ba:	fa22 f205 	lsr.w	r2, r2, r5
 80005be:	1880      	adds	r0, r0, r2
 80005c0:	f141 0100 	adc.w	r1, r1, #0
 80005c4:	fa03 f20e 	lsl.w	r2, r3, lr
 80005c8:	1880      	adds	r0, r0, r2
 80005ca:	fa43 f305 	asr.w	r3, r3, r5
 80005ce:	4159      	adcs	r1, r3
 80005d0:	e00e      	b.n	80005f0 <__adddf3+0xd0>
 80005d2:	f1a5 0520 	sub.w	r5, r5, #32
 80005d6:	f10e 0e20 	add.w	lr, lr, #32
 80005da:	2a01      	cmp	r2, #1
 80005dc:	fa03 fc0e 	lsl.w	ip, r3, lr
 80005e0:	bf28      	it	cs
 80005e2:	f04c 0c02 	orrcs.w	ip, ip, #2
 80005e6:	fa43 f305 	asr.w	r3, r3, r5
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	d507      	bpl.n	8000606 <__adddf3+0xe6>
 80005f6:	f04f 0e00 	mov.w	lr, #0
 80005fa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005fe:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000602:	eb6e 0101 	sbc.w	r1, lr, r1
 8000606:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800060a:	d31b      	bcc.n	8000644 <__adddf3+0x124>
 800060c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000610:	d30c      	bcc.n	800062c <__adddf3+0x10c>
 8000612:	0849      	lsrs	r1, r1, #1
 8000614:	ea5f 0030 	movs.w	r0, r0, rrx
 8000618:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800061c:	f104 0401 	add.w	r4, r4, #1
 8000620:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000624:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000628:	f080 809a 	bcs.w	8000760 <__adddf3+0x240>
 800062c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000630:	bf08      	it	eq
 8000632:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000636:	f150 0000 	adcs.w	r0, r0, #0
 800063a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800063e:	ea41 0105 	orr.w	r1, r1, r5
 8000642:	bd30      	pop	{r4, r5, pc}
 8000644:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000648:	4140      	adcs	r0, r0
 800064a:	eb41 0101 	adc.w	r1, r1, r1
 800064e:	3c01      	subs	r4, #1
 8000650:	bf28      	it	cs
 8000652:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000656:	d2e9      	bcs.n	800062c <__adddf3+0x10c>
 8000658:	f091 0f00 	teq	r1, #0
 800065c:	bf04      	itt	eq
 800065e:	4601      	moveq	r1, r0
 8000660:	2000      	moveq	r0, #0
 8000662:	fab1 f381 	clz	r3, r1
 8000666:	bf08      	it	eq
 8000668:	3320      	addeq	r3, #32
 800066a:	f1a3 030b 	sub.w	r3, r3, #11
 800066e:	f1b3 0220 	subs.w	r2, r3, #32
 8000672:	da0c      	bge.n	800068e <__adddf3+0x16e>
 8000674:	320c      	adds	r2, #12
 8000676:	dd08      	ble.n	800068a <__adddf3+0x16a>
 8000678:	f102 0c14 	add.w	ip, r2, #20
 800067c:	f1c2 020c 	rsb	r2, r2, #12
 8000680:	fa01 f00c 	lsl.w	r0, r1, ip
 8000684:	fa21 f102 	lsr.w	r1, r1, r2
 8000688:	e00c      	b.n	80006a4 <__adddf3+0x184>
 800068a:	f102 0214 	add.w	r2, r2, #20
 800068e:	bfd8      	it	le
 8000690:	f1c2 0c20 	rsble	ip, r2, #32
 8000694:	fa01 f102 	lsl.w	r1, r1, r2
 8000698:	fa20 fc0c 	lsr.w	ip, r0, ip
 800069c:	bfdc      	itt	le
 800069e:	ea41 010c 	orrle.w	r1, r1, ip
 80006a2:	4090      	lslle	r0, r2
 80006a4:	1ae4      	subs	r4, r4, r3
 80006a6:	bfa2      	ittt	ge
 80006a8:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80006ac:	4329      	orrge	r1, r5
 80006ae:	bd30      	popge	{r4, r5, pc}
 80006b0:	ea6f 0404 	mvn.w	r4, r4
 80006b4:	3c1f      	subs	r4, #31
 80006b6:	da1c      	bge.n	80006f2 <__adddf3+0x1d2>
 80006b8:	340c      	adds	r4, #12
 80006ba:	dc0e      	bgt.n	80006da <__adddf3+0x1ba>
 80006bc:	f104 0414 	add.w	r4, r4, #20
 80006c0:	f1c4 0220 	rsb	r2, r4, #32
 80006c4:	fa20 f004 	lsr.w	r0, r0, r4
 80006c8:	fa01 f302 	lsl.w	r3, r1, r2
 80006cc:	ea40 0003 	orr.w	r0, r0, r3
 80006d0:	fa21 f304 	lsr.w	r3, r1, r4
 80006d4:	ea45 0103 	orr.w	r1, r5, r3
 80006d8:	bd30      	pop	{r4, r5, pc}
 80006da:	f1c4 040c 	rsb	r4, r4, #12
 80006de:	f1c4 0220 	rsb	r2, r4, #32
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 f304 	lsl.w	r3, r1, r4
 80006ea:	ea40 0003 	orr.w	r0, r0, r3
 80006ee:	4629      	mov	r1, r5
 80006f0:	bd30      	pop	{r4, r5, pc}
 80006f2:	fa21 f004 	lsr.w	r0, r1, r4
 80006f6:	4629      	mov	r1, r5
 80006f8:	bd30      	pop	{r4, r5, pc}
 80006fa:	f094 0f00 	teq	r4, #0
 80006fe:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8000702:	bf06      	itte	eq
 8000704:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000708:	3401      	addeq	r4, #1
 800070a:	3d01      	subne	r5, #1
 800070c:	e74e      	b.n	80005ac <__adddf3+0x8c>
 800070e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000712:	bf18      	it	ne
 8000714:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000718:	d029      	beq.n	800076e <__adddf3+0x24e>
 800071a:	ea94 0f05 	teq	r4, r5
 800071e:	bf08      	it	eq
 8000720:	ea90 0f02 	teqeq	r0, r2
 8000724:	d005      	beq.n	8000732 <__adddf3+0x212>
 8000726:	ea54 0c00 	orrs.w	ip, r4, r0
 800072a:	bf04      	itt	eq
 800072c:	4619      	moveq	r1, r3
 800072e:	4610      	moveq	r0, r2
 8000730:	bd30      	pop	{r4, r5, pc}
 8000732:	ea91 0f03 	teq	r1, r3
 8000736:	bf1e      	ittt	ne
 8000738:	2100      	movne	r1, #0
 800073a:	2000      	movne	r0, #0
 800073c:	bd30      	popne	{r4, r5, pc}
 800073e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000742:	d105      	bne.n	8000750 <__adddf3+0x230>
 8000744:	0040      	lsls	r0, r0, #1
 8000746:	4149      	adcs	r1, r1
 8000748:	bf28      	it	cs
 800074a:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800074e:	bd30      	pop	{r4, r5, pc}
 8000750:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000754:	bf3c      	itt	cc
 8000756:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800075a:	bd30      	popcc	{r4, r5, pc}
 800075c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000760:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000764:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd30      	pop	{r4, r5, pc}
 800076e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000772:	bf1a      	itte	ne
 8000774:	4619      	movne	r1, r3
 8000776:	4610      	movne	r0, r2
 8000778:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800077c:	bf1c      	itt	ne
 800077e:	460b      	movne	r3, r1
 8000780:	4602      	movne	r2, r0
 8000782:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000786:	bf06      	itte	eq
 8000788:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800078c:	ea91 0f03 	teqeq	r1, r3
 8000790:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000794:	bd30      	pop	{r4, r5, pc}
 8000796:	bf00      	nop

08000798 <__aeabi_ui2d>:
 8000798:	f090 0f00 	teq	r0, #0
 800079c:	bf04      	itt	eq
 800079e:	2100      	moveq	r1, #0
 80007a0:	4770      	bxeq	lr
 80007a2:	b530      	push	{r4, r5, lr}
 80007a4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007a8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007ac:	f04f 0500 	mov.w	r5, #0
 80007b0:	f04f 0100 	mov.w	r1, #0
 80007b4:	e750      	b.n	8000658 <__adddf3+0x138>
 80007b6:	bf00      	nop

080007b8 <__aeabi_i2d>:
 80007b8:	f090 0f00 	teq	r0, #0
 80007bc:	bf04      	itt	eq
 80007be:	2100      	moveq	r1, #0
 80007c0:	4770      	bxeq	lr
 80007c2:	b530      	push	{r4, r5, lr}
 80007c4:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007c8:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007cc:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80007d0:	bf48      	it	mi
 80007d2:	4240      	negmi	r0, r0
 80007d4:	f04f 0100 	mov.w	r1, #0
 80007d8:	e73e      	b.n	8000658 <__adddf3+0x138>
 80007da:	bf00      	nop

080007dc <__aeabi_f2d>:
 80007dc:	0042      	lsls	r2, r0, #1
 80007de:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80007e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80007e6:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80007ea:	bf1f      	itttt	ne
 80007ec:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007f0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007f4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007f8:	4770      	bxne	lr
 80007fa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007fe:	bf08      	it	eq
 8000800:	4770      	bxeq	lr
 8000802:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000806:	bf04      	itt	eq
 8000808:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 800080c:	4770      	bxeq	lr
 800080e:	b530      	push	{r4, r5, lr}
 8000810:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000814:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000818:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800081c:	e71c      	b.n	8000658 <__adddf3+0x138>
 800081e:	bf00      	nop

08000820 <__aeabi_ul2d>:
 8000820:	ea50 0201 	orrs.w	r2, r0, r1
 8000824:	bf08      	it	eq
 8000826:	4770      	bxeq	lr
 8000828:	b530      	push	{r4, r5, lr}
 800082a:	f04f 0500 	mov.w	r5, #0
 800082e:	e00a      	b.n	8000846 <__aeabi_l2d+0x16>

08000830 <__aeabi_l2d>:
 8000830:	ea50 0201 	orrs.w	r2, r0, r1
 8000834:	bf08      	it	eq
 8000836:	4770      	bxeq	lr
 8000838:	b530      	push	{r4, r5, lr}
 800083a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800083e:	d502      	bpl.n	8000846 <__aeabi_l2d+0x16>
 8000840:	4240      	negs	r0, r0
 8000842:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000846:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800084a:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800084e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000852:	f43f aed8 	beq.w	8000606 <__adddf3+0xe6>
 8000856:	f04f 0203 	mov.w	r2, #3
 800085a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800085e:	bf18      	it	ne
 8000860:	3203      	addne	r2, #3
 8000862:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000866:	bf18      	it	ne
 8000868:	3203      	addne	r2, #3
 800086a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800086e:	f1c2 0320 	rsb	r3, r2, #32
 8000872:	fa00 fc03 	lsl.w	ip, r0, r3
 8000876:	fa20 f002 	lsr.w	r0, r0, r2
 800087a:	fa01 fe03 	lsl.w	lr, r1, r3
 800087e:	ea40 000e 	orr.w	r0, r0, lr
 8000882:	fa21 f102 	lsr.w	r1, r1, r2
 8000886:	4414      	add	r4, r2
 8000888:	e6bd      	b.n	8000606 <__adddf3+0xe6>
 800088a:	bf00      	nop

0800088c <__gedf2>:
 800088c:	f04f 3cff 	mov.w	ip, #4294967295
 8000890:	e006      	b.n	80008a0 <__cmpdf2+0x4>
 8000892:	bf00      	nop

08000894 <__ledf2>:
 8000894:	f04f 0c01 	mov.w	ip, #1
 8000898:	e002      	b.n	80008a0 <__cmpdf2+0x4>
 800089a:	bf00      	nop

0800089c <__cmpdf2>:
 800089c:	f04f 0c01 	mov.w	ip, #1
 80008a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80008a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80008b0:	bf18      	it	ne
 80008b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80008b6:	d01b      	beq.n	80008f0 <__cmpdf2+0x54>
 80008b8:	b001      	add	sp, #4
 80008ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80008be:	bf0c      	ite	eq
 80008c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80008c4:	ea91 0f03 	teqne	r1, r3
 80008c8:	bf02      	ittt	eq
 80008ca:	ea90 0f02 	teqeq	r0, r2
 80008ce:	2000      	moveq	r0, #0
 80008d0:	4770      	bxeq	lr
 80008d2:	f110 0f00 	cmn.w	r0, #0
 80008d6:	ea91 0f03 	teq	r1, r3
 80008da:	bf58      	it	pl
 80008dc:	4299      	cmppl	r1, r3
 80008de:	bf08      	it	eq
 80008e0:	4290      	cmpeq	r0, r2
 80008e2:	bf2c      	ite	cs
 80008e4:	17d8      	asrcs	r0, r3, #31
 80008e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80008ea:	f040 0001 	orr.w	r0, r0, #1
 80008ee:	4770      	bx	lr
 80008f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80008f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80008f8:	d102      	bne.n	8000900 <__cmpdf2+0x64>
 80008fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80008fe:	d107      	bne.n	8000910 <__cmpdf2+0x74>
 8000900:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000904:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000908:	d1d6      	bne.n	80008b8 <__cmpdf2+0x1c>
 800090a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800090e:	d0d3      	beq.n	80008b8 <__cmpdf2+0x1c>
 8000910:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000914:	4770      	bx	lr
 8000916:	bf00      	nop

08000918 <__aeabi_cdrcmple>:
 8000918:	4684      	mov	ip, r0
 800091a:	4610      	mov	r0, r2
 800091c:	4662      	mov	r2, ip
 800091e:	468c      	mov	ip, r1
 8000920:	4619      	mov	r1, r3
 8000922:	4663      	mov	r3, ip
 8000924:	e000      	b.n	8000928 <__aeabi_cdcmpeq>
 8000926:	bf00      	nop

08000928 <__aeabi_cdcmpeq>:
 8000928:	b501      	push	{r0, lr}
 800092a:	f7ff ffb7 	bl	800089c <__cmpdf2>
 800092e:	2800      	cmp	r0, #0
 8000930:	bf48      	it	mi
 8000932:	f110 0f00 	cmnmi.w	r0, #0
 8000936:	bd01      	pop	{r0, pc}

08000938 <__aeabi_dcmpeq>:
 8000938:	f84d ed08 	str.w	lr, [sp, #-8]!
 800093c:	f7ff fff4 	bl	8000928 <__aeabi_cdcmpeq>
 8000940:	bf0c      	ite	eq
 8000942:	2001      	moveq	r0, #1
 8000944:	2000      	movne	r0, #0
 8000946:	f85d fb08 	ldr.w	pc, [sp], #8
 800094a:	bf00      	nop

0800094c <__aeabi_dcmplt>:
 800094c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000950:	f7ff ffea 	bl	8000928 <__aeabi_cdcmpeq>
 8000954:	bf34      	ite	cc
 8000956:	2001      	movcc	r0, #1
 8000958:	2000      	movcs	r0, #0
 800095a:	f85d fb08 	ldr.w	pc, [sp], #8
 800095e:	bf00      	nop

08000960 <__aeabi_dcmple>:
 8000960:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000964:	f7ff ffe0 	bl	8000928 <__aeabi_cdcmpeq>
 8000968:	bf94      	ite	ls
 800096a:	2001      	movls	r0, #1
 800096c:	2000      	movhi	r0, #0
 800096e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000972:	bf00      	nop

08000974 <__aeabi_dcmpge>:
 8000974:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000978:	f7ff ffce 	bl	8000918 <__aeabi_cdrcmple>
 800097c:	bf94      	ite	ls
 800097e:	2001      	movls	r0, #1
 8000980:	2000      	movhi	r0, #0
 8000982:	f85d fb08 	ldr.w	pc, [sp], #8
 8000986:	bf00      	nop

08000988 <__aeabi_dcmpgt>:
 8000988:	f84d ed08 	str.w	lr, [sp, #-8]!
 800098c:	f7ff ffc4 	bl	8000918 <__aeabi_cdrcmple>
 8000990:	bf34      	ite	cc
 8000992:	2001      	movcc	r0, #1
 8000994:	2000      	movcs	r0, #0
 8000996:	f85d fb08 	ldr.w	pc, [sp], #8
 800099a:	bf00      	nop

0800099c <__aeabi_d2iz>:
 800099c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009a4:	d215      	bcs.n	80009d2 <__aeabi_d2iz+0x36>
 80009a6:	d511      	bpl.n	80009cc <__aeabi_d2iz+0x30>
 80009a8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009ac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b0:	d912      	bls.n	80009d8 <__aeabi_d2iz+0x3c>
 80009b2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009b6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009ba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009be:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009c2:	fa23 f002 	lsr.w	r0, r3, r2
 80009c6:	bf18      	it	ne
 80009c8:	4240      	negne	r0, r0
 80009ca:	4770      	bx	lr
 80009cc:	f04f 0000 	mov.w	r0, #0
 80009d0:	4770      	bx	lr
 80009d2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009d6:	d105      	bne.n	80009e4 <__aeabi_d2iz+0x48>
 80009d8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009dc:	bf08      	it	eq
 80009de:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009e2:	4770      	bx	lr
 80009e4:	f04f 0000 	mov.w	r0, #0
 80009e8:	4770      	bx	lr
 80009ea:	bf00      	nop

080009ec <__aeabi_d2f>:
 80009ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80009f4:	bf24      	itt	cs
 80009f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80009fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80009fe:	d90d      	bls.n	8000a1c <__aeabi_d2f+0x30>
 8000a00:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a04:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a08:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a0c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a10:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a14:	bf08      	it	eq
 8000a16:	f020 0001 	biceq.w	r0, r0, #1
 8000a1a:	4770      	bx	lr
 8000a1c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a20:	d121      	bne.n	8000a66 <__aeabi_d2f+0x7a>
 8000a22:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a26:	bfbc      	itt	lt
 8000a28:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a2c:	4770      	bxlt	lr
 8000a2e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a32:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a36:	f1c2 0218 	rsb	r2, r2, #24
 8000a3a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a3e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a42:	fa20 f002 	lsr.w	r0, r0, r2
 8000a46:	bf18      	it	ne
 8000a48:	f040 0001 	orrne.w	r0, r0, #1
 8000a4c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a50:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a54:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a58:	ea40 000c 	orr.w	r0, r0, ip
 8000a5c:	fa23 f302 	lsr.w	r3, r3, r2
 8000a60:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000a64:	e7cc      	b.n	8000a00 <__aeabi_d2f+0x14>
 8000a66:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000a6a:	d107      	bne.n	8000a7c <__aeabi_d2f+0x90>
 8000a6c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000a70:	bf1e      	ittt	ne
 8000a72:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000a76:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000a7a:	4770      	bxne	lr
 8000a7c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000a80:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000a84:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000a88:	4770      	bx	lr
 8000a8a:	bf00      	nop

08000a8c <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000a8c:	b580      	push	{r7, lr}
 8000a8e:	b08c      	sub	sp, #48	; 0x30
 8000a90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000a92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000a96:	2200      	movs	r2, #0
 8000a98:	601a      	str	r2, [r3, #0]
 8000a9a:	605a      	str	r2, [r3, #4]
 8000a9c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000a9e:	1d3b      	adds	r3, r7, #4
 8000aa0:	2220      	movs	r2, #32
 8000aa2:	2100      	movs	r1, #0
 8000aa4:	4618      	mov	r0, r3
 8000aa6:	f007 fea1 	bl	80087ec <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8000aaa:	4b3c      	ldr	r3, [pc, #240]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000aac:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000ab0:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000ab2:	4b3a      	ldr	r3, [pc, #232]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ab4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000ab8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000aba:	4b38      	ldr	r3, [pc, #224]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000ac0:	4b36      	ldr	r3, [pc, #216]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000ac6:	4b35      	ldr	r3, [pc, #212]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ac8:	2200      	movs	r2, #0
 8000aca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000acc:	4b33      	ldr	r3, [pc, #204]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ace:	2201      	movs	r2, #1
 8000ad0:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ad2:	4b32      	ldr	r3, [pc, #200]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ad4:	2208      	movs	r2, #8
 8000ad6:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000ad8:	4b30      	ldr	r3, [pc, #192]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ada:	2200      	movs	r2, #0
 8000adc:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000ade:	4b2f      	ldr	r3, [pc, #188]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 2;
 8000ae4:	4b2d      	ldr	r3, [pc, #180]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000ae6:	2202      	movs	r2, #2
 8000ae8:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000aea:	4b2c      	ldr	r3, [pc, #176]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000aec:	2200      	movs	r2, #0
 8000aee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000af2:	4b2a      	ldr	r3, [pc, #168]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000af4:	2200      	movs	r2, #0
 8000af6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000af8:	4b28      	ldr	r3, [pc, #160]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000afa:	2200      	movs	r2, #0
 8000afc:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000afe:	4b27      	ldr	r3, [pc, #156]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b00:	2201      	movs	r2, #1
 8000b02:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000b06:	4b25      	ldr	r3, [pc, #148]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b08:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000b0c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000b0e:	4b23      	ldr	r3, [pc, #140]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b10:	2200      	movs	r2, #0
 8000b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000b16:	4821      	ldr	r0, [pc, #132]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b18:	f002 f9cc 	bl	8002eb4 <HAL_ADC_Init>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <MX_ADC1_Init+0x9a>
  {
    Error_Handler();
 8000b22:	f001 fbb5 	bl	8002290 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000b26:	2306      	movs	r3, #6
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 8000b2a:	2300      	movs	r3, #0
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_5CYCLES;
 8000b2e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000b32:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000b34:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b38:	4619      	mov	r1, r3
 8000b3a:	4818      	ldr	r0, [pc, #96]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b3c:	f003 fac4 	bl	80040c8 <HAL_ADCEx_MultiModeConfigChannel>
 8000b40:	4603      	mov	r3, r0
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d001      	beq.n	8000b4a <MX_ADC1_Init+0xbe>
  {
    Error_Handler();
 8000b46:	f001 fba3 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000b4a:	4b15      	ldr	r3, [pc, #84]	; (8000ba0 <MX_ADC1_Init+0x114>)
 8000b4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000b4e:	2306      	movs	r3, #6
 8000b50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000b52:	2306      	movs	r3, #6
 8000b54:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000b56:	237f      	movs	r3, #127	; 0x7f
 8000b58:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000b5a:	2304      	movs	r3, #4
 8000b5c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b62:	1d3b      	adds	r3, r7, #4
 8000b64:	4619      	mov	r1, r3
 8000b66:	480d      	ldr	r0, [pc, #52]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b68:	f002 fda2 	bl	80036b0 <HAL_ADC_ConfigChannel>
 8000b6c:	4603      	mov	r3, r0
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d001      	beq.n	8000b76 <MX_ADC1_Init+0xea>
  {
    Error_Handler();
 8000b72:	f001 fb8d 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	; (8000ba4 <MX_ADC1_Init+0x118>)
 8000b78:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000b7a:	230c      	movs	r3, #12
 8000b7c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000b7e:	1d3b      	adds	r3, r7, #4
 8000b80:	4619      	mov	r1, r3
 8000b82:	4806      	ldr	r0, [pc, #24]	; (8000b9c <MX_ADC1_Init+0x110>)
 8000b84:	f002 fd94 	bl	80036b0 <HAL_ADC_ConfigChannel>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_ADC1_Init+0x106>
  {
    Error_Handler();
 8000b8e:	f001 fb7f 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	3730      	adds	r7, #48	; 0x30
 8000b96:	46bd      	mov	sp, r7
 8000b98:	bd80      	pop	{r7, pc}
 8000b9a:	bf00      	nop
 8000b9c:	20000110 	.word	0x20000110
 8000ba0:	32601000 	.word	0x32601000
 8000ba4:	3ef08000 	.word	0x3ef08000

08000ba8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b088      	sub	sp, #32
 8000bac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bae:	463b      	mov	r3, r7
 8000bb0:	2220      	movs	r2, #32
 8000bb2:	2100      	movs	r1, #0
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	f007 fe19 	bl	80087ec <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 8000bba:	4b2f      	ldr	r3, [pc, #188]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bbc:	4a2f      	ldr	r2, [pc, #188]	; (8000c7c <MX_ADC2_Init+0xd4>)
 8000bbe:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV8;
 8000bc0:	4b2d      	ldr	r3, [pc, #180]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bc2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000bc6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc8:	4b2b      	ldr	r3, [pc, #172]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bca:	2200      	movs	r2, #0
 8000bcc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bce:	4b2a      	ldr	r3, [pc, #168]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000bd4:	4b28      	ldr	r3, [pc, #160]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000bda:	4b27      	ldr	r3, [pc, #156]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bdc:	2201      	movs	r2, #1
 8000bde:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000be0:	4b25      	ldr	r3, [pc, #148]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000be2:	2208      	movs	r2, #8
 8000be4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000be6:	4b24      	ldr	r3, [pc, #144]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000bec:	4b22      	ldr	r3, [pc, #136]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bee:	2200      	movs	r2, #0
 8000bf0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8000bf2:	4b21      	ldr	r3, [pc, #132]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bf4:	2202      	movs	r2, #2
 8000bf6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000bf8:	4b1f      	ldr	r3, [pc, #124]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8000c00:	4b1d      	ldr	r3, [pc, #116]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c02:	2201      	movs	r2, #1
 8000c04:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000c08:	4b1b      	ldr	r3, [pc, #108]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c0a:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 8000c10:	4b19      	ldr	r3, [pc, #100]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000c18:	4817      	ldr	r0, [pc, #92]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c1a:	f002 f94b 	bl	8002eb4 <HAL_ADC_Init>
 8000c1e:	4603      	mov	r3, r0
 8000c20:	2b00      	cmp	r3, #0
 8000c22:	d001      	beq.n	8000c28 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000c24:	f001 fb34 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_12;
 8000c28:	4b15      	ldr	r3, [pc, #84]	; (8000c80 <MX_ADC2_Init+0xd8>)
 8000c2a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000c2c:	2306      	movs	r3, #6
 8000c2e:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_247CYCLES_5;
 8000c30:	2306      	movs	r3, #6
 8000c32:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000c34:	237f      	movs	r3, #127	; 0x7f
 8000c36:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000c38:	2304      	movs	r3, #4
 8000c3a:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	480c      	ldr	r0, [pc, #48]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c46:	f002 fd33 	bl	80036b0 <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000c50:	f001 fb1e 	bl	8002290 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	; (8000c84 <MX_ADC2_Init+0xdc>)
 8000c56:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8000c58:	230c      	movs	r3, #12
 8000c5a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000c5c:	463b      	mov	r3, r7
 8000c5e:	4619      	mov	r1, r3
 8000c60:	4805      	ldr	r0, [pc, #20]	; (8000c78 <MX_ADC2_Init+0xd0>)
 8000c62:	f002 fd25 	bl	80036b0 <HAL_ADC_ConfigChannel>
 8000c66:	4603      	mov	r3, r0
 8000c68:	2b00      	cmp	r3, #0
 8000c6a:	d001      	beq.n	8000c70 <MX_ADC2_Init+0xc8>
  {
    Error_Handler();
 8000c6c:	f001 fb10 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000c70:	bf00      	nop
 8000c72:	3720      	adds	r7, #32
 8000c74:	46bd      	mov	sp, r7
 8000c76:	bd80      	pop	{r7, pc}
 8000c78:	200000a4 	.word	0x200000a4
 8000c7c:	50000100 	.word	0x50000100
 8000c80:	32601000 	.word	0x32601000
 8000c84:	10c00010 	.word	0x10c00010

08000c88 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b09e      	sub	sp, #120	; 0x78
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c94:	2200      	movs	r2, #0
 8000c96:	601a      	str	r2, [r3, #0]
 8000c98:	605a      	str	r2, [r3, #4]
 8000c9a:	609a      	str	r2, [r3, #8]
 8000c9c:	60da      	str	r2, [r3, #12]
 8000c9e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ca0:	f107 0320 	add.w	r3, r7, #32
 8000ca4:	2244      	movs	r2, #68	; 0x44
 8000ca6:	2100      	movs	r1, #0
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f007 fd9f 	bl	80087ec <memset>
  if(adcHandle->Instance==ADC1)
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000cb6:	d168      	bne.n	8000d8a <HAL_ADC_MspInit+0x102>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000cb8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000cbc:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000cbe:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000cc2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000cc4:	f107 0320 	add.w	r3, r7, #32
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f005 f907 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000cd4:	f001 fadc 	bl	8002290 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000cd8:	4b71      	ldr	r3, [pc, #452]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	3301      	adds	r3, #1
 8000cde:	4a70      	ldr	r2, [pc, #448]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000ce0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d10b      	bne.n	8000d02 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000cea:	4b6e      	ldr	r3, [pc, #440]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cee:	4a6d      	ldr	r2, [pc, #436]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cf0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000cf6:	4b6b      	ldr	r3, [pc, #428]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000cf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000cfa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cfe:	61fb      	str	r3, [r7, #28]
 8000d00:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d02:	4b68      	ldr	r3, [pc, #416]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d06:	4a67      	ldr	r2, [pc, #412]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d08:	f043 0302 	orr.w	r3, r3, #2
 8000d0c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d0e:	4b65      	ldr	r3, [pc, #404]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000d10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d12:	f003 0302 	and.w	r3, r3, #2
 8000d16:	61bb      	str	r3, [r7, #24]
 8000d18:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = V_Sen_Pin|SO_A_Pin;
 8000d1a:	2303      	movs	r3, #3
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000d1e:	2303      	movs	r3, #3
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d26:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000d2a:	4619      	mov	r1, r3
 8000d2c:	485e      	ldr	r0, [pc, #376]	; (8000ea8 <HAL_ADC_MspInit+0x220>)
 8000d2e:	f004 f94f 	bl	8004fd0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000d32:	4b5e      	ldr	r3, [pc, #376]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d34:	4a5e      	ldr	r2, [pc, #376]	; (8000eb0 <HAL_ADC_MspInit+0x228>)
 8000d36:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000d38:	4b5c      	ldr	r3, [pc, #368]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d3a:	2205      	movs	r2, #5
 8000d3c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000d3e:	4b5b      	ldr	r3, [pc, #364]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000d44:	4b59      	ldr	r3, [pc, #356]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d46:	2200      	movs	r2, #0
 8000d48:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000d4a:	4b58      	ldr	r3, [pc, #352]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d4c:	2280      	movs	r2, #128	; 0x80
 8000d4e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000d50:	4b56      	ldr	r3, [pc, #344]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d52:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d56:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000d58:	4b54      	ldr	r3, [pc, #336]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d5a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000d5e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000d60:	4b52      	ldr	r3, [pc, #328]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d62:	2220      	movs	r2, #32
 8000d64:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000d66:	4b51      	ldr	r3, [pc, #324]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000d6c:	484f      	ldr	r0, [pc, #316]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d6e:	f003 fb5f 	bl	8004430 <HAL_DMA_Init>
 8000d72:	4603      	mov	r3, r0
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d001      	beq.n	8000d7c <HAL_ADC_MspInit+0xf4>
    {
      Error_Handler();
 8000d78:	f001 fa8a 	bl	8002290 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000d7c:	687b      	ldr	r3, [r7, #4]
 8000d7e:	4a4b      	ldr	r2, [pc, #300]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d80:	655a      	str	r2, [r3, #84]	; 0x54
 8000d82:	4a4a      	ldr	r2, [pc, #296]	; (8000eac <HAL_ADC_MspInit+0x224>)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000d88:	e086      	b.n	8000e98 <HAL_ADC_MspInit+0x210>
  else if(adcHandle->Instance==ADC2)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	4a49      	ldr	r2, [pc, #292]	; (8000eb4 <HAL_ADC_MspInit+0x22c>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	f040 8081 	bne.w	8000e98 <HAL_ADC_MspInit+0x210>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d96:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d9a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d9c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000da0:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da2:	f107 0320 	add.w	r3, r7, #32
 8000da6:	4618      	mov	r0, r3
 8000da8:	f005 f898 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 8000dac:	4603      	mov	r3, r0
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d001      	beq.n	8000db6 <HAL_ADC_MspInit+0x12e>
      Error_Handler();
 8000db2:	f001 fa6d 	bl	8002290 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8000db6:	4b3a      	ldr	r3, [pc, #232]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	3301      	adds	r3, #1
 8000dbc:	4a38      	ldr	r2, [pc, #224]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000dbe:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000dc0:	4b37      	ldr	r3, [pc, #220]	; (8000ea0 <HAL_ADC_MspInit+0x218>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b01      	cmp	r3, #1
 8000dc6:	d10b      	bne.n	8000de0 <HAL_ADC_MspInit+0x158>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000dc8:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a35      	ldr	r2, [pc, #212]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dce:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b33      	ldr	r3, [pc, #204]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000ddc:	617b      	str	r3, [r7, #20]
 8000dde:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000de0:	4b30      	ldr	r3, [pc, #192]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a2f      	ldr	r2, [pc, #188]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000de6:	f043 0301 	orr.w	r3, r3, #1
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b2d      	ldr	r3, [pc, #180]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0301 	and.w	r3, r3, #1
 8000df4:	613b      	str	r3, [r7, #16]
 8000df6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000df8:	4b2a      	ldr	r3, [pc, #168]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dfa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dfc:	4a29      	ldr	r2, [pc, #164]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000dfe:	f043 0302 	orr.w	r3, r3, #2
 8000e02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e04:	4b27      	ldr	r3, [pc, #156]	; (8000ea4 <HAL_ADC_MspInit+0x21c>)
 8000e06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e08:	f003 0302 	and.w	r3, r3, #2
 8000e0c:	60fb      	str	r3, [r7, #12]
 8000e0e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_Sen_Pin;
 8000e10:	2380      	movs	r3, #128	; 0x80
 8000e12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e14:	2303      	movs	r3, #3
 8000e16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(T_Sen_GPIO_Port, &GPIO_InitStruct);
 8000e1c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e20:	4619      	mov	r1, r3
 8000e22:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e26:	f004 f8d3 	bl	8004fd0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO_B_Pin;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e32:	2300      	movs	r3, #0
 8000e34:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SO_B_GPIO_Port, &GPIO_InitStruct);
 8000e36:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e3a:	4619      	mov	r1, r3
 8000e3c:	481a      	ldr	r0, [pc, #104]	; (8000ea8 <HAL_ADC_MspInit+0x220>)
 8000e3e:	f004 f8c7 	bl	8004fd0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA2_Channel1;
 8000e42:	4b1d      	ldr	r3, [pc, #116]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e44:	4a1d      	ldr	r2, [pc, #116]	; (8000ebc <HAL_ADC_MspInit+0x234>)
 8000e46:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000e48:	4b1b      	ldr	r3, [pc, #108]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e4a:	2224      	movs	r2, #36	; 0x24
 8000e4c:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e4e:	4b1a      	ldr	r3, [pc, #104]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e50:	2200      	movs	r2, #0
 8000e52:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e54:	4b18      	ldr	r3, [pc, #96]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000e5a:	4b17      	ldr	r3, [pc, #92]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e5c:	2280      	movs	r2, #128	; 0x80
 8000e5e:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e60:	4b15      	ldr	r3, [pc, #84]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e62:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000e66:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e68:	4b13      	ldr	r3, [pc, #76]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e6a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000e6e:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000e70:	4b11      	ldr	r3, [pc, #68]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e72:	2220      	movs	r2, #32
 8000e74:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8000e76:	4b10      	ldr	r3, [pc, #64]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000e7c:	480e      	ldr	r0, [pc, #56]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e7e:	f003 fad7 	bl	8004430 <HAL_DMA_Init>
 8000e82:	4603      	mov	r3, r0
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d001      	beq.n	8000e8c <HAL_ADC_MspInit+0x204>
      Error_Handler();
 8000e88:	f001 fa02 	bl	8002290 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	4a0a      	ldr	r2, [pc, #40]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e90:	655a      	str	r2, [r3, #84]	; 0x54
 8000e92:	4a09      	ldr	r2, [pc, #36]	; (8000eb8 <HAL_ADC_MspInit+0x230>)
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	6293      	str	r3, [r2, #40]	; 0x28
}
 8000e98:	bf00      	nop
 8000e9a:	3778      	adds	r7, #120	; 0x78
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	bd80      	pop	{r7, pc}
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	40021000 	.word	0x40021000
 8000ea8:	48000400 	.word	0x48000400
 8000eac:	2000017c 	.word	0x2000017c
 8000eb0:	40020008 	.word	0x40020008
 8000eb4:	50000100 	.word	0x50000100
 8000eb8:	200001dc 	.word	0x200001dc
 8000ebc:	40020408 	.word	0x40020408

08000ec0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b084      	sub	sp, #16
 8000ec4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000ec6:	4b1c      	ldr	r3, [pc, #112]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ec8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eca:	4a1b      	ldr	r2, [pc, #108]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ecc:	f043 0304 	orr.w	r3, r3, #4
 8000ed0:	6493      	str	r3, [r2, #72]	; 0x48
 8000ed2:	4b19      	ldr	r3, [pc, #100]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ed4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ed6:	f003 0304 	and.w	r3, r3, #4
 8000eda:	60fb      	str	r3, [r7, #12]
 8000edc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000ede:	4b16      	ldr	r3, [pc, #88]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ee0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000ee2:	4a15      	ldr	r2, [pc, #84]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ee4:	f043 0302 	orr.w	r3, r3, #2
 8000ee8:	6493      	str	r3, [r2, #72]	; 0x48
 8000eea:	4b13      	ldr	r3, [pc, #76]	; (8000f38 <MX_DMA_Init+0x78>)
 8000eec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	60bb      	str	r3, [r7, #8]
 8000ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000ef6:	4b10      	ldr	r3, [pc, #64]	; (8000f38 <MX_DMA_Init+0x78>)
 8000ef8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000efa:	4a0f      	ldr	r2, [pc, #60]	; (8000f38 <MX_DMA_Init+0x78>)
 8000efc:	f043 0301 	orr.w	r3, r3, #1
 8000f00:	6493      	str	r3, [r2, #72]	; 0x48
 8000f02:	4b0d      	ldr	r3, [pc, #52]	; (8000f38 <MX_DMA_Init+0x78>)
 8000f04:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f06:	f003 0301 	and.w	r3, r3, #1
 8000f0a:	607b      	str	r3, [r7, #4]
 8000f0c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000f0e:	2200      	movs	r2, #0
 8000f10:	2100      	movs	r1, #0
 8000f12:	200b      	movs	r0, #11
 8000f14:	f003 fa57 	bl	80043c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000f18:	200b      	movs	r0, #11
 8000f1a:	f003 fa6e 	bl	80043fa <HAL_NVIC_EnableIRQ>
  /* DMA2_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Channel1_IRQn, 0, 0);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	2100      	movs	r1, #0
 8000f22:	2038      	movs	r0, #56	; 0x38
 8000f24:	f003 fa4f 	bl	80043c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Channel1_IRQn);
 8000f28:	2038      	movs	r0, #56	; 0x38
 8000f2a:	f003 fa66 	bl	80043fa <HAL_NVIC_EnableIRQ>

}
 8000f2e:	bf00      	nop
 8000f30:	3710      	adds	r7, #16
 8000f32:	46bd      	mov	sp, r7
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	40021000 	.word	0x40021000

08000f3c <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 8000f40:	4b1f      	ldr	r3, [pc, #124]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f42:	4a20      	ldr	r2, [pc, #128]	; (8000fc4 <MX_FDCAN1_Init+0x88>)
 8000f44:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f48:	2200      	movs	r2, #0
 8000f4a:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000f4c:	4b1c      	ldr	r3, [pc, #112]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 8000f52:	4b1b      	ldr	r3, [pc, #108]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000f58:	4b19      	ldr	r3, [pc, #100]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000f5e:	4b18      	ldr	r3, [pc, #96]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 8000f64:	4b16      	ldr	r3, [pc, #88]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f66:	2200      	movs	r2, #0
 8000f68:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f6c:	2201      	movs	r2, #1
 8000f6e:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000f70:	4b13      	ldr	r3, [pc, #76]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f72:	2201      	movs	r2, #1
 8000f74:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 8000f76:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f78:	2202      	movs	r2, #2
 8000f7a:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000f7c:	4b10      	ldr	r3, [pc, #64]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f7e:	2202      	movs	r2, #2
 8000f80:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 8000f82:	4b0f      	ldr	r3, [pc, #60]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f84:	2201      	movs	r2, #1
 8000f86:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000f88:	4b0d      	ldr	r3, [pc, #52]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f8a:	2201      	movs	r2, #1
 8000f8c:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000f8e:	4b0c      	ldr	r3, [pc, #48]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f90:	2201      	movs	r2, #1
 8000f92:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 8000f94:	4b0a      	ldr	r3, [pc, #40]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f96:	2201      	movs	r2, #1
 8000f98:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000f9a:	4b09      	ldr	r3, [pc, #36]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000fa0:	4b07      	ldr	r3, [pc, #28]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fa2:	2200      	movs	r2, #0
 8000fa4:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000fac:	4804      	ldr	r0, [pc, #16]	; (8000fc0 <MX_FDCAN1_Init+0x84>)
 8000fae:	f003 fcb1 	bl	8004914 <HAL_FDCAN_Init>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000fb8:	f001 f96a 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000fbc:	bf00      	nop
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	2000023c 	.word	0x2000023c
 8000fc4:	40006400 	.word	0x40006400

08000fc8 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b09a      	sub	sp, #104	; 0x68
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]
 8000fd8:	605a      	str	r2, [r3, #4]
 8000fda:	609a      	str	r2, [r3, #8]
 8000fdc:	60da      	str	r2, [r3, #12]
 8000fde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	2244      	movs	r2, #68	; 0x44
 8000fe6:	2100      	movs	r1, #0
 8000fe8:	4618      	mov	r0, r3
 8000fea:	f007 fbff 	bl	80087ec <memset>
  if(fdcanHandle->Instance==FDCAN1)
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a24      	ldr	r2, [pc, #144]	; (8001084 <HAL_FDCAN_MspInit+0xbc>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d140      	bne.n	800107a <HAL_FDCAN_MspInit+0xb2>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 8000ff8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ffc:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 8000ffe:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001002:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001004:	f107 0310 	add.w	r3, r7, #16
 8001008:	4618      	mov	r0, r3
 800100a:	f004 ff67 	bl	8005edc <HAL_RCCEx_PeriphCLKConfig>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 8001014:	f001 f93c 	bl	8002290 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 8001018:	4b1b      	ldr	r3, [pc, #108]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800101a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800101c:	4a1a      	ldr	r2, [pc, #104]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800101e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001022:	6593      	str	r3, [r2, #88]	; 0x58
 8001024:	4b18      	ldr	r3, [pc, #96]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001030:	4b15      	ldr	r3, [pc, #84]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001032:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001034:	4a14      	ldr	r2, [pc, #80]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 8001036:	f043 0302 	orr.w	r3, r3, #2
 800103a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800103c:	4b12      	ldr	r3, [pc, #72]	; (8001088 <HAL_FDCAN_MspInit+0xc0>)
 800103e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001040:	f003 0302 	and.w	r3, r3, #2
 8001044:	60bb      	str	r3, [r7, #8]
 8001046:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8001048:	f44f 7340 	mov.w	r3, #768	; 0x300
 800104c:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800104e:	2302      	movs	r3, #2
 8001050:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001052:	2300      	movs	r3, #0
 8001054:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2300      	movs	r3, #0
 8001058:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 800105a:	2309      	movs	r3, #9
 800105c:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001062:	4619      	mov	r1, r3
 8001064:	4809      	ldr	r0, [pc, #36]	; (800108c <HAL_FDCAN_MspInit+0xc4>)
 8001066:	f003 ffb3 	bl	8004fd0 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 800106a:	2200      	movs	r2, #0
 800106c:	2103      	movs	r1, #3
 800106e:	2015      	movs	r0, #21
 8001070:	f003 f9a9 	bl	80043c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 8001074:	2015      	movs	r0, #21
 8001076:	f003 f9c0 	bl	80043fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 800107a:	bf00      	nop
 800107c:	3768      	adds	r7, #104	; 0x68
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	40006400 	.word	0x40006400
 8001088:	40021000 	.word	0x40021000
 800108c:	48000400 	.word	0x48000400

08001090 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b08a      	sub	sp, #40	; 0x28
 8001094:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001096:	f107 0314 	add.w	r3, r7, #20
 800109a:	2200      	movs	r2, #0
 800109c:	601a      	str	r2, [r3, #0]
 800109e:	605a      	str	r2, [r3, #4]
 80010a0:	609a      	str	r2, [r3, #8]
 80010a2:	60da      	str	r2, [r3, #12]
 80010a4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010a6:	4b41      	ldr	r3, [pc, #260]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010aa:	4a40      	ldr	r2, [pc, #256]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010ac:	f043 0320 	orr.w	r3, r3, #32
 80010b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b2:	4b3e      	ldr	r3, [pc, #248]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010b6:	f003 0320 	and.w	r3, r3, #32
 80010ba:	613b      	str	r3, [r7, #16]
 80010bc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010be:	4b3b      	ldr	r3, [pc, #236]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010c2:	4a3a      	ldr	r2, [pc, #232]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010c4:	f043 0301 	orr.w	r3, r3, #1
 80010c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010ca:	4b38      	ldr	r3, [pc, #224]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ce:	f003 0301 	and.w	r3, r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
 80010d4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010d6:	4b35      	ldr	r3, [pc, #212]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010da:	4a34      	ldr	r2, [pc, #208]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010dc:	f043 0302 	orr.w	r3, r3, #2
 80010e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010e2:	4b32      	ldr	r3, [pc, #200]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010e6:	f003 0302 	and.w	r3, r3, #2
 80010ea:	60bb      	str	r3, [r7, #8]
 80010ec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010ee:	4b2f      	ldr	r3, [pc, #188]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010f2:	4a2e      	ldr	r2, [pc, #184]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010f4:	f043 0304 	orr.w	r3, r3, #4
 80010f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010fa:	4b2c      	ldr	r3, [pc, #176]	; (80011ac <MX_GPIO_Init+0x11c>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010fe:	f003 0304 	and.w	r3, r3, #4
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 8001106:	2200      	movs	r2, #0
 8001108:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 800110c:	4828      	ldr	r0, [pc, #160]	; (80011b0 <MX_GPIO_Init+0x120>)
 800110e:	f004 f8f9 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001118:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800111c:	f004 f8f2 	bl	8005304 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 8001120:	2320      	movs	r3, #32
 8001122:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001124:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001128:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001138:	f003 ff4a 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 800113c:	2340      	movs	r3, #64	; 0x40
 800113e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001140:	2300      	movs	r3, #0
 8001142:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001144:	2300      	movs	r3, #0
 8001146:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 8001148:	f107 0314 	add.w	r3, r7, #20
 800114c:	4619      	mov	r1, r3
 800114e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001152:	f003 ff3d 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 8001156:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 800115a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115c:	2301      	movs	r3, #1
 800115e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001160:	2300      	movs	r3, #0
 8001162:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001164:	2300      	movs	r3, #0
 8001166:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001168:	f107 0314 	add.w	r3, r7, #20
 800116c:	4619      	mov	r1, r3
 800116e:	4810      	ldr	r0, [pc, #64]	; (80011b0 <MX_GPIO_Init+0x120>)
 8001170:	f003 ff2e 	bl	8004fd0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 8001174:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001178:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800117a:	2301      	movs	r3, #1
 800117c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117e:	2300      	movs	r3, #0
 8001180:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001182:	2302      	movs	r3, #2
 8001184:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001190:	f003 ff1e 	bl	8004fd0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001194:	2200      	movs	r2, #0
 8001196:	2100      	movs	r1, #0
 8001198:	2017      	movs	r0, #23
 800119a:	f003 f914 	bl	80043c6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800119e:	2017      	movs	r0, #23
 80011a0:	f003 f92b 	bl	80043fa <HAL_NVIC_EnableIRQ>

}
 80011a4:	bf00      	nop
 80011a6:	3728      	adds	r7, #40	; 0x28
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000400 	.word	0x48000400

080011b4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b083      	sub	sp, #12
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011bc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011c0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80011c4:	f003 0301 	and.w	r3, r3, #1
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d013      	beq.n	80011f4 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80011cc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011d0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80011d4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d00b      	beq.n	80011f4 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80011dc:	e000      	b.n	80011e0 <ITM_SendChar+0x2c>
    {
      __NOP();
 80011de:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 80011e0:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d0f9      	beq.n	80011de <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80011ea:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80011ee:	687a      	ldr	r2, [r7, #4]
 80011f0:	b2d2      	uxtb	r2, r2
 80011f2:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80011f4:	687b      	ldr	r3, [r7, #4]
}
 80011f6:	4618      	mov	r0, r3
 80011f8:	370c      	adds	r7, #12
 80011fa:	46bd      	mov	sp, r7
 80011fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001200:	4770      	bx	lr

08001202 <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	60f8      	str	r0, [r7, #12]
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
	int i=0;
 800120e:	2300      	movs	r3, #0
 8001210:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 8001212:	2300      	movs	r3, #0
 8001214:	617b      	str	r3, [r7, #20]
 8001216:	e009      	b.n	800122c <_write+0x2a>
		ITM_SendChar((*ptr++));
 8001218:	68bb      	ldr	r3, [r7, #8]
 800121a:	1c5a      	adds	r2, r3, #1
 800121c:	60ba      	str	r2, [r7, #8]
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ffc7 	bl	80011b4 <ITM_SendChar>
	for(i=0; i<len; i++)
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	3301      	adds	r3, #1
 800122a:	617b      	str	r3, [r7, #20]
 800122c:	697a      	ldr	r2, [r7, #20]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	429a      	cmp	r2, r3
 8001232:	dbf1      	blt.n	8001218 <_write+0x16>
	return len;
 8001234:	687b      	ldr	r3, [r7, #4]
}
 8001236:	4618      	mov	r0, r3
 8001238:	3718      	adds	r7, #24
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
	...

08001240 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b082      	sub	sp, #8
 8001244:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001246:	f001 fb72 	bl	800292e <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800124a:	f000 f945 	bl	80014d8 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800124e:	f7ff ff1f 	bl	8001090 <MX_GPIO_Init>
  MX_ADC1_Init();
 8001252:	f7ff fc1b 	bl	8000a8c <MX_ADC1_Init>
  MX_ADC2_Init();
 8001256:	f7ff fca7 	bl	8000ba8 <MX_ADC2_Init>
  MX_FDCAN1_Init();
 800125a:	f7ff fe6f 	bl	8000f3c <MX_FDCAN1_Init>
  MX_DMA_Init();
 800125e:	f7ff fe2f 	bl	8000ec0 <MX_DMA_Init>
  MX_TIM2_Init();
 8001262:	f001 f9f5 	bl	8002650 <MX_TIM2_Init>
  MX_SPI3_Init();
 8001266:	f001 f833 	bl	80022d0 <MX_SPI3_Init>
  MX_TIM3_Init();
 800126a:	f001 fa7d 	bl	8002768 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  printf("\n\nActuator Firmware Version: %i\n",REV);
 800126e:	2101      	movs	r1, #1
 8001270:	487b      	ldr	r0, [pc, #492]	; (8001460 <main+0x220>)
 8001272:	f007 fac3 	bl	80087fc <iprintf>

  /* Start ADCs */
  printf("Start ADC... ");
 8001276:	487b      	ldr	r0, [pc, #492]	; (8001464 <main+0x224>)
 8001278:	f007 fac0 	bl	80087fc <iprintf>
  HAL_ADC_Start(&hadc1);
 800127c:	487a      	ldr	r0, [pc, #488]	; (8001468 <main+0x228>)
 800127e:	f001 ffa3 	bl	80031c8 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc.ADC1_DMA_Buff, 2);
 8001282:	2202      	movs	r2, #2
 8001284:	4979      	ldr	r1, [pc, #484]	; (800146c <main+0x22c>)
 8001286:	4878      	ldr	r0, [pc, #480]	; (8001468 <main+0x228>)
 8001288:	f002 f932 	bl	80034f0 <HAL_ADC_Start_DMA>
  HAL_ADC_Start(&hadc2);
 800128c:	4878      	ldr	r0, [pc, #480]	; (8001470 <main+0x230>)
 800128e:	f001 ff9b 	bl	80031c8 <HAL_ADC_Start>
  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc.ADC2_DMA_Buff, 2);
 8001292:	2202      	movs	r2, #2
 8001294:	4977      	ldr	r1, [pc, #476]	; (8001474 <main+0x234>)
 8001296:	4876      	ldr	r0, [pc, #472]	; (8001470 <main+0x230>)
 8001298:	f002 f92a 	bl	80034f0 <HAL_ADC_Start_DMA>
  printf("Good\n");
 800129c:	4876      	ldr	r0, [pc, #472]	; (8001478 <main+0x238>)
 800129e:	f007 fb49 	bl	8008934 <puts>

  /* Start Timers */
  printf("Start TIM... ");
 80012a2:	4876      	ldr	r0, [pc, #472]	; (800147c <main+0x23c>)
 80012a4:	f007 faaa 	bl	80087fc <iprintf>
  HAL_TIM_Base_Start(&htim2);
 80012a8:	4875      	ldr	r0, [pc, #468]	; (8001480 <main+0x240>)
 80012aa:	f005 ff77 	bl	800719c <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(&htim2)<858+20){}	// wait for cycles to sync up clocks
 80012ae:	bf00      	nop
 80012b0:	4b73      	ldr	r3, [pc, #460]	; (8001480 <main+0x240>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012b6:	f240 326d 	movw	r2, #877	; 0x36d
 80012ba:	4293      	cmp	r3, r2
 80012bc:	d9f8      	bls.n	80012b0 <main+0x70>
  	  	  	  	  	  	  	  	  	  	  	  	// 858 cycles for middle
  	  	  	  	  	  	  	  	  	  	  	    // each cycle delays by around 7.5ns
  HAL_TIM_Base_Start_IT(&htim3);
 80012be:	4871      	ldr	r0, [pc, #452]	; (8001484 <main+0x244>)
 80012c0:	f005 ffce 	bl	8007260 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, Phase_A_Ch);
 80012c4:	210c      	movs	r1, #12
 80012c6:	486e      	ldr	r0, [pc, #440]	; (8001480 <main+0x240>)
 80012c8:	f006 f896 	bl	80073f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_B_Ch);
 80012cc:	2108      	movs	r1, #8
 80012ce:	486c      	ldr	r0, [pc, #432]	; (8001480 <main+0x240>)
 80012d0:	f006 f892 	bl	80073f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_C_Ch);
 80012d4:	2100      	movs	r1, #0
 80012d6:	486a      	ldr	r0, [pc, #424]	; (8001480 <main+0x240>)
 80012d8:	f006 f88e 	bl	80073f8 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to same value
 80012dc:	ed9f 1a6a 	vldr	s2, [pc, #424]	; 8001488 <main+0x248>
 80012e0:	eddf 0a69 	vldr	s1, [pc, #420]	; 8001488 <main+0x248>
 80012e4:	ed9f 0a68 	vldr	s0, [pc, #416]	; 8001488 <main+0x248>
 80012e8:	f000 fb9e 	bl	8001a28 <Set_PWM3>
  printf("Good\n");
 80012ec:	4862      	ldr	r0, [pc, #392]	; (8001478 <main+0x238>)
 80012ee:	f007 fb21 	bl	8008934 <puts>

  /* Start Encoder */
  printf("Start ENC... ");
 80012f2:	4866      	ldr	r0, [pc, #408]	; (800148c <main+0x24c>)
 80012f4:	f007 fa82 	bl	80087fc <iprintf>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80012f8:	2201      	movs	r2, #1
 80012fa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80012fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001302:	f003 ffff 	bl	8005304 <HAL_GPIO_WritePin>
  // 10		- 0 access to current values/1 access all in buffer
  // 9-4	- 6 bit address
  // 3-0	- 4 bit number of data words	if 0000, no safety word

  // 		command1, 	command2,   data1,	    data2,      mask1,      mask2
  printf("\n");
 8001306:	200a      	movs	r0, #10
 8001308:	f007 fa90 	bl	800882c <putchar>
//  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000001, 0b11000000, 0b00010111);		// write MOD_1	06 register		A/B
  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000010, 0b11000000, 0b00010111);		// write MOD_1	06 register		step/dir
 800130c:	2317      	movs	r3, #23
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	23c0      	movs	r3, #192	; 0xc0
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	2302      	movs	r3, #2
 8001316:	2240      	movs	r2, #64	; 0x40
 8001318:	2161      	movs	r1, #97	; 0x61
 800131a:	20d0      	movs	r0, #208	; 0xd0
 800131c:	f000 fa82 	bl	8001824 <ENC_Write>
  ENC_Write(0b11010000, 0b10000001, 0b00001000, 0b00000001, 0b01111111, 0b11111111);		// write MOD_2	08 register
 8001320:	23ff      	movs	r3, #255	; 0xff
 8001322:	9301      	str	r3, [sp, #4]
 8001324:	237f      	movs	r3, #127	; 0x7f
 8001326:	9300      	str	r3, [sp, #0]
 8001328:	2301      	movs	r3, #1
 800132a:	2208      	movs	r2, #8
 800132c:	2181      	movs	r1, #129	; 0x81
 800132e:	20d0      	movs	r0, #208	; 0xd0
 8001330:	f000 fa78 	bl	8001824 <ENC_Write>
  ENC_Write(0b11010000, 0b10010001, 0b00000000, 0b00000000, 0b11111111, 0b11111111);		// write MOD_3  09 register
 8001334:	23ff      	movs	r3, #255	; 0xff
 8001336:	9301      	str	r3, [sp, #4]
 8001338:	23ff      	movs	r3, #255	; 0xff
 800133a:	9300      	str	r3, [sp, #0]
 800133c:	2300      	movs	r3, #0
 800133e:	2200      	movs	r2, #0
 8001340:	2191      	movs	r1, #145	; 0x91
 8001342:	20d0      	movs	r0, #208	; 0xd0
 8001344:	f000 fa6e 	bl	8001824 <ENC_Write>
  ENC_Write(0b11010000, 0b11010001, 0b00000000, 0b00001001, 0b11111111, 0b11111111);		// write IFAB	0D register	(13)
 8001348:	23ff      	movs	r3, #255	; 0xff
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	23ff      	movs	r3, #255	; 0xff
 800134e:	9300      	str	r3, [sp, #0]
 8001350:	2309      	movs	r3, #9
 8001352:	2200      	movs	r2, #0
 8001354:	21d1      	movs	r1, #209	; 0xd1
 8001356:	20d0      	movs	r0, #208	; 0xd0
 8001358:	f000 fa64 	bl	8001824 <ENC_Write>
  ENC_Write(0b11010000, 0b11100001, 0b00000000, 0b10000000, 0b00000001, 0b11111011);		// write MOD_4	0E register (14)
 800135c:	23fb      	movs	r3, #251	; 0xfb
 800135e:	9301      	str	r3, [sp, #4]
 8001360:	2301      	movs	r3, #1
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	2380      	movs	r3, #128	; 0x80
 8001366:	2200      	movs	r2, #0
 8001368:	21e1      	movs	r1, #225	; 0xe1
 800136a:	20d0      	movs	r0, #208	; 0xd0
 800136c:	f000 fa5a 	bl	8001824 <ENC_Write>

  ENC_Read_Ang(&enc.SPI_theta);
 8001370:	4847      	ldr	r0, [pc, #284]	; (8001490 <main+0x250>)
 8001372:	f000 fa03 	bl	800177c <ENC_Read_Ang>
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 8001376:	4b46      	ldr	r3, [pc, #280]	; (8001490 <main+0x250>)
 8001378:	ed93 7a00 	vldr	s14, [r3]
 800137c:	eddf 6a45 	vldr	s13, [pc, #276]	; 8001494 <main+0x254>
 8001380:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001384:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8001498 <main+0x258>
 8001388:	ee67 7a87 	vmul.f32	s15, s15, s14
 800138c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001390:	ee17 3a90 	vmov	r3, s15
 8001394:	b21a      	sxth	r2, r3
 8001396:	4b3e      	ldr	r3, [pc, #248]	; (8001490 <main+0x250>)
 8001398:	809a      	strh	r2, [r3, #4]

  /* Start CAN */
  printf("Start CAN... ");
 800139a:	4840      	ldr	r0, [pc, #256]	; (800149c <main+0x25c>)
 800139c:	f007 fa2e 	bl	80087fc <iprintf>
  // can code
  printf("Good\n");
 80013a0:	4835      	ldr	r0, [pc, #212]	; (8001478 <main+0x238>)
 80013a2:	f007 fac7 	bl	8008934 <puts>

  /* Setup ADC structure */
  adc.VDDA = 3.30f;
 80013a6:	4b3e      	ldr	r3, [pc, #248]	; (80014a0 <main+0x260>)
 80013a8:	4a3e      	ldr	r2, [pc, #248]	; (80014a4 <main+0x264>)
 80013aa:	601a      	str	r2, [r3, #0]
  adc.V_bat_R_Top = 255.0f;
 80013ac:	4b3c      	ldr	r3, [pc, #240]	; (80014a0 <main+0x260>)
 80013ae:	4a3e      	ldr	r2, [pc, #248]	; (80014a8 <main+0x268>)
 80013b0:	61da      	str	r2, [r3, #28]
  adc.V_bat_R_Bot = 10.0f;
 80013b2:	4b3b      	ldr	r3, [pc, #236]	; (80014a0 <main+0x260>)
 80013b4:	4a3d      	ldr	r2, [pc, #244]	; (80014ac <main+0x26c>)
 80013b6:	619a      	str	r2, [r3, #24]
  adc.Temp_V_Offset = 0.424f;
 80013b8:	4b39      	ldr	r3, [pc, #228]	; (80014a0 <main+0x260>)
 80013ba:	4a3d      	ldr	r2, [pc, #244]	; (80014b0 <main+0x270>)
 80013bc:	625a      	str	r2, [r3, #36]	; 0x24
  adc.Temp_Slope = 0.00625f;
 80013be:	4b38      	ldr	r3, [pc, #224]	; (80014a0 <main+0x260>)
 80013c0:	4a3c      	ldr	r2, [pc, #240]	; (80014b4 <main+0x274>)
 80013c2:	629a      	str	r2, [r3, #40]	; 0x28
  adc.R_Shunt_Res = 0.001f;
 80013c4:	4b36      	ldr	r3, [pc, #216]	; (80014a0 <main+0x260>)
 80013c6:	4a3c      	ldr	r2, [pc, #240]	; (80014b8 <main+0x278>)
 80013c8:	63da      	str	r2, [r3, #60]	; 0x3c
  adc.SO_Gain = 40.0f;
 80013ca:	4b35      	ldr	r3, [pc, #212]	; (80014a0 <main+0x260>)
 80013cc:	2228      	movs	r2, #40	; 0x28
 80013ce:	641a      	str	r2, [r3, #64]	; 0x40

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 80013d0:	4b3a      	ldr	r3, [pc, #232]	; (80014bc <main+0x27c>)
 80013d2:	2215      	movs	r2, #21
 80013d4:	601a      	str	r2, [r3, #0]
  foc.dt = (float)(2.0f/(170.0f*1000000.0f/(htim2.Init.Period+1)/(htim2.Init.RepetitionCounter+1)));
 80013d6:	4b2a      	ldr	r3, [pc, #168]	; (8001480 <main+0x240>)
 80013d8:	68db      	ldr	r3, [r3, #12]
 80013da:	3301      	adds	r3, #1
 80013dc:	ee07 3a90 	vmov	s15, r3
 80013e0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013e4:	ed9f 7a36 	vldr	s14, [pc, #216]	; 80014c0 <main+0x280>
 80013e8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80013ec:	4b24      	ldr	r3, [pc, #144]	; (8001480 <main+0x240>)
 80013ee:	695b      	ldr	r3, [r3, #20]
 80013f0:	3301      	adds	r3, #1
 80013f2:	ee07 3a90 	vmov	s15, r3
 80013f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80013fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80013fe:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8001402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001406:	4b2d      	ldr	r3, [pc, #180]	; (80014bc <main+0x27c>)
 8001408:	edc3 7a01 	vstr	s15, [r3, #4]
  foc.PWM_Reg_Max = htim2.Init.Period;
 800140c:	4b1c      	ldr	r3, [pc, #112]	; (8001480 <main+0x240>)
 800140e:	68db      	ldr	r3, [r3, #12]
 8001410:	b29a      	uxth	r2, r3
 8001412:	4b2a      	ldr	r3, [pc, #168]	; (80014bc <main+0x27c>)
 8001414:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8001418:	4b2a      	ldr	r3, [pc, #168]	; (80014c4 <main+0x284>)
 800141a:	4a2b      	ldr	r2, [pc, #172]	; (80014c8 <main+0x288>)
 800141c:	601a      	str	r2, [r3, #0]
 800141e:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <main+0x284>)
 8001420:	4a2a      	ldr	r2, [pc, #168]	; (80014cc <main+0x28c>)
 8001422:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 8001424:	4b27      	ldr	r3, [pc, #156]	; (80014c4 <main+0x284>)
 8001426:	4a28      	ldr	r2, [pc, #160]	; (80014c8 <main+0x288>)
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <main+0x284>)
 800142c:	4a27      	ldr	r2, [pc, #156]	; (80014cc <main+0x28c>)
 800142e:	60da      	str	r2, [r3, #12]

  printf("\nSetup complete!\n\n");
 8001430:	4827      	ldr	r0, [pc, #156]	; (80014d0 <main+0x290>)
 8001432:	f007 fa7f 	bl	8008934 <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 8001436:	2201      	movs	r2, #1
 8001438:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 800143c:	4825      	ldr	r0, [pc, #148]	; (80014d4 <main+0x294>)
 800143e:	f003 ff61 	bl	8005304 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001442:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001446:	f001 fae3 	bl	8002a10 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 800144a:	2200      	movs	r2, #0
 800144c:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001450:	4820      	ldr	r0, [pc, #128]	; (80014d4 <main+0x294>)
 8001452:	f003 ff57 	bl	8005304 <HAL_GPIO_WritePin>
	  HAL_Delay(500);
 8001456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800145a:	f001 fad9 	bl	8002a10 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 800145e:	e7ea      	b.n	8001436 <main+0x1f6>
 8001460:	08009ac4 	.word	0x08009ac4
 8001464:	08009ae8 	.word	0x08009ae8
 8001468:	20000110 	.word	0x20000110
 800146c:	20000318 	.word	0x20000318
 8001470:	200000a4 	.word	0x200000a4
 8001474:	20000320 	.word	0x20000320
 8001478:	08009af8 	.word	0x08009af8
 800147c:	08009b00 	.word	0x08009b00
 8001480:	200004ac 	.word	0x200004ac
 8001484:	20000460 	.word	0x20000460
 8001488:	00000000 	.word	0x00000000
 800148c:	08009b10 	.word	0x08009b10
 8001490:	200002a0 	.word	0x200002a0
 8001494:	43b40000 	.word	0x43b40000
 8001498:	457ff000 	.word	0x457ff000
 800149c:	08009b20 	.word	0x08009b20
 80014a0:	20000314 	.word	0x20000314
 80014a4:	40533333 	.word	0x40533333
 80014a8:	437f0000 	.word	0x437f0000
 80014ac:	41200000 	.word	0x41200000
 80014b0:	3ed91687 	.word	0x3ed91687
 80014b4:	3bcccccd 	.word	0x3bcccccd
 80014b8:	3a83126f 	.word	0x3a83126f
 80014bc:	200002b8 	.word	0x200002b8
 80014c0:	4d221fe8 	.word	0x4d221fe8
 80014c4:	200003dc 	.word	0x200003dc
 80014c8:	3ed78d50 	.word	0x3ed78d50
 80014cc:	3e21cac1 	.word	0x3e21cac1
 80014d0:	08009b30 	.word	0x08009b30
 80014d4:	48000400 	.word	0x48000400

080014d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b094      	sub	sp, #80	; 0x50
 80014dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014de:	f107 0318 	add.w	r3, r7, #24
 80014e2:	2238      	movs	r2, #56	; 0x38
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f007 f980 	bl	80087ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80014ec:	1d3b      	adds	r3, r7, #4
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80014fa:	2000      	movs	r0, #0
 80014fc:	f003 ff3e 	bl	800537c <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001500:	2301      	movs	r3, #1
 8001502:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001504:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001508:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800150a:	2302      	movs	r3, #2
 800150c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800150e:	2303      	movs	r3, #3
 8001510:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8001512:	2303      	movs	r3, #3
 8001514:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001516:	2355      	movs	r3, #85	; 0x55
 8001518:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800151a:	2302      	movs	r3, #2
 800151c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800151e:	2302      	movs	r3, #2
 8001520:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001522:	2302      	movs	r3, #2
 8001524:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001526:	f107 0318 	add.w	r3, r7, #24
 800152a:	4618      	mov	r0, r3
 800152c:	f003 ffda 	bl	80054e4 <HAL_RCC_OscConfig>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001536:	f000 feab 	bl	8002290 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800153a:	230f      	movs	r3, #15
 800153c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800153e:	2303      	movs	r3, #3
 8001540:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001546:	2300      	movs	r3, #0
 8001548:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800154a:	2300      	movs	r3, #0
 800154c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800154e:	1d3b      	adds	r3, r7, #4
 8001550:	2104      	movs	r1, #4
 8001552:	4618      	mov	r0, r3
 8001554:	f004 fade 	bl	8005b14 <HAL_RCC_ClockConfig>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800155e:	f000 fe97 	bl	8002290 <Error_Handler>
  }
}
 8001562:	bf00      	nop
 8001564:	3750      	adds	r7, #80	; 0x50
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}
	...

0800156c <ADC_Get_Raw>:

/* USER CODE BEGIN 4 */

// Read ADCs
void  ADC_Get_Raw    (int16_t*i_a_Raw, int16_t*i_b_Raw, int16_t*PVDD_Raw, int16_t*Temp_Raw)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b084      	sub	sp, #16
 8001570:	af00      	add	r7, sp, #0
 8001572:	60f8      	str	r0, [r7, #12]
 8001574:	60b9      	str	r1, [r7, #8]
 8001576:	607a      	str	r2, [r7, #4]
 8001578:	603b      	str	r3, [r7, #0]
	HAL_ADC_Start(&hadc1);
 800157a:	4811      	ldr	r0, [pc, #68]	; (80015c0 <ADC_Get_Raw+0x54>)
 800157c:	f001 fe24 	bl	80031c8 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, 1);
 8001580:	2101      	movs	r1, #1
 8001582:	480f      	ldr	r0, [pc, #60]	; (80015c0 <ADC_Get_Raw+0x54>)
 8001584:	f001 fedc 	bl	8003340 <HAL_ADC_PollForConversion>

	*i_a_Raw	= HAL_ADC_GetValue(&hadc1);
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <ADC_Get_Raw+0x54>)
 800158a:	f002 f865 	bl	8003658 <HAL_ADC_GetValue>
 800158e:	4603      	mov	r3, r0
 8001590:	b21a      	sxth	r2, r3
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	801a      	strh	r2, [r3, #0]
	*i_b_Raw	= HAL_ADC_GetValue(&hadc2);
 8001596:	480b      	ldr	r0, [pc, #44]	; (80015c4 <ADC_Get_Raw+0x58>)
 8001598:	f002 f85e 	bl	8003658 <HAL_ADC_GetValue>
 800159c:	4603      	mov	r3, r0
 800159e:	b21a      	sxth	r2, r3
 80015a0:	68bb      	ldr	r3, [r7, #8]
 80015a2:	801a      	strh	r2, [r3, #0]
	*PVDD_Raw	= adc.ADC1_DMA_Buff[0];
 80015a4:	4b08      	ldr	r3, [pc, #32]	; (80015c8 <ADC_Get_Raw+0x5c>)
 80015a6:	685b      	ldr	r3, [r3, #4]
 80015a8:	b21a      	sxth	r2, r3
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	801a      	strh	r2, [r3, #0]
	*Temp_Raw	= adc.ADC2_DMA_Buff[0];
 80015ae:	4b06      	ldr	r3, [pc, #24]	; (80015c8 <ADC_Get_Raw+0x5c>)
 80015b0:	68db      	ldr	r3, [r3, #12]
 80015b2:	b21a      	sxth	r2, r3
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	801a      	strh	r2, [r3, #0]
}
 80015b8:	bf00      	nop
 80015ba:	3710      	adds	r7, #16
 80015bc:	46bd      	mov	sp, r7
 80015be:	bd80      	pop	{r7, pc}
 80015c0:	20000110 	.word	0x20000110
 80015c4:	200000a4 	.word	0x200000a4
 80015c8:	20000314 	.word	0x20000314

080015cc <ADC_Filter_Curr>:
void  ADC_Filter_Curr(int16_t i_a_Raw, int16_t i_b_Raw, int16_t*i_a_Fil, int16_t*i_b_Fil)
{
 80015cc:	b480      	push	{r7}
 80015ce:	b085      	sub	sp, #20
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	60ba      	str	r2, [r7, #8]
 80015d4:	607b      	str	r3, [r7, #4]
 80015d6:	4603      	mov	r3, r0
 80015d8:	81fb      	strh	r3, [r7, #14]
 80015da:	460b      	mov	r3, r1
 80015dc:	81bb      	strh	r3, [r7, #12]
	// Filter
	*i_a_Fil = fil.i_k[0]*i_a_Raw + fil.i_k[0]*fil.i_a_Pre + fil.i_k[1]*fil.i_a_Pre_Fil;
 80015de:	4b39      	ldr	r3, [pc, #228]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 80015e0:	ed93 7a00 	vldr	s14, [r3]
 80015e4:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015e8:	ee07 3a90 	vmov	s15, r3
 80015ec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f4:	4b33      	ldr	r3, [pc, #204]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 80015f6:	edd3 6a00 	vldr	s13, [r3]
 80015fa:	4b32      	ldr	r3, [pc, #200]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 80015fc:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001600:	ee07 3a90 	vmov	s15, r3
 8001604:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001610:	4b2c      	ldr	r3, [pc, #176]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001612:	edd3 6a01 	vldr	s13, [r3, #4]
 8001616:	4b2b      	ldr	r3, [pc, #172]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001618:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800161c:	ee07 3a90 	vmov	s15, r3
 8001620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001624:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001628:	ee77 7a27 	vadd.f32	s15, s14, s15
 800162c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001630:	ee17 3a90 	vmov	r3, s15
 8001634:	b21a      	sxth	r2, r3
 8001636:	68bb      	ldr	r3, [r7, #8]
 8001638:	801a      	strh	r2, [r3, #0]
	*i_b_Fil = fil.i_k[0]*i_b_Raw + fil.i_k[0]*fil.i_b_Pre + fil.i_k[1]*fil.i_b_Pre_Fil;
 800163a:	4b22      	ldr	r3, [pc, #136]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 800163c:	ed93 7a00 	vldr	s14, [r3]
 8001640:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001644:	ee07 3a90 	vmov	s15, r3
 8001648:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800164c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001650:	4b1c      	ldr	r3, [pc, #112]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001652:	edd3 6a00 	vldr	s13, [r3]
 8001656:	4b1b      	ldr	r3, [pc, #108]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001658:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800165c:	ee07 3a90 	vmov	s15, r3
 8001660:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001664:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001668:	ee37 7a27 	vadd.f32	s14, s14, s15
 800166c:	4b15      	ldr	r3, [pc, #84]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 800166e:	edd3 6a01 	vldr	s13, [r3, #4]
 8001672:	4b14      	ldr	r3, [pc, #80]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001674:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8001678:	ee07 3a90 	vmov	s15, r3
 800167c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001680:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001684:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001688:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800168c:	ee17 3a90 	vmov	r3, s15
 8001690:	b21a      	sxth	r2, r3
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	801a      	strh	r2, [r3, #0]

	// Now store current values as previous values
	fil.i_a_Pre = i_a_Raw;
 8001696:	4a0b      	ldr	r2, [pc, #44]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 8001698:	89fb      	ldrh	r3, [r7, #14]
 800169a:	8213      	strh	r3, [r2, #16]
	fil.i_b_Pre = i_b_Raw;
 800169c:	4a09      	ldr	r2, [pc, #36]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 800169e:	89bb      	ldrh	r3, [r7, #12]
 80016a0:	8293      	strh	r3, [r2, #20]

	fil.i_a_Pre_Fil = *i_a_Fil;
 80016a2:	68bb      	ldr	r3, [r7, #8]
 80016a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016a8:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 80016aa:	825a      	strh	r2, [r3, #18]
	fil.i_b_Pre_Fil = *i_b_Fil;
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f9b3 2000 	ldrsh.w	r2, [r3]
 80016b2:	4b04      	ldr	r3, [pc, #16]	; (80016c4 <ADC_Filter_Curr+0xf8>)
 80016b4:	82da      	strh	r2, [r3, #22]
}
 80016b6:	bf00      	nop
 80016b8:	3714      	adds	r7, #20
 80016ba:	46bd      	mov	sp, r7
 80016bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop
 80016c4:	200003dc 	.word	0x200003dc

080016c8 <ADC_Norm_Curr>:
void  ADC_Norm_Curr  (int16_t i_a_Fil, int16_t i_b_Fil, float*i_a, float*i_b)
{
 80016c8:	b480      	push	{r7}
 80016ca:	b085      	sub	sp, #20
 80016cc:	af00      	add	r7, sp, #0
 80016ce:	60ba      	str	r2, [r7, #8]
 80016d0:	607b      	str	r3, [r7, #4]
 80016d2:	4603      	mov	r3, r0
 80016d4:	81fb      	strh	r3, [r7, #14]
 80016d6:	460b      	mov	r3, r1
 80016d8:	81bb      	strh	r3, [r7, #12]
	*i_a = (((float)(i_a_Fil-adc.SO_A_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 80016da:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80016de:	4a25      	ldr	r2, [pc, #148]	; (8001774 <ADC_Norm_Curr+0xac>)
 80016e0:	f9b2 2044 	ldrsh.w	r2, [r2, #68]	; 0x44
 80016e4:	1a9b      	subs	r3, r3, r2
 80016e6:	ee07 3a90 	vmov	s15, r3
 80016ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80016ee:	4b21      	ldr	r3, [pc, #132]	; (8001774 <ADC_Norm_Curr+0xac>)
 80016f0:	edd3 7a00 	vldr	s15, [r3]
 80016f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80016f8:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001778 <ADC_Norm_Curr+0xb0>
 80016fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001700:	4b1c      	ldr	r3, [pc, #112]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001702:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001704:	ee07 3a90 	vmov	s15, r3
 8001708:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800170c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001710:	4b18      	ldr	r3, [pc, #96]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001712:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 8001716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800171a:	68bb      	ldr	r3, [r7, #8]
 800171c:	edc3 7a00 	vstr	s15, [r3]
	*i_b = (((float)(i_b_Fil-adc.SO_B_Offset))*adc.VDDA/4095.0f)/adc.SO_Gain/adc.R_Shunt_Res;
 8001720:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001724:	4a13      	ldr	r2, [pc, #76]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001726:	f9b2 2046 	ldrsh.w	r2, [r2, #70]	; 0x46
 800172a:	1a9b      	subs	r3, r3, r2
 800172c:	ee07 3a90 	vmov	s15, r3
 8001730:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001736:	edd3 7a00 	vldr	s15, [r3]
 800173a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800173e:	eddf 6a0e 	vldr	s13, [pc, #56]	; 8001778 <ADC_Norm_Curr+0xb0>
 8001742:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	ee07 3a90 	vmov	s15, r3
 800174e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001752:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8001756:	4b07      	ldr	r3, [pc, #28]	; (8001774 <ADC_Norm_Curr+0xac>)
 8001758:	ed93 7a0f 	vldr	s14, [r3, #60]	; 0x3c
 800175c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	edc3 7a00 	vstr	s15, [r3]
}
 8001766:	bf00      	nop
 8001768:	3714      	adds	r7, #20
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000314 	.word	0x20000314
 8001778:	457ff000 	.word	0x457ff000

0800177c <ENC_Read_Ang>:
	*PVDD = (float)PVDD_Fil*adc.VDDA/4095.0f / adc.V_bat_R_Bot * (adc.V_bat_R_Bot+adc.V_bat_R_Top);
	*Temp = (((float)Temp_Fil*adc.VDDA/4095.0f)-adc.Temp_V_Offset)/adc.Temp_Slope;
}
// Encoder
void  ENC_Read_Ang(float*Angle)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b086      	sub	sp, #24
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	uint8_t ENC_ASK_POS   [2] = {0b10000000,0b00100001};	// Command for asking position
 8001784:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8001788:	823b      	strh	r3, [r7, #16]
	uint8_t SPI_BUFF[2] = {0,0};
 800178a:	2300      	movs	r3, #0
 800178c:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001794:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001798:	f003 fdb4 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_ASK_POS, 2, 10);	// Ask for data
 800179c:	f107 0110 	add.w	r1, r7, #16
 80017a0:	230a      	movs	r3, #10
 80017a2:	2202      	movs	r2, #2
 80017a4:	481d      	ldr	r0, [pc, #116]	; (800181c <ENC_Read_Ang+0xa0>)
 80017a6:	f004 fe34 	bl	8006412 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF    , 2, 10);	// Receive 4 bytes of data
 80017aa:	f107 010c 	add.w	r1, r7, #12
 80017ae:	230a      	movs	r3, #10
 80017b0:	2202      	movs	r2, #2
 80017b2:	481a      	ldr	r0, [pc, #104]	; (800181c <ENC_Read_Ang+0xa0>)
 80017b4:	f004 ff9b 	bl	80066ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80017b8:	2201      	movs	r2, #1
 80017ba:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80017be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80017c2:	f003 fd9f 	bl	8005304 <HAL_GPIO_WritePin>

	int16_t SPI_ANG = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
 80017c6:	7b3b      	ldrb	r3, [r7, #12]
 80017c8:	021b      	lsls	r3, r3, #8
 80017ca:	b21a      	sxth	r2, r3
 80017cc:	7b7b      	ldrb	r3, [r7, #13]
 80017ce:	b21b      	sxth	r3, r3
 80017d0:	4313      	orrs	r3, r2
 80017d2:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 80017d4:	8afb      	ldrh	r3, [r7, #22]
 80017d6:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80017da:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 80017dc:	8aba      	ldrh	r2, [r7, #20]
 80017de:	8afb      	ldrh	r3, [r7, #22]
 80017e0:	0b9b      	lsrs	r3, r3, #14
 80017e2:	b29b      	uxth	r3, r3
 80017e4:	f003 0301 	and.w	r3, r3, #1
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	4619      	mov	r1, r3
 80017ec:	0049      	lsls	r1, r1, #1
 80017ee:	440b      	add	r3, r1
 80017f0:	039b      	lsls	r3, r3, #14
 80017f2:	b29b      	uxth	r3, r3
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	b29b      	uxth	r3, r3
 80017f8:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0f/32768.0f * ANG_VAL;
 80017fa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80017fe:	ee07 3a90 	vmov	s15, r3
 8001802:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001806:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8001820 <ENC_Read_Ang+0xa4>
 800180a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	edc3 7a00 	vstr	s15, [r3]
}
 8001814:	bf00      	nop
 8001816:	3718      	adds	r7, #24
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}
 800181c:	200003fc 	.word	0x200003fc
 8001820:	3c340000 	.word	0x3c340000

08001824 <ENC_Write>:
	int16_t SPI_VEL = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
	int16_t VEL_VAL = (0b0011111111111111 & SPI_VEL);			// keep last 14 bits
	*Velocity = 360.0f/32768.0f * VEL_VAL / 2.0f / 0.0000427f;
}
void  ENC_Write(uint8_t com1, uint8_t com2, uint8_t data1, uint8_t data2, uint8_t mask1, uint8_t mask2)
{
 8001824:	b590      	push	{r4, r7, lr}
 8001826:	b087      	sub	sp, #28
 8001828:	af00      	add	r7, sp, #0
 800182a:	4604      	mov	r4, r0
 800182c:	4608      	mov	r0, r1
 800182e:	4611      	mov	r1, r2
 8001830:	461a      	mov	r2, r3
 8001832:	4623      	mov	r3, r4
 8001834:	71fb      	strb	r3, [r7, #7]
 8001836:	4603      	mov	r3, r0
 8001838:	71bb      	strb	r3, [r7, #6]
 800183a:	460b      	mov	r3, r1
 800183c:	717b      	strb	r3, [r7, #5]
 800183e:	4613      	mov	r3, r2
 8001840:	713b      	strb	r3, [r7, #4]
	uint8_t ADDR = (com2>>4)&0b00001111;
 8001842:	79bb      	ldrb	r3, [r7, #6]
 8001844:	091b      	lsrs	r3, r3, #4
 8001846:	75fb      	strb	r3, [r7, #23]
	printf("\tRegister 0x%02X... ",ADDR);
 8001848:	7dfb      	ldrb	r3, [r7, #23]
 800184a:	4619      	mov	r1, r3
 800184c:	4855      	ldr	r0, [pc, #340]	; (80019a4 <ENC_Write+0x180>)
 800184e:	f006 ffd5 	bl	80087fc <iprintf>

	// read
	uint8_t ENC_R_COM [2] = {com1|0b1000000,								// make into read command
 8001852:	79fb      	ldrb	r3, [r7, #7]
 8001854:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001858:	b2db      	uxtb	r3, r3
 800185a:	753b      	strb	r3, [r7, #20]
 800185c:	79bb      	ldrb	r3, [r7, #6]
 800185e:	757b      	strb	r3, [r7, #21]
							 com2};
	uint8_t SPI_BUFF[2] = {0,0};
 8001860:	2300      	movs	r3, #0
 8001862:	823b      	strh	r3, [r7, #16]

//	printf("\n");
//	printf("\t\tTX: %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_R_COM[0]), BYTE_TO_BINARY(ENC_R_COM[1]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8001864:	2200      	movs	r2, #0
 8001866:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800186a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800186e:	f003 fd49 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8001872:	f107 0114 	add.w	r1, r7, #20
 8001876:	230a      	movs	r3, #10
 8001878:	2202      	movs	r2, #2
 800187a:	484b      	ldr	r0, [pc, #300]	; (80019a8 <ENC_Write+0x184>)
 800187c:	f004 fdc9 	bl	8006412 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001880:	f107 0110 	add.w	r1, r7, #16
 8001884:	230a      	movs	r3, #10
 8001886:	2202      	movs	r2, #2
 8001888:	4847      	ldr	r0, [pc, #284]	; (80019a8 <ENC_Write+0x184>)
 800188a:	f004 ff30 	bl	80066ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800188e:	2201      	movs	r2, #1
 8001890:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001894:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001898:	f003 fd34 	bl	8005304 <HAL_GPIO_WritePin>
//	printf("\t\tRead  : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	// write
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80018a2:	b2db      	uxtb	r3, r3
 80018a4:	733b      	strb	r3, [r7, #12]
 80018a6:	79bb      	ldrb	r3, [r7, #6]
 80018a8:	737b      	strb	r3, [r7, #13]
						     com2,											// same
							 (SPI_BUFF[0] & (~mask1)) | (data1 & mask1),	// keep read when mask=0, keep data when mask=1
 80018aa:	7c3b      	ldrb	r3, [r7, #16]
 80018ac:	b25a      	sxtb	r2, r3
 80018ae:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 80018b2:	43db      	mvns	r3, r3
 80018b4:	b25b      	sxtb	r3, r3
 80018b6:	4013      	ands	r3, r2
 80018b8:	b25a      	sxtb	r2, r3
 80018ba:	7979      	ldrb	r1, [r7, #5]
 80018bc:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80018c0:	400b      	ands	r3, r1
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	b25b      	sxtb	r3, r3
 80018c6:	4313      	orrs	r3, r2
 80018c8:	b25b      	sxtb	r3, r3
 80018ca:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 80018cc:	73bb      	strb	r3, [r7, #14]
							 (SPI_BUFF[1] & (~mask2)) | (data2 & mask2)};	// keep read when mask=0, keep data when mask=1
 80018ce:	7c7b      	ldrb	r3, [r7, #17]
 80018d0:	b25a      	sxtb	r2, r3
 80018d2:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 80018d6:	43db      	mvns	r3, r3
 80018d8:	b25b      	sxtb	r3, r3
 80018da:	4013      	ands	r3, r2
 80018dc:	b25a      	sxtb	r2, r3
 80018de:	7939      	ldrb	r1, [r7, #4]
 80018e0:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 80018e4:	400b      	ands	r3, r1
 80018e6:	b2db      	uxtb	r3, r3
 80018e8:	b25b      	sxtb	r3, r3
 80018ea:	4313      	orrs	r3, r2
 80018ec:	b25b      	sxtb	r3, r3
 80018ee:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 80018f0:	73fb      	strb	r3, [r7, #15]

//	printf("\t\tTX    : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_W_EOM[0]), BYTE_TO_BINARY(ENC_W_EOM[1]), BYTE_TO_BINARY(ENC_W_EOM[2]), BYTE_TO_BINARY(ENC_W_EOM[3]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 80018f2:	2200      	movs	r2, #0
 80018f4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80018f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80018fc:	f003 fd02 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_W_EOM, 4, 10);		// Write to register
 8001900:	f107 010c 	add.w	r1, r7, #12
 8001904:	230a      	movs	r3, #10
 8001906:	2204      	movs	r2, #4
 8001908:	4827      	ldr	r0, [pc, #156]	; (80019a8 <ENC_Write+0x184>)
 800190a:	f004 fd82 	bl	8006412 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 800190e:	f107 0110 	add.w	r1, r7, #16
 8001912:	230a      	movs	r3, #10
 8001914:	2202      	movs	r2, #2
 8001916:	4824      	ldr	r0, [pc, #144]	; (80019a8 <ENC_Write+0x184>)
 8001918:	f004 fee9 	bl	80066ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 800191c:	2201      	movs	r2, #1
 800191e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001922:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001926:	f003 fced 	bl	8005304 <HAL_GPIO_WritePin>
//		if(ERR_4==0){printf("\t\t\tErr 4: Invalid angle value!\n");}
//		Error_Handler();
//	}

	// check if written
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 800192a:	2200      	movs	r2, #0
 800192c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001934:	f003 fce6 	bl	8005304 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8001938:	f107 0114 	add.w	r1, r7, #20
 800193c:	230a      	movs	r3, #10
 800193e:	2202      	movs	r2, #2
 8001940:	4819      	ldr	r0, [pc, #100]	; (80019a8 <ENC_Write+0x184>)
 8001942:	f004 fd66 	bl	8006412 <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8001946:	f107 0110 	add.w	r1, r7, #16
 800194a:	230a      	movs	r3, #10
 800194c:	2202      	movs	r2, #2
 800194e:	4816      	ldr	r0, [pc, #88]	; (80019a8 <ENC_Write+0x184>)
 8001950:	f004 fecd 	bl	80066ee <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8001954:	2201      	movs	r2, #1
 8001956:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800195a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800195e:	f003 fcd1 	bl	8005304 <HAL_GPIO_WritePin>
//	printf("\t\tNew   : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	if(((data1&mask1) != (SPI_BUFF[0]&mask1)) || (data2&mask2) != (SPI_BUFF[1]&mask2))
 8001962:	7c3a      	ldrb	r2, [r7, #16]
 8001964:	797b      	ldrb	r3, [r7, #5]
 8001966:	4053      	eors	r3, r2
 8001968:	b2da      	uxtb	r2, r3
 800196a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800196e:	4013      	ands	r3, r2
 8001970:	b2db      	uxtb	r3, r3
 8001972:	2b00      	cmp	r3, #0
 8001974:	d109      	bne.n	800198a <ENC_Write+0x166>
 8001976:	7c7a      	ldrb	r2, [r7, #17]
 8001978:	793b      	ldrb	r3, [r7, #4]
 800197a:	4053      	eors	r3, r2
 800197c:	b2da      	uxtb	r2, r3
 800197e:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001982:	4013      	ands	r3, r2
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d004      	beq.n	8001994 <ENC_Write+0x170>
	{
		printf("Error Writing\n");
 800198a:	4808      	ldr	r0, [pc, #32]	; (80019ac <ENC_Write+0x188>)
 800198c:	f006 ffd2 	bl	8008934 <puts>
		Error_Handler();
 8001990:	f000 fc7e 	bl	8002290 <Error_Handler>
	}

	printf("Good\n");
 8001994:	4806      	ldr	r0, [pc, #24]	; (80019b0 <ENC_Write+0x18c>)
 8001996:	f006 ffcd 	bl	8008934 <puts>
}
 800199a:	bf00      	nop
 800199c:	371c      	adds	r7, #28
 800199e:	46bd      	mov	sp, r7
 80019a0:	bd90      	pop	{r4, r7, pc}
 80019a2:	bf00      	nop
 80019a4:	08009b44 	.word	0x08009b44
 80019a8:	200003fc 	.word	0x200003fc
 80019ac:	08009b5c 	.word	0x08009b5c
 80019b0:	08009af8 	.word	0x08009af8

080019b4 <ENC_Interrupt>:
void  ENC_Interrupt(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b082      	sub	sp, #8
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
 80019bc:	460b      	mov	r3, r1
 80019be:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 80019c0:	887b      	ldrh	r3, [r7, #2]
 80019c2:	4619      	mov	r1, r3
 80019c4:	6878      	ldr	r0, [r7, #4]
 80019c6:	f003 fc85 	bl	80052d4 <HAL_GPIO_ReadPin>
 80019ca:	4603      	mov	r3, r0
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d009      	beq.n	80019e4 <ENC_Interrupt+0x30>
		enc.IIF_Counter++;		// If high, increment
 80019d0:	4b14      	ldr	r3, [pc, #80]	; (8001a24 <ENC_Interrupt+0x70>)
 80019d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019d6:	b29b      	uxth	r3, r3
 80019d8:	3301      	adds	r3, #1
 80019da:	b29b      	uxth	r3, r3
 80019dc:	b21a      	sxth	r2, r3
 80019de:	4b11      	ldr	r3, [pc, #68]	; (8001a24 <ENC_Interrupt+0x70>)
 80019e0:	809a      	strh	r2, [r3, #4]
 80019e2:	e008      	b.n	80019f6 <ENC_Interrupt+0x42>
	else
		enc.IIF_Counter--;		// If low , decrement
 80019e4:	4b0f      	ldr	r3, [pc, #60]	; (8001a24 <ENC_Interrupt+0x70>)
 80019e6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019ea:	b29b      	uxth	r3, r3
 80019ec:	3b01      	subs	r3, #1
 80019ee:	b29b      	uxth	r3, r3
 80019f0:	b21a      	sxth	r2, r3
 80019f2:	4b0c      	ldr	r3, [pc, #48]	; (8001a24 <ENC_Interrupt+0x70>)
 80019f4:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 80019f6:	4b0b      	ldr	r3, [pc, #44]	; (8001a24 <ENC_Interrupt+0x70>)
 80019f8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80019fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001a00:	db02      	blt.n	8001a08 <ENC_Interrupt+0x54>
		enc.IIF_Counter = 0;		// Set to 0
 8001a02:	4b08      	ldr	r3, [pc, #32]	; (8001a24 <ENC_Interrupt+0x70>)
 8001a04:	2200      	movs	r2, #0
 8001a06:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter<0)		// If underflow
 8001a08:	4b06      	ldr	r3, [pc, #24]	; (8001a24 <ENC_Interrupt+0x70>)
 8001a0a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	da03      	bge.n	8001a1a <ENC_Interrupt+0x66>
		enc.IIF_Counter = 4095;		// Set to 4095
 8001a12:	4b04      	ldr	r3, [pc, #16]	; (8001a24 <ENC_Interrupt+0x70>)
 8001a14:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001a18:	809a      	strh	r2, [r3, #4]
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}
 8001a22:	bf00      	nop
 8001a24:	200002a0 	.word	0x200002a0

08001a28 <Set_PWM3>:
// FOC stuff
void  Set_PWM3(float DC_1, float DC_2, float DC_3)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b085      	sub	sp, #20
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001a32:	edc7 0a02 	vstr	s1, [r7, #8]
 8001a36:	ed87 1a01 	vstr	s2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,Phase_A_Ch,foc.PWM_Reg_Max*DC_1);	// Set PWM channels
 8001a3a:	4b1e      	ldr	r3, [pc, #120]	; (8001ab4 <Set_PWM3+0x8c>)
 8001a3c:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001a40:	ee07 3a90 	vmov	s15, r3
 8001a44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a48:	edd7 7a03 	vldr	s15, [r7, #12]
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	4b19      	ldr	r3, [pc, #100]	; (8001ab8 <Set_PWM3+0x90>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a58:	ee17 2a90 	vmov	r2, s15
 8001a5c:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,Phase_B_Ch,foc.PWM_Reg_Max*DC_2);
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <Set_PWM3+0x8c>)
 8001a60:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001a64:	ee07 3a90 	vmov	s15, r3
 8001a68:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a6c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a74:	4b10      	ldr	r3, [pc, #64]	; (8001ab8 <Set_PWM3+0x90>)
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001a7c:	ee17 2a90 	vmov	r2, s15
 8001a80:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,Phase_C_Ch,foc.PWM_Reg_Max*DC_3);
 8001a82:	4b0c      	ldr	r3, [pc, #48]	; (8001ab4 <Set_PWM3+0x8c>)
 8001a84:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8001a88:	ee07 3a90 	vmov	s15, r3
 8001a8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a90:	edd7 7a01 	vldr	s15, [r7, #4]
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <Set_PWM3+0x90>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001aa0:	ee17 2a90 	vmov	r2, s15
 8001aa4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001aa6:	bf00      	nop
 8001aa8:	3714      	adds	r7, #20
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab0:	4770      	bx	lr
 8001ab2:	bf00      	nop
 8001ab4:	200002b8 	.word	0x200002b8
 8001ab8:	200004ac 	.word	0x200004ac

08001abc <_sin>:
float _sin(float theta)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(theta)];
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7fe fe88 	bl	80007dc <__aeabi_f2d>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	ec43 2b10 	vmov	d0, r2, r3
 8001ad4:	f007 febc 	bl	8009850 <floor>
 8001ad8:	ec53 2b10 	vmov	r2, r3, d0
 8001adc:	4610      	mov	r0, r2
 8001ade:	4619      	mov	r1, r3
 8001ae0:	f7fe ff5c 	bl	800099c <__aeabi_d2iz>
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	4a05      	ldr	r2, [pc, #20]	; (8001afc <_sin+0x40>)
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	4413      	add	r3, r2
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	ee07 3a90 	vmov	s15, r3
}
 8001af2:	eeb0 0a67 	vmov.f32	s0, s15
 8001af6:	3708      	adds	r7, #8
 8001af8:	46bd      	mov	sp, r7
 8001afa:	bd80      	pop	{r7, pc}
 8001afc:	08009b7c 	.word	0x08009b7c

08001b00 <_cos>:
float _cos(float theta)
{
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b082      	sub	sp, #8
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0a01 	vstr	s0, [r7, #4]
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
 8001b0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001b0e:	ed9f 7a13 	vldr	s14, [pc, #76]	; 8001b5c <_cos+0x5c>
 8001b12:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001b16:	eddf 0a12 	vldr	s1, [pc, #72]	; 8001b60 <_cos+0x60>
 8001b1a:	eeb0 0a67 	vmov.f32	s0, s15
 8001b1e:	f007 ff17 	bl	8009950 <fmodf>
 8001b22:	ee10 3a10 	vmov	r3, s0
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fe58 	bl	80007dc <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ec43 2b10 	vmov	d0, r2, r3
 8001b34:	f007 fe8c 	bl	8009850 <floor>
 8001b38:	ec53 2b10 	vmov	r2, r3, d0
 8001b3c:	4610      	mov	r0, r2
 8001b3e:	4619      	mov	r1, r3
 8001b40:	f7fe ff2c 	bl	800099c <__aeabi_d2iz>
 8001b44:	4603      	mov	r3, r0
 8001b46:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <_cos+0x64>)
 8001b48:	009b      	lsls	r3, r3, #2
 8001b4a:	4413      	add	r3, r2
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	ee07 3a90 	vmov	s15, r3
}
 8001b52:	eeb0 0a67 	vmov.f32	s0, s15
 8001b56:	3708      	adds	r7, #8
 8001b58:	46bd      	mov	sp, r7
 8001b5a:	bd80      	pop	{r7, pc}
 8001b5c:	43870000 	.word	0x43870000
 8001b60:	43b40000 	.word	0x43b40000
 8001b64:	08009b7c 	.word	0x08009b7c

08001b68 <FOC_Interrupt>:
// Timer Interrupts
void  FOC_Interrupt(void)
{
 8001b68:	b5b0      	push	{r4, r5, r7, lr}
 8001b6a:	ed2d 8b02 	vpush	{d8}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
	/* LED on */
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 8001b72:	2201      	movs	r2, #1
 8001b74:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b78:	48b4      	ldr	r0, [pc, #720]	; (8001e4c <FOC_Interrupt+0x2e4>)
 8001b7a:	f003 fbc3 	bl	8005304 <HAL_GPIO_WritePin>

	/* FOC sample */
	ADC_Get_Raw(&adc.i_a_Raw,&adc.i_b_Raw, &adc.PVDD_Raw, &adc.Temp_Raw);	// Read raw ADC
 8001b7e:	4bb4      	ldr	r3, [pc, #720]	; (8001e50 <FOC_Interrupt+0x2e8>)
 8001b80:	4ab4      	ldr	r2, [pc, #720]	; (8001e54 <FOC_Interrupt+0x2ec>)
 8001b82:	49b5      	ldr	r1, [pc, #724]	; (8001e58 <FOC_Interrupt+0x2f0>)
 8001b84:	48b5      	ldr	r0, [pc, #724]	; (8001e5c <FOC_Interrupt+0x2f4>)
 8001b86:	f7ff fcf1 	bl	800156c <ADC_Get_Raw>
	enc.IIF_Raw = enc.IIF_Counter;											// Get encoder angle
 8001b8a:	4bb5      	ldr	r3, [pc, #724]	; (8001e60 <FOC_Interrupt+0x2f8>)
 8001b8c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001b90:	b29a      	uxth	r2, r3
 8001b92:	4bb3      	ldr	r3, [pc, #716]	; (8001e60 <FOC_Interrupt+0x2f8>)
 8001b94:	821a      	strh	r2, [r3, #16]

	/* Filter and normalise readings */
	ADC_Filter_Curr(adc.i_a_Raw,adc.i_b_Raw,&adc.i_a_Fil,&adc.i_b_Fil);		// Filter raw ADC currents
 8001b96:	4bb3      	ldr	r3, [pc, #716]	; (8001e64 <FOC_Interrupt+0x2fc>)
 8001b98:	f9b3 002c 	ldrsh.w	r0, [r3, #44]	; 0x2c
 8001b9c:	4bb1      	ldr	r3, [pc, #708]	; (8001e64 <FOC_Interrupt+0x2fc>)
 8001b9e:	f9b3 102e 	ldrsh.w	r1, [r3, #46]	; 0x2e
 8001ba2:	4bb1      	ldr	r3, [pc, #708]	; (8001e68 <FOC_Interrupt+0x300>)
 8001ba4:	4ab1      	ldr	r2, [pc, #708]	; (8001e6c <FOC_Interrupt+0x304>)
 8001ba6:	f7ff fd11 	bl	80015cc <ADC_Filter_Curr>
	ADC_Norm_Curr  (adc.i_a_Fil,adc.i_b_Fil,&foc.i_a,&foc.i_b);				// Normalise currents
 8001baa:	4bae      	ldr	r3, [pc, #696]	; (8001e64 <FOC_Interrupt+0x2fc>)
 8001bac:	f9b3 0034 	ldrsh.w	r0, [r3, #52]	; 0x34
 8001bb0:	4bac      	ldr	r3, [pc, #688]	; (8001e64 <FOC_Interrupt+0x2fc>)
 8001bb2:	f9b3 1036 	ldrsh.w	r1, [r3, #54]	; 0x36
 8001bb6:	4bae      	ldr	r3, [pc, #696]	; (8001e70 <FOC_Interrupt+0x308>)
 8001bb8:	4aae      	ldr	r2, [pc, #696]	; (8001e74 <FOC_Interrupt+0x30c>)
 8001bba:	f7ff fd85 	bl	80016c8 <ADC_Norm_Curr>
	foc.m_theta = (float)enc.IIF_Raw / 4095.0f * 360.0f;					// Normalise angle to 0-360deg
 8001bbe:	4ba8      	ldr	r3, [pc, #672]	; (8001e60 <FOC_Interrupt+0x2f8>)
 8001bc0:	8a1b      	ldrh	r3, [r3, #16]
 8001bc2:	ee07 3a90 	vmov	s15, r3
 8001bc6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001bca:	eddf 6aab 	vldr	s13, [pc, #684]	; 8001e78 <FOC_Interrupt+0x310>
 8001bce:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001bd2:	ed9f 7aaa 	vldr	s14, [pc, #680]	; 8001e7c <FOC_Interrupt+0x314>
 8001bd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bda:	4ba9      	ldr	r3, [pc, #676]	; (8001e80 <FOC_Interrupt+0x318>)
 8001bdc:	edc3 7a02 	vstr	s15, [r3, #8]

	/* FOC maths */
	// Get electrical angles correct
	foc.e_theta = fmodf(foc.m_theta*foc.Pole_Pairs,360.0f);	// get electrical angle and constrain in 360 deg
 8001be0:	4ba7      	ldr	r3, [pc, #668]	; (8001e80 <FOC_Interrupt+0x318>)
 8001be2:	ed93 7a02 	vldr	s14, [r3, #8]
 8001be6:	4ba6      	ldr	r3, [pc, #664]	; (8001e80 <FOC_Interrupt+0x318>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	ee07 3a90 	vmov	s15, r3
 8001bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bf2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001bf6:	eddf 0aa1 	vldr	s1, [pc, #644]	; 8001e7c <FOC_Interrupt+0x314>
 8001bfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001bfe:	f007 fea7 	bl	8009950 <fmodf>
 8001c02:	eef0 7a40 	vmov.f32	s15, s0
 8001c06:	4b9e      	ldr	r3, [pc, #632]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c08:	edc3 7a04 	vstr	s15, [r3, #16]

	// Clarke -> alpha/beta
	foc.i_alph = foc.i_a;
 8001c0c:	4b9c      	ldr	r3, [pc, #624]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c0e:	699b      	ldr	r3, [r3, #24]
 8001c10:	4a9b      	ldr	r2, [pc, #620]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c12:	6253      	str	r3, [r2, #36]	; 0x24
	foc.i_beta = SQRT1_3 * (2.0f*foc.i_b - foc.i_a);
 8001c14:	4b9a      	ldr	r3, [pc, #616]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c16:	edd3 7a07 	vldr	s15, [r3, #28]
 8001c1a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c1e:	4b98      	ldr	r3, [pc, #608]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c20:	edd3 7a06 	vldr	s15, [r3, #24]
 8001c24:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c28:	ed9f 7a96 	vldr	s14, [pc, #600]	; 8001e84 <FOC_Interrupt+0x31c>
 8001c2c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c30:	4b93      	ldr	r3, [pc, #588]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c32:	edc3 7a0a 	vstr	s15, [r3, #40]	; 0x28

	// Park -> direct/quadrature
	float sin_Ang = _sin(foc.e_theta);
 8001c36:	4b92      	ldr	r3, [pc, #584]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c38:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c3c:	eeb0 0a67 	vmov.f32	s0, s15
 8001c40:	f7ff ff3c 	bl	8001abc <_sin>
 8001c44:	ed87 0a01 	vstr	s0, [r7, #4]
	float cos_Ang = _cos(foc.e_theta);
 8001c48:	4b8d      	ldr	r3, [pc, #564]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c4a:	edd3 7a04 	vldr	s15, [r3, #16]
 8001c4e:	eeb0 0a67 	vmov.f32	s0, s15
 8001c52:	f7ff ff55 	bl	8001b00 <_cos>
 8001c56:	ed87 0a00 	vstr	s0, [r7]
	foc.i_d = cos_Ang*foc.i_alph + sin_Ang*foc.i_beta;
 8001c5a:	4b89      	ldr	r3, [pc, #548]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c5c:	ed93 7a09 	vldr	s14, [r3, #36]	; 0x24
 8001c60:	edd7 7a00 	vldr	s15, [r7]
 8001c64:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c68:	4b85      	ldr	r3, [pc, #532]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c6a:	edd3 6a0a 	vldr	s13, [r3, #40]	; 0x28
 8001c6e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c7a:	4b81      	ldr	r3, [pc, #516]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c7c:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c
	foc.i_q = cos_Ang*foc.i_beta - sin_Ang*foc.i_alph;
 8001c80:	4b7f      	ldr	r3, [pc, #508]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c82:	ed93 7a0a 	vldr	s14, [r3, #40]	; 0x28
 8001c86:	edd7 7a00 	vldr	s15, [r7]
 8001c8a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c8e:	4b7c      	ldr	r3, [pc, #496]	; (8001e80 <FOC_Interrupt+0x318>)
 8001c90:	edd3 6a09 	vldr	s13, [r3, #36]	; 0x24
 8001c94:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c98:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c9c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ca0:	4b77      	ldr	r3, [pc, #476]	; (8001e80 <FOC_Interrupt+0x318>)
 8001ca2:	edc3 7a0c 	vstr	s15, [r3, #48]	; 0x30

	/* Regulate currents */
	foc.DC_I = 0.5f;				// Current duty cycle
 8001ca6:	4b76      	ldr	r3, [pc, #472]	; (8001e80 <FOC_Interrupt+0x318>)
 8001ca8:	f04f 527c 	mov.w	r2, #1056964608	; 0x3f000000
 8001cac:	635a      	str	r2, [r3, #52]	; 0x34

	/* Set PWM Compare values */
	foc.alpha = fmodf(foc.e_theta,60.0f);	// calculate alpha
 8001cae:	4b74      	ldr	r3, [pc, #464]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cb0:	edd3 7a04 	vldr	s15, [r3, #16]
 8001cb4:	eddf 0a74 	vldr	s1, [pc, #464]	; 8001e88 <FOC_Interrupt+0x320>
 8001cb8:	eeb0 0a67 	vmov.f32	s0, s15
 8001cbc:	f007 fe48 	bl	8009950 <fmodf>
 8001cc0:	eef0 7a40 	vmov.f32	s15, s0
 8001cc4:	4b6e      	ldr	r3, [pc, #440]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cc6:	edc3 7a0e 	vstr	s15, [r3, #56]	; 0x38

	foc.DC_1 = foc.DC_I*_sin(60.0f - foc.alpha);
 8001cca:	4b6d      	ldr	r3, [pc, #436]	; (8001e80 <FOC_Interrupt+0x318>)
 8001ccc:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001cd0:	4b6b      	ldr	r3, [pc, #428]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cd2:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001cd6:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 8001e88 <FOC_Interrupt+0x320>
 8001cda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cde:	eeb0 0a67 	vmov.f32	s0, s15
 8001ce2:	f7ff feeb 	bl	8001abc <_sin>
 8001ce6:	eef0 7a40 	vmov.f32	s15, s0
 8001cea:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001cee:	4b64      	ldr	r3, [pc, #400]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cf0:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
	foc.DC_2 = foc.DC_I*_sin(foc.alpha);
 8001cf4:	4b62      	ldr	r3, [pc, #392]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cf6:	ed93 8a0d 	vldr	s16, [r3, #52]	; 0x34
 8001cfa:	4b61      	ldr	r3, [pc, #388]	; (8001e80 <FOC_Interrupt+0x318>)
 8001cfc:	edd3 7a0e 	vldr	s15, [r3, #56]	; 0x38
 8001d00:	eeb0 0a67 	vmov.f32	s0, s15
 8001d04:	f7ff feda 	bl	8001abc <_sin>
 8001d08:	eef0 7a40 	vmov.f32	s15, s0
 8001d0c:	ee68 7a27 	vmul.f32	s15, s16, s15
 8001d10:	4b5b      	ldr	r3, [pc, #364]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d12:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	foc.DC_0 = 1.0f - foc.DC_1 - foc.DC_2;
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d18:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 8001d1c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8001d20:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d24:	4b56      	ldr	r3, [pc, #344]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d26:	edd3 7a11 	vldr	s15, [r3, #68]	; 0x44
 8001d2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2e:	4b54      	ldr	r3, [pc, #336]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d30:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48

	foc.sector = (int)floor(foc.e_theta/60.0f);
 8001d34:	4b52      	ldr	r3, [pc, #328]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d36:	edd3 7a04 	vldr	s15, [r3, #16]
 8001d3a:	ed9f 7a53 	vldr	s14, [pc, #332]	; 8001e88 <FOC_Interrupt+0x320>
 8001d3e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 8001d42:	ee16 0a90 	vmov	r0, s13
 8001d46:	f7fe fd49 	bl	80007dc <__aeabi_f2d>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	460b      	mov	r3, r1
 8001d4e:	ec43 2b10 	vmov	d0, r2, r3
 8001d52:	f007 fd7d 	bl	8009850 <floor>
 8001d56:	ec53 2b10 	vmov	r2, r3, d0
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	4619      	mov	r1, r3
 8001d5e:	f7fe fe1d 	bl	800099c <__aeabi_d2iz>
 8001d62:	4603      	mov	r3, r0
 8001d64:	4a46      	ldr	r2, [pc, #280]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d66:	63d3      	str	r3, [r2, #60]	; 0x3c

	switch (foc.sector)
 8001d68:	4b45      	ldr	r3, [pc, #276]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d6c:	2b05      	cmp	r3, #5
 8001d6e:	f200 8269 	bhi.w	8002244 <FOC_Interrupt+0x6dc>
 8001d72:	a201      	add	r2, pc, #4	; (adr r2, 8001d78 <FOC_Interrupt+0x210>)
 8001d74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001e91 	.word	0x08001e91
 8001d80:	08001f4d 	.word	0x08001f4d
 8001d84:	08002009 	.word	0x08002009
 8001d88:	080020c5 	.word	0x080020c5
 8001d8c:	08002189 	.word	0x08002189
	{
		case 0:
			foc.PWM_A = 0.5*foc.DC_0;
 8001d90:	4b3b      	ldr	r3, [pc, #236]	; (8001e80 <FOC_Interrupt+0x318>)
 8001d92:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001d96:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001d9a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d9e:	4b38      	ldr	r3, [pc, #224]	; (8001e80 <FOC_Interrupt+0x318>)
 8001da0:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1;
 8001da4:	4b36      	ldr	r3, [pc, #216]	; (8001e80 <FOC_Interrupt+0x318>)
 8001da6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001da8:	4618      	mov	r0, r3
 8001daa:	f7fe fd17 	bl	80007dc <__aeabi_f2d>
 8001dae:	f04f 0200 	mov.w	r2, #0
 8001db2:	4b36      	ldr	r3, [pc, #216]	; (8001e8c <FOC_Interrupt+0x324>)
 8001db4:	f7fe fa84 	bl	80002c0 <__aeabi_dmul>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	4614      	mov	r4, r2
 8001dbe:	461d      	mov	r5, r3
 8001dc0:	4b2f      	ldr	r3, [pc, #188]	; (8001e80 <FOC_Interrupt+0x318>)
 8001dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	f7fe fd09 	bl	80007dc <__aeabi_f2d>
 8001dca:	4602      	mov	r2, r0
 8001dcc:	460b      	mov	r3, r1
 8001dce:	4620      	mov	r0, r4
 8001dd0:	4629      	mov	r1, r5
 8001dd2:	f7fe fba5 	bl	8000520 <__adddf3>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	460b      	mov	r3, r1
 8001dda:	4610      	mov	r0, r2
 8001ddc:	4619      	mov	r1, r3
 8001dde:	f7fe fe05 	bl	80009ec <__aeabi_d2f>
 8001de2:	4603      	mov	r3, r0
 8001de4:	4a26      	ldr	r2, [pc, #152]	; (8001e80 <FOC_Interrupt+0x318>)
 8001de6:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <FOC_Interrupt+0x318>)
 8001dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fcf5 	bl	80007dc <__aeabi_f2d>
 8001df2:	f04f 0200 	mov.w	r2, #0
 8001df6:	4b25      	ldr	r3, [pc, #148]	; (8001e8c <FOC_Interrupt+0x324>)
 8001df8:	f7fe fa62 	bl	80002c0 <__aeabi_dmul>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	460b      	mov	r3, r1
 8001e00:	4614      	mov	r4, r2
 8001e02:	461d      	mov	r5, r3
 8001e04:	4b1e      	ldr	r3, [pc, #120]	; (8001e80 <FOC_Interrupt+0x318>)
 8001e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7fe fce7 	bl	80007dc <__aeabi_f2d>
 8001e0e:	4602      	mov	r2, r0
 8001e10:	460b      	mov	r3, r1
 8001e12:	4620      	mov	r0, r4
 8001e14:	4629      	mov	r1, r5
 8001e16:	f7fe fb83 	bl	8000520 <__adddf3>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	460b      	mov	r3, r1
 8001e1e:	4614      	mov	r4, r2
 8001e20:	461d      	mov	r5, r3
 8001e22:	4b17      	ldr	r3, [pc, #92]	; (8001e80 <FOC_Interrupt+0x318>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	4618      	mov	r0, r3
 8001e28:	f7fe fcd8 	bl	80007dc <__aeabi_f2d>
 8001e2c:	4602      	mov	r2, r0
 8001e2e:	460b      	mov	r3, r1
 8001e30:	4620      	mov	r0, r4
 8001e32:	4629      	mov	r1, r5
 8001e34:	f7fe fb74 	bl	8000520 <__adddf3>
 8001e38:	4602      	mov	r2, r0
 8001e3a:	460b      	mov	r3, r1
 8001e3c:	4610      	mov	r0, r2
 8001e3e:	4619      	mov	r1, r3
 8001e40:	f7fe fdd4 	bl	80009ec <__aeabi_d2f>
 8001e44:	4603      	mov	r3, r0
 8001e46:	4a0e      	ldr	r2, [pc, #56]	; (8001e80 <FOC_Interrupt+0x318>)
 8001e48:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8001e4a:	e1fb      	b.n	8002244 <FOC_Interrupt+0x6dc>
 8001e4c:	48000400 	.word	0x48000400
 8001e50:	20000346 	.word	0x20000346
 8001e54:	20000344 	.word	0x20000344
 8001e58:	20000342 	.word	0x20000342
 8001e5c:	20000340 	.word	0x20000340
 8001e60:	200002a0 	.word	0x200002a0
 8001e64:	20000314 	.word	0x20000314
 8001e68:	2000034a 	.word	0x2000034a
 8001e6c:	20000348 	.word	0x20000348
 8001e70:	200002d4 	.word	0x200002d4
 8001e74:	200002d0 	.word	0x200002d0
 8001e78:	457ff000 	.word	0x457ff000
 8001e7c:	43b40000 	.word	0x43b40000
 8001e80:	200002b8 	.word	0x200002b8
 8001e84:	3f13cd3a 	.word	0x3f13cd3a
 8001e88:	42700000 	.word	0x42700000
 8001e8c:	3fe00000 	.word	0x3fe00000
		case 1:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_2;
 8001e90:	4bbb      	ldr	r3, [pc, #748]	; (8002180 <FOC_Interrupt+0x618>)
 8001e92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7fe fca1 	bl	80007dc <__aeabi_f2d>
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	4bb9      	ldr	r3, [pc, #740]	; (8002184 <FOC_Interrupt+0x61c>)
 8001ea0:	f7fe fa0e 	bl	80002c0 <__aeabi_dmul>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	4614      	mov	r4, r2
 8001eaa:	461d      	mov	r5, r3
 8001eac:	4bb4      	ldr	r3, [pc, #720]	; (8002180 <FOC_Interrupt+0x618>)
 8001eae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	f7fe fc93 	bl	80007dc <__aeabi_f2d>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	460b      	mov	r3, r1
 8001eba:	4620      	mov	r0, r4
 8001ebc:	4629      	mov	r1, r5
 8001ebe:	f7fe fb2f 	bl	8000520 <__adddf3>
 8001ec2:	4602      	mov	r2, r0
 8001ec4:	460b      	mov	r3, r1
 8001ec6:	4610      	mov	r0, r2
 8001ec8:	4619      	mov	r1, r3
 8001eca:	f7fe fd8f 	bl	80009ec <__aeabi_d2f>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	4aab      	ldr	r2, [pc, #684]	; (8002180 <FOC_Interrupt+0x618>)
 8001ed2:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 8001ed4:	4baa      	ldr	r3, [pc, #680]	; (8002180 <FOC_Interrupt+0x618>)
 8001ed6:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001eda:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001ede:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ee2:	4ba7      	ldr	r3, [pc, #668]	; (8002180 <FOC_Interrupt+0x618>)
 8001ee4:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001ee8:	4ba5      	ldr	r3, [pc, #660]	; (8002180 <FOC_Interrupt+0x618>)
 8001eea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001eec:	4618      	mov	r0, r3
 8001eee:	f7fe fc75 	bl	80007dc <__aeabi_f2d>
 8001ef2:	f04f 0200 	mov.w	r2, #0
 8001ef6:	4ba3      	ldr	r3, [pc, #652]	; (8002184 <FOC_Interrupt+0x61c>)
 8001ef8:	f7fe f9e2 	bl	80002c0 <__aeabi_dmul>
 8001efc:	4602      	mov	r2, r0
 8001efe:	460b      	mov	r3, r1
 8001f00:	4614      	mov	r4, r2
 8001f02:	461d      	mov	r5, r3
 8001f04:	4b9e      	ldr	r3, [pc, #632]	; (8002180 <FOC_Interrupt+0x618>)
 8001f06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7fe fc67 	bl	80007dc <__aeabi_f2d>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	460b      	mov	r3, r1
 8001f12:	4620      	mov	r0, r4
 8001f14:	4629      	mov	r1, r5
 8001f16:	f7fe fb03 	bl	8000520 <__adddf3>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4614      	mov	r4, r2
 8001f20:	461d      	mov	r5, r3
 8001f22:	4b97      	ldr	r3, [pc, #604]	; (8002180 <FOC_Interrupt+0x618>)
 8001f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f26:	4618      	mov	r0, r3
 8001f28:	f7fe fc58 	bl	80007dc <__aeabi_f2d>
 8001f2c:	4602      	mov	r2, r0
 8001f2e:	460b      	mov	r3, r1
 8001f30:	4620      	mov	r0, r4
 8001f32:	4629      	mov	r1, r5
 8001f34:	f7fe faf4 	bl	8000520 <__adddf3>
 8001f38:	4602      	mov	r2, r0
 8001f3a:	460b      	mov	r3, r1
 8001f3c:	4610      	mov	r0, r2
 8001f3e:	4619      	mov	r1, r3
 8001f40:	f7fe fd54 	bl	80009ec <__aeabi_d2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4a8e      	ldr	r2, [pc, #568]	; (8002180 <FOC_Interrupt+0x618>)
 8001f48:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8001f4a:	e17b      	b.n	8002244 <FOC_Interrupt+0x6dc>
		case 2:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8001f4c:	4b8c      	ldr	r3, [pc, #560]	; (8002180 <FOC_Interrupt+0x618>)
 8001f4e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f50:	4618      	mov	r0, r3
 8001f52:	f7fe fc43 	bl	80007dc <__aeabi_f2d>
 8001f56:	f04f 0200 	mov.w	r2, #0
 8001f5a:	4b8a      	ldr	r3, [pc, #552]	; (8002184 <FOC_Interrupt+0x61c>)
 8001f5c:	f7fe f9b0 	bl	80002c0 <__aeabi_dmul>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4614      	mov	r4, r2
 8001f66:	461d      	mov	r5, r3
 8001f68:	4b85      	ldr	r3, [pc, #532]	; (8002180 <FOC_Interrupt+0x618>)
 8001f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	f7fe fc35 	bl	80007dc <__aeabi_f2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4620      	mov	r0, r4
 8001f78:	4629      	mov	r1, r5
 8001f7a:	f7fe fad1 	bl	8000520 <__adddf3>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4614      	mov	r4, r2
 8001f84:	461d      	mov	r5, r3
 8001f86:	4b7e      	ldr	r3, [pc, #504]	; (8002180 <FOC_Interrupt+0x618>)
 8001f88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f8a:	4618      	mov	r0, r3
 8001f8c:	f7fe fc26 	bl	80007dc <__aeabi_f2d>
 8001f90:	4602      	mov	r2, r0
 8001f92:	460b      	mov	r3, r1
 8001f94:	4620      	mov	r0, r4
 8001f96:	4629      	mov	r1, r5
 8001f98:	f7fe fac2 	bl	8000520 <__adddf3>
 8001f9c:	4602      	mov	r2, r0
 8001f9e:	460b      	mov	r3, r1
 8001fa0:	4610      	mov	r0, r2
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	f7fe fd22 	bl	80009ec <__aeabi_d2f>
 8001fa8:	4603      	mov	r3, r0
 8001faa:	4a75      	ldr	r2, [pc, #468]	; (8002180 <FOC_Interrupt+0x618>)
 8001fac:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0;
 8001fae:	4b74      	ldr	r3, [pc, #464]	; (8002180 <FOC_Interrupt+0x618>)
 8001fb0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8001fb4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001fb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001fbc:	4b70      	ldr	r3, [pc, #448]	; (8002180 <FOC_Interrupt+0x618>)
 8001fbe:	edc3 7a16 	vstr	s15, [r3, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_1;
 8001fc2:	4b6f      	ldr	r3, [pc, #444]	; (8002180 <FOC_Interrupt+0x618>)
 8001fc4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f7fe fc08 	bl	80007dc <__aeabi_f2d>
 8001fcc:	f04f 0200 	mov.w	r2, #0
 8001fd0:	4b6c      	ldr	r3, [pc, #432]	; (8002184 <FOC_Interrupt+0x61c>)
 8001fd2:	f7fe f975 	bl	80002c0 <__aeabi_dmul>
 8001fd6:	4602      	mov	r2, r0
 8001fd8:	460b      	mov	r3, r1
 8001fda:	4614      	mov	r4, r2
 8001fdc:	461d      	mov	r5, r3
 8001fde:	4b68      	ldr	r3, [pc, #416]	; (8002180 <FOC_Interrupt+0x618>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f7fe fbfa 	bl	80007dc <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4620      	mov	r0, r4
 8001fee:	4629      	mov	r1, r5
 8001ff0:	f7fe fa96 	bl	8000520 <__adddf3>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fcf6 	bl	80009ec <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
 8002002:	4a5f      	ldr	r2, [pc, #380]	; (8002180 <FOC_Interrupt+0x618>)
 8002004:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002006:	e11d      	b.n	8002244 <FOC_Interrupt+0x6dc>
		case 3:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002008:	4b5d      	ldr	r3, [pc, #372]	; (8002180 <FOC_Interrupt+0x618>)
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	4618      	mov	r0, r3
 800200e:	f7fe fbe5 	bl	80007dc <__aeabi_f2d>
 8002012:	f04f 0200 	mov.w	r2, #0
 8002016:	4b5b      	ldr	r3, [pc, #364]	; (8002184 <FOC_Interrupt+0x61c>)
 8002018:	f7fe f952 	bl	80002c0 <__aeabi_dmul>
 800201c:	4602      	mov	r2, r0
 800201e:	460b      	mov	r3, r1
 8002020:	4614      	mov	r4, r2
 8002022:	461d      	mov	r5, r3
 8002024:	4b56      	ldr	r3, [pc, #344]	; (8002180 <FOC_Interrupt+0x618>)
 8002026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe fbd7 	bl	80007dc <__aeabi_f2d>
 800202e:	4602      	mov	r2, r0
 8002030:	460b      	mov	r3, r1
 8002032:	4620      	mov	r0, r4
 8002034:	4629      	mov	r1, r5
 8002036:	f7fe fa73 	bl	8000520 <__adddf3>
 800203a:	4602      	mov	r2, r0
 800203c:	460b      	mov	r3, r1
 800203e:	4614      	mov	r4, r2
 8002040:	461d      	mov	r5, r3
 8002042:	4b4f      	ldr	r3, [pc, #316]	; (8002180 <FOC_Interrupt+0x618>)
 8002044:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fbc8 	bl	80007dc <__aeabi_f2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4620      	mov	r0, r4
 8002052:	4629      	mov	r1, r5
 8002054:	f7fe fa64 	bl	8000520 <__adddf3>
 8002058:	4602      	mov	r2, r0
 800205a:	460b      	mov	r3, r1
 800205c:	4610      	mov	r0, r2
 800205e:	4619      	mov	r1, r3
 8002060:	f7fe fcc4 	bl	80009ec <__aeabi_d2f>
 8002064:	4603      	mov	r3, r0
 8002066:	4a46      	ldr	r2, [pc, #280]	; (8002180 <FOC_Interrupt+0x618>)
 8002068:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_2;
 800206a:	4b45      	ldr	r3, [pc, #276]	; (8002180 <FOC_Interrupt+0x618>)
 800206c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800206e:	4618      	mov	r0, r3
 8002070:	f7fe fbb4 	bl	80007dc <__aeabi_f2d>
 8002074:	f04f 0200 	mov.w	r2, #0
 8002078:	4b42      	ldr	r3, [pc, #264]	; (8002184 <FOC_Interrupt+0x61c>)
 800207a:	f7fe f921 	bl	80002c0 <__aeabi_dmul>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4614      	mov	r4, r2
 8002084:	461d      	mov	r5, r3
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <FOC_Interrupt+0x618>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4618      	mov	r0, r3
 800208c:	f7fe fba6 	bl	80007dc <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4620      	mov	r0, r4
 8002096:	4629      	mov	r1, r5
 8002098:	f7fe fa42 	bl	8000520 <__adddf3>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fca2 	bl	80009ec <__aeabi_d2f>
 80020a8:	4603      	mov	r3, r0
 80020aa:	4a35      	ldr	r2, [pc, #212]	; (8002180 <FOC_Interrupt+0x618>)
 80020ac:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <FOC_Interrupt+0x618>)
 80020b0:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80020b4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 80020b8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80020bc:	4b30      	ldr	r3, [pc, #192]	; (8002180 <FOC_Interrupt+0x618>)
 80020be:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 80020c2:	e0bf      	b.n	8002244 <FOC_Interrupt+0x6dc>
		case 4:
			foc.PWM_A = 0.5*foc.DC_0 + foc.DC_1;
 80020c4:	4b2e      	ldr	r3, [pc, #184]	; (8002180 <FOC_Interrupt+0x618>)
 80020c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020c8:	4618      	mov	r0, r3
 80020ca:	f7fe fb87 	bl	80007dc <__aeabi_f2d>
 80020ce:	f04f 0200 	mov.w	r2, #0
 80020d2:	4b2c      	ldr	r3, [pc, #176]	; (8002184 <FOC_Interrupt+0x61c>)
 80020d4:	f7fe f8f4 	bl	80002c0 <__aeabi_dmul>
 80020d8:	4602      	mov	r2, r0
 80020da:	460b      	mov	r3, r1
 80020dc:	4614      	mov	r4, r2
 80020de:	461d      	mov	r5, r3
 80020e0:	4b27      	ldr	r3, [pc, #156]	; (8002180 <FOC_Interrupt+0x618>)
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	4618      	mov	r0, r3
 80020e6:	f7fe fb79 	bl	80007dc <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4620      	mov	r0, r4
 80020f0:	4629      	mov	r1, r5
 80020f2:	f7fe fa15 	bl	8000520 <__adddf3>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fc75 	bl	80009ec <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
 8002104:	4a1e      	ldr	r2, [pc, #120]	; (8002180 <FOC_Interrupt+0x618>)
 8002106:	6513      	str	r3, [r2, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 8002108:	4b1d      	ldr	r3, [pc, #116]	; (8002180 <FOC_Interrupt+0x618>)
 800210a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe fb65 	bl	80007dc <__aeabi_f2d>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b1b      	ldr	r3, [pc, #108]	; (8002184 <FOC_Interrupt+0x61c>)
 8002118:	f7fe f8d2 	bl	80002c0 <__aeabi_dmul>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	4614      	mov	r4, r2
 8002122:	461d      	mov	r5, r3
 8002124:	4b16      	ldr	r3, [pc, #88]	; (8002180 <FOC_Interrupt+0x618>)
 8002126:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002128:	4618      	mov	r0, r3
 800212a:	f7fe fb57 	bl	80007dc <__aeabi_f2d>
 800212e:	4602      	mov	r2, r0
 8002130:	460b      	mov	r3, r1
 8002132:	4620      	mov	r0, r4
 8002134:	4629      	mov	r1, r5
 8002136:	f7fe f9f3 	bl	8000520 <__adddf3>
 800213a:	4602      	mov	r2, r0
 800213c:	460b      	mov	r3, r1
 800213e:	4614      	mov	r4, r2
 8002140:	461d      	mov	r5, r3
 8002142:	4b0f      	ldr	r3, [pc, #60]	; (8002180 <FOC_Interrupt+0x618>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	4618      	mov	r0, r3
 8002148:	f7fe fb48 	bl	80007dc <__aeabi_f2d>
 800214c:	4602      	mov	r2, r0
 800214e:	460b      	mov	r3, r1
 8002150:	4620      	mov	r0, r4
 8002152:	4629      	mov	r1, r5
 8002154:	f7fe f9e4 	bl	8000520 <__adddf3>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f7fe fc44 	bl	80009ec <__aeabi_d2f>
 8002164:	4603      	mov	r3, r0
 8002166:	4a06      	ldr	r2, [pc, #24]	; (8002180 <FOC_Interrupt+0x618>)
 8002168:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0;
 800216a:	4b05      	ldr	r3, [pc, #20]	; (8002180 <FOC_Interrupt+0x618>)
 800216c:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 8002170:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002174:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002178:	4b01      	ldr	r3, [pc, #4]	; (8002180 <FOC_Interrupt+0x618>)
 800217a:	edc3 7a15 	vstr	s15, [r3, #84]	; 0x54
			break;
 800217e:	e061      	b.n	8002244 <FOC_Interrupt+0x6dc>
 8002180:	200002b8 	.word	0x200002b8
 8002184:	3fe00000 	.word	0x3fe00000
		case 5:
			foc.PWM_A = 0.5*foc.DC_0;
 8002188:	4b38      	ldr	r3, [pc, #224]	; (800226c <FOC_Interrupt+0x704>)
 800218a:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 800218e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8002192:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002196:	4b35      	ldr	r3, [pc, #212]	; (800226c <FOC_Interrupt+0x704>)
 8002198:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50
			foc.PWM_B = 0.5*foc.DC_0 + foc.DC_1 + foc.DC_2;
 800219c:	4b33      	ldr	r3, [pc, #204]	; (800226c <FOC_Interrupt+0x704>)
 800219e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021a0:	4618      	mov	r0, r3
 80021a2:	f7fe fb1b 	bl	80007dc <__aeabi_f2d>
 80021a6:	f04f 0200 	mov.w	r2, #0
 80021aa:	4b31      	ldr	r3, [pc, #196]	; (8002270 <FOC_Interrupt+0x708>)
 80021ac:	f7fe f888 	bl	80002c0 <__aeabi_dmul>
 80021b0:	4602      	mov	r2, r0
 80021b2:	460b      	mov	r3, r1
 80021b4:	4614      	mov	r4, r2
 80021b6:	461d      	mov	r5, r3
 80021b8:	4b2c      	ldr	r3, [pc, #176]	; (800226c <FOC_Interrupt+0x704>)
 80021ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021bc:	4618      	mov	r0, r3
 80021be:	f7fe fb0d 	bl	80007dc <__aeabi_f2d>
 80021c2:	4602      	mov	r2, r0
 80021c4:	460b      	mov	r3, r1
 80021c6:	4620      	mov	r0, r4
 80021c8:	4629      	mov	r1, r5
 80021ca:	f7fe f9a9 	bl	8000520 <__adddf3>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4614      	mov	r4, r2
 80021d4:	461d      	mov	r5, r3
 80021d6:	4b25      	ldr	r3, [pc, #148]	; (800226c <FOC_Interrupt+0x704>)
 80021d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe fafe 	bl	80007dc <__aeabi_f2d>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4620      	mov	r0, r4
 80021e6:	4629      	mov	r1, r5
 80021e8:	f7fe f99a 	bl	8000520 <__adddf3>
 80021ec:	4602      	mov	r2, r0
 80021ee:	460b      	mov	r3, r1
 80021f0:	4610      	mov	r0, r2
 80021f2:	4619      	mov	r1, r3
 80021f4:	f7fe fbfa 	bl	80009ec <__aeabi_d2f>
 80021f8:	4603      	mov	r3, r0
 80021fa:	4a1c      	ldr	r2, [pc, #112]	; (800226c <FOC_Interrupt+0x704>)
 80021fc:	6593      	str	r3, [r2, #88]	; 0x58
			foc.PWM_C = 0.5*foc.DC_0 + foc.DC_2;
 80021fe:	4b1b      	ldr	r3, [pc, #108]	; (800226c <FOC_Interrupt+0x704>)
 8002200:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe faea 	bl	80007dc <__aeabi_f2d>
 8002208:	f04f 0200 	mov.w	r2, #0
 800220c:	4b18      	ldr	r3, [pc, #96]	; (8002270 <FOC_Interrupt+0x708>)
 800220e:	f7fe f857 	bl	80002c0 <__aeabi_dmul>
 8002212:	4602      	mov	r2, r0
 8002214:	460b      	mov	r3, r1
 8002216:	4614      	mov	r4, r2
 8002218:	461d      	mov	r5, r3
 800221a:	4b14      	ldr	r3, [pc, #80]	; (800226c <FOC_Interrupt+0x704>)
 800221c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800221e:	4618      	mov	r0, r3
 8002220:	f7fe fadc 	bl	80007dc <__aeabi_f2d>
 8002224:	4602      	mov	r2, r0
 8002226:	460b      	mov	r3, r1
 8002228:	4620      	mov	r0, r4
 800222a:	4629      	mov	r1, r5
 800222c:	f7fe f978 	bl	8000520 <__adddf3>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	4610      	mov	r0, r2
 8002236:	4619      	mov	r1, r3
 8002238:	f7fe fbd8 	bl	80009ec <__aeabi_d2f>
 800223c:	4603      	mov	r3, r0
 800223e:	4a0b      	ldr	r2, [pc, #44]	; (800226c <FOC_Interrupt+0x704>)
 8002240:	6553      	str	r3, [r2, #84]	; 0x54
			break;
 8002242:	bf00      	nop
	}

	/* Set PWM */
//	Set_PWM3(1.0f-foc.PWM_A, 1.0f-foc.PWM_B, 1.0f-foc.PWM_C);
	Set_PWM3(1.0f-0.066f, 1.0f-0.500f, 1.0f-0.933f);
 8002244:	ed9f 1a0b 	vldr	s2, [pc, #44]	; 8002274 <FOC_Interrupt+0x70c>
 8002248:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 800224c:	ed9f 0a0a 	vldr	s0, [pc, #40]	; 8002278 <FOC_Interrupt+0x710>
 8002250:	f7ff fbea 	bl	8001a28 <Set_PWM3>

	/* LED off */
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 8002254:	2200      	movs	r2, #0
 8002256:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800225a:	4808      	ldr	r0, [pc, #32]	; (800227c <FOC_Interrupt+0x714>)
 800225c:	f003 f852 	bl	8005304 <HAL_GPIO_WritePin>
}
 8002260:	bf00      	nop
 8002262:	3708      	adds	r7, #8
 8002264:	46bd      	mov	sp, r7
 8002266:	ecbd 8b02 	vpop	{d8}
 800226a:	bdb0      	pop	{r4, r5, r7, pc}
 800226c:	200002b8 	.word	0x200002b8
 8002270:	3fe00000 	.word	0x3fe00000
 8002274:	3d893748 	.word	0x3d893748
 8002278:	3f6f1aa0 	.word	0x3f6f1aa0
 800227c:	48000400 	.word	0x48000400

08002280 <CAN_Interrupt>:
void  CAN_Interrupt(void)
{
 8002280:	b480      	push	{r7}
 8002282:	af00      	add	r7, sp, #0
//	{
//		// unpack and update target values
//	}
//
//	can.timeout = 0;	// reset timeout timer
}
 8002284:	bf00      	nop
 8002286:	46bd      	mov	sp, r7
 8002288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800228c:	4770      	bx	lr
	...

08002290 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002294:	b672      	cpsid	i
}
 8002296:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Hardware Error\n");
 8002298:	480b      	ldr	r0, [pc, #44]	; (80022c8 <Error_Handler+0x38>)
 800229a:	f006 fb4b 	bl	8008934 <puts>
	  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 800229e:	2201      	movs	r2, #1
 80022a0:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022a4:	4809      	ldr	r0, [pc, #36]	; (80022cc <Error_Handler+0x3c>)
 80022a6:	f003 f82d 	bl	8005304 <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 80022aa:	20c8      	movs	r0, #200	; 0xc8
 80022ac:	f000 fbb0 	bl	8002a10 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 80022b0:	2200      	movs	r2, #0
 80022b2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80022b6:	4805      	ldr	r0, [pc, #20]	; (80022cc <Error_Handler+0x3c>)
 80022b8:	f003 f824 	bl	8005304 <HAL_GPIO_WritePin>
	  HAL_Delay(800);
 80022bc:	f44f 7048 	mov.w	r0, #800	; 0x320
 80022c0:	f000 fba6 	bl	8002a10 <HAL_Delay>
	  printf("Hardware Error\n");
 80022c4:	e7e8      	b.n	8002298 <Error_Handler+0x8>
 80022c6:	bf00      	nop
 80022c8:	08009b6c 	.word	0x08009b6c
 80022cc:	48000400 	.word	0x48000400

080022d0 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 80022d4:	4b1b      	ldr	r3, [pc, #108]	; (8002344 <MX_SPI3_Init+0x74>)
 80022d6:	4a1c      	ldr	r2, [pc, #112]	; (8002348 <MX_SPI3_Init+0x78>)
 80022d8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80022da:	4b1a      	ldr	r3, [pc, #104]	; (8002344 <MX_SPI3_Init+0x74>)
 80022dc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80022e0:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 80022e2:	4b18      	ldr	r3, [pc, #96]	; (8002344 <MX_SPI3_Init+0x74>)
 80022e4:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80022e8:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 80022ea:	4b16      	ldr	r3, [pc, #88]	; (8002344 <MX_SPI3_Init+0x74>)
 80022ec:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80022f0:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 80022f2:	4b14      	ldr	r3, [pc, #80]	; (8002344 <MX_SPI3_Init+0x74>)
 80022f4:	2200      	movs	r2, #0
 80022f6:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <MX_SPI3_Init+0x74>)
 80022fa:	2201      	movs	r2, #1
 80022fc:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80022fe:	4b11      	ldr	r3, [pc, #68]	; (8002344 <MX_SPI3_Init+0x74>)
 8002300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002304:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8002306:	4b0f      	ldr	r3, [pc, #60]	; (8002344 <MX_SPI3_Init+0x74>)
 8002308:	2220      	movs	r2, #32
 800230a:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800230c:	4b0d      	ldr	r3, [pc, #52]	; (8002344 <MX_SPI3_Init+0x74>)
 800230e:	2200      	movs	r2, #0
 8002310:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 8002312:	4b0c      	ldr	r3, [pc, #48]	; (8002344 <MX_SPI3_Init+0x74>)
 8002314:	2200      	movs	r2, #0
 8002316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002318:	4b0a      	ldr	r3, [pc, #40]	; (8002344 <MX_SPI3_Init+0x74>)
 800231a:	2200      	movs	r2, #0
 800231c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 800231e:	4b09      	ldr	r3, [pc, #36]	; (8002344 <MX_SPI3_Init+0x74>)
 8002320:	2207      	movs	r2, #7
 8002322:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8002324:	4b07      	ldr	r3, [pc, #28]	; (8002344 <MX_SPI3_Init+0x74>)
 8002326:	2200      	movs	r2, #0
 8002328:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800232a:	4b06      	ldr	r3, [pc, #24]	; (8002344 <MX_SPI3_Init+0x74>)
 800232c:	2200      	movs	r2, #0
 800232e:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8002330:	4804      	ldr	r0, [pc, #16]	; (8002344 <MX_SPI3_Init+0x74>)
 8002332:	f003 ffc3 	bl	80062bc <HAL_SPI_Init>
 8002336:	4603      	mov	r3, r0
 8002338:	2b00      	cmp	r3, #0
 800233a:	d001      	beq.n	8002340 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 800233c:	f7ff ffa8 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8002340:	bf00      	nop
 8002342:	bd80      	pop	{r7, pc}
 8002344:	200003fc 	.word	0x200003fc
 8002348:	40003c00 	.word	0x40003c00

0800234c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b08a      	sub	sp, #40	; 0x28
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002354:	f107 0314 	add.w	r3, r7, #20
 8002358:	2200      	movs	r2, #0
 800235a:	601a      	str	r2, [r3, #0]
 800235c:	605a      	str	r2, [r3, #4]
 800235e:	609a      	str	r2, [r3, #8]
 8002360:	60da      	str	r2, [r3, #12]
 8002362:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4a25      	ldr	r2, [pc, #148]	; (8002400 <HAL_SPI_MspInit+0xb4>)
 800236a:	4293      	cmp	r3, r2
 800236c:	d144      	bne.n	80023f8 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 800236e:	4b25      	ldr	r3, [pc, #148]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 8002370:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002372:	4a24      	ldr	r2, [pc, #144]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 8002374:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002378:	6593      	str	r3, [r2, #88]	; 0x58
 800237a:	4b22      	ldr	r3, [pc, #136]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 800237c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800237e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002382:	613b      	str	r3, [r7, #16]
 8002384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002386:	4b1f      	ldr	r3, [pc, #124]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 8002388:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800238a:	4a1e      	ldr	r2, [pc, #120]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 800238c:	f043 0304 	orr.w	r3, r3, #4
 8002390:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002392:	4b1c      	ldr	r3, [pc, #112]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 8002394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002396:	f003 0304 	and.w	r3, r3, #4
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800239e:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 80023a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023a2:	4a18      	ldr	r2, [pc, #96]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 80023a4:	f043 0302 	orr.w	r3, r3, #2
 80023a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80023aa:	4b16      	ldr	r3, [pc, #88]	; (8002404 <HAL_SPI_MspInit+0xb8>)
 80023ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023ae:	f003 0302 	and.w	r3, r3, #2
 80023b2:	60bb      	str	r3, [r7, #8]
 80023b4:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 80023b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80023ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023bc:	2302      	movs	r3, #2
 80023be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023c0:	2300      	movs	r3, #0
 80023c2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023c4:	2300      	movs	r3, #0
 80023c6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023c8:	2306      	movs	r3, #6
 80023ca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 80023cc:	f107 0314 	add.w	r3, r7, #20
 80023d0:	4619      	mov	r1, r3
 80023d2:	480d      	ldr	r0, [pc, #52]	; (8002408 <HAL_SPI_MspInit+0xbc>)
 80023d4:	f002 fdfc 	bl	8004fd0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 80023d8:	2320      	movs	r3, #32
 80023da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023dc:	2302      	movs	r3, #2
 80023de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e0:	2300      	movs	r3, #0
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e4:	2300      	movs	r3, #0
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80023e8:	2306      	movs	r3, #6
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 80023ec:	f107 0314 	add.w	r3, r7, #20
 80023f0:	4619      	mov	r1, r3
 80023f2:	4806      	ldr	r0, [pc, #24]	; (800240c <HAL_SPI_MspInit+0xc0>)
 80023f4:	f002 fdec 	bl	8004fd0 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80023f8:	bf00      	nop
 80023fa:	3728      	adds	r7, #40	; 0x28
 80023fc:	46bd      	mov	sp, r7
 80023fe:	bd80      	pop	{r7, pc}
 8002400:	40003c00 	.word	0x40003c00
 8002404:	40021000 	.word	0x40021000
 8002408:	48000800 	.word	0x48000800
 800240c:	48000400 	.word	0x48000400

08002410 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002410:	b580      	push	{r7, lr}
 8002412:	b082      	sub	sp, #8
 8002414:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002416:	4b0f      	ldr	r3, [pc, #60]	; (8002454 <HAL_MspInit+0x44>)
 8002418:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800241a:	4a0e      	ldr	r2, [pc, #56]	; (8002454 <HAL_MspInit+0x44>)
 800241c:	f043 0301 	orr.w	r3, r3, #1
 8002420:	6613      	str	r3, [r2, #96]	; 0x60
 8002422:	4b0c      	ldr	r3, [pc, #48]	; (8002454 <HAL_MspInit+0x44>)
 8002424:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002426:	f003 0301 	and.w	r3, r3, #1
 800242a:	607b      	str	r3, [r7, #4]
 800242c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800242e:	4b09      	ldr	r3, [pc, #36]	; (8002454 <HAL_MspInit+0x44>)
 8002430:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002432:	4a08      	ldr	r2, [pc, #32]	; (8002454 <HAL_MspInit+0x44>)
 8002434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002438:	6593      	str	r3, [r2, #88]	; 0x58
 800243a:	4b06      	ldr	r3, [pc, #24]	; (8002454 <HAL_MspInit+0x44>)
 800243c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800243e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002442:	603b      	str	r3, [r7, #0]
 8002444:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8002446:	f003 f83d 	bl	80054c4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800244a:	bf00      	nop
 800244c:	3708      	adds	r7, #8
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}
 8002452:	bf00      	nop
 8002454:	40021000 	.word	0x40021000

08002458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002458:	b480      	push	{r7}
 800245a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800245c:	e7fe      	b.n	800245c <NMI_Handler+0x4>

0800245e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800245e:	b480      	push	{r7}
 8002460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002462:	e7fe      	b.n	8002462 <HardFault_Handler+0x4>

08002464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002464:	b480      	push	{r7}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002468:	e7fe      	b.n	8002468 <MemManage_Handler+0x4>

0800246a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800246a:	b480      	push	{r7}
 800246c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800246e:	e7fe      	b.n	800246e <BusFault_Handler+0x4>

08002470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002470:	b480      	push	{r7}
 8002472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002474:	e7fe      	b.n	8002474 <UsageFault_Handler+0x4>

08002476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002476:	b480      	push	{r7}
 8002478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800247a:	bf00      	nop
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002488:	bf00      	nop
 800248a:	46bd      	mov	sp, r7
 800248c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002490:	4770      	bx	lr

08002492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002496:	bf00      	nop
 8002498:	46bd      	mov	sp, r7
 800249a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800249e:	4770      	bx	lr

080024a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024a0:	b580      	push	{r7, lr}
 80024a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024a4:	f000 fa96 	bl	80029d4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024a8:	bf00      	nop
 80024aa:	bd80      	pop	{r7, pc}

080024ac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80024ac:	b580      	push	{r7, lr}
 80024ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80024b0:	4802      	ldr	r0, [pc, #8]	; (80024bc <DMA1_Channel1_IRQHandler+0x10>)
 80024b2:	f002 f8e0 	bl	8004676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	2000017c 	.word	0x2000017c

080024c0 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 80024c0:	b580      	push	{r7, lr}
 80024c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 80024c4:	4803      	ldr	r0, [pc, #12]	; (80024d4 <FDCAN1_IT0_IRQHandler+0x14>)
 80024c6:	f002 fb7f 	bl	8004bc8 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_Interrupt();
 80024ca:	f7ff fed9 	bl	8002280 <CAN_Interrupt>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 80024ce:	bf00      	nop
 80024d0:	bd80      	pop	{r7, pc}
 80024d2:	bf00      	nop
 80024d4:	2000023c 	.word	0x2000023c

080024d8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IF_A_Pin);
 80024dc:	2020      	movs	r0, #32
 80024de:	f002 ff29 	bl	8005334 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ENC_Interrupt(IF_B_GPIO_Port, IF_B_Pin);
 80024e2:	2140      	movs	r1, #64	; 0x40
 80024e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80024e8:	f7ff fa64 	bl	80019b4 <ENC_Interrupt>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80024ec:	bf00      	nop
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80024f4:	4803      	ldr	r0, [pc, #12]	; (8002504 <TIM3_IRQHandler+0x14>)
 80024f6:	f005 f87f 	bl	80075f8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  FOC_Interrupt();
 80024fa:	f7ff fb35 	bl	8001b68 <FOC_Interrupt>
  /* USER CODE END TIM3_IRQn 1 */
}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	20000460 	.word	0x20000460

08002508 <DMA2_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA2 channel1 global interrupt.
  */
void DMA2_Channel1_IRQHandler(void)
{
 8002508:	b580      	push	{r7, lr}
 800250a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Channel1_IRQn 0 */

  /* USER CODE END DMA2_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 800250c:	4802      	ldr	r0, [pc, #8]	; (8002518 <DMA2_Channel1_IRQHandler+0x10>)
 800250e:	f002 f8b2 	bl	8004676 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Channel1_IRQn 1 */

  /* USER CODE END DMA2_Channel1_IRQn 1 */
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	200001dc 	.word	0x200001dc

0800251c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b086      	sub	sp, #24
 8002520:	af00      	add	r7, sp, #0
 8002522:	60f8      	str	r0, [r7, #12]
 8002524:	60b9      	str	r1, [r7, #8]
 8002526:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002528:	2300      	movs	r3, #0
 800252a:	617b      	str	r3, [r7, #20]
 800252c:	e00a      	b.n	8002544 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800252e:	f3af 8000 	nop.w
 8002532:	4601      	mov	r1, r0
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	1c5a      	adds	r2, r3, #1
 8002538:	60ba      	str	r2, [r7, #8]
 800253a:	b2ca      	uxtb	r2, r1
 800253c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800253e:	697b      	ldr	r3, [r7, #20]
 8002540:	3301      	adds	r3, #1
 8002542:	617b      	str	r3, [r7, #20]
 8002544:	697a      	ldr	r2, [r7, #20]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	429a      	cmp	r2, r3
 800254a:	dbf0      	blt.n	800252e <_read+0x12>
	}

return len;
 800254c:	687b      	ldr	r3, [r7, #4]
}
 800254e:	4618      	mov	r0, r3
 8002550:	3718      	adds	r7, #24
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}

08002556 <_close>:
	}
	return len;
}

int _close(int file)
{
 8002556:	b480      	push	{r7}
 8002558:	b083      	sub	sp, #12
 800255a:	af00      	add	r7, sp, #0
 800255c:	6078      	str	r0, [r7, #4]
	return -1;
 800255e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002562:	4618      	mov	r0, r3
 8002564:	370c      	adds	r7, #12
 8002566:	46bd      	mov	sp, r7
 8002568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256c:	4770      	bx	lr

0800256e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800256e:	b480      	push	{r7}
 8002570:	b083      	sub	sp, #12
 8002572:	af00      	add	r7, sp, #0
 8002574:	6078      	str	r0, [r7, #4]
 8002576:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002578:	683b      	ldr	r3, [r7, #0]
 800257a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800257e:	605a      	str	r2, [r3, #4]
	return 0;
 8002580:	2300      	movs	r3, #0
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <_isatty>:

int _isatty(int file)
{
 800258e:	b480      	push	{r7}
 8002590:	b083      	sub	sp, #12
 8002592:	af00      	add	r7, sp, #0
 8002594:	6078      	str	r0, [r7, #4]
	return 1;
 8002596:	2301      	movs	r3, #1
}
 8002598:	4618      	mov	r0, r3
 800259a:	370c      	adds	r7, #12
 800259c:	46bd      	mov	sp, r7
 800259e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a2:	4770      	bx	lr

080025a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80025a4:	b480      	push	{r7}
 80025a6:	b085      	sub	sp, #20
 80025a8:	af00      	add	r7, sp, #0
 80025aa:	60f8      	str	r0, [r7, #12]
 80025ac:	60b9      	str	r1, [r7, #8]
 80025ae:	607a      	str	r2, [r7, #4]
	return 0;
 80025b0:	2300      	movs	r3, #0
}
 80025b2:	4618      	mov	r0, r3
 80025b4:	3714      	adds	r7, #20
 80025b6:	46bd      	mov	sp, r7
 80025b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025bc:	4770      	bx	lr
	...

080025c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80025c8:	4a14      	ldr	r2, [pc, #80]	; (800261c <_sbrk+0x5c>)
 80025ca:	4b15      	ldr	r3, [pc, #84]	; (8002620 <_sbrk+0x60>)
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80025d0:	697b      	ldr	r3, [r7, #20]
 80025d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80025d4:	4b13      	ldr	r3, [pc, #76]	; (8002624 <_sbrk+0x64>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d102      	bne.n	80025e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80025dc:	4b11      	ldr	r3, [pc, #68]	; (8002624 <_sbrk+0x64>)
 80025de:	4a12      	ldr	r2, [pc, #72]	; (8002628 <_sbrk+0x68>)
 80025e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80025e2:	4b10      	ldr	r3, [pc, #64]	; (8002624 <_sbrk+0x64>)
 80025e4:	681a      	ldr	r2, [r3, #0]
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4413      	add	r3, r2
 80025ea:	693a      	ldr	r2, [r7, #16]
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d207      	bcs.n	8002600 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80025f0:	f006 f8d2 	bl	8008798 <__errno>
 80025f4:	4603      	mov	r3, r0
 80025f6:	220c      	movs	r2, #12
 80025f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	e009      	b.n	8002614 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002600:	4b08      	ldr	r3, [pc, #32]	; (8002624 <_sbrk+0x64>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <_sbrk+0x64>)
 8002608:	681a      	ldr	r2, [r3, #0]
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	4413      	add	r3, r2
 800260e:	4a05      	ldr	r2, [pc, #20]	; (8002624 <_sbrk+0x64>)
 8002610:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002612:	68fb      	ldr	r3, [r7, #12]
}
 8002614:	4618      	mov	r0, r3
 8002616:	3718      	adds	r7, #24
 8002618:	46bd      	mov	sp, r7
 800261a:	bd80      	pop	{r7, pc}
 800261c:	20008000 	.word	0x20008000
 8002620:	00000400 	.word	0x00000400
 8002624:	20000098 	.word	0x20000098
 8002628:	20000510 	.word	0x20000510

0800262c <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 800262c:	b480      	push	{r7}
 800262e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002630:	4b06      	ldr	r3, [pc, #24]	; (800264c <SystemInit+0x20>)
 8002632:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002636:	4a05      	ldr	r2, [pc, #20]	; (800264c <SystemInit+0x20>)
 8002638:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800263c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002640:	bf00      	nop
 8002642:	46bd      	mov	sp, r7
 8002644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002648:	4770      	bx	lr
 800264a:	bf00      	nop
 800264c:	e000ed00 	.word	0xe000ed00

08002650 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08e      	sub	sp, #56	; 0x38
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002656:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800265a:	2200      	movs	r2, #0
 800265c:	601a      	str	r2, [r3, #0]
 800265e:	605a      	str	r2, [r3, #4]
 8002660:	609a      	str	r2, [r3, #8]
 8002662:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002664:	f107 031c 	add.w	r3, r7, #28
 8002668:	2200      	movs	r2, #0
 800266a:	601a      	str	r2, [r3, #0]
 800266c:	605a      	str	r2, [r3, #4]
 800266e:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002670:	463b      	mov	r3, r7
 8002672:	2200      	movs	r2, #0
 8002674:	601a      	str	r2, [r3, #0]
 8002676:	605a      	str	r2, [r3, #4]
 8002678:	609a      	str	r2, [r3, #8]
 800267a:	60da      	str	r2, [r3, #12]
 800267c:	611a      	str	r2, [r3, #16]
 800267e:	615a      	str	r2, [r3, #20]
 8002680:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002682:	4b38      	ldr	r3, [pc, #224]	; (8002764 <MX_TIM2_Init+0x114>)
 8002684:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002688:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800268a:	4b36      	ldr	r3, [pc, #216]	; (8002764 <MX_TIM2_Init+0x114>)
 800268c:	2200      	movs	r2, #0
 800268e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8002690:	4b34      	ldr	r3, [pc, #208]	; (8002764 <MX_TIM2_Init+0x114>)
 8002692:	2220      	movs	r2, #32
 8002694:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2124;
 8002696:	4b33      	ldr	r3, [pc, #204]	; (8002764 <MX_TIM2_Init+0x114>)
 8002698:	f640 024c 	movw	r2, #2124	; 0x84c
 800269c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800269e:	4b31      	ldr	r3, [pc, #196]	; (8002764 <MX_TIM2_Init+0x114>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80026a4:	4b2f      	ldr	r3, [pc, #188]	; (8002764 <MX_TIM2_Init+0x114>)
 80026a6:	2280      	movs	r2, #128	; 0x80
 80026a8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80026aa:	482e      	ldr	r0, [pc, #184]	; (8002764 <MX_TIM2_Init+0x114>)
 80026ac:	f004 fd1e 	bl	80070ec <HAL_TIM_Base_Init>
 80026b0:	4603      	mov	r3, r0
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d001      	beq.n	80026ba <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 80026b6:	f7ff fdeb 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026ba:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026be:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026c4:	4619      	mov	r1, r3
 80026c6:	4827      	ldr	r0, [pc, #156]	; (8002764 <MX_TIM2_Init+0x114>)
 80026c8:	f005 fa2a 	bl	8007b20 <HAL_TIM_ConfigClockSource>
 80026cc:	4603      	mov	r3, r0
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80026d2:	f7ff fddd 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026d6:	4823      	ldr	r0, [pc, #140]	; (8002764 <MX_TIM2_Init+0x114>)
 80026d8:	f004 fe2c 	bl	8007334 <HAL_TIM_PWM_Init>
 80026dc:	4603      	mov	r3, r0
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d001      	beq.n	80026e6 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80026e2:	f7ff fdd5 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 80026e6:	2310      	movs	r3, #16
 80026e8:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80026ea:	2380      	movs	r3, #128	; 0x80
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026ee:	f107 031c 	add.w	r3, r7, #28
 80026f2:	4619      	mov	r1, r3
 80026f4:	481b      	ldr	r0, [pc, #108]	; (8002764 <MX_TIM2_Init+0x114>)
 80026f6:	f005 ff87 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 80026fa:	4603      	mov	r3, r0
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d001      	beq.n	8002704 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8002700:	f7ff fdc6 	bl	8002290 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8002704:	2370      	movs	r3, #112	; 0x70
 8002706:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8002708:	2300      	movs	r3, #0
 800270a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800270c:	2300      	movs	r3, #0
 800270e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002710:	2300      	movs	r3, #0
 8002712:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002714:	463b      	mov	r3, r7
 8002716:	2200      	movs	r2, #0
 8002718:	4619      	mov	r1, r3
 800271a:	4812      	ldr	r0, [pc, #72]	; (8002764 <MX_TIM2_Init+0x114>)
 800271c:	f005 f8ec 	bl	80078f8 <HAL_TIM_PWM_ConfigChannel>
 8002720:	4603      	mov	r3, r0
 8002722:	2b00      	cmp	r3, #0
 8002724:	d001      	beq.n	800272a <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8002726:	f7ff fdb3 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800272a:	463b      	mov	r3, r7
 800272c:	2208      	movs	r2, #8
 800272e:	4619      	mov	r1, r3
 8002730:	480c      	ldr	r0, [pc, #48]	; (8002764 <MX_TIM2_Init+0x114>)
 8002732:	f005 f8e1 	bl	80078f8 <HAL_TIM_PWM_ConfigChannel>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 800273c:	f7ff fda8 	bl	8002290 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8002740:	463b      	mov	r3, r7
 8002742:	220c      	movs	r2, #12
 8002744:	4619      	mov	r1, r3
 8002746:	4807      	ldr	r0, [pc, #28]	; (8002764 <MX_TIM2_Init+0x114>)
 8002748:	f005 f8d6 	bl	80078f8 <HAL_TIM_PWM_ConfigChannel>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 8002752:	f7ff fd9d 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002756:	4803      	ldr	r0, [pc, #12]	; (8002764 <MX_TIM2_Init+0x114>)
 8002758:	f000 f88c 	bl	8002874 <HAL_TIM_MspPostInit>

}
 800275c:	bf00      	nop
 800275e:	3738      	adds	r7, #56	; 0x38
 8002760:	46bd      	mov	sp, r7
 8002762:	bd80      	pop	{r7, pc}
 8002764:	200004ac 	.word	0x200004ac

08002768 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b088      	sub	sp, #32
 800276c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800276e:	f107 0310 	add.w	r3, r7, #16
 8002772:	2200      	movs	r2, #0
 8002774:	601a      	str	r2, [r3, #0]
 8002776:	605a      	str	r2, [r3, #4]
 8002778:	609a      	str	r2, [r3, #8]
 800277a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800277c:	1d3b      	adds	r3, r7, #4
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]
 8002782:	605a      	str	r2, [r3, #4]
 8002784:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8002786:	4b1d      	ldr	r3, [pc, #116]	; (80027fc <MX_TIM3_Init+0x94>)
 8002788:	4a1d      	ldr	r2, [pc, #116]	; (8002800 <MX_TIM3_Init+0x98>)
 800278a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800278c:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <MX_TIM3_Init+0x94>)
 800278e:	2200      	movs	r2, #0
 8002790:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <MX_TIM3_Init+0x94>)
 8002794:	2200      	movs	r2, #0
 8002796:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16991;
 8002798:	4b18      	ldr	r3, [pc, #96]	; (80027fc <MX_TIM3_Init+0x94>)
 800279a:	f244 225f 	movw	r2, #16991	; 0x425f
 800279e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80027a0:	4b16      	ldr	r3, [pc, #88]	; (80027fc <MX_TIM3_Init+0x94>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80027a6:	4b15      	ldr	r3, [pc, #84]	; (80027fc <MX_TIM3_Init+0x94>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80027ac:	4813      	ldr	r0, [pc, #76]	; (80027fc <MX_TIM3_Init+0x94>)
 80027ae:	f004 fc9d 	bl	80070ec <HAL_TIM_Base_Init>
 80027b2:	4603      	mov	r3, r0
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d001      	beq.n	80027bc <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 80027b8:	f7ff fd6a 	bl	8002290 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80027bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80027c0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80027c2:	f107 0310 	add.w	r3, r7, #16
 80027c6:	4619      	mov	r1, r3
 80027c8:	480c      	ldr	r0, [pc, #48]	; (80027fc <MX_TIM3_Init+0x94>)
 80027ca:	f005 f9a9 	bl	8007b20 <HAL_TIM_ConfigClockSource>
 80027ce:	4603      	mov	r3, r0
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d001      	beq.n	80027d8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80027d4:	f7ff fd5c 	bl	8002290 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027d8:	2300      	movs	r3, #0
 80027da:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027dc:	2300      	movs	r3, #0
 80027de:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027e0:	1d3b      	adds	r3, r7, #4
 80027e2:	4619      	mov	r1, r3
 80027e4:	4805      	ldr	r0, [pc, #20]	; (80027fc <MX_TIM3_Init+0x94>)
 80027e6:	f005 ff0f 	bl	8008608 <HAL_TIMEx_MasterConfigSynchronization>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d001      	beq.n	80027f4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80027f0:	f7ff fd4e 	bl	8002290 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80027f4:	bf00      	nop
 80027f6:	3720      	adds	r7, #32
 80027f8:	46bd      	mov	sp, r7
 80027fa:	bd80      	pop	{r7, pc}
 80027fc:	20000460 	.word	0x20000460
 8002800:	40000400 	.word	0x40000400

08002804 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b084      	sub	sp, #16
 8002808:	af00      	add	r7, sp, #0
 800280a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002814:	d10c      	bne.n	8002830 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 8002818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800281a:	4a14      	ldr	r2, [pc, #80]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 800281c:	f043 0301 	orr.w	r3, r3, #1
 8002820:	6593      	str	r3, [r2, #88]	; 0x58
 8002822:	4b12      	ldr	r3, [pc, #72]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 0301 	and.w	r3, r3, #1
 800282a:	60fb      	str	r3, [r7, #12]
 800282c:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800282e:	e018      	b.n	8002862 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	4a0e      	ldr	r2, [pc, #56]	; (8002870 <HAL_TIM_Base_MspInit+0x6c>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d113      	bne.n	8002862 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800283a:	4b0c      	ldr	r3, [pc, #48]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 800283c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283e:	4a0b      	ldr	r2, [pc, #44]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 8002840:	f043 0302 	orr.w	r3, r3, #2
 8002844:	6593      	str	r3, [r2, #88]	; 0x58
 8002846:	4b09      	ldr	r3, [pc, #36]	; (800286c <HAL_TIM_Base_MspInit+0x68>)
 8002848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800284a:	f003 0302 	and.w	r3, r3, #2
 800284e:	60bb      	str	r3, [r7, #8]
 8002850:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002852:	2200      	movs	r2, #0
 8002854:	2100      	movs	r1, #0
 8002856:	201d      	movs	r0, #29
 8002858:	f001 fdb5 	bl	80043c6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800285c:	201d      	movs	r0, #29
 800285e:	f001 fdcc 	bl	80043fa <HAL_NVIC_EnableIRQ>
}
 8002862:	bf00      	nop
 8002864:	3710      	adds	r7, #16
 8002866:	46bd      	mov	sp, r7
 8002868:	bd80      	pop	{r7, pc}
 800286a:	bf00      	nop
 800286c:	40021000 	.word	0x40021000
 8002870:	40000400 	.word	0x40000400

08002874 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800287c:	f107 030c 	add.w	r3, r7, #12
 8002880:	2200      	movs	r2, #0
 8002882:	601a      	str	r2, [r3, #0]
 8002884:	605a      	str	r2, [r3, #4]
 8002886:	609a      	str	r2, [r3, #8]
 8002888:	60da      	str	r2, [r3, #12]
 800288a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002894:	d11c      	bne.n	80028d0 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002896:	4b10      	ldr	r3, [pc, #64]	; (80028d8 <HAL_TIM_MspPostInit+0x64>)
 8002898:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800289a:	4a0f      	ldr	r2, [pc, #60]	; (80028d8 <HAL_TIM_MspPostInit+0x64>)
 800289c:	f043 0301 	orr.w	r3, r3, #1
 80028a0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80028a2:	4b0d      	ldr	r3, [pc, #52]	; (80028d8 <HAL_TIM_MspPostInit+0x64>)
 80028a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028a6:	f003 0301 	and.w	r3, r3, #1
 80028aa:	60bb      	str	r3, [r7, #8]
 80028ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_C_Pin|PWM_B_Pin|PWM_A_Pin;
 80028ae:	230d      	movs	r3, #13
 80028b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028b2:	2302      	movs	r3, #2
 80028b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028b6:	2300      	movs	r3, #0
 80028b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ba:	2300      	movs	r3, #0
 80028bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80028be:	2301      	movs	r3, #1
 80028c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028c2:	f107 030c 	add.w	r3, r7, #12
 80028c6:	4619      	mov	r1, r3
 80028c8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80028cc:	f002 fb80 	bl	8004fd0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80028d0:	bf00      	nop
 80028d2:	3720      	adds	r7, #32
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	40021000 	.word	0x40021000

080028dc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80028dc:	480d      	ldr	r0, [pc, #52]	; (8002914 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80028de:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80028e0:	480d      	ldr	r0, [pc, #52]	; (8002918 <LoopForever+0x6>)
  ldr r1, =_edata
 80028e2:	490e      	ldr	r1, [pc, #56]	; (800291c <LoopForever+0xa>)
  ldr r2, =_sidata
 80028e4:	4a0e      	ldr	r2, [pc, #56]	; (8002920 <LoopForever+0xe>)
  movs r3, #0
 80028e6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80028e8:	e002      	b.n	80028f0 <LoopCopyDataInit>

080028ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028ee:	3304      	adds	r3, #4

080028f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028f4:	d3f9      	bcc.n	80028ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028f6:	4a0b      	ldr	r2, [pc, #44]	; (8002924 <LoopForever+0x12>)
  ldr r4, =_ebss
 80028f8:	4c0b      	ldr	r4, [pc, #44]	; (8002928 <LoopForever+0x16>)
  movs r3, #0
 80028fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028fc:	e001      	b.n	8002902 <LoopFillZerobss>

080028fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002900:	3204      	adds	r2, #4

08002902 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002902:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002904:	d3fb      	bcc.n	80028fe <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002906:	f7ff fe91 	bl	800262c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800290a:	f005 ff4b 	bl	80087a4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800290e:	f7fe fc97 	bl	8001240 <main>

08002912 <LoopForever>:

LoopForever:
    b LoopForever
 8002912:	e7fe      	b.n	8002912 <LoopForever>
  ldr   r0, =_estack
 8002914:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8002918:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800291c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8002920:	0800a1d4 	.word	0x0800a1d4
  ldr r2, =_sbss
 8002924:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8002928:	2000050c 	.word	0x2000050c

0800292c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800292c:	e7fe      	b.n	800292c <ADC1_2_IRQHandler>

0800292e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800292e:	b580      	push	{r7, lr}
 8002930:	b082      	sub	sp, #8
 8002932:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002934:	2300      	movs	r3, #0
 8002936:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002938:	2003      	movs	r0, #3
 800293a:	f001 fd39 	bl	80043b0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800293e:	2000      	movs	r0, #0
 8002940:	f000 f80e 	bl	8002960 <HAL_InitTick>
 8002944:	4603      	mov	r3, r0
 8002946:	2b00      	cmp	r3, #0
 8002948:	d002      	beq.n	8002950 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800294a:	2301      	movs	r3, #1
 800294c:	71fb      	strb	r3, [r7, #7]
 800294e:	e001      	b.n	8002954 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002950:	f7ff fd5e 	bl	8002410 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002954:	79fb      	ldrb	r3, [r7, #7]

}
 8002956:	4618      	mov	r0, r3
 8002958:	3708      	adds	r7, #8
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002968:	2300      	movs	r3, #0
 800296a:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 800296c:	4b16      	ldr	r3, [pc, #88]	; (80029c8 <HAL_InitTick+0x68>)
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d022      	beq.n	80029ba <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002974:	4b15      	ldr	r3, [pc, #84]	; (80029cc <HAL_InitTick+0x6c>)
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	4b13      	ldr	r3, [pc, #76]	; (80029c8 <HAL_InitTick+0x68>)
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8002980:	fbb1 f3f3 	udiv	r3, r1, r3
 8002984:	fbb2 f3f3 	udiv	r3, r2, r3
 8002988:	4618      	mov	r0, r3
 800298a:	f001 fd44 	bl	8004416 <HAL_SYSTICK_Config>
 800298e:	4603      	mov	r3, r0
 8002990:	2b00      	cmp	r3, #0
 8002992:	d10f      	bne.n	80029b4 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2b0f      	cmp	r3, #15
 8002998:	d809      	bhi.n	80029ae <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800299a:	2200      	movs	r2, #0
 800299c:	6879      	ldr	r1, [r7, #4]
 800299e:	f04f 30ff 	mov.w	r0, #4294967295
 80029a2:	f001 fd10 	bl	80043c6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80029a6:	4a0a      	ldr	r2, [pc, #40]	; (80029d0 <HAL_InitTick+0x70>)
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	6013      	str	r3, [r2, #0]
 80029ac:	e007      	b.n	80029be <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80029ae:	2301      	movs	r3, #1
 80029b0:	73fb      	strb	r3, [r7, #15]
 80029b2:	e004      	b.n	80029be <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	73fb      	strb	r3, [r7, #15]
 80029b8:	e001      	b.n	80029be <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80029ba:	2301      	movs	r3, #1
 80029bc:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80029be:	7bfb      	ldrb	r3, [r7, #15]
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3710      	adds	r7, #16
 80029c4:	46bd      	mov	sp, r7
 80029c6:	bd80      	pop	{r7, pc}
 80029c8:	20000008 	.word	0x20000008
 80029cc:	20000000 	.word	0x20000000
 80029d0:	20000004 	.word	0x20000004

080029d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029d4:	b480      	push	{r7}
 80029d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <HAL_IncTick+0x1c>)
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	4b05      	ldr	r3, [pc, #20]	; (80029f4 <HAL_IncTick+0x20>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4413      	add	r3, r2
 80029e2:	4a03      	ldr	r2, [pc, #12]	; (80029f0 <HAL_IncTick+0x1c>)
 80029e4:	6013      	str	r3, [r2, #0]
}
 80029e6:	bf00      	nop
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr
 80029f0:	200004f8 	.word	0x200004f8
 80029f4:	20000008 	.word	0x20000008

080029f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029f8:	b480      	push	{r7}
 80029fa:	af00      	add	r7, sp, #0
  return uwTick;
 80029fc:	4b03      	ldr	r3, [pc, #12]	; (8002a0c <HAL_GetTick+0x14>)
 80029fe:	681b      	ldr	r3, [r3, #0]
}
 8002a00:	4618      	mov	r0, r3
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	200004f8 	.word	0x200004f8

08002a10 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b084      	sub	sp, #16
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a18:	f7ff ffee 	bl	80029f8 <HAL_GetTick>
 8002a1c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a28:	d004      	beq.n	8002a34 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a2a:	4b09      	ldr	r3, [pc, #36]	; (8002a50 <HAL_Delay+0x40>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	4413      	add	r3, r2
 8002a32:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002a34:	bf00      	nop
 8002a36:	f7ff ffdf 	bl	80029f8 <HAL_GetTick>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	68bb      	ldr	r3, [r7, #8]
 8002a3e:	1ad3      	subs	r3, r2, r3
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	429a      	cmp	r2, r3
 8002a44:	d8f7      	bhi.n	8002a36 <HAL_Delay+0x26>
  {
  }
}
 8002a46:	bf00      	nop
 8002a48:	bf00      	nop
 8002a4a:	3710      	adds	r7, #16
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}
 8002a50:	20000008 	.word	0x20000008

08002a54 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002a54:	b480      	push	{r7}
 8002a56:	b083      	sub	sp, #12
 8002a58:	af00      	add	r7, sp, #0
 8002a5a:	6078      	str	r0, [r7, #4]
 8002a5c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	431a      	orrs	r2, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	609a      	str	r2, [r3, #8]
}
 8002a6e:	bf00      	nop
 8002a70:	370c      	adds	r7, #12
 8002a72:	46bd      	mov	sp, r7
 8002a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a78:	4770      	bx	lr

08002a7a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8002a7a:	b480      	push	{r7}
 8002a7c:	b083      	sub	sp, #12
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	6078      	str	r0, [r7, #4]
 8002a82:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	431a      	orrs	r2, r3
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	609a      	str	r2, [r3, #8]
}
 8002a94:	bf00      	nop
 8002a96:	370c      	adds	r7, #12
 8002a98:	46bd      	mov	sp, r7
 8002a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9e:	4770      	bx	lr

08002aa0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	689b      	ldr	r3, [r3, #8]
 8002aac:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002ab0:	4618      	mov	r0, r3
 8002ab2:	370c      	adds	r7, #12
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr

08002abc <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b087      	sub	sp, #28
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	60f8      	str	r0, [r7, #12]
 8002ac4:	60b9      	str	r1, [r7, #8]
 8002ac6:	607a      	str	r2, [r7, #4]
 8002ac8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002aca:	68fb      	ldr	r3, [r7, #12]
 8002acc:	3360      	adds	r3, #96	; 0x60
 8002ace:	461a      	mov	r2, r3
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	009b      	lsls	r3, r3, #2
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002ad8:	697b      	ldr	r3, [r7, #20]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	4b08      	ldr	r3, [pc, #32]	; (8002b00 <LL_ADC_SetOffset+0x44>)
 8002ade:	4013      	ands	r3, r2
 8002ae0:	687a      	ldr	r2, [r7, #4]
 8002ae2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8002ae6:	683a      	ldr	r2, [r7, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	4313      	orrs	r3, r2
 8002aec:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002af0:	697b      	ldr	r3, [r7, #20]
 8002af2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8002af4:	bf00      	nop
 8002af6:	371c      	adds	r7, #28
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	03fff000 	.word	0x03fff000

08002b04 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
 8002b0c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	3360      	adds	r3, #96	; 0x60
 8002b12:	461a      	mov	r2, r3
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	009b      	lsls	r3, r3, #2
 8002b18:	4413      	add	r3, r2
 8002b1a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002b24:	4618      	mov	r0, r3
 8002b26:	3714      	adds	r7, #20
 8002b28:	46bd      	mov	sp, r7
 8002b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2e:	4770      	bx	lr

08002b30 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002b30:	b480      	push	{r7}
 8002b32:	b087      	sub	sp, #28
 8002b34:	af00      	add	r7, sp, #0
 8002b36:	60f8      	str	r0, [r7, #12]
 8002b38:	60b9      	str	r1, [r7, #8]
 8002b3a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	3360      	adds	r3, #96	; 0x60
 8002b40:	461a      	mov	r2, r3
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	4413      	add	r3, r2
 8002b48:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002b5a:	bf00      	nop
 8002b5c:	371c      	adds	r7, #28
 8002b5e:	46bd      	mov	sp, r7
 8002b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b64:	4770      	bx	lr

08002b66 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002b66:	b480      	push	{r7}
 8002b68:	b087      	sub	sp, #28
 8002b6a:	af00      	add	r7, sp, #0
 8002b6c:	60f8      	str	r0, [r7, #12]
 8002b6e:	60b9      	str	r1, [r7, #8]
 8002b70:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	3360      	adds	r3, #96	; 0x60
 8002b76:	461a      	mov	r2, r3
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	009b      	lsls	r3, r3, #2
 8002b7c:	4413      	add	r3, r2
 8002b7e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b80:	697b      	ldr	r3, [r7, #20]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	431a      	orrs	r2, r3
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002b90:	bf00      	nop
 8002b92:	371c      	adds	r7, #28
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b087      	sub	sp, #28
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	3360      	adds	r3, #96	; 0x60
 8002bac:	461a      	mov	r2, r3
 8002bae:	68bb      	ldr	r3, [r7, #8]
 8002bb0:	009b      	lsls	r3, r3, #2
 8002bb2:	4413      	add	r3, r2
 8002bb4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002bb6:	697b      	ldr	r3, [r7, #20]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	431a      	orrs	r2, r3
 8002bc2:	697b      	ldr	r3, [r7, #20]
 8002bc4:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002bc6:	bf00      	nop
 8002bc8:	371c      	adds	r7, #28
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr

08002bd2 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002bd2:	b480      	push	{r7}
 8002bd4:	b083      	sub	sp, #12
 8002bd6:	af00      	add	r7, sp, #0
 8002bd8:	6078      	str	r0, [r7, #4]
 8002bda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	615a      	str	r2, [r3, #20]
}
 8002bec:	bf00      	nop
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d101      	bne.n	8002c10 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e000      	b.n	8002c12 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002c10:	2300      	movs	r3, #0
}
 8002c12:	4618      	mov	r0, r3
 8002c14:	370c      	adds	r7, #12
 8002c16:	46bd      	mov	sp, r7
 8002c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1c:	4770      	bx	lr

08002c1e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002c1e:	b480      	push	{r7}
 8002c20:	b087      	sub	sp, #28
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	60f8      	str	r0, [r7, #12]
 8002c26:	60b9      	str	r1, [r7, #8]
 8002c28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	3330      	adds	r3, #48	; 0x30
 8002c2e:	461a      	mov	r2, r3
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	0a1b      	lsrs	r3, r3, #8
 8002c34:	009b      	lsls	r3, r3, #2
 8002c36:	f003 030c 	and.w	r3, r3, #12
 8002c3a:	4413      	add	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	681a      	ldr	r2, [r3, #0]
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	f003 031f 	and.w	r3, r3, #31
 8002c48:	211f      	movs	r1, #31
 8002c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4e:	43db      	mvns	r3, r3
 8002c50:	401a      	ands	r2, r3
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	0e9b      	lsrs	r3, r3, #26
 8002c56:	f003 011f 	and.w	r1, r3, #31
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	f003 031f 	and.w	r3, r3, #31
 8002c60:	fa01 f303 	lsl.w	r3, r1, r3
 8002c64:	431a      	orrs	r2, r3
 8002c66:	697b      	ldr	r3, [r7, #20]
 8002c68:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002c6a:	bf00      	nop
 8002c6c:	371c      	adds	r7, #28
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b087      	sub	sp, #28
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	60f8      	str	r0, [r7, #12]
 8002c7e:	60b9      	str	r1, [r7, #8]
 8002c80:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	3314      	adds	r3, #20
 8002c86:	461a      	mov	r2, r3
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	0e5b      	lsrs	r3, r3, #25
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	f003 0304 	and.w	r3, r3, #4
 8002c92:	4413      	add	r3, r2
 8002c94:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	681a      	ldr	r2, [r3, #0]
 8002c9a:	68bb      	ldr	r3, [r7, #8]
 8002c9c:	0d1b      	lsrs	r3, r3, #20
 8002c9e:	f003 031f 	and.w	r3, r3, #31
 8002ca2:	2107      	movs	r1, #7
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	43db      	mvns	r3, r3
 8002caa:	401a      	ands	r2, r3
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	0d1b      	lsrs	r3, r3, #20
 8002cb0:	f003 031f 	and.w	r3, r3, #31
 8002cb4:	6879      	ldr	r1, [r7, #4]
 8002cb6:	fa01 f303 	lsl.w	r3, r1, r3
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	697b      	ldr	r3, [r7, #20]
 8002cbe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002cc0:	bf00      	nop
 8002cc2:	371c      	adds	r7, #28
 8002cc4:	46bd      	mov	sp, r7
 8002cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cca:	4770      	bx	lr

08002ccc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002ccc:	b480      	push	{r7}
 8002cce:	b085      	sub	sp, #20
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	4a0f      	ldr	r2, [pc, #60]	; (8002d18 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d10a      	bne.n	8002cf6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cec:	431a      	orrs	r2, r3
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002cf4:	e00a      	b.n	8002d0c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002cfc:	68bb      	ldr	r3, [r7, #8]
 8002cfe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d02:	43db      	mvns	r3, r3
 8002d04:	401a      	ands	r2, r3
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002d0c:	bf00      	nop
 8002d0e:	3714      	adds	r7, #20
 8002d10:	46bd      	mov	sp, r7
 8002d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d16:	4770      	bx	lr
 8002d18:	407f0000 	.word	0x407f0000

08002d1c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	689b      	ldr	r3, [r3, #8]
 8002d28:	f003 031f 	and.w	r3, r3, #31
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	370c      	adds	r7, #12
 8002d30:	46bd      	mov	sp, r7
 8002d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d36:	4770      	bx	lr

08002d38 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	b083      	sub	sp, #12
 8002d3c:	af00      	add	r7, sp, #0
 8002d3e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	370c      	adds	r7, #12
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d52:	4770      	bx	lr

08002d54 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002d54:	b480      	push	{r7}
 8002d56:	b083      	sub	sp, #12
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002d64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d68:	687a      	ldr	r2, [r7, #4]
 8002d6a:	6093      	str	r3, [r2, #8]
}
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr

08002d78 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002d78:	b480      	push	{r7}
 8002d7a:	b083      	sub	sp, #12
 8002d7c:	af00      	add	r7, sp, #0
 8002d7e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	689b      	ldr	r3, [r3, #8]
 8002d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002d8c:	d101      	bne.n	8002d92 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002d92:	2300      	movs	r3, #0
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b083      	sub	sp, #12
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	689b      	ldr	r3, [r3, #8]
 8002dac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002db0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002db4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002dbc:	bf00      	nop
 8002dbe:	370c      	adds	r7, #12
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc6:	4770      	bx	lr

08002dc8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b083      	sub	sp, #12
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	689b      	ldr	r3, [r3, #8]
 8002dd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dd8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002ddc:	d101      	bne.n	8002de2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002dde:	2301      	movs	r3, #1
 8002de0:	e000      	b.n	8002de4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002de2:	2300      	movs	r3, #0
}
 8002de4:	4618      	mov	r0, r3
 8002de6:	370c      	adds	r7, #12
 8002de8:	46bd      	mov	sp, r7
 8002dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dee:	4770      	bx	lr

08002df0 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b083      	sub	sp, #12
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	689b      	ldr	r3, [r3, #8]
 8002dfc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e00:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e04:	f043 0201 	orr.w	r2, r3, #1
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002e0c:	bf00      	nop
 8002e0e:	370c      	adds	r7, #12
 8002e10:	46bd      	mov	sp, r7
 8002e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e16:	4770      	bx	lr

08002e18 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b083      	sub	sp, #12
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	689b      	ldr	r3, [r3, #8]
 8002e24:	f003 0301 	and.w	r3, r3, #1
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <LL_ADC_IsEnabled+0x18>
 8002e2c:	2301      	movs	r3, #1
 8002e2e:	e000      	b.n	8002e32 <LL_ADC_IsEnabled+0x1a>
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	370c      	adds	r7, #12
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002e3e:	b480      	push	{r7}
 8002e40:	b083      	sub	sp, #12
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	689b      	ldr	r3, [r3, #8]
 8002e4a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002e4e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e52:	f043 0204 	orr.w	r2, r3, #4
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002e5a:	bf00      	nop
 8002e5c:	370c      	adds	r7, #12
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e64:	4770      	bx	lr

08002e66 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e66:	b480      	push	{r7}
 8002e68:	b083      	sub	sp, #12
 8002e6a:	af00      	add	r7, sp, #0
 8002e6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	f003 0304 	and.w	r3, r3, #4
 8002e76:	2b04      	cmp	r3, #4
 8002e78:	d101      	bne.n	8002e7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e000      	b.n	8002e80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	689b      	ldr	r3, [r3, #8]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b08      	cmp	r3, #8
 8002e9e:	d101      	bne.n	8002ea4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	e000      	b.n	8002ea6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002ea4:	2300      	movs	r3, #0
}
 8002ea6:	4618      	mov	r0, r3
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb0:	4770      	bx	lr
	...

08002eb4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b089      	sub	sp, #36	; 0x24
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002ec0:	2300      	movs	r3, #0
 8002ec2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e16d      	b.n	80031aa <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	695b      	ldr	r3, [r3, #20]
 8002ed2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d109      	bne.n	8002ef0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002edc:	6878      	ldr	r0, [r7, #4]
 8002ede:	f7fd fed3 	bl	8000c88 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	2200      	movs	r2, #0
 8002ee6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff3f 	bl	8002d78 <LL_ADC_IsDeepPowerDownEnabled>
 8002efa:	4603      	mov	r3, r0
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d004      	beq.n	8002f0a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	4618      	mov	r0, r3
 8002f06:	f7ff ff25 	bl	8002d54 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7ff ff5a 	bl	8002dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f14:	4603      	mov	r3, r0
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d115      	bne.n	8002f46 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7ff ff3e 	bl	8002da0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002f24:	4ba3      	ldr	r3, [pc, #652]	; (80031b4 <HAL_ADC_Init+0x300>)
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	099b      	lsrs	r3, r3, #6
 8002f2a:	4aa3      	ldr	r2, [pc, #652]	; (80031b8 <HAL_ADC_Init+0x304>)
 8002f2c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f30:	099b      	lsrs	r3, r3, #6
 8002f32:	3301      	adds	r3, #1
 8002f34:	005b      	lsls	r3, r3, #1
 8002f36:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f38:	e002      	b.n	8002f40 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002f3a:	68bb      	ldr	r3, [r7, #8]
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002f40:	68bb      	ldr	r3, [r7, #8]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d1f9      	bne.n	8002f3a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	f7ff ff3c 	bl	8002dc8 <LL_ADC_IsInternalRegulatorEnabled>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d10d      	bne.n	8002f72 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f5a:	f043 0210 	orr.w	r2, r3, #16
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002f66:	f043 0201 	orr.w	r2, r3, #1
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4618      	mov	r0, r3
 8002f78:	f7ff ff75 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8002f7c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f82:	f003 0310 	and.w	r3, r3, #16
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 8106 	bne.w	8003198 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002f8c:	697b      	ldr	r3, [r7, #20]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	f040 8102 	bne.w	8003198 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f98:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002f9c:	f043 0202 	orr.w	r2, r3, #2
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7ff ff35 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fae:	4603      	mov	r3, r0
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d111      	bne.n	8002fd8 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002fb4:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fb8:	f7ff ff2e 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	487f      	ldr	r0, [pc, #508]	; (80031bc <HAL_ADC_Init+0x308>)
 8002fc0:	f7ff ff2a 	bl	8002e18 <LL_ADC_IsEnabled>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	4323      	orrs	r3, r4
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d105      	bne.n	8002fd8 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	685b      	ldr	r3, [r3, #4]
 8002fd0:	4619      	mov	r1, r3
 8002fd2:	487b      	ldr	r0, [pc, #492]	; (80031c0 <HAL_ADC_Init+0x30c>)
 8002fd4:	f7ff fd3e 	bl	8002a54 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	7f5b      	ldrb	r3, [r3, #29]
 8002fdc:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002fe2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002fe8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002fee:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002ff6:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003002:	2b01      	cmp	r3, #1
 8003004:	d106      	bne.n	8003014 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800300a:	3b01      	subs	r3, #1
 800300c:	045b      	lsls	r3, r3, #17
 800300e:	69ba      	ldr	r2, [r7, #24]
 8003010:	4313      	orrs	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003018:	2b00      	cmp	r3, #0
 800301a:	d009      	beq.n	8003030 <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003020:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003028:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4313      	orrs	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68da      	ldr	r2, [r3, #12]
 8003036:	4b63      	ldr	r3, [pc, #396]	; (80031c4 <HAL_ADC_Init+0x310>)
 8003038:	4013      	ands	r3, r2
 800303a:	687a      	ldr	r2, [r7, #4]
 800303c:	6812      	ldr	r2, [r2, #0]
 800303e:	69b9      	ldr	r1, [r7, #24]
 8003040:	430b      	orrs	r3, r1
 8003042:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	430a      	orrs	r2, r1
 8003058:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	4618      	mov	r0, r3
 8003060:	f7ff ff01 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8003064:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4618      	mov	r0, r3
 800306c:	f7ff ff0e 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 8003070:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003072:	693b      	ldr	r3, [r7, #16]
 8003074:	2b00      	cmp	r3, #0
 8003076:	d16d      	bne.n	8003154 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d16a      	bne.n	8003154 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8003082:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800308a:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800308c:	4313      	orrs	r3, r2
 800308e:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800309a:	f023 0302 	bic.w	r3, r3, #2
 800309e:	687a      	ldr	r2, [r7, #4]
 80030a0:	6812      	ldr	r2, [r2, #0]
 80030a2:	69b9      	ldr	r1, [r7, #24]
 80030a4:	430b      	orrs	r3, r1
 80030a6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	691b      	ldr	r3, [r3, #16]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d017      	beq.n	80030e0 <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	691a      	ldr	r2, [r3, #16]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 80030be:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030c8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80030cc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	6911      	ldr	r1, [r2, #16]
 80030d4:	687a      	ldr	r2, [r7, #4]
 80030d6:	6812      	ldr	r2, [r2, #0]
 80030d8:	430b      	orrs	r3, r1
 80030da:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80030de:	e013      	b.n	8003108 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	691a      	ldr	r2, [r3, #16]
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80030ee:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6812      	ldr	r2, [r2, #0]
 80030fc:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003100:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003104:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800310e:	2b01      	cmp	r3, #1
 8003110:	d118      	bne.n	8003144 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	691b      	ldr	r3, [r3, #16]
 8003118:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800311c:	f023 0304 	bic.w	r3, r3, #4
 8003120:	687a      	ldr	r2, [r7, #4]
 8003122:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003128:	4311      	orrs	r1, r2
 800312a:	687a      	ldr	r2, [r7, #4]
 800312c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800312e:	4311      	orrs	r1, r2
 8003130:	687a      	ldr	r2, [r7, #4]
 8003132:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003134:	430a      	orrs	r2, r1
 8003136:	431a      	orrs	r2, r3
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f042 0201 	orr.w	r2, r2, #1
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	e007      	b.n	8003154 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	691a      	ldr	r2, [r3, #16]
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f022 0201 	bic.w	r2, r2, #1
 8003152:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	695b      	ldr	r3, [r3, #20]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d10c      	bne.n	8003176 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003162:	f023 010f 	bic.w	r1, r3, #15
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6a1b      	ldr	r3, [r3, #32]
 800316a:	1e5a      	subs	r2, r3, #1
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	430a      	orrs	r2, r1
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
 8003174:	e007      	b.n	8003186 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f022 020f 	bic.w	r2, r2, #15
 8003184:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800318a:	f023 0303 	bic.w	r3, r3, #3
 800318e:	f043 0201 	orr.w	r2, r3, #1
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	65da      	str	r2, [r3, #92]	; 0x5c
 8003196:	e007      	b.n	80031a8 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800319c:	f043 0210 	orr.w	r2, r3, #16
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80031a4:	2301      	movs	r3, #1
 80031a6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80031a8:	7ffb      	ldrb	r3, [r7, #31]
}
 80031aa:	4618      	mov	r0, r3
 80031ac:	3724      	adds	r7, #36	; 0x24
 80031ae:	46bd      	mov	sp, r7
 80031b0:	bd90      	pop	{r4, r7, pc}
 80031b2:	bf00      	nop
 80031b4:	20000000 	.word	0x20000000
 80031b8:	053e2d63 	.word	0x053e2d63
 80031bc:	50000100 	.word	0x50000100
 80031c0:	50000300 	.word	0x50000300
 80031c4:	fff04007 	.word	0xfff04007

080031c8 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b086      	sub	sp, #24
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80031d0:	4859      	ldr	r0, [pc, #356]	; (8003338 <HAL_ADC_Start+0x170>)
 80031d2:	f7ff fda3 	bl	8002d1c <LL_ADC_GetMultimode>
 80031d6:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7ff fe42 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 80031e2:	4603      	mov	r3, r0
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	f040 809f 	bne.w	8003328 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d101      	bne.n	80031f8 <HAL_ADC_Start+0x30>
 80031f4:	2302      	movs	r3, #2
 80031f6:	e09a      	b.n	800332e <HAL_ADC_Start+0x166>
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2201      	movs	r2, #1
 80031fc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003200:	6878      	ldr	r0, [r7, #4]
 8003202:	f000 fe45 	bl	8003e90 <ADC_Enable>
 8003206:	4603      	mov	r3, r0
 8003208:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800320a:	7dfb      	ldrb	r3, [r7, #23]
 800320c:	2b00      	cmp	r3, #0
 800320e:	f040 8086 	bne.w	800331e <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003216:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800321a:	f023 0301 	bic.w	r3, r3, #1
 800321e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a44      	ldr	r2, [pc, #272]	; (800333c <HAL_ADC_Start+0x174>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d002      	beq.n	8003236 <HAL_ADC_Start+0x6e>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	e001      	b.n	800323a <HAL_ADC_Start+0x72>
 8003236:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800323a:	687a      	ldr	r2, [r7, #4]
 800323c:	6812      	ldr	r2, [r2, #0]
 800323e:	4293      	cmp	r3, r2
 8003240:	d002      	beq.n	8003248 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2b00      	cmp	r3, #0
 8003246:	d105      	bne.n	8003254 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800324c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003258:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800325c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003260:	d106      	bne.n	8003270 <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003266:	f023 0206 	bic.w	r2, r3, #6
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	661a      	str	r2, [r3, #96]	; 0x60
 800326e:	e002      	b.n	8003276 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	221c      	movs	r2, #28
 800327c:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	2200      	movs	r2, #0
 8003282:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	4a2c      	ldr	r2, [pc, #176]	; (800333c <HAL_ADC_Start+0x174>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d002      	beq.n	8003296 <HAL_ADC_Start+0xce>
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	e001      	b.n	800329a <HAL_ADC_Start+0xd2>
 8003296:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6812      	ldr	r2, [r2, #0]
 800329e:	4293      	cmp	r3, r2
 80032a0:	d008      	beq.n	80032b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d005      	beq.n	80032b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80032a8:	693b      	ldr	r3, [r7, #16]
 80032aa:	2b05      	cmp	r3, #5
 80032ac:	d002      	beq.n	80032b4 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80032ae:	693b      	ldr	r3, [r7, #16]
 80032b0:	2b09      	cmp	r3, #9
 80032b2:	d114      	bne.n	80032de <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d007      	beq.n	80032d2 <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032c6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ca:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7ff fdb1 	bl	8002e3e <LL_ADC_REG_StartConversion>
 80032dc:	e026      	b.n	800332c <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80032e2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a13      	ldr	r2, [pc, #76]	; (800333c <HAL_ADC_Start+0x174>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d002      	beq.n	80032fa <HAL_ADC_Start+0x132>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	e001      	b.n	80032fe <HAL_ADC_Start+0x136>
 80032fa:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80032fe:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	68db      	ldr	r3, [r3, #12]
 8003304:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00f      	beq.n	800332c <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003310:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003314:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	65da      	str	r2, [r3, #92]	; 0x5c
 800331c:	e006      	b.n	800332c <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003326:	e001      	b.n	800332c <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003328:	2302      	movs	r3, #2
 800332a:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 800332c:	7dfb      	ldrb	r3, [r7, #23]
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	50000300 	.word	0x50000300
 800333c:	50000100 	.word	0x50000100

08003340 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b088      	sub	sp, #32
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
 8003348:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800334a:	4867      	ldr	r0, [pc, #412]	; (80034e8 <HAL_ADC_PollForConversion+0x1a8>)
 800334c:	f7ff fce6 	bl	8002d1c <LL_ADC_GetMultimode>
 8003350:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	2b08      	cmp	r3, #8
 8003358:	d102      	bne.n	8003360 <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 800335a:	2308      	movs	r3, #8
 800335c:	61fb      	str	r3, [r7, #28]
 800335e:	e02a      	b.n	80033b6 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003360:	697b      	ldr	r3, [r7, #20]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d005      	beq.n	8003372 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	2b05      	cmp	r3, #5
 800336a:	d002      	beq.n	8003372 <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	2b09      	cmp	r3, #9
 8003370:	d111      	bne.n	8003396 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	68db      	ldr	r3, [r3, #12]
 8003378:	f003 0301 	and.w	r3, r3, #1
 800337c:	2b00      	cmp	r3, #0
 800337e:	d007      	beq.n	8003390 <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003384:	f043 0220 	orr.w	r2, r3, #32
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800338c:	2301      	movs	r3, #1
 800338e:	e0a6      	b.n	80034de <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 8003390:	2304      	movs	r3, #4
 8003392:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8003394:	e00f      	b.n	80033b6 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8003396:	4854      	ldr	r0, [pc, #336]	; (80034e8 <HAL_ADC_PollForConversion+0x1a8>)
 8003398:	f7ff fcce 	bl	8002d38 <LL_ADC_GetMultiDMATransfer>
 800339c:	4603      	mov	r3, r0
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d007      	beq.n	80033b2 <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033a6:	f043 0220 	orr.w	r2, r3, #32
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e095      	b.n	80034de <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 80033b2:	2304      	movs	r3, #4
 80033b4:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80033b6:	f7ff fb1f 	bl	80029f8 <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033bc:	e021      	b.n	8003402 <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033c4:	d01d      	beq.n	8003402 <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80033c6:	f7ff fb17 	bl	80029f8 <HAL_GetTick>
 80033ca:	4602      	mov	r2, r0
 80033cc:	693b      	ldr	r3, [r7, #16]
 80033ce:	1ad3      	subs	r3, r2, r3
 80033d0:	683a      	ldr	r2, [r7, #0]
 80033d2:	429a      	cmp	r2, r3
 80033d4:	d302      	bcc.n	80033dc <HAL_ADC_PollForConversion+0x9c>
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d112      	bne.n	8003402 <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	69fb      	ldr	r3, [r7, #28]
 80033e4:	4013      	ands	r3, r2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d10b      	bne.n	8003402 <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80033ee:	f043 0204 	orr.w	r2, r3, #4
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2200      	movs	r2, #0
 80033fa:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80033fe:	2303      	movs	r3, #3
 8003400:	e06d      	b.n	80034de <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	681a      	ldr	r2, [r3, #0]
 8003408:	69fb      	ldr	r3, [r7, #28]
 800340a:	4013      	ands	r3, r2
 800340c:	2b00      	cmp	r3, #0
 800340e:	d0d6      	beq.n	80033be <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003414:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4618      	mov	r0, r3
 8003422:	f7ff fbe9 	bl	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d01c      	beq.n	8003466 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	7f5b      	ldrb	r3, [r3, #29]
 8003430:	2b00      	cmp	r3, #0
 8003432:	d118      	bne.n	8003466 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b08      	cmp	r3, #8
 8003440:	d111      	bne.n	8003466 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003446:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003452:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d105      	bne.n	8003466 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800345e:	f043 0201 	orr.w	r2, r3, #1
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a20      	ldr	r2, [pc, #128]	; (80034ec <HAL_ADC_PollForConversion+0x1ac>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d002      	beq.n	8003476 <HAL_ADC_PollForConversion+0x136>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	e001      	b.n	800347a <HAL_ADC_PollForConversion+0x13a>
 8003476:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800347a:	687a      	ldr	r2, [r7, #4]
 800347c:	6812      	ldr	r2, [r2, #0]
 800347e:	4293      	cmp	r3, r2
 8003480:	d008      	beq.n	8003494 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d005      	beq.n	8003494 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b05      	cmp	r3, #5
 800348c:	d002      	beq.n	8003494 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	2b09      	cmp	r3, #9
 8003492:	d104      	bne.n	800349e <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	61bb      	str	r3, [r7, #24]
 800349c:	e00d      	b.n	80034ba <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	4a12      	ldr	r2, [pc, #72]	; (80034ec <HAL_ADC_PollForConversion+0x1ac>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d002      	beq.n	80034ae <HAL_ADC_PollForConversion+0x16e>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	e001      	b.n	80034b2 <HAL_ADC_PollForConversion+0x172>
 80034ae:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80034b2:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	68db      	ldr	r3, [r3, #12]
 80034b8:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 80034ba:	69fb      	ldr	r3, [r7, #28]
 80034bc:	2b08      	cmp	r3, #8
 80034be:	d104      	bne.n	80034ca <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2208      	movs	r2, #8
 80034c6:	601a      	str	r2, [r3, #0]
 80034c8:	e008      	b.n	80034dc <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d103      	bne.n	80034dc <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	220c      	movs	r2, #12
 80034da:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3720      	adds	r7, #32
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	50000300 	.word	0x50000300
 80034ec:	50000100 	.word	0x50000100

080034f0 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80034fc:	4851      	ldr	r0, [pc, #324]	; (8003644 <HAL_ADC_Start_DMA+0x154>)
 80034fe:	f7ff fc0d 	bl	8002d1c <LL_ADC_GetMultimode>
 8003502:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7ff fcac 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	f040 808f 	bne.w	8003634 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800351c:	2b01      	cmp	r3, #1
 800351e:	d101      	bne.n	8003524 <HAL_ADC_Start_DMA+0x34>
 8003520:	2302      	movs	r3, #2
 8003522:	e08a      	b.n	800363a <HAL_ADC_Start_DMA+0x14a>
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2201      	movs	r2, #1
 8003528:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800352c:	693b      	ldr	r3, [r7, #16]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d005      	beq.n	800353e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8003532:	693b      	ldr	r3, [r7, #16]
 8003534:	2b05      	cmp	r3, #5
 8003536:	d002      	beq.n	800353e <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003538:	693b      	ldr	r3, [r7, #16]
 800353a:	2b09      	cmp	r3, #9
 800353c:	d173      	bne.n	8003626 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800353e:	68f8      	ldr	r0, [r7, #12]
 8003540:	f000 fca6 	bl	8003e90 <ADC_Enable>
 8003544:	4603      	mov	r3, r0
 8003546:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8003548:	7dfb      	ldrb	r3, [r7, #23]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d166      	bne.n	800361c <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003552:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003556:	f023 0301 	bic.w	r3, r3, #1
 800355a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a38      	ldr	r2, [pc, #224]	; (8003648 <HAL_ADC_Start_DMA+0x158>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d002      	beq.n	8003572 <HAL_ADC_Start_DMA+0x82>
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	e001      	b.n	8003576 <HAL_ADC_Start_DMA+0x86>
 8003572:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003576:	68fa      	ldr	r2, [r7, #12]
 8003578:	6812      	ldr	r2, [r2, #0]
 800357a:	4293      	cmp	r3, r2
 800357c:	d002      	beq.n	8003584 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800357e:	693b      	ldr	r3, [r7, #16]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d105      	bne.n	8003590 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003588:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003594:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d006      	beq.n	80035aa <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035a0:	f023 0206 	bic.w	r2, r3, #6
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	661a      	str	r2, [r3, #96]	; 0x60
 80035a8:	e002      	b.n	80035b0 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2200      	movs	r2, #0
 80035ae:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035b4:	4a25      	ldr	r2, [pc, #148]	; (800364c <HAL_ADC_Start_DMA+0x15c>)
 80035b6:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035bc:	4a24      	ldr	r2, [pc, #144]	; (8003650 <HAL_ADC_Start_DMA+0x160>)
 80035be:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035c4:	4a23      	ldr	r2, [pc, #140]	; (8003654 <HAL_ADC_Start_DMA+0x164>)
 80035c6:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	221c      	movs	r2, #28
 80035ce:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f042 0210 	orr.w	r2, r2, #16
 80035e6:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	68da      	ldr	r2, [r3, #12]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f042 0201 	orr.w	r2, r2, #1
 80035f6:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80035f8:	68fb      	ldr	r3, [r7, #12]
 80035fa:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	3340      	adds	r3, #64	; 0x40
 8003602:	4619      	mov	r1, r3
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f000 ffba 	bl	8004580 <HAL_DMA_Start_IT>
 800360c:	4603      	mov	r3, r0
 800360e:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	4618      	mov	r0, r3
 8003616:	f7ff fc12 	bl	8002e3e <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 800361a:	e00d      	b.n	8003638 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8003624:	e008      	b.n	8003638 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	2200      	movs	r2, #0
 800362e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8003632:	e001      	b.n	8003638 <HAL_ADC_Start_DMA+0x148>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8003634:	2302      	movs	r3, #2
 8003636:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8003638:	7dfb      	ldrb	r3, [r7, #23]
}
 800363a:	4618      	mov	r0, r3
 800363c:	3718      	adds	r7, #24
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	50000300 	.word	0x50000300
 8003648:	50000100 	.word	0x50000100
 800364c:	08003f55 	.word	0x08003f55
 8003650:	0800402d 	.word	0x0800402d
 8003654:	08004049 	.word	0x08004049

08003658 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8003658:	b480      	push	{r7}
 800365a:	b083      	sub	sp, #12
 800365c:	af00      	add	r7, sp, #0
 800365e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8003666:	4618      	mov	r0, r3
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr
	...

080036b0 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b0b6      	sub	sp, #216	; 0xd8
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80036ba:	2300      	movs	r3, #0
 80036bc:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80036c0:	2300      	movs	r3, #0
 80036c2:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <HAL_ADC_ConfigChannel+0x22>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e3c8      	b.n	8003e64 <HAL_ADC_ConfigChannel+0x7b4>
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff fbc1 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 80036e4:	4603      	mov	r3, r0
 80036e6:	2b00      	cmp	r3, #0
 80036e8:	f040 83ad 	bne.w	8003e46 <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6818      	ldr	r0, [r3, #0]
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	6859      	ldr	r1, [r3, #4]
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	461a      	mov	r2, r3
 80036fa:	f7ff fa90 	bl	8002c1e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	4618      	mov	r0, r3
 8003704:	f7ff fbaf 	bl	8002e66 <LL_ADC_REG_IsConversionOngoing>
 8003708:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4618      	mov	r0, r3
 8003712:	f7ff fbbb 	bl	8002e8c <LL_ADC_INJ_IsConversionOngoing>
 8003716:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800371a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800371e:	2b00      	cmp	r3, #0
 8003720:	f040 81d9 	bne.w	8003ad6 <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003724:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003728:	2b00      	cmp	r3, #0
 800372a:	f040 81d4 	bne.w	8003ad6 <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003736:	d10f      	bne.n	8003758 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6818      	ldr	r0, [r3, #0]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2200      	movs	r2, #0
 8003742:	4619      	mov	r1, r3
 8003744:	f7ff fa97 	bl	8002c76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8003750:	4618      	mov	r0, r3
 8003752:	f7ff fa3e 	bl	8002bd2 <LL_ADC_SetSamplingTimeCommonConfig>
 8003756:	e00e      	b.n	8003776 <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6818      	ldr	r0, [r3, #0]
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6819      	ldr	r1, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	461a      	mov	r2, r3
 8003766:	f7ff fa86 	bl	8002c76 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2100      	movs	r1, #0
 8003770:	4618      	mov	r0, r3
 8003772:	f7ff fa2e 	bl	8002bd2 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695a      	ldr	r2, [r3, #20]
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	08db      	lsrs	r3, r3, #3
 8003782:	f003 0303 	and.w	r3, r3, #3
 8003786:	005b      	lsls	r3, r3, #1
 8003788:	fa02 f303 	lsl.w	r3, r2, r3
 800378c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8003790:	683b      	ldr	r3, [r7, #0]
 8003792:	691b      	ldr	r3, [r3, #16]
 8003794:	2b04      	cmp	r3, #4
 8003796:	d022      	beq.n	80037de <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6919      	ldr	r1, [r3, #16]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	681a      	ldr	r2, [r3, #0]
 80037a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80037a8:	f7ff f988 	bl	8002abc <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6818      	ldr	r0, [r3, #0]
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	6919      	ldr	r1, [r3, #16]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	699b      	ldr	r3, [r3, #24]
 80037b8:	461a      	mov	r2, r3
 80037ba:	f7ff f9d4 	bl	8002b66 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6919      	ldr	r1, [r3, #16]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	7f1b      	ldrb	r3, [r3, #28]
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d102      	bne.n	80037d4 <HAL_ADC_ConfigChannel+0x124>
 80037ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80037d2:	e000      	b.n	80037d6 <HAL_ADC_ConfigChannel+0x126>
 80037d4:	2300      	movs	r3, #0
 80037d6:	461a      	mov	r2, r3
 80037d8:	f7ff f9e0 	bl	8002b9c <LL_ADC_SetOffsetSaturation>
 80037dc:	e17b      	b.n	8003ad6 <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	2100      	movs	r1, #0
 80037e4:	4618      	mov	r0, r3
 80037e6:	f7ff f98d 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 80037ea:	4603      	mov	r3, r0
 80037ec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d10a      	bne.n	800380a <HAL_ADC_ConfigChannel+0x15a>
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2100      	movs	r1, #0
 80037fa:	4618      	mov	r0, r3
 80037fc:	f7ff f982 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003800:	4603      	mov	r3, r0
 8003802:	0e9b      	lsrs	r3, r3, #26
 8003804:	f003 021f 	and.w	r2, r3, #31
 8003808:	e01e      	b.n	8003848 <HAL_ADC_ConfigChannel+0x198>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2100      	movs	r1, #0
 8003810:	4618      	mov	r0, r3
 8003812:	f7ff f977 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003816:	4603      	mov	r3, r0
 8003818:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381c:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003828:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800382c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8003830:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003834:	2b00      	cmp	r3, #0
 8003836:	d101      	bne.n	800383c <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8003838:	2320      	movs	r3, #32
 800383a:	e004      	b.n	8003846 <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 800383c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003840:	fab3 f383 	clz	r3, r3
 8003844:	b2db      	uxtb	r3, r3
 8003846:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003850:	2b00      	cmp	r3, #0
 8003852:	d105      	bne.n	8003860 <HAL_ADC_ConfigChannel+0x1b0>
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	0e9b      	lsrs	r3, r3, #26
 800385a:	f003 031f 	and.w	r3, r3, #31
 800385e:	e018      	b.n	8003892 <HAL_ADC_ConfigChannel+0x1e2>
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003868:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800386c:	fa93 f3a3 	rbit	r3, r3
 8003870:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8003874:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003878:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800387c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8003880:	2b00      	cmp	r3, #0
 8003882:	d101      	bne.n	8003888 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 8003884:	2320      	movs	r3, #32
 8003886:	e004      	b.n	8003892 <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8003888:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003892:	429a      	cmp	r2, r3
 8003894:	d106      	bne.n	80038a4 <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	2200      	movs	r2, #0
 800389c:	2100      	movs	r1, #0
 800389e:	4618      	mov	r0, r3
 80038a0:	f7ff f946 	bl	8002b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	2101      	movs	r1, #1
 80038aa:	4618      	mov	r0, r3
 80038ac:	f7ff f92a 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 80038b0:	4603      	mov	r3, r0
 80038b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d10a      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x220>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	2101      	movs	r1, #1
 80038c0:	4618      	mov	r0, r3
 80038c2:	f7ff f91f 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 80038c6:	4603      	mov	r3, r0
 80038c8:	0e9b      	lsrs	r3, r3, #26
 80038ca:	f003 021f 	and.w	r2, r3, #31
 80038ce:	e01e      	b.n	800390e <HAL_ADC_ConfigChannel+0x25e>
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	2101      	movs	r1, #1
 80038d6:	4618      	mov	r0, r3
 80038d8:	f7ff f914 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 80038dc:	4603      	mov	r3, r0
 80038de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038e2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80038e6:	fa93 f3a3 	rbit	r3, r3
 80038ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80038ee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80038f2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80038f6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d101      	bne.n	8003902 <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80038fe:	2320      	movs	r3, #32
 8003900:	e004      	b.n	800390c <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 8003902:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003906:	fab3 f383 	clz	r3, r3
 800390a:	b2db      	uxtb	r3, r3
 800390c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003916:	2b00      	cmp	r3, #0
 8003918:	d105      	bne.n	8003926 <HAL_ADC_ConfigChannel+0x276>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	0e9b      	lsrs	r3, r3, #26
 8003920:	f003 031f 	and.w	r3, r3, #31
 8003924:	e018      	b.n	8003958 <HAL_ADC_ConfigChannel+0x2a8>
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800392e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003932:	fa93 f3a3 	rbit	r3, r3
 8003936:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800393a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800393e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8003942:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003946:	2b00      	cmp	r3, #0
 8003948:	d101      	bne.n	800394e <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 800394a:	2320      	movs	r3, #32
 800394c:	e004      	b.n	8003958 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 800394e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003952:	fab3 f383 	clz	r3, r3
 8003956:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003958:	429a      	cmp	r2, r3
 800395a:	d106      	bne.n	800396a <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	2200      	movs	r2, #0
 8003962:	2101      	movs	r1, #1
 8003964:	4618      	mov	r0, r3
 8003966:	f7ff f8e3 	bl	8002b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	2102      	movs	r1, #2
 8003970:	4618      	mov	r0, r3
 8003972:	f7ff f8c7 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003976:	4603      	mov	r3, r0
 8003978:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800397c:	2b00      	cmp	r3, #0
 800397e:	d10a      	bne.n	8003996 <HAL_ADC_ConfigChannel+0x2e6>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	2102      	movs	r1, #2
 8003986:	4618      	mov	r0, r3
 8003988:	f7ff f8bc 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 800398c:	4603      	mov	r3, r0
 800398e:	0e9b      	lsrs	r3, r3, #26
 8003990:	f003 021f 	and.w	r2, r3, #31
 8003994:	e01e      	b.n	80039d4 <HAL_ADC_ConfigChannel+0x324>
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2102      	movs	r1, #2
 800399c:	4618      	mov	r0, r3
 800399e:	f7ff f8b1 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 80039a2:	4603      	mov	r3, r0
 80039a4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039a8:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80039ac:	fa93 f3a3 	rbit	r3, r3
 80039b0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80039b4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80039b8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80039bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80039c4:	2320      	movs	r3, #32
 80039c6:	e004      	b.n	80039d2 <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80039c8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80039cc:	fab3 f383 	clz	r3, r3
 80039d0:	b2db      	uxtb	r3, r3
 80039d2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d105      	bne.n	80039ec <HAL_ADC_ConfigChannel+0x33c>
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	0e9b      	lsrs	r3, r3, #26
 80039e6:	f003 031f 	and.w	r3, r3, #31
 80039ea:	e016      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x36a>
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80039f8:	fa93 f3a3 	rbit	r3, r3
 80039fc:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80039fe:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8003a00:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003a04:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d101      	bne.n	8003a10 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8003a0c:	2320      	movs	r3, #32
 8003a0e:	e004      	b.n	8003a1a <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8003a10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003a14:	fab3 f383 	clz	r3, r3
 8003a18:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d106      	bne.n	8003a2c <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	2200      	movs	r2, #0
 8003a24:	2102      	movs	r1, #2
 8003a26:	4618      	mov	r0, r3
 8003a28:	f7ff f882 	bl	8002b30 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	2103      	movs	r1, #3
 8003a32:	4618      	mov	r0, r3
 8003a34:	f7ff f866 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d10a      	bne.n	8003a58 <HAL_ADC_ConfigChannel+0x3a8>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2103      	movs	r1, #3
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7ff f85b 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	0e9b      	lsrs	r3, r3, #26
 8003a52:	f003 021f 	and.w	r2, r3, #31
 8003a56:	e017      	b.n	8003a88 <HAL_ADC_ConfigChannel+0x3d8>
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	2103      	movs	r1, #3
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f7ff f850 	bl	8002b04 <LL_ADC_GetOffsetChannel>
 8003a64:	4603      	mov	r3, r0
 8003a66:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003a6a:	fa93 f3a3 	rbit	r3, r3
 8003a6e:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8003a70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003a72:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8003a74:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d101      	bne.n	8003a7e <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8003a7a:	2320      	movs	r3, #32
 8003a7c:	e003      	b.n	8003a86 <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8003a7e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003a80:	fab3 f383 	clz	r3, r3
 8003a84:	b2db      	uxtb	r3, r3
 8003a86:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a90:	2b00      	cmp	r3, #0
 8003a92:	d105      	bne.n	8003aa0 <HAL_ADC_ConfigChannel+0x3f0>
 8003a94:	683b      	ldr	r3, [r7, #0]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	0e9b      	lsrs	r3, r3, #26
 8003a9a:	f003 031f 	and.w	r3, r3, #31
 8003a9e:	e011      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x414>
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003aa6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003aa8:	fa93 f3a3 	rbit	r3, r3
 8003aac:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8003aae:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003ab0:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003ab2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8003ab8:	2320      	movs	r3, #32
 8003aba:	e003      	b.n	8003ac4 <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8003abc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003abe:	fab3 f383 	clz	r3, r3
 8003ac2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d106      	bne.n	8003ad6 <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	2200      	movs	r2, #0
 8003ace:	2103      	movs	r1, #3
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	f7ff f82d 	bl	8002b30 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	4618      	mov	r0, r3
 8003adc:	f7ff f99c 	bl	8002e18 <LL_ADC_IsEnabled>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	f040 8140 	bne.w	8003d68 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	6818      	ldr	r0, [r3, #0]
 8003aec:	683b      	ldr	r3, [r7, #0]
 8003aee:	6819      	ldr	r1, [r3, #0]
 8003af0:	683b      	ldr	r3, [r7, #0]
 8003af2:	68db      	ldr	r3, [r3, #12]
 8003af4:	461a      	mov	r2, r3
 8003af6:	f7ff f8e9 	bl	8002ccc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003afa:	683b      	ldr	r3, [r7, #0]
 8003afc:	68db      	ldr	r3, [r3, #12]
 8003afe:	4a8f      	ldr	r2, [pc, #572]	; (8003d3c <HAL_ADC_ConfigChannel+0x68c>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	f040 8131 	bne.w	8003d68 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d10b      	bne.n	8003b2e <HAL_ADC_ConfigChannel+0x47e>
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	0e9b      	lsrs	r3, r3, #26
 8003b1c:	3301      	adds	r3, #1
 8003b1e:	f003 031f 	and.w	r3, r3, #31
 8003b22:	2b09      	cmp	r3, #9
 8003b24:	bf94      	ite	ls
 8003b26:	2301      	movls	r3, #1
 8003b28:	2300      	movhi	r3, #0
 8003b2a:	b2db      	uxtb	r3, r3
 8003b2c:	e019      	b.n	8003b62 <HAL_ADC_ConfigChannel+0x4b2>
 8003b2e:	683b      	ldr	r3, [r7, #0]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b34:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003b36:	fa93 f3a3 	rbit	r3, r3
 8003b3a:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003b3c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003b3e:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8003b40:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d101      	bne.n	8003b4a <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8003b46:	2320      	movs	r3, #32
 8003b48:	e003      	b.n	8003b52 <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8003b4a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003b4c:	fab3 f383 	clz	r3, r3
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	3301      	adds	r3, #1
 8003b54:	f003 031f 	and.w	r3, r3, #31
 8003b58:	2b09      	cmp	r3, #9
 8003b5a:	bf94      	ite	ls
 8003b5c:	2301      	movls	r3, #1
 8003b5e:	2300      	movhi	r3, #0
 8003b60:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d079      	beq.n	8003c5a <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003b66:	683b      	ldr	r3, [r7, #0]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d107      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x4d2>
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	0e9b      	lsrs	r3, r3, #26
 8003b78:	3301      	adds	r3, #1
 8003b7a:	069b      	lsls	r3, r3, #26
 8003b7c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003b80:	e015      	b.n	8003bae <HAL_ADC_ConfigChannel+0x4fe>
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b88:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003b8a:	fa93 f3a3 	rbit	r3, r3
 8003b8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8003b90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b92:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003b94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8003b9a:	2320      	movs	r3, #32
 8003b9c:	e003      	b.n	8003ba6 <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8003b9e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003ba0:	fab3 f383 	clz	r3, r3
 8003ba4:	b2db      	uxtb	r3, r3
 8003ba6:	3301      	adds	r3, #1
 8003ba8:	069b      	lsls	r3, r3, #26
 8003baa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d109      	bne.n	8003bce <HAL_ADC_ConfigChannel+0x51e>
 8003bba:	683b      	ldr	r3, [r7, #0]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	0e9b      	lsrs	r3, r3, #26
 8003bc0:	3301      	adds	r3, #1
 8003bc2:	f003 031f 	and.w	r3, r3, #31
 8003bc6:	2101      	movs	r1, #1
 8003bc8:	fa01 f303 	lsl.w	r3, r1, r3
 8003bcc:	e017      	b.n	8003bfe <HAL_ADC_ConfigChannel+0x54e>
 8003bce:	683b      	ldr	r3, [r7, #0]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003bd6:	fa93 f3a3 	rbit	r3, r3
 8003bda:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003bdc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003bde:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8003be0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d101      	bne.n	8003bea <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8003be6:	2320      	movs	r3, #32
 8003be8:	e003      	b.n	8003bf2 <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8003bea:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003bec:	fab3 f383 	clz	r3, r3
 8003bf0:	b2db      	uxtb	r3, r3
 8003bf2:	3301      	adds	r3, #1
 8003bf4:	f003 031f 	and.w	r3, r3, #31
 8003bf8:	2101      	movs	r1, #1
 8003bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8003bfe:	ea42 0103 	orr.w	r1, r2, r3
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d10a      	bne.n	8003c24 <HAL_ADC_ConfigChannel+0x574>
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	0e9b      	lsrs	r3, r3, #26
 8003c14:	3301      	adds	r3, #1
 8003c16:	f003 021f 	and.w	r2, r3, #31
 8003c1a:	4613      	mov	r3, r2
 8003c1c:	005b      	lsls	r3, r3, #1
 8003c1e:	4413      	add	r3, r2
 8003c20:	051b      	lsls	r3, r3, #20
 8003c22:	e018      	b.n	8003c56 <HAL_ADC_ConfigChannel+0x5a6>
 8003c24:	683b      	ldr	r3, [r7, #0]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c2c:	fa93 f3a3 	rbit	r3, r3
 8003c30:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8003c32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003c36:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d101      	bne.n	8003c40 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8003c3c:	2320      	movs	r3, #32
 8003c3e:	e003      	b.n	8003c48 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8003c40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c42:	fab3 f383 	clz	r3, r3
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	3301      	adds	r3, #1
 8003c4a:	f003 021f 	and.w	r2, r3, #31
 8003c4e:	4613      	mov	r3, r2
 8003c50:	005b      	lsls	r3, r3, #1
 8003c52:	4413      	add	r3, r2
 8003c54:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003c56:	430b      	orrs	r3, r1
 8003c58:	e081      	b.n	8003d5e <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d107      	bne.n	8003c76 <HAL_ADC_ConfigChannel+0x5c6>
 8003c66:	683b      	ldr	r3, [r7, #0]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	0e9b      	lsrs	r3, r3, #26
 8003c6c:	3301      	adds	r3, #1
 8003c6e:	069b      	lsls	r3, r3, #26
 8003c70:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003c74:	e015      	b.n	8003ca2 <HAL_ADC_ConfigChannel+0x5f2>
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c7e:	fa93 f3a3 	rbit	r3, r3
 8003c82:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8003c84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c86:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d101      	bne.n	8003c92 <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8003c8e:	2320      	movs	r3, #32
 8003c90:	e003      	b.n	8003c9a <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8003c92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c94:	fab3 f383 	clz	r3, r3
 8003c98:	b2db      	uxtb	r3, r3
 8003c9a:	3301      	adds	r3, #1
 8003c9c:	069b      	lsls	r3, r3, #26
 8003c9e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d109      	bne.n	8003cc2 <HAL_ADC_ConfigChannel+0x612>
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	0e9b      	lsrs	r3, r3, #26
 8003cb4:	3301      	adds	r3, #1
 8003cb6:	f003 031f 	and.w	r3, r3, #31
 8003cba:	2101      	movs	r1, #1
 8003cbc:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc0:	e017      	b.n	8003cf2 <HAL_ADC_ConfigChannel+0x642>
 8003cc2:	683b      	ldr	r3, [r7, #0]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cc8:	6a3b      	ldr	r3, [r7, #32]
 8003cca:	fa93 f3a3 	rbit	r3, r3
 8003cce:	61fb      	str	r3, [r7, #28]
  return result;
 8003cd0:	69fb      	ldr	r3, [r7, #28]
 8003cd2:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003cd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d101      	bne.n	8003cde <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8003cda:	2320      	movs	r3, #32
 8003cdc:	e003      	b.n	8003ce6 <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8003cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ce0:	fab3 f383 	clz	r3, r3
 8003ce4:	b2db      	uxtb	r3, r3
 8003ce6:	3301      	adds	r3, #1
 8003ce8:	f003 031f 	and.w	r3, r3, #31
 8003cec:	2101      	movs	r1, #1
 8003cee:	fa01 f303 	lsl.w	r3, r1, r3
 8003cf2:	ea42 0103 	orr.w	r1, r2, r3
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d10d      	bne.n	8003d1e <HAL_ADC_ConfigChannel+0x66e>
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	0e9b      	lsrs	r3, r3, #26
 8003d08:	3301      	adds	r3, #1
 8003d0a:	f003 021f 	and.w	r2, r3, #31
 8003d0e:	4613      	mov	r3, r2
 8003d10:	005b      	lsls	r3, r3, #1
 8003d12:	4413      	add	r3, r2
 8003d14:	3b1e      	subs	r3, #30
 8003d16:	051b      	lsls	r3, r3, #20
 8003d18:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d1c:	e01e      	b.n	8003d5c <HAL_ADC_ConfigChannel+0x6ac>
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d24:	697b      	ldr	r3, [r7, #20]
 8003d26:	fa93 f3a3 	rbit	r3, r3
 8003d2a:	613b      	str	r3, [r7, #16]
  return result;
 8003d2c:	693b      	ldr	r3, [r7, #16]
 8003d2e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8003d30:	69bb      	ldr	r3, [r7, #24]
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d104      	bne.n	8003d40 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8003d36:	2320      	movs	r3, #32
 8003d38:	e006      	b.n	8003d48 <HAL_ADC_ConfigChannel+0x698>
 8003d3a:	bf00      	nop
 8003d3c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8003d40:	69bb      	ldr	r3, [r7, #24]
 8003d42:	fab3 f383 	clz	r3, r3
 8003d46:	b2db      	uxtb	r3, r3
 8003d48:	3301      	adds	r3, #1
 8003d4a:	f003 021f 	and.w	r2, r3, #31
 8003d4e:	4613      	mov	r3, r2
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	4413      	add	r3, r2
 8003d54:	3b1e      	subs	r3, #30
 8003d56:	051b      	lsls	r3, r3, #20
 8003d58:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003d5c:	430b      	orrs	r3, r1
 8003d5e:	683a      	ldr	r2, [r7, #0]
 8003d60:	6892      	ldr	r2, [r2, #8]
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fe ff87 	bl	8002c76 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	681a      	ldr	r2, [r3, #0]
 8003d6c:	4b3f      	ldr	r3, [pc, #252]	; (8003e6c <HAL_ADC_ConfigChannel+0x7bc>)
 8003d6e:	4013      	ands	r3, r2
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d071      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003d74:	483e      	ldr	r0, [pc, #248]	; (8003e70 <HAL_ADC_ConfigChannel+0x7c0>)
 8003d76:	f7fe fe93 	bl	8002aa0 <LL_ADC_GetCommonPathInternalCh>
 8003d7a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003d7e:	683b      	ldr	r3, [r7, #0]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a3c      	ldr	r2, [pc, #240]	; (8003e74 <HAL_ADC_ConfigChannel+0x7c4>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d004      	beq.n	8003d92 <HAL_ADC_ConfigChannel+0x6e2>
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a3a      	ldr	r2, [pc, #232]	; (8003e78 <HAL_ADC_ConfigChannel+0x7c8>)
 8003d8e:	4293      	cmp	r3, r2
 8003d90:	d127      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003d92:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003d96:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d121      	bne.n	8003de2 <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003da6:	d157      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003da8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003dac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003db0:	4619      	mov	r1, r3
 8003db2:	482f      	ldr	r0, [pc, #188]	; (8003e70 <HAL_ADC_ConfigChannel+0x7c0>)
 8003db4:	f7fe fe61 	bl	8002a7a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003db8:	4b30      	ldr	r3, [pc, #192]	; (8003e7c <HAL_ADC_ConfigChannel+0x7cc>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	099b      	lsrs	r3, r3, #6
 8003dbe:	4a30      	ldr	r2, [pc, #192]	; (8003e80 <HAL_ADC_ConfigChannel+0x7d0>)
 8003dc0:	fba2 2303 	umull	r2, r3, r2, r3
 8003dc4:	099b      	lsrs	r3, r3, #6
 8003dc6:	1c5a      	adds	r2, r3, #1
 8003dc8:	4613      	mov	r3, r2
 8003dca:	005b      	lsls	r3, r3, #1
 8003dcc:	4413      	add	r3, r2
 8003dce:	009b      	lsls	r3, r3, #2
 8003dd0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dd2:	e002      	b.n	8003dda <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d1f9      	bne.n	8003dd4 <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003de0:	e03a      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	4a27      	ldr	r2, [pc, #156]	; (8003e84 <HAL_ADC_ConfigChannel+0x7d4>)
 8003de8:	4293      	cmp	r3, r2
 8003dea:	d113      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x764>
 8003dec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003df0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d10d      	bne.n	8003e14 <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4a22      	ldr	r2, [pc, #136]	; (8003e88 <HAL_ADC_ConfigChannel+0x7d8>)
 8003dfe:	4293      	cmp	r3, r2
 8003e00:	d02a      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e02:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e0a:	4619      	mov	r1, r3
 8003e0c:	4818      	ldr	r0, [pc, #96]	; (8003e70 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e0e:	f7fe fe34 	bl	8002a7a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003e12:	e021      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a1c      	ldr	r2, [pc, #112]	; (8003e8c <HAL_ADC_ConfigChannel+0x7dc>)
 8003e1a:	4293      	cmp	r3, r2
 8003e1c:	d11c      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003e1e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d116      	bne.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a16      	ldr	r2, [pc, #88]	; (8003e88 <HAL_ADC_ConfigChannel+0x7d8>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d011      	beq.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003e34:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003e38:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	480c      	ldr	r0, [pc, #48]	; (8003e70 <HAL_ADC_ConfigChannel+0x7c0>)
 8003e40:	f7fe fe1b 	bl	8002a7a <LL_ADC_SetCommonPathInternalCh>
 8003e44:	e008      	b.n	8003e58 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e4a:	f043 0220 	orr.w	r2, r3, #32
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003e52:	2301      	movs	r3, #1
 8003e54:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003e60:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003e64:	4618      	mov	r0, r3
 8003e66:	37d8      	adds	r7, #216	; 0xd8
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bd80      	pop	{r7, pc}
 8003e6c:	80080000 	.word	0x80080000
 8003e70:	50000300 	.word	0x50000300
 8003e74:	c3210000 	.word	0xc3210000
 8003e78:	90c00010 	.word	0x90c00010
 8003e7c:	20000000 	.word	0x20000000
 8003e80:	053e2d63 	.word	0x053e2d63
 8003e84:	c7520000 	.word	0xc7520000
 8003e88:	50000100 	.word	0x50000100
 8003e8c:	cb840000 	.word	0xcb840000

08003e90 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003e90:	b580      	push	{r7, lr}
 8003e92:	b084      	sub	sp, #16
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	f7fe ffbb 	bl	8002e18 <LL_ADC_IsEnabled>
 8003ea2:	4603      	mov	r3, r0
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d14d      	bne.n	8003f44 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	689a      	ldr	r2, [r3, #8]
 8003eae:	4b28      	ldr	r3, [pc, #160]	; (8003f50 <ADC_Enable+0xc0>)
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00d      	beq.n	8003ed2 <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eba:	f043 0210 	orr.w	r2, r3, #16
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ec6:	f043 0201 	orr.w	r2, r3, #1
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003ece:	2301      	movs	r3, #1
 8003ed0:	e039      	b.n	8003f46 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4618      	mov	r0, r3
 8003ed8:	f7fe ff8a 	bl	8002df0 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003edc:	f7fe fd8c 	bl	80029f8 <HAL_GetTick>
 8003ee0:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003ee2:	e028      	b.n	8003f36 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fe ff95 	bl	8002e18 <LL_ADC_IsEnabled>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d104      	bne.n	8003efe <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7fe ff79 	bl	8002df0 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003efe:	f7fe fd7b 	bl	80029f8 <HAL_GetTick>
 8003f02:	4602      	mov	r2, r0
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	1ad3      	subs	r3, r2, r3
 8003f08:	2b02      	cmp	r3, #2
 8003f0a:	d914      	bls.n	8003f36 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b01      	cmp	r3, #1
 8003f18:	d00d      	beq.n	8003f36 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f1e:	f043 0210 	orr.w	r2, r3, #16
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f043 0201 	orr.w	r2, r3, #1
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e007      	b.n	8003f46 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f003 0301 	and.w	r3, r3, #1
 8003f40:	2b01      	cmp	r3, #1
 8003f42:	d1cf      	bne.n	8003ee4 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	8000003f 	.word	0x8000003f

08003f54 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f60:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f66:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d14b      	bne.n	8004006 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f72:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f003 0308 	and.w	r3, r3, #8
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d021      	beq.n	8003fcc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4618      	mov	r0, r3
 8003f8e:	f7fe fe33 	bl	8002bf8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d032      	beq.n	8003ffe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	68db      	ldr	r3, [r3, #12]
 8003f9e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d12b      	bne.n	8003ffe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003faa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d11f      	bne.n	8003ffe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fc2:	f043 0201 	orr.w	r2, r3, #1
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	65da      	str	r2, [r3, #92]	; 0x5c
 8003fca:	e018      	b.n	8003ffe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	68db      	ldr	r3, [r3, #12]
 8003fd2:	f003 0302 	and.w	r3, r3, #2
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d111      	bne.n	8003ffe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fde:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fea:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d105      	bne.n	8003ffe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003ffe:	68f8      	ldr	r0, [r7, #12]
 8004000:	f7ff fb37 	bl	8003672 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8004004:	e00e      	b.n	8004024 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8004012:	68f8      	ldr	r0, [r7, #12]
 8004014:	f7ff fb41 	bl	800369a <HAL_ADC_ErrorCallback>
}
 8004018:	e004      	b.n	8004024 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800401e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	4798      	blx	r3
}
 8004024:	bf00      	nop
 8004026:	3710      	adds	r7, #16
 8004028:	46bd      	mov	sp, r7
 800402a:	bd80      	pop	{r7, pc}

0800402c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004038:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f7ff fb23 	bl	8003686 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004040:	bf00      	nop
 8004042:	3710      	adds	r7, #16
 8004044:	46bd      	mov	sp, r7
 8004046:	bd80      	pop	{r7, pc}

08004048 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8004048:	b580      	push	{r7, lr}
 800404a:	b084      	sub	sp, #16
 800404c:	af00      	add	r7, sp, #0
 800404e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004054:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800405a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004066:	f043 0204 	orr.w	r2, r3, #4
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800406e:	68f8      	ldr	r0, [r7, #12]
 8004070:	f7ff fb13 	bl	800369a <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8004074:	bf00      	nop
 8004076:	3710      	adds	r7, #16
 8004078:	46bd      	mov	sp, r7
 800407a:	bd80      	pop	{r7, pc}

0800407c <LL_ADC_IsEnabled>:
{
 800407c:	b480      	push	{r7}
 800407e:	b083      	sub	sp, #12
 8004080:	af00      	add	r7, sp, #0
 8004082:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0301 	and.w	r3, r3, #1
 800408c:	2b01      	cmp	r3, #1
 800408e:	d101      	bne.n	8004094 <LL_ADC_IsEnabled+0x18>
 8004090:	2301      	movs	r3, #1
 8004092:	e000      	b.n	8004096 <LL_ADC_IsEnabled+0x1a>
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	370c      	adds	r7, #12
 800409a:	46bd      	mov	sp, r7
 800409c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a0:	4770      	bx	lr

080040a2 <LL_ADC_REG_IsConversionOngoing>:
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	689b      	ldr	r3, [r3, #8]
 80040ae:	f003 0304 	and.w	r3, r3, #4
 80040b2:	2b04      	cmp	r3, #4
 80040b4:	d101      	bne.n	80040ba <LL_ADC_REG_IsConversionOngoing+0x18>
 80040b6:	2301      	movs	r3, #1
 80040b8:	e000      	b.n	80040bc <LL_ADC_REG_IsConversionOngoing+0x1a>
 80040ba:	2300      	movs	r3, #0
}
 80040bc:	4618      	mov	r0, r3
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 80040c8:	b590      	push	{r4, r7, lr}
 80040ca:	b0a1      	sub	sp, #132	; 0x84
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
 80040d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d2:	2300      	movs	r3, #0
 80040d4:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e08b      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 80040ee:	2300      	movs	r3, #0
 80040f0:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 80040f2:	2300      	movs	r3, #0
 80040f4:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040fe:	d102      	bne.n	8004106 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8004100:	4b41      	ldr	r3, [pc, #260]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8004102:	60bb      	str	r3, [r7, #8]
 8004104:	e001      	b.n	800410a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8004106:	2300      	movs	r3, #0
 8004108:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d10b      	bne.n	8004128 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	f043 0220 	orr.w	r2, r3, #32
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2200      	movs	r2, #0
 8004120:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8004124:	2301      	movs	r3, #1
 8004126:	e06a      	b.n	80041fe <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4618      	mov	r0, r3
 800412c:	f7ff ffb9 	bl	80040a2 <LL_ADC_REG_IsConversionOngoing>
 8004130:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ffb3 	bl	80040a2 <LL_ADC_REG_IsConversionOngoing>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d14c      	bne.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004142:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004144:	2b00      	cmp	r3, #0
 8004146:	d149      	bne.n	80041dc <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004148:	4b30      	ldr	r3, [pc, #192]	; (800420c <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 800414a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d028      	beq.n	80041a6 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004154:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004156:	689b      	ldr	r3, [r3, #8]
 8004158:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	6859      	ldr	r1, [r3, #4]
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004166:	035b      	lsls	r3, r3, #13
 8004168:	430b      	orrs	r3, r1
 800416a:	431a      	orrs	r2, r3
 800416c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800416e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004170:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004174:	f7ff ff82 	bl	800407c <LL_ADC_IsEnabled>
 8004178:	4604      	mov	r4, r0
 800417a:	4823      	ldr	r0, [pc, #140]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 800417c:	f7ff ff7e 	bl	800407c <LL_ADC_IsEnabled>
 8004180:	4603      	mov	r3, r0
 8004182:	4323      	orrs	r3, r4
 8004184:	2b00      	cmp	r3, #0
 8004186:	d133      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8004188:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800418a:	689b      	ldr	r3, [r3, #8]
 800418c:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8004190:	f023 030f 	bic.w	r3, r3, #15
 8004194:	683a      	ldr	r2, [r7, #0]
 8004196:	6811      	ldr	r1, [r2, #0]
 8004198:	683a      	ldr	r2, [r7, #0]
 800419a:	6892      	ldr	r2, [r2, #8]
 800419c:	430a      	orrs	r2, r1
 800419e:	431a      	orrs	r2, r3
 80041a0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a2:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041a4:	e024      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80041a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041a8:	689b      	ldr	r3, [r3, #8]
 80041aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041b0:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041b2:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 80041b6:	f7ff ff61 	bl	800407c <LL_ADC_IsEnabled>
 80041ba:	4604      	mov	r4, r0
 80041bc:	4812      	ldr	r0, [pc, #72]	; (8004208 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 80041be:	f7ff ff5d 	bl	800407c <LL_ADC_IsEnabled>
 80041c2:	4603      	mov	r3, r0
 80041c4:	4323      	orrs	r3, r4
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d112      	bne.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 80041ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80041d2:	f023 030f 	bic.w	r3, r3, #15
 80041d6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80041d8:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041da:	e009      	b.n	80041f0 <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041e0:	f043 0220 	orr.w	r2, r3, #32
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 80041ee:	e000      	b.n	80041f2 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80041f0:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80041fa:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3784      	adds	r7, #132	; 0x84
 8004202:	46bd      	mov	sp, r7
 8004204:	bd90      	pop	{r4, r7, pc}
 8004206:	bf00      	nop
 8004208:	50000100 	.word	0x50000100
 800420c:	50000300 	.word	0x50000300

08004210 <__NVIC_SetPriorityGrouping>:
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	f003 0307 	and.w	r3, r3, #7
 800421e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004220:	4b0c      	ldr	r3, [pc, #48]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004226:	68ba      	ldr	r2, [r7, #8]
 8004228:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800422c:	4013      	ands	r3, r2
 800422e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004238:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800423c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004242:	4a04      	ldr	r2, [pc, #16]	; (8004254 <__NVIC_SetPriorityGrouping+0x44>)
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	60d3      	str	r3, [r2, #12]
}
 8004248:	bf00      	nop
 800424a:	3714      	adds	r7, #20
 800424c:	46bd      	mov	sp, r7
 800424e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004252:	4770      	bx	lr
 8004254:	e000ed00 	.word	0xe000ed00

08004258 <__NVIC_GetPriorityGrouping>:
{
 8004258:	b480      	push	{r7}
 800425a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800425c:	4b04      	ldr	r3, [pc, #16]	; (8004270 <__NVIC_GetPriorityGrouping+0x18>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	0a1b      	lsrs	r3, r3, #8
 8004262:	f003 0307 	and.w	r3, r3, #7
}
 8004266:	4618      	mov	r0, r3
 8004268:	46bd      	mov	sp, r7
 800426a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426e:	4770      	bx	lr
 8004270:	e000ed00 	.word	0xe000ed00

08004274 <__NVIC_EnableIRQ>:
{
 8004274:	b480      	push	{r7}
 8004276:	b083      	sub	sp, #12
 8004278:	af00      	add	r7, sp, #0
 800427a:	4603      	mov	r3, r0
 800427c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004282:	2b00      	cmp	r3, #0
 8004284:	db0b      	blt.n	800429e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004286:	79fb      	ldrb	r3, [r7, #7]
 8004288:	f003 021f 	and.w	r2, r3, #31
 800428c:	4907      	ldr	r1, [pc, #28]	; (80042ac <__NVIC_EnableIRQ+0x38>)
 800428e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	2001      	movs	r0, #1
 8004296:	fa00 f202 	lsl.w	r2, r0, r2
 800429a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800429e:	bf00      	nop
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr
 80042aa:	bf00      	nop
 80042ac:	e000e100 	.word	0xe000e100

080042b0 <__NVIC_SetPriority>:
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	4603      	mov	r3, r0
 80042b8:	6039      	str	r1, [r7, #0]
 80042ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	db0a      	blt.n	80042da <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	b2da      	uxtb	r2, r3
 80042c8:	490c      	ldr	r1, [pc, #48]	; (80042fc <__NVIC_SetPriority+0x4c>)
 80042ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042ce:	0112      	lsls	r2, r2, #4
 80042d0:	b2d2      	uxtb	r2, r2
 80042d2:	440b      	add	r3, r1
 80042d4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80042d8:	e00a      	b.n	80042f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	b2da      	uxtb	r2, r3
 80042de:	4908      	ldr	r1, [pc, #32]	; (8004300 <__NVIC_SetPriority+0x50>)
 80042e0:	79fb      	ldrb	r3, [r7, #7]
 80042e2:	f003 030f 	and.w	r3, r3, #15
 80042e6:	3b04      	subs	r3, #4
 80042e8:	0112      	lsls	r2, r2, #4
 80042ea:	b2d2      	uxtb	r2, r2
 80042ec:	440b      	add	r3, r1
 80042ee:	761a      	strb	r2, [r3, #24]
}
 80042f0:	bf00      	nop
 80042f2:	370c      	adds	r7, #12
 80042f4:	46bd      	mov	sp, r7
 80042f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fa:	4770      	bx	lr
 80042fc:	e000e100 	.word	0xe000e100
 8004300:	e000ed00 	.word	0xe000ed00

08004304 <NVIC_EncodePriority>:
{
 8004304:	b480      	push	{r7}
 8004306:	b089      	sub	sp, #36	; 0x24
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	f003 0307 	and.w	r3, r3, #7
 8004316:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004318:	69fb      	ldr	r3, [r7, #28]
 800431a:	f1c3 0307 	rsb	r3, r3, #7
 800431e:	2b04      	cmp	r3, #4
 8004320:	bf28      	it	cs
 8004322:	2304      	movcs	r3, #4
 8004324:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004326:	69fb      	ldr	r3, [r7, #28]
 8004328:	3304      	adds	r3, #4
 800432a:	2b06      	cmp	r3, #6
 800432c:	d902      	bls.n	8004334 <NVIC_EncodePriority+0x30>
 800432e:	69fb      	ldr	r3, [r7, #28]
 8004330:	3b03      	subs	r3, #3
 8004332:	e000      	b.n	8004336 <NVIC_EncodePriority+0x32>
 8004334:	2300      	movs	r3, #0
 8004336:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004338:	f04f 32ff 	mov.w	r2, #4294967295
 800433c:	69bb      	ldr	r3, [r7, #24]
 800433e:	fa02 f303 	lsl.w	r3, r2, r3
 8004342:	43da      	mvns	r2, r3
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	401a      	ands	r2, r3
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800434c:	f04f 31ff 	mov.w	r1, #4294967295
 8004350:	697b      	ldr	r3, [r7, #20]
 8004352:	fa01 f303 	lsl.w	r3, r1, r3
 8004356:	43d9      	mvns	r1, r3
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800435c:	4313      	orrs	r3, r2
}
 800435e:	4618      	mov	r0, r3
 8004360:	3724      	adds	r7, #36	; 0x24
 8004362:	46bd      	mov	sp, r7
 8004364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004368:	4770      	bx	lr
	...

0800436c <SysTick_Config>:
{
 800436c:	b580      	push	{r7, lr}
 800436e:	b082      	sub	sp, #8
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	3b01      	subs	r3, #1
 8004378:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800437c:	d301      	bcc.n	8004382 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800437e:	2301      	movs	r3, #1
 8004380:	e00f      	b.n	80043a2 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004382:	4a0a      	ldr	r2, [pc, #40]	; (80043ac <SysTick_Config+0x40>)
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	3b01      	subs	r3, #1
 8004388:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800438a:	210f      	movs	r1, #15
 800438c:	f04f 30ff 	mov.w	r0, #4294967295
 8004390:	f7ff ff8e 	bl	80042b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004394:	4b05      	ldr	r3, [pc, #20]	; (80043ac <SysTick_Config+0x40>)
 8004396:	2200      	movs	r2, #0
 8004398:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800439a:	4b04      	ldr	r3, [pc, #16]	; (80043ac <SysTick_Config+0x40>)
 800439c:	2207      	movs	r2, #7
 800439e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 80043a0:	2300      	movs	r3, #0
}
 80043a2:	4618      	mov	r0, r3
 80043a4:	3708      	adds	r7, #8
 80043a6:	46bd      	mov	sp, r7
 80043a8:	bd80      	pop	{r7, pc}
 80043aa:	bf00      	nop
 80043ac:	e000e010 	.word	0xe000e010

080043b0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b082      	sub	sp, #8
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043b8:	6878      	ldr	r0, [r7, #4]
 80043ba:	f7ff ff29 	bl	8004210 <__NVIC_SetPriorityGrouping>
}
 80043be:	bf00      	nop
 80043c0:	3708      	adds	r7, #8
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043c6:	b580      	push	{r7, lr}
 80043c8:	b086      	sub	sp, #24
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	4603      	mov	r3, r0
 80043ce:	60b9      	str	r1, [r7, #8]
 80043d0:	607a      	str	r2, [r7, #4]
 80043d2:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80043d4:	f7ff ff40 	bl	8004258 <__NVIC_GetPriorityGrouping>
 80043d8:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043da:	687a      	ldr	r2, [r7, #4]
 80043dc:	68b9      	ldr	r1, [r7, #8]
 80043de:	6978      	ldr	r0, [r7, #20]
 80043e0:	f7ff ff90 	bl	8004304 <NVIC_EncodePriority>
 80043e4:	4602      	mov	r2, r0
 80043e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ea:	4611      	mov	r1, r2
 80043ec:	4618      	mov	r0, r3
 80043ee:	f7ff ff5f 	bl	80042b0 <__NVIC_SetPriority>
}
 80043f2:	bf00      	nop
 80043f4:	3718      	adds	r7, #24
 80043f6:	46bd      	mov	sp, r7
 80043f8:	bd80      	pop	{r7, pc}

080043fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043fa:	b580      	push	{r7, lr}
 80043fc:	b082      	sub	sp, #8
 80043fe:	af00      	add	r7, sp, #0
 8004400:	4603      	mov	r3, r0
 8004402:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004404:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004408:	4618      	mov	r0, r3
 800440a:	f7ff ff33 	bl	8004274 <__NVIC_EnableIRQ>
}
 800440e:	bf00      	nop
 8004410:	3708      	adds	r7, #8
 8004412:	46bd      	mov	sp, r7
 8004414:	bd80      	pop	{r7, pc}

08004416 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004416:	b580      	push	{r7, lr}
 8004418:	b082      	sub	sp, #8
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800441e:	6878      	ldr	r0, [r7, #4]
 8004420:	f7ff ffa4 	bl	800436c <SysTick_Config>
 8004424:	4603      	mov	r3, r0
}
 8004426:	4618      	mov	r0, r3
 8004428:	3708      	adds	r7, #8
 800442a:	46bd      	mov	sp, r7
 800442c:	bd80      	pop	{r7, pc}
	...

08004430 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004430:	b580      	push	{r7, lr}
 8004432:	b084      	sub	sp, #16
 8004434:	af00      	add	r7, sp, #0
 8004436:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d101      	bne.n	8004442 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800443e:	2301      	movs	r3, #1
 8004440:	e08d      	b.n	800455e <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	461a      	mov	r2, r3
 8004448:	4b47      	ldr	r3, [pc, #284]	; (8004568 <HAL_DMA_Init+0x138>)
 800444a:	429a      	cmp	r2, r3
 800444c:	d80f      	bhi.n	800446e <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	461a      	mov	r2, r3
 8004454:	4b45      	ldr	r3, [pc, #276]	; (800456c <HAL_DMA_Init+0x13c>)
 8004456:	4413      	add	r3, r2
 8004458:	4a45      	ldr	r2, [pc, #276]	; (8004570 <HAL_DMA_Init+0x140>)
 800445a:	fba2 2303 	umull	r2, r3, r2, r3
 800445e:	091b      	lsrs	r3, r3, #4
 8004460:	009a      	lsls	r2, r3, #2
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	4a42      	ldr	r2, [pc, #264]	; (8004574 <HAL_DMA_Init+0x144>)
 800446a:	641a      	str	r2, [r3, #64]	; 0x40
 800446c:	e00e      	b.n	800448c <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	461a      	mov	r2, r3
 8004474:	4b40      	ldr	r3, [pc, #256]	; (8004578 <HAL_DMA_Init+0x148>)
 8004476:	4413      	add	r3, r2
 8004478:	4a3d      	ldr	r2, [pc, #244]	; (8004570 <HAL_DMA_Init+0x140>)
 800447a:	fba2 2303 	umull	r2, r3, r2, r3
 800447e:	091b      	lsrs	r3, r3, #4
 8004480:	009a      	lsls	r2, r3, #2
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a3c      	ldr	r2, [pc, #240]	; (800457c <HAL_DMA_Init+0x14c>)
 800448a:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	2202      	movs	r2, #2
 8004490:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80044a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044a6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80044b0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	691b      	ldr	r3, [r3, #16]
 80044b6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044bc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044c8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	6a1b      	ldr	r3, [r3, #32]
 80044ce:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 80044de:	6878      	ldr	r0, [r7, #4]
 80044e0:	f000 f9b6 	bl	8004850 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	689b      	ldr	r3, [r3, #8]
 80044e8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80044ec:	d102      	bne.n	80044f4 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685a      	ldr	r2, [r3, #4]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fc:	b2d2      	uxtb	r2, r2
 80044fe:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004504:	687a      	ldr	r2, [r7, #4]
 8004506:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004508:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d010      	beq.n	8004534 <HAL_DMA_Init+0x104>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	685b      	ldr	r3, [r3, #4]
 8004516:	2b04      	cmp	r3, #4
 8004518:	d80c      	bhi.n	8004534 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800451a:	6878      	ldr	r0, [r7, #4]
 800451c:	f000 f9d6 	bl	80048cc <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	2200      	movs	r2, #0
 8004526:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004530:	605a      	str	r2, [r3, #4]
 8004532:	e008      	b.n	8004546 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	2200      	movs	r2, #0
 8004538:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	2200      	movs	r2, #0
 800454a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2201      	movs	r2, #1
 8004550:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800455c:	2300      	movs	r3, #0
}
 800455e:	4618      	mov	r0, r3
 8004560:	3710      	adds	r7, #16
 8004562:	46bd      	mov	sp, r7
 8004564:	bd80      	pop	{r7, pc}
 8004566:	bf00      	nop
 8004568:	40020407 	.word	0x40020407
 800456c:	bffdfff8 	.word	0xbffdfff8
 8004570:	cccccccd 	.word	0xcccccccd
 8004574:	40020000 	.word	0x40020000
 8004578:	bffdfbf8 	.word	0xbffdfbf8
 800457c:	40020400 	.word	0x40020400

08004580 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b086      	sub	sp, #24
 8004584:	af00      	add	r7, sp, #0
 8004586:	60f8      	str	r0, [r7, #12]
 8004588:	60b9      	str	r1, [r7, #8]
 800458a:	607a      	str	r2, [r7, #4]
 800458c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800458e:	2300      	movs	r3, #0
 8004590:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8004598:	2b01      	cmp	r3, #1
 800459a:	d101      	bne.n	80045a0 <HAL_DMA_Start_IT+0x20>
 800459c:	2302      	movs	r3, #2
 800459e:	e066      	b.n	800466e <HAL_DMA_Start_IT+0xee>
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	2201      	movs	r2, #1
 80045a4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045ae:	b2db      	uxtb	r3, r3
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d155      	bne.n	8004660 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	2202      	movs	r2, #2
 80045b8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2200      	movs	r2, #0
 80045c0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	f022 0201 	bic.w	r2, r2, #1
 80045d0:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80045d2:	683b      	ldr	r3, [r7, #0]
 80045d4:	687a      	ldr	r2, [r7, #4]
 80045d6:	68b9      	ldr	r1, [r7, #8]
 80045d8:	68f8      	ldr	r0, [r7, #12]
 80045da:	f000 f8fb 	bl	80047d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d008      	beq.n	80045f8 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f042 020e 	orr.w	r2, r2, #14
 80045f4:	601a      	str	r2, [r3, #0]
 80045f6:	e00f      	b.n	8004618 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	681a      	ldr	r2, [r3, #0]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	f022 0204 	bic.w	r2, r2, #4
 8004606:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	681a      	ldr	r2, [r3, #0]
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	f042 020a 	orr.w	r2, r2, #10
 8004616:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004622:	2b00      	cmp	r3, #0
 8004624:	d007      	beq.n	8004636 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800462a:	681a      	ldr	r2, [r3, #0]
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004634:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800463a:	2b00      	cmp	r3, #0
 800463c:	d007      	beq.n	800464e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004642:	681a      	ldr	r2, [r3, #0]
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004648:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800464c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	681a      	ldr	r2, [r3, #0]
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f042 0201 	orr.w	r2, r2, #1
 800465c:	601a      	str	r2, [r3, #0]
 800465e:	e005      	b.n	800466c <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	2200      	movs	r2, #0
 8004664:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004668:	2302      	movs	r3, #2
 800466a:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 800466c:	7dfb      	ldrb	r3, [r7, #23]
}
 800466e:	4618      	mov	r0, r3
 8004670:	3718      	adds	r7, #24
 8004672:	46bd      	mov	sp, r7
 8004674:	bd80      	pop	{r7, pc}

08004676 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004676:	b580      	push	{r7, lr}
 8004678:	b084      	sub	sp, #16
 800467a:	af00      	add	r7, sp, #0
 800467c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004692:	f003 031f 	and.w	r3, r3, #31
 8004696:	2204      	movs	r2, #4
 8004698:	409a      	lsls	r2, r3
 800469a:	68fb      	ldr	r3, [r7, #12]
 800469c:	4013      	ands	r3, r2
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d026      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7a>
 80046a2:	68bb      	ldr	r3, [r7, #8]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d021      	beq.n	80046f0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	f003 0320 	and.w	r3, r3, #32
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d107      	bne.n	80046ca <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	681a      	ldr	r2, [r3, #0]
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f022 0204 	bic.w	r2, r2, #4
 80046c8:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046ce:	f003 021f 	and.w	r2, r3, #31
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046d6:	2104      	movs	r1, #4
 80046d8:	fa01 f202 	lsl.w	r2, r1, r2
 80046dc:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d071      	beq.n	80047ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046ea:	6878      	ldr	r0, [r7, #4]
 80046ec:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80046ee:	e06c      	b.n	80047ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046f4:	f003 031f 	and.w	r3, r3, #31
 80046f8:	2202      	movs	r2, #2
 80046fa:	409a      	lsls	r2, r3
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4013      	ands	r3, r2
 8004700:	2b00      	cmp	r3, #0
 8004702:	d02e      	beq.n	8004762 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	f003 0302 	and.w	r3, r3, #2
 800470a:	2b00      	cmp	r3, #0
 800470c:	d029      	beq.n	8004762 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	f003 0320 	and.w	r3, r3, #32
 8004718:	2b00      	cmp	r3, #0
 800471a:	d10b      	bne.n	8004734 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	681a      	ldr	r2, [r3, #0]
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f022 020a 	bic.w	r2, r2, #10
 800472a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004738:	f003 021f 	and.w	r2, r3, #31
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004740:	2102      	movs	r1, #2
 8004742:	fa01 f202 	lsl.w	r2, r1, r2
 8004746:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	2200      	movs	r2, #0
 800474c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004754:	2b00      	cmp	r3, #0
 8004756:	d038      	beq.n	80047ca <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475c:	6878      	ldr	r0, [r7, #4]
 800475e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004760:	e033      	b.n	80047ca <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	2208      	movs	r2, #8
 800476c:	409a      	lsls	r2, r3
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	4013      	ands	r3, r2
 8004772:	2b00      	cmp	r3, #0
 8004774:	d02a      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	f003 0308 	and.w	r3, r3, #8
 800477c:	2b00      	cmp	r3, #0
 800477e:	d025      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	681b      	ldr	r3, [r3, #0]
 8004784:	681a      	ldr	r2, [r3, #0]
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f022 020e 	bic.w	r2, r2, #14
 800478e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004794:	f003 021f 	and.w	r2, r3, #31
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479c:	2101      	movs	r1, #1
 800479e:	fa01 f202 	lsl.w	r2, r1, r2
 80047a2:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	2201      	movs	r2, #1
 80047ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	2200      	movs	r2, #0
 80047b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d004      	beq.n	80047cc <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047c6:	6878      	ldr	r0, [r7, #4]
 80047c8:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80047ca:	bf00      	nop
 80047cc:	bf00      	nop
}
 80047ce:	3710      	adds	r7, #16
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b085      	sub	sp, #20
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80047e6:	68fa      	ldr	r2, [r7, #12]
 80047e8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80047ea:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d004      	beq.n	80047fe <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80047fe:	68fb      	ldr	r3, [r7, #12]
 8004800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004802:	f003 021f 	and.w	r2, r3, #31
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	2101      	movs	r1, #1
 800480c:	fa01 f202 	lsl.w	r2, r1, r2
 8004810:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	683a      	ldr	r2, [r7, #0]
 8004818:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	2b10      	cmp	r3, #16
 8004820:	d108      	bne.n	8004834 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	687a      	ldr	r2, [r7, #4]
 8004828:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	68ba      	ldr	r2, [r7, #8]
 8004830:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004832:	e007      	b.n	8004844 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68ba      	ldr	r2, [r7, #8]
 800483a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	687a      	ldr	r2, [r7, #4]
 8004842:	60da      	str	r2, [r3, #12]
}
 8004844:	bf00      	nop
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr

08004850 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004850:	b480      	push	{r7}
 8004852:	b087      	sub	sp, #28
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	4b16      	ldr	r3, [pc, #88]	; (80048b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004860:	429a      	cmp	r2, r3
 8004862:	d802      	bhi.n	800486a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004864:	4b15      	ldr	r3, [pc, #84]	; (80048bc <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004866:	617b      	str	r3, [r7, #20]
 8004868:	e001      	b.n	800486e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 800486a:	4b15      	ldr	r3, [pc, #84]	; (80048c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800486c:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800486e:	697b      	ldr	r3, [r7, #20]
 8004870:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	b2db      	uxtb	r3, r3
 8004878:	3b08      	subs	r3, #8
 800487a:	4a12      	ldr	r2, [pc, #72]	; (80048c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800487c:	fba2 2303 	umull	r2, r3, r2, r3
 8004880:	091b      	lsrs	r3, r3, #4
 8004882:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004888:	089b      	lsrs	r3, r3, #2
 800488a:	009a      	lsls	r2, r3, #2
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4413      	add	r3, r2
 8004890:	461a      	mov	r2, r3
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	4a0b      	ldr	r2, [pc, #44]	; (80048c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800489a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	f003 031f 	and.w	r3, r3, #31
 80048a2:	2201      	movs	r2, #1
 80048a4:	409a      	lsls	r2, r3
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	651a      	str	r2, [r3, #80]	; 0x50
}
 80048aa:	bf00      	nop
 80048ac:	371c      	adds	r7, #28
 80048ae:	46bd      	mov	sp, r7
 80048b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b4:	4770      	bx	lr
 80048b6:	bf00      	nop
 80048b8:	40020407 	.word	0x40020407
 80048bc:	40020800 	.word	0x40020800
 80048c0:	40020820 	.word	0x40020820
 80048c4:	cccccccd 	.word	0xcccccccd
 80048c8:	40020880 	.word	0x40020880

080048cc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b085      	sub	sp, #20
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	b2db      	uxtb	r3, r3
 80048da:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80048dc:	68fa      	ldr	r2, [r7, #12]
 80048de:	4b0b      	ldr	r3, [pc, #44]	; (800490c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80048e0:	4413      	add	r3, r2
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	461a      	mov	r2, r3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	4a08      	ldr	r2, [pc, #32]	; (8004910 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80048ee:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	3b01      	subs	r3, #1
 80048f4:	f003 031f 	and.w	r3, r3, #31
 80048f8:	2201      	movs	r2, #1
 80048fa:	409a      	lsls	r2, r3
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490a:	4770      	bx	lr
 800490c:	1000823f 	.word	0x1000823f
 8004910:	40020940 	.word	0x40020940

08004914 <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b084      	sub	sp, #16
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d101      	bne.n	8004926 <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 8004922:	2301      	movs	r3, #1
 8004924:	e147      	b.n	8004bb6 <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800492c:	b2db      	uxtb	r3, r3
 800492e:	2b00      	cmp	r3, #0
 8004930:	d106      	bne.n	8004940 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	2200      	movs	r2, #0
 8004936:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 800493a:	6878      	ldr	r0, [r7, #4]
 800493c:	f7fc fb44 	bl	8000fc8 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	699a      	ldr	r2, [r3, #24]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 0210 	bic.w	r2, r2, #16
 800494e:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004950:	f7fe f852 	bl	80029f8 <HAL_GetTick>
 8004954:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8004956:	e012      	b.n	800497e <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8004958:	f7fe f84e 	bl	80029f8 <HAL_GetTick>
 800495c:	4602      	mov	r2, r0
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	1ad3      	subs	r3, r2, r3
 8004962:	2b0a      	cmp	r3, #10
 8004964:	d90b      	bls.n	800497e <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800496a:	f043 0201 	orr.w	r2, r3, #1
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	2203      	movs	r2, #3
 8004976:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800497a:	2301      	movs	r3, #1
 800497c:	e11b      	b.n	8004bb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	f003 0308 	and.w	r3, r3, #8
 8004988:	2b08      	cmp	r3, #8
 800498a:	d0e5      	beq.n	8004958 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	699a      	ldr	r2, [r3, #24]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f042 0201 	orr.w	r2, r2, #1
 800499a:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800499c:	f7fe f82c 	bl	80029f8 <HAL_GetTick>
 80049a0:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049a2:	e012      	b.n	80049ca <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 80049a4:	f7fe f828 	bl	80029f8 <HAL_GetTick>
 80049a8:	4602      	mov	r2, r0
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	1ad3      	subs	r3, r2, r3
 80049ae:	2b0a      	cmp	r3, #10
 80049b0:	d90b      	bls.n	80049ca <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049b6:	f043 0201 	orr.w	r2, r3, #1
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	2203      	movs	r2, #3
 80049c2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80049c6:	2301      	movs	r3, #1
 80049c8:	e0f5      	b.n	8004bb6 <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	699b      	ldr	r3, [r3, #24]
 80049d0:	f003 0301 	and.w	r3, r3, #1
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d0e5      	beq.n	80049a4 <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	699a      	ldr	r2, [r3, #24]
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	f042 0202 	orr.w	r2, r2, #2
 80049e6:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	4a74      	ldr	r2, [pc, #464]	; (8004bc0 <HAL_FDCAN_Init+0x2ac>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d103      	bne.n	80049fa <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80049f2:	4a74      	ldr	r2, [pc, #464]	; (8004bc4 <HAL_FDCAN_Init+0x2b0>)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	7c1b      	ldrb	r3, [r3, #16]
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d108      	bne.n	8004a14 <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	699a      	ldr	r2, [r3, #24]
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a10:	619a      	str	r2, [r3, #24]
 8004a12:	e007      	b.n	8004a24 <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	699a      	ldr	r2, [r3, #24]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a22:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	7c5b      	ldrb	r3, [r3, #17]
 8004a28:	2b01      	cmp	r3, #1
 8004a2a:	d108      	bne.n	8004a3e <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	699a      	ldr	r2, [r3, #24]
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a3a:	619a      	str	r2, [r3, #24]
 8004a3c:	e007      	b.n	8004a4e <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	699a      	ldr	r2, [r3, #24]
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8004a4c:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	7c9b      	ldrb	r3, [r3, #18]
 8004a52:	2b01      	cmp	r3, #1
 8004a54:	d108      	bne.n	8004a68 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	699a      	ldr	r2, [r3, #24]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004a64:	619a      	str	r2, [r3, #24]
 8004a66:	e007      	b.n	8004a78 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	699a      	ldr	r2, [r3, #24]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a76:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	699b      	ldr	r3, [r3, #24]
 8004a7e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	430a      	orrs	r2, r1
 8004a8c:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	699a      	ldr	r2, [r3, #24]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8004a9c:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	691a      	ldr	r2, [r3, #16]
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f022 0210 	bic.w	r2, r2, #16
 8004aac:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68db      	ldr	r3, [r3, #12]
 8004ab2:	2b01      	cmp	r3, #1
 8004ab4:	d108      	bne.n	8004ac8 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	699a      	ldr	r2, [r3, #24]
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	f042 0204 	orr.w	r2, r2, #4
 8004ac4:	619a      	str	r2, [r3, #24]
 8004ac6:	e02c      	b.n	8004b22 <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	68db      	ldr	r3, [r3, #12]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d028      	beq.n	8004b22 <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	68db      	ldr	r3, [r3, #12]
 8004ad4:	2b02      	cmp	r3, #2
 8004ad6:	d01c      	beq.n	8004b12 <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	699a      	ldr	r2, [r3, #24]
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004ae6:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	691a      	ldr	r2, [r3, #16]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	f042 0210 	orr.w	r2, r2, #16
 8004af6:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	2b03      	cmp	r3, #3
 8004afe:	d110      	bne.n	8004b22 <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	699a      	ldr	r2, [r3, #24]
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f042 0220 	orr.w	r2, r2, #32
 8004b0e:	619a      	str	r2, [r3, #24]
 8004b10:	e007      	b.n	8004b22 <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	699a      	ldr	r2, [r3, #24]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f042 0220 	orr.w	r2, r2, #32
 8004b20:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	699b      	ldr	r3, [r3, #24]
 8004b26:	3b01      	subs	r3, #1
 8004b28:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69db      	ldr	r3, [r3, #28]
 8004b2e:	3b01      	subs	r3, #1
 8004b30:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b32:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	6a1b      	ldr	r3, [r3, #32]
 8004b38:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8004b3a:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	695b      	ldr	r3, [r3, #20]
 8004b42:	3b01      	subs	r3, #1
 8004b44:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8004b4a:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8004b4c:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	689b      	ldr	r3, [r3, #8]
 8004b52:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004b56:	d115      	bne.n	8004b84 <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b5c:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b62:	3b01      	subs	r3, #1
 8004b64:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b66:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8004b70:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b78:	3b01      	subs	r3, #1
 8004b7a:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8004b80:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8004b82:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	430a      	orrs	r2, r1
 8004b96:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8004b9a:	6878      	ldr	r0, [r7, #4]
 8004b9c:	f000 f9c2 	bl	8004f24 <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	2200      	movs	r2, #0
 8004ba4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	2200      	movs	r2, #0
 8004baa:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2201      	movs	r2, #1
 8004bb0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 8004bb4:	2300      	movs	r3, #0
}
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	3710      	adds	r7, #16
 8004bba:	46bd      	mov	sp, r7
 8004bbc:	bd80      	pop	{r7, pc}
 8004bbe:	bf00      	nop
 8004bc0:	40006400 	.word	0x40006400
 8004bc4:	40006500 	.word	0x40006500

08004bc8 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 8004bc8:	b580      	push	{r7, lr}
 8004bca:	b08a      	sub	sp, #40	; 0x28
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bd6:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8004bda:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be4:	4013      	ands	r3, r2
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004bee:	f003 0307 	and.w	r3, r3, #7
 8004bf2:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bfa:	6a3a      	ldr	r2, [r7, #32]
 8004bfc:	4013      	ands	r3, r2
 8004bfe:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c06:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c0a:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c12:	69fa      	ldr	r2, [r7, #28]
 8004c14:	4013      	ands	r3, r2
 8004c16:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c1e:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 8004c22:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c2a:	69ba      	ldr	r2, [r7, #24]
 8004c2c:	4013      	ands	r3, r2
 8004c2e:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c36:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8004c3a:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c42:	697a      	ldr	r2, [r7, #20]
 8004c44:	4013      	ands	r3, r2
 8004c46:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d00d      	beq.n	8004c72 <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d006      	beq.n	8004c72 <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2240      	movs	r2, #64	; 0x40
 8004c6a:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8004c6c:	6878      	ldr	r0, [r7, #4]
 8004c6e:	f000 f939 	bl	8004ee4 <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d01b      	beq.n	8004cb8 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d014      	beq.n	8004cb8 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8004c96:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8004ca0:	693a      	ldr	r2, [r7, #16]
 8004ca2:	4013      	ands	r3, r2
 8004ca4:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004cae:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 8004cb0:	6939      	ldr	r1, [r7, #16]
 8004cb2:	6878      	ldr	r0, [r7, #4]
 8004cb4:	f000 f8f7 	bl	8004ea6 <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 8004cb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d007      	beq.n	8004cce <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004cc4:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 8004cc6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004cc8:	6878      	ldr	r0, [r7, #4]
 8004cca:	f000 f8b6 	bl	8004e3a <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d007      	beq.n	8004ce4 <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	6a3a      	ldr	r2, [r7, #32]
 8004cda:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 8004cdc:	6a39      	ldr	r1, [r7, #32]
 8004cde:	6878      	ldr	r0, [r7, #4]
 8004ce0:	f000 f8b6 	bl	8004e50 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d007      	beq.n	8004cfa <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	69fa      	ldr	r2, [r7, #28]
 8004cf0:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 8004cf2:	69f9      	ldr	r1, [r7, #28]
 8004cf4:	6878      	ldr	r0, [r7, #4]
 8004cf6:	f000 f8b6 	bl	8004e66 <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d00e      	beq.n	8004d26 <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d007      	beq.n	8004d26 <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004d1e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f8ab 	bl	8004e7c <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d01a      	beq.n	8004d6a <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d013      	beq.n	8004d6a <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8004d4a:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 8004d54:	68fa      	ldr	r2, [r7, #12]
 8004d56:	4013      	ands	r3, r2
 8004d58:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	2280      	movs	r2, #128	; 0x80
 8004d60:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 8004d62:	68f9      	ldr	r1, [r7, #12]
 8004d64:	6878      	ldr	r0, [r7, #4]
 8004d66:	f000 f893 	bl	8004e90 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d70:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d00e      	beq.n	8004d96 <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d7e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d007      	beq.n	8004d96 <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8e:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8004d90:	6878      	ldr	r0, [r7, #4]
 8004d92:	f000 f893 	bl	8004ebc <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00e      	beq.n	8004dc2 <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681b      	ldr	r3, [r3, #0]
 8004da8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004daa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d007      	beq.n	8004dc2 <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8004dba:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 8004dbc:	6878      	ldr	r0, [r7, #4]
 8004dbe:	f000 f887 	bl	8004ed0 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004dc8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d011      	beq.n	8004df4 <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004dd6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00a      	beq.n	8004df4 <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8004de6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004dec:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 8004df4:	697b      	ldr	r3, [r7, #20]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d007      	beq.n	8004e0a <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	697a      	ldr	r2, [r7, #20]
 8004e00:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 8004e02:	6979      	ldr	r1, [r7, #20]
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f000 f881 	bl	8004f0c <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8004e0a:	69bb      	ldr	r3, [r7, #24]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d009      	beq.n	8004e24 <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	69ba      	ldr	r2, [r7, #24]
 8004e16:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8004e1c:	69bb      	ldr	r3, [r7, #24]
 8004e1e:	431a      	orrs	r2, r3
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d002      	beq.n	8004e32 <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8004e2c:	6878      	ldr	r0, [r7, #4]
 8004e2e:	f000 f863 	bl	8004ef8 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 8004e32:	bf00      	nop
 8004e34:	3728      	adds	r7, #40	; 0x28
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
 8004e42:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 8004e44:	bf00      	nop
 8004e46:	370c      	adds	r7, #12
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4e:	4770      	bx	lr

08004e50 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8004e50:	b480      	push	{r7}
 8004e52:	b083      	sub	sp, #12
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr

08004e66 <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 8004e66:	b480      	push	{r7}
 8004e68:	b083      	sub	sp, #12
 8004e6a:	af00      	add	r7, sp, #0
 8004e6c:	6078      	str	r0, [r7, #4]
 8004e6e:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr

08004e7c <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004e7c:	b480      	push	{r7}
 8004e7e:	b083      	sub	sp, #12
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 8004e84:	bf00      	nop
 8004e86:	370c      	adds	r7, #12
 8004e88:	46bd      	mov	sp, r7
 8004e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e8e:	4770      	bx	lr

08004e90 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004e90:	b480      	push	{r7}
 8004e92:	b083      	sub	sp, #12
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8004e9a:	bf00      	nop
 8004e9c:	370c      	adds	r7, #12
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr

08004ea6 <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8004ea6:	b480      	push	{r7}
 8004ea8:	b083      	sub	sp, #12
 8004eaa:	af00      	add	r7, sp, #0
 8004eac:	6078      	str	r0, [r7, #4]
 8004eae:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 8004eb0:	bf00      	nop
 8004eb2:	370c      	adds	r7, #12
 8004eb4:	46bd      	mov	sp, r7
 8004eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eba:	4770      	bx	lr

08004ebc <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ebc:	b480      	push	{r7}
 8004ebe:	b083      	sub	sp, #12
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 8004ec4:	bf00      	nop
 8004ec6:	370c      	adds	r7, #12
 8004ec8:	46bd      	mov	sp, r7
 8004eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ece:	4770      	bx	lr

08004ed0 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ed0:	b480      	push	{r7}
 8004ed2:	b083      	sub	sp, #12
 8004ed4:	af00      	add	r7, sp, #0
 8004ed6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 8004ed8:	bf00      	nop
 8004eda:	370c      	adds	r7, #12
 8004edc:	46bd      	mov	sp, r7
 8004ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee2:	4770      	bx	lr

08004ee4 <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b083      	sub	sp, #12
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 8004eec:	bf00      	nop
 8004eee:	370c      	adds	r7, #12
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b083      	sub	sp, #12
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 8004f00:	bf00      	nop
 8004f02:	370c      	adds	r7, #12
 8004f04:	46bd      	mov	sp, r7
 8004f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f0a:	4770      	bx	lr

08004f0c <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8004f0c:	b480      	push	{r7}
 8004f0e:	b083      	sub	sp, #12
 8004f10:	af00      	add	r7, sp, #0
 8004f12:	6078      	str	r0, [r7, #4]
 8004f14:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 8004f16:	bf00      	nop
 8004f18:	370c      	adds	r7, #12
 8004f1a:	46bd      	mov	sp, r7
 8004f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f20:	4770      	bx	lr
	...

08004f24 <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 8004f24:	b480      	push	{r7}
 8004f26:	b085      	sub	sp, #20
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8004f2c:	4b27      	ldr	r3, [pc, #156]	; (8004fcc <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8004f2e:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68ba      	ldr	r2, [r7, #8]
 8004f34:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f3e:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f46:	041a      	lsls	r2, r3, #16
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	430a      	orrs	r2, r1
 8004f4e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004f64:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f6c:	061a      	lsls	r2, r3, #24
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	430a      	orrs	r2, r1
 8004f74:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	f503 7218 	add.w	r2, r3, #608	; 0x260
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fa0:	68bb      	ldr	r3, [r7, #8]
 8004fa2:	60fb      	str	r3, [r7, #12]
 8004fa4:	e005      	b.n	8004fb2 <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	60fb      	str	r3, [r7, #12]
 8004fb2:	68bb      	ldr	r3, [r7, #8]
 8004fb4:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8004fb8:	68fa      	ldr	r2, [r7, #12]
 8004fba:	429a      	cmp	r2, r3
 8004fbc:	d3f3      	bcc.n	8004fa6 <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 8004fbe:	bf00      	nop
 8004fc0:	bf00      	nop
 8004fc2:	3714      	adds	r7, #20
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fca:	4770      	bx	lr
 8004fcc:	4000a400 	.word	0x4000a400

08004fd0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004fd0:	b480      	push	{r7}
 8004fd2:	b087      	sub	sp, #28
 8004fd4:	af00      	add	r7, sp, #0
 8004fd6:	6078      	str	r0, [r7, #4]
 8004fd8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8004fda:	2300      	movs	r3, #0
 8004fdc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004fde:	e15a      	b.n	8005296 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004fe0:	683b      	ldr	r3, [r7, #0]
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	2101      	movs	r1, #1
 8004fe6:	697b      	ldr	r3, [r7, #20]
 8004fe8:	fa01 f303 	lsl.w	r3, r1, r3
 8004fec:	4013      	ands	r3, r2
 8004fee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f000 814c 	beq.w	8005290 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0303 	and.w	r3, r3, #3
 8005000:	2b01      	cmp	r3, #1
 8005002:	d005      	beq.n	8005010 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800500c:	2b02      	cmp	r3, #2
 800500e:	d130      	bne.n	8005072 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8005016:	697b      	ldr	r3, [r7, #20]
 8005018:	005b      	lsls	r3, r3, #1
 800501a:	2203      	movs	r2, #3
 800501c:	fa02 f303 	lsl.w	r3, r2, r3
 8005020:	43db      	mvns	r3, r3
 8005022:	693a      	ldr	r2, [r7, #16]
 8005024:	4013      	ands	r3, r2
 8005026:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8005028:	683b      	ldr	r3, [r7, #0]
 800502a:	68da      	ldr	r2, [r3, #12]
 800502c:	697b      	ldr	r3, [r7, #20]
 800502e:	005b      	lsls	r3, r3, #1
 8005030:	fa02 f303 	lsl.w	r3, r2, r3
 8005034:	693a      	ldr	r2, [r7, #16]
 8005036:	4313      	orrs	r3, r2
 8005038:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	693a      	ldr	r2, [r7, #16]
 800503e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	685b      	ldr	r3, [r3, #4]
 8005044:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005046:	2201      	movs	r2, #1
 8005048:	697b      	ldr	r3, [r7, #20]
 800504a:	fa02 f303 	lsl.w	r3, r2, r3
 800504e:	43db      	mvns	r3, r3
 8005050:	693a      	ldr	r2, [r7, #16]
 8005052:	4013      	ands	r3, r2
 8005054:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	091b      	lsrs	r3, r3, #4
 800505c:	f003 0201 	and.w	r2, r3, #1
 8005060:	697b      	ldr	r3, [r7, #20]
 8005062:	fa02 f303 	lsl.w	r3, r2, r3
 8005066:	693a      	ldr	r2, [r7, #16]
 8005068:	4313      	orrs	r3, r2
 800506a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	693a      	ldr	r2, [r7, #16]
 8005070:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	685b      	ldr	r3, [r3, #4]
 8005076:	f003 0303 	and.w	r3, r3, #3
 800507a:	2b03      	cmp	r3, #3
 800507c:	d017      	beq.n	80050ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	68db      	ldr	r3, [r3, #12]
 8005082:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	005b      	lsls	r3, r3, #1
 8005088:	2203      	movs	r2, #3
 800508a:	fa02 f303 	lsl.w	r3, r2, r3
 800508e:	43db      	mvns	r3, r3
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	4013      	ands	r3, r2
 8005094:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	689a      	ldr	r2, [r3, #8]
 800509a:	697b      	ldr	r3, [r7, #20]
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	fa02 f303 	lsl.w	r3, r2, r3
 80050a2:	693a      	ldr	r2, [r7, #16]
 80050a4:	4313      	orrs	r3, r2
 80050a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	693a      	ldr	r2, [r7, #16]
 80050ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80050ae:	683b      	ldr	r3, [r7, #0]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	f003 0303 	and.w	r3, r3, #3
 80050b6:	2b02      	cmp	r3, #2
 80050b8:	d123      	bne.n	8005102 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80050ba:	697b      	ldr	r3, [r7, #20]
 80050bc:	08da      	lsrs	r2, r3, #3
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	3208      	adds	r2, #8
 80050c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80050c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80050c8:	697b      	ldr	r3, [r7, #20]
 80050ca:	f003 0307 	and.w	r3, r3, #7
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	220f      	movs	r2, #15
 80050d2:	fa02 f303 	lsl.w	r3, r2, r3
 80050d6:	43db      	mvns	r3, r3
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	4013      	ands	r3, r2
 80050dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	691a      	ldr	r2, [r3, #16]
 80050e2:	697b      	ldr	r3, [r7, #20]
 80050e4:	f003 0307 	and.w	r3, r3, #7
 80050e8:	009b      	lsls	r3, r3, #2
 80050ea:	fa02 f303 	lsl.w	r3, r2, r3
 80050ee:	693a      	ldr	r2, [r7, #16]
 80050f0:	4313      	orrs	r3, r2
 80050f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	08da      	lsrs	r2, r3, #3
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	3208      	adds	r2, #8
 80050fc:	6939      	ldr	r1, [r7, #16]
 80050fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8005108:	697b      	ldr	r3, [r7, #20]
 800510a:	005b      	lsls	r3, r3, #1
 800510c:	2203      	movs	r2, #3
 800510e:	fa02 f303 	lsl.w	r3, r2, r3
 8005112:	43db      	mvns	r3, r3
 8005114:	693a      	ldr	r2, [r7, #16]
 8005116:	4013      	ands	r3, r2
 8005118:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800511a:	683b      	ldr	r3, [r7, #0]
 800511c:	685b      	ldr	r3, [r3, #4]
 800511e:	f003 0203 	and.w	r2, r3, #3
 8005122:	697b      	ldr	r3, [r7, #20]
 8005124:	005b      	lsls	r3, r3, #1
 8005126:	fa02 f303 	lsl.w	r3, r2, r3
 800512a:	693a      	ldr	r2, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	693a      	ldr	r2, [r7, #16]
 8005134:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005136:	683b      	ldr	r3, [r7, #0]
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80a6 	beq.w	8005290 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005144:	4b5b      	ldr	r3, [pc, #364]	; (80052b4 <HAL_GPIO_Init+0x2e4>)
 8005146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005148:	4a5a      	ldr	r2, [pc, #360]	; (80052b4 <HAL_GPIO_Init+0x2e4>)
 800514a:	f043 0301 	orr.w	r3, r3, #1
 800514e:	6613      	str	r3, [r2, #96]	; 0x60
 8005150:	4b58      	ldr	r3, [pc, #352]	; (80052b4 <HAL_GPIO_Init+0x2e4>)
 8005152:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005154:	f003 0301 	and.w	r3, r3, #1
 8005158:	60bb      	str	r3, [r7, #8]
 800515a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 800515c:	4a56      	ldr	r2, [pc, #344]	; (80052b8 <HAL_GPIO_Init+0x2e8>)
 800515e:	697b      	ldr	r3, [r7, #20]
 8005160:	089b      	lsrs	r3, r3, #2
 8005162:	3302      	adds	r3, #2
 8005164:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005168:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800516a:	697b      	ldr	r3, [r7, #20]
 800516c:	f003 0303 	and.w	r3, r3, #3
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	220f      	movs	r2, #15
 8005174:	fa02 f303 	lsl.w	r3, r2, r3
 8005178:	43db      	mvns	r3, r3
 800517a:	693a      	ldr	r2, [r7, #16]
 800517c:	4013      	ands	r3, r2
 800517e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005186:	d01f      	beq.n	80051c8 <HAL_GPIO_Init+0x1f8>
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	4a4c      	ldr	r2, [pc, #304]	; (80052bc <HAL_GPIO_Init+0x2ec>)
 800518c:	4293      	cmp	r3, r2
 800518e:	d019      	beq.n	80051c4 <HAL_GPIO_Init+0x1f4>
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	4a4b      	ldr	r2, [pc, #300]	; (80052c0 <HAL_GPIO_Init+0x2f0>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d013      	beq.n	80051c0 <HAL_GPIO_Init+0x1f0>
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	4a4a      	ldr	r2, [pc, #296]	; (80052c4 <HAL_GPIO_Init+0x2f4>)
 800519c:	4293      	cmp	r3, r2
 800519e:	d00d      	beq.n	80051bc <HAL_GPIO_Init+0x1ec>
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	4a49      	ldr	r2, [pc, #292]	; (80052c8 <HAL_GPIO_Init+0x2f8>)
 80051a4:	4293      	cmp	r3, r2
 80051a6:	d007      	beq.n	80051b8 <HAL_GPIO_Init+0x1e8>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	4a48      	ldr	r2, [pc, #288]	; (80052cc <HAL_GPIO_Init+0x2fc>)
 80051ac:	4293      	cmp	r3, r2
 80051ae:	d101      	bne.n	80051b4 <HAL_GPIO_Init+0x1e4>
 80051b0:	2305      	movs	r3, #5
 80051b2:	e00a      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051b4:	2306      	movs	r3, #6
 80051b6:	e008      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051b8:	2304      	movs	r3, #4
 80051ba:	e006      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051bc:	2303      	movs	r3, #3
 80051be:	e004      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051c0:	2302      	movs	r3, #2
 80051c2:	e002      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051c4:	2301      	movs	r3, #1
 80051c6:	e000      	b.n	80051ca <HAL_GPIO_Init+0x1fa>
 80051c8:	2300      	movs	r3, #0
 80051ca:	697a      	ldr	r2, [r7, #20]
 80051cc:	f002 0203 	and.w	r2, r2, #3
 80051d0:	0092      	lsls	r2, r2, #2
 80051d2:	4093      	lsls	r3, r2
 80051d4:	693a      	ldr	r2, [r7, #16]
 80051d6:	4313      	orrs	r3, r2
 80051d8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80051da:	4937      	ldr	r1, [pc, #220]	; (80052b8 <HAL_GPIO_Init+0x2e8>)
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	089b      	lsrs	r3, r3, #2
 80051e0:	3302      	adds	r3, #2
 80051e2:	693a      	ldr	r2, [r7, #16]
 80051e4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80051e8:	4b39      	ldr	r3, [pc, #228]	; (80052d0 <HAL_GPIO_Init+0x300>)
 80051ea:	689b      	ldr	r3, [r3, #8]
 80051ec:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	43db      	mvns	r3, r3
 80051f2:	693a      	ldr	r2, [r7, #16]
 80051f4:	4013      	ands	r3, r2
 80051f6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005200:	2b00      	cmp	r3, #0
 8005202:	d003      	beq.n	800520c <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8005204:	693a      	ldr	r2, [r7, #16]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	4313      	orrs	r3, r2
 800520a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800520c:	4a30      	ldr	r2, [pc, #192]	; (80052d0 <HAL_GPIO_Init+0x300>)
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005212:	4b2f      	ldr	r3, [pc, #188]	; (80052d0 <HAL_GPIO_Init+0x300>)
 8005214:	68db      	ldr	r3, [r3, #12]
 8005216:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	43db      	mvns	r3, r3
 800521c:	693a      	ldr	r2, [r7, #16]
 800521e:	4013      	ands	r3, r2
 8005220:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8005222:	683b      	ldr	r3, [r7, #0]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800522a:	2b00      	cmp	r3, #0
 800522c:	d003      	beq.n	8005236 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 800522e:	693a      	ldr	r2, [r7, #16]
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	4313      	orrs	r3, r2
 8005234:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005236:	4a26      	ldr	r2, [pc, #152]	; (80052d0 <HAL_GPIO_Init+0x300>)
 8005238:	693b      	ldr	r3, [r7, #16]
 800523a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 800523c:	4b24      	ldr	r3, [pc, #144]	; (80052d0 <HAL_GPIO_Init+0x300>)
 800523e:	685b      	ldr	r3, [r3, #4]
 8005240:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	43db      	mvns	r3, r3
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	4013      	ands	r3, r2
 800524a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005254:	2b00      	cmp	r3, #0
 8005256:	d003      	beq.n	8005260 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8005258:	693a      	ldr	r2, [r7, #16]
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005260:	4a1b      	ldr	r2, [pc, #108]	; (80052d0 <HAL_GPIO_Init+0x300>)
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <HAL_GPIO_Init+0x300>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	43db      	mvns	r3, r3
 8005270:	693a      	ldr	r2, [r7, #16]
 8005272:	4013      	ands	r3, r2
 8005274:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005276:	683b      	ldr	r3, [r7, #0]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d003      	beq.n	800528a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8005282:	693a      	ldr	r2, [r7, #16]
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	4313      	orrs	r3, r2
 8005288:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800528a:	4a11      	ldr	r2, [pc, #68]	; (80052d0 <HAL_GPIO_Init+0x300>)
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005290:	697b      	ldr	r3, [r7, #20]
 8005292:	3301      	adds	r3, #1
 8005294:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	681a      	ldr	r2, [r3, #0]
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	fa22 f303 	lsr.w	r3, r2, r3
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	f47f ae9d 	bne.w	8004fe0 <HAL_GPIO_Init+0x10>
  }
}
 80052a6:	bf00      	nop
 80052a8:	bf00      	nop
 80052aa:	371c      	adds	r7, #28
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr
 80052b4:	40021000 	.word	0x40021000
 80052b8:	40010000 	.word	0x40010000
 80052bc:	48000400 	.word	0x48000400
 80052c0:	48000800 	.word	0x48000800
 80052c4:	48000c00 	.word	0x48000c00
 80052c8:	48001000 	.word	0x48001000
 80052cc:	48001400 	.word	0x48001400
 80052d0:	40010400 	.word	0x40010400

080052d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80052d4:	b480      	push	{r7}
 80052d6:	b085      	sub	sp, #20
 80052d8:	af00      	add	r7, sp, #0
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	460b      	mov	r3, r1
 80052de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	691a      	ldr	r2, [r3, #16]
 80052e4:	887b      	ldrh	r3, [r7, #2]
 80052e6:	4013      	ands	r3, r2
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d002      	beq.n	80052f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80052ec:	2301      	movs	r3, #1
 80052ee:	73fb      	strb	r3, [r7, #15]
 80052f0:	e001      	b.n	80052f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80052f2:	2300      	movs	r3, #0
 80052f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80052f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80052f8:	4618      	mov	r0, r3
 80052fa:	3714      	adds	r7, #20
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
 800530c:	460b      	mov	r3, r1
 800530e:	807b      	strh	r3, [r7, #2]
 8005310:	4613      	mov	r3, r2
 8005312:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005314:	787b      	ldrb	r3, [r7, #1]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d003      	beq.n	8005322 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800531a:	887a      	ldrh	r2, [r7, #2]
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005320:	e002      	b.n	8005328 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005322:	887a      	ldrh	r2, [r7, #2]
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005328:	bf00      	nop
 800532a:	370c      	adds	r7, #12
 800532c:	46bd      	mov	sp, r7
 800532e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005332:	4770      	bx	lr

08005334 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8005334:	b580      	push	{r7, lr}
 8005336:	b082      	sub	sp, #8
 8005338:	af00      	add	r7, sp, #0
 800533a:	4603      	mov	r3, r0
 800533c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800533e:	4b08      	ldr	r3, [pc, #32]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8005340:	695a      	ldr	r2, [r3, #20]
 8005342:	88fb      	ldrh	r3, [r7, #6]
 8005344:	4013      	ands	r3, r2
 8005346:	2b00      	cmp	r3, #0
 8005348:	d006      	beq.n	8005358 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800534a:	4a05      	ldr	r2, [pc, #20]	; (8005360 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800534c:	88fb      	ldrh	r3, [r7, #6]
 800534e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8005350:	88fb      	ldrh	r3, [r7, #6]
 8005352:	4618      	mov	r0, r3
 8005354:	f000 f806 	bl	8005364 <HAL_GPIO_EXTI_Callback>
  }
}
 8005358:	bf00      	nop
 800535a:	3708      	adds	r7, #8
 800535c:	46bd      	mov	sp, r7
 800535e:	bd80      	pop	{r7, pc}
 8005360:	40010400 	.word	0x40010400

08005364 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8005364:	b480      	push	{r7}
 8005366:	b083      	sub	sp, #12
 8005368:	af00      	add	r7, sp, #0
 800536a:	4603      	mov	r3, r0
 800536c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800536e:	bf00      	nop
 8005370:	370c      	adds	r7, #12
 8005372:	46bd      	mov	sp, r7
 8005374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005378:	4770      	bx	lr
	...

0800537c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d141      	bne.n	800540e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 800538a:	4b4b      	ldr	r3, [pc, #300]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8005392:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005396:	d131      	bne.n	80053fc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005398:	4b47      	ldr	r3, [pc, #284]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800539a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800539e:	4a46      	ldr	r2, [pc, #280]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80053a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80053a8:	4b43      	ldr	r3, [pc, #268]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80053b0:	4a41      	ldr	r2, [pc, #260]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80053b6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80053b8:	4b40      	ldr	r3, [pc, #256]	; (80054bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	2232      	movs	r2, #50	; 0x32
 80053be:	fb02 f303 	mul.w	r3, r2, r3
 80053c2:	4a3f      	ldr	r2, [pc, #252]	; (80054c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80053c4:	fba2 2303 	umull	r2, r3, r2, r3
 80053c8:	0c9b      	lsrs	r3, r3, #18
 80053ca:	3301      	adds	r3, #1
 80053cc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053ce:	e002      	b.n	80053d6 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	3b01      	subs	r3, #1
 80053d4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80053d6:	4b38      	ldr	r3, [pc, #224]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053e2:	d102      	bne.n	80053ea <HAL_PWREx_ControlVoltageScaling+0x6e>
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d1f2      	bne.n	80053d0 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80053ea:	4b33      	ldr	r3, [pc, #204]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053f6:	d158      	bne.n	80054aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80053f8:	2303      	movs	r3, #3
 80053fa:	e057      	b.n	80054ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80053fc:	4b2e      	ldr	r3, [pc, #184]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80053fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005402:	4a2d      	ldr	r2, [pc, #180]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005404:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005408:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800540c:	e04d      	b.n	80054aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005414:	d141      	bne.n	800549a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005416:	4b28      	ldr	r3, [pc, #160]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800541e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005422:	d131      	bne.n	8005488 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005424:	4b24      	ldr	r3, [pc, #144]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005426:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800542a:	4a23      	ldr	r2, [pc, #140]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800542c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005430:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005434:	4b20      	ldr	r3, [pc, #128]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800543c:	4a1e      	ldr	r2, [pc, #120]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800543e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005442:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005444:	4b1d      	ldr	r3, [pc, #116]	; (80054bc <HAL_PWREx_ControlVoltageScaling+0x140>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	2232      	movs	r2, #50	; 0x32
 800544a:	fb02 f303 	mul.w	r3, r2, r3
 800544e:	4a1c      	ldr	r2, [pc, #112]	; (80054c0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8005450:	fba2 2303 	umull	r2, r3, r2, r3
 8005454:	0c9b      	lsrs	r3, r3, #18
 8005456:	3301      	adds	r3, #1
 8005458:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800545a:	e002      	b.n	8005462 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	3b01      	subs	r3, #1
 8005460:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005462:	4b15      	ldr	r3, [pc, #84]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800546a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800546e:	d102      	bne.n	8005476 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d1f2      	bne.n	800545c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005476:	4b10      	ldr	r3, [pc, #64]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800547e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005482:	d112      	bne.n	80054aa <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8005484:	2303      	movs	r3, #3
 8005486:	e011      	b.n	80054ac <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005488:	4b0b      	ldr	r3, [pc, #44]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800548a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800548e:	4a0a      	ldr	r2, [pc, #40]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8005490:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005494:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8005498:	e007      	b.n	80054aa <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800549a:	4b07      	ldr	r3, [pc, #28]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80054a2:	4a05      	ldr	r2, [pc, #20]	; (80054b8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80054a4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054a8:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	3714      	adds	r7, #20
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr
 80054b8:	40007000 	.word	0x40007000
 80054bc:	20000000 	.word	0x20000000
 80054c0:	431bde83 	.word	0x431bde83

080054c4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80054c8:	4b05      	ldr	r3, [pc, #20]	; (80054e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	4a04      	ldr	r2, [pc, #16]	; (80054e0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80054ce:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80054d2:	6093      	str	r3, [r2, #8]
}
 80054d4:	bf00      	nop
 80054d6:	46bd      	mov	sp, r7
 80054d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054dc:	4770      	bx	lr
 80054de:	bf00      	nop
 80054e0:	40007000 	.word	0x40007000

080054e4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b088      	sub	sp, #32
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d101      	bne.n	80054f6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80054f2:	2301      	movs	r3, #1
 80054f4:	e308      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f003 0301 	and.w	r3, r3, #1
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d075      	beq.n	80055ee <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005502:	4ba3      	ldr	r3, [pc, #652]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	f003 030c 	and.w	r3, r3, #12
 800550a:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800550c:	4ba0      	ldr	r3, [pc, #640]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800550e:	68db      	ldr	r3, [r3, #12]
 8005510:	f003 0303 	and.w	r3, r3, #3
 8005514:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8005516:	69bb      	ldr	r3, [r7, #24]
 8005518:	2b0c      	cmp	r3, #12
 800551a:	d102      	bne.n	8005522 <HAL_RCC_OscConfig+0x3e>
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	2b03      	cmp	r3, #3
 8005520:	d002      	beq.n	8005528 <HAL_RCC_OscConfig+0x44>
 8005522:	69bb      	ldr	r3, [r7, #24]
 8005524:	2b08      	cmp	r3, #8
 8005526:	d10b      	bne.n	8005540 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005528:	4b99      	ldr	r3, [pc, #612]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005530:	2b00      	cmp	r3, #0
 8005532:	d05b      	beq.n	80055ec <HAL_RCC_OscConfig+0x108>
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	685b      	ldr	r3, [r3, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d157      	bne.n	80055ec <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e2e3      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	685b      	ldr	r3, [r3, #4]
 8005544:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005548:	d106      	bne.n	8005558 <HAL_RCC_OscConfig+0x74>
 800554a:	4b91      	ldr	r3, [pc, #580]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a90      	ldr	r2, [pc, #576]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005550:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005554:	6013      	str	r3, [r2, #0]
 8005556:	e01d      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	685b      	ldr	r3, [r3, #4]
 800555c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005560:	d10c      	bne.n	800557c <HAL_RCC_OscConfig+0x98>
 8005562:	4b8b      	ldr	r3, [pc, #556]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	4a8a      	ldr	r2, [pc, #552]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005568:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800556c:	6013      	str	r3, [r2, #0]
 800556e:	4b88      	ldr	r3, [pc, #544]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	4a87      	ldr	r2, [pc, #540]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005574:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005578:	6013      	str	r3, [r2, #0]
 800557a:	e00b      	b.n	8005594 <HAL_RCC_OscConfig+0xb0>
 800557c:	4b84      	ldr	r3, [pc, #528]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a83      	ldr	r2, [pc, #524]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005582:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005586:	6013      	str	r3, [r2, #0]
 8005588:	4b81      	ldr	r3, [pc, #516]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	4a80      	ldr	r2, [pc, #512]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800558e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005592:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	685b      	ldr	r3, [r3, #4]
 8005598:	2b00      	cmp	r3, #0
 800559a:	d013      	beq.n	80055c4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800559c:	f7fd fa2c 	bl	80029f8 <HAL_GetTick>
 80055a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055a2:	e008      	b.n	80055b6 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055a4:	f7fd fa28 	bl	80029f8 <HAL_GetTick>
 80055a8:	4602      	mov	r2, r0
 80055aa:	693b      	ldr	r3, [r7, #16]
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b64      	cmp	r3, #100	; 0x64
 80055b0:	d901      	bls.n	80055b6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80055b2:	2303      	movs	r3, #3
 80055b4:	e2a8      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80055b6:	4b76      	ldr	r3, [pc, #472]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d0f0      	beq.n	80055a4 <HAL_RCC_OscConfig+0xc0>
 80055c2:	e014      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055c4:	f7fd fa18 	bl	80029f8 <HAL_GetTick>
 80055c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055ca:	e008      	b.n	80055de <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80055cc:	f7fd fa14 	bl	80029f8 <HAL_GetTick>
 80055d0:	4602      	mov	r2, r0
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	1ad3      	subs	r3, r2, r3
 80055d6:	2b64      	cmp	r3, #100	; 0x64
 80055d8:	d901      	bls.n	80055de <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80055da:	2303      	movs	r3, #3
 80055dc:	e294      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80055de:	4b6c      	ldr	r3, [pc, #432]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d1f0      	bne.n	80055cc <HAL_RCC_OscConfig+0xe8>
 80055ea:	e000      	b.n	80055ee <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80055ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	f003 0302 	and.w	r3, r3, #2
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d075      	beq.n	80056e6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80055fa:	4b65      	ldr	r3, [pc, #404]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80055fc:	689b      	ldr	r3, [r3, #8]
 80055fe:	f003 030c 	and.w	r3, r3, #12
 8005602:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005604:	4b62      	ldr	r3, [pc, #392]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005606:	68db      	ldr	r3, [r3, #12]
 8005608:	f003 0303 	and.w	r3, r3, #3
 800560c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	2b0c      	cmp	r3, #12
 8005612:	d102      	bne.n	800561a <HAL_RCC_OscConfig+0x136>
 8005614:	697b      	ldr	r3, [r7, #20]
 8005616:	2b02      	cmp	r3, #2
 8005618:	d002      	beq.n	8005620 <HAL_RCC_OscConfig+0x13c>
 800561a:	69bb      	ldr	r3, [r7, #24]
 800561c:	2b04      	cmp	r3, #4
 800561e:	d11f      	bne.n	8005660 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005620:	4b5b      	ldr	r3, [pc, #364]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005628:	2b00      	cmp	r3, #0
 800562a:	d005      	beq.n	8005638 <HAL_RCC_OscConfig+0x154>
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	68db      	ldr	r3, [r3, #12]
 8005630:	2b00      	cmp	r3, #0
 8005632:	d101      	bne.n	8005638 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8005634:	2301      	movs	r3, #1
 8005636:	e267      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005638:	4b55      	ldr	r3, [pc, #340]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800563a:	685b      	ldr	r3, [r3, #4]
 800563c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	691b      	ldr	r3, [r3, #16]
 8005644:	061b      	lsls	r3, r3, #24
 8005646:	4952      	ldr	r1, [pc, #328]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005648:	4313      	orrs	r3, r2
 800564a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800564c:	4b51      	ldr	r3, [pc, #324]	; (8005794 <HAL_RCC_OscConfig+0x2b0>)
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f7fd f985 	bl	8002960 <HAL_InitTick>
 8005656:	4603      	mov	r3, r0
 8005658:	2b00      	cmp	r3, #0
 800565a:	d043      	beq.n	80056e4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800565c:	2301      	movs	r3, #1
 800565e:	e253      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	68db      	ldr	r3, [r3, #12]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d023      	beq.n	80056b0 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005668:	4b49      	ldr	r3, [pc, #292]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	4a48      	ldr	r2, [pc, #288]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800566e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005672:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005674:	f7fd f9c0 	bl	80029f8 <HAL_GetTick>
 8005678:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800567a:	e008      	b.n	800568e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800567c:	f7fd f9bc 	bl	80029f8 <HAL_GetTick>
 8005680:	4602      	mov	r2, r0
 8005682:	693b      	ldr	r3, [r7, #16]
 8005684:	1ad3      	subs	r3, r2, r3
 8005686:	2b02      	cmp	r3, #2
 8005688:	d901      	bls.n	800568e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800568a:	2303      	movs	r3, #3
 800568c:	e23c      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800568e:	4b40      	ldr	r3, [pc, #256]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005696:	2b00      	cmp	r3, #0
 8005698:	d0f0      	beq.n	800567c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800569a:	4b3d      	ldr	r3, [pc, #244]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	061b      	lsls	r3, r3, #24
 80056a8:	4939      	ldr	r1, [pc, #228]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80056aa:	4313      	orrs	r3, r2
 80056ac:	604b      	str	r3, [r1, #4]
 80056ae:	e01a      	b.n	80056e6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80056b0:	4b37      	ldr	r3, [pc, #220]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	4a36      	ldr	r2, [pc, #216]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80056b6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80056ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80056bc:	f7fd f99c 	bl	80029f8 <HAL_GetTick>
 80056c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056c2:	e008      	b.n	80056d6 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80056c4:	f7fd f998 	bl	80029f8 <HAL_GetTick>
 80056c8:	4602      	mov	r2, r0
 80056ca:	693b      	ldr	r3, [r7, #16]
 80056cc:	1ad3      	subs	r3, r2, r3
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	d901      	bls.n	80056d6 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 80056d2:	2303      	movs	r3, #3
 80056d4:	e218      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80056d6:	4b2e      	ldr	r3, [pc, #184]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d1f0      	bne.n	80056c4 <HAL_RCC_OscConfig+0x1e0>
 80056e2:	e000      	b.n	80056e6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80056e4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 0308 	and.w	r3, r3, #8
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d03c      	beq.n	800576c <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d01c      	beq.n	8005734 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80056fa:	4b25      	ldr	r3, [pc, #148]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 80056fc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005700:	4a23      	ldr	r2, [pc, #140]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005702:	f043 0301 	orr.w	r3, r3, #1
 8005706:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800570a:	f7fd f975 	bl	80029f8 <HAL_GetTick>
 800570e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005710:	e008      	b.n	8005724 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005712:	f7fd f971 	bl	80029f8 <HAL_GetTick>
 8005716:	4602      	mov	r2, r0
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	2b02      	cmp	r3, #2
 800571e:	d901      	bls.n	8005724 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005720:	2303      	movs	r3, #3
 8005722:	e1f1      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005724:	4b1a      	ldr	r3, [pc, #104]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005726:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d0ef      	beq.n	8005712 <HAL_RCC_OscConfig+0x22e>
 8005732:	e01b      	b.n	800576c <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005734:	4b16      	ldr	r3, [pc, #88]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005736:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800573a:	4a15      	ldr	r2, [pc, #84]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 800573c:	f023 0301 	bic.w	r3, r3, #1
 8005740:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005744:	f7fd f958 	bl	80029f8 <HAL_GetTick>
 8005748:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800574a:	e008      	b.n	800575e <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800574c:	f7fd f954 	bl	80029f8 <HAL_GetTick>
 8005750:	4602      	mov	r2, r0
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	1ad3      	subs	r3, r2, r3
 8005756:	2b02      	cmp	r3, #2
 8005758:	d901      	bls.n	800575e <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 800575a:	2303      	movs	r3, #3
 800575c:	e1d4      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800575e:	4b0c      	ldr	r3, [pc, #48]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005760:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005764:	f003 0302 	and.w	r3, r3, #2
 8005768:	2b00      	cmp	r3, #0
 800576a:	d1ef      	bne.n	800574c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f003 0304 	and.w	r3, r3, #4
 8005774:	2b00      	cmp	r3, #0
 8005776:	f000 80ab 	beq.w	80058d0 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 800577a:	2300      	movs	r3, #0
 800577c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800577e:	4b04      	ldr	r3, [pc, #16]	; (8005790 <HAL_RCC_OscConfig+0x2ac>)
 8005780:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005786:	2b00      	cmp	r3, #0
 8005788:	d106      	bne.n	8005798 <HAL_RCC_OscConfig+0x2b4>
 800578a:	2301      	movs	r3, #1
 800578c:	e005      	b.n	800579a <HAL_RCC_OscConfig+0x2b6>
 800578e:	bf00      	nop
 8005790:	40021000 	.word	0x40021000
 8005794:	20000004 	.word	0x20000004
 8005798:	2300      	movs	r3, #0
 800579a:	2b00      	cmp	r3, #0
 800579c:	d00d      	beq.n	80057ba <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800579e:	4baf      	ldr	r3, [pc, #700]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80057a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a2:	4aae      	ldr	r2, [pc, #696]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80057a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057a8:	6593      	str	r3, [r2, #88]	; 0x58
 80057aa:	4bac      	ldr	r3, [pc, #688]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80057ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057b2:	60fb      	str	r3, [r7, #12]
 80057b4:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80057b6:	2301      	movs	r3, #1
 80057b8:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ba:	4ba9      	ldr	r3, [pc, #676]	; (8005a60 <HAL_RCC_OscConfig+0x57c>)
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d118      	bne.n	80057f8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057c6:	4ba6      	ldr	r3, [pc, #664]	; (8005a60 <HAL_RCC_OscConfig+0x57c>)
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	4aa5      	ldr	r2, [pc, #660]	; (8005a60 <HAL_RCC_OscConfig+0x57c>)
 80057cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80057d2:	f7fd f911 	bl	80029f8 <HAL_GetTick>
 80057d6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057d8:	e008      	b.n	80057ec <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057da:	f7fd f90d 	bl	80029f8 <HAL_GetTick>
 80057de:	4602      	mov	r2, r0
 80057e0:	693b      	ldr	r3, [r7, #16]
 80057e2:	1ad3      	subs	r3, r2, r3
 80057e4:	2b02      	cmp	r3, #2
 80057e6:	d901      	bls.n	80057ec <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80057e8:	2303      	movs	r3, #3
 80057ea:	e18d      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80057ec:	4b9c      	ldr	r3, [pc, #624]	; (8005a60 <HAL_RCC_OscConfig+0x57c>)
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d0f0      	beq.n	80057da <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	2b01      	cmp	r3, #1
 80057fe:	d108      	bne.n	8005812 <HAL_RCC_OscConfig+0x32e>
 8005800:	4b96      	ldr	r3, [pc, #600]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	4a95      	ldr	r2, [pc, #596]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005808:	f043 0301 	orr.w	r3, r3, #1
 800580c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005810:	e024      	b.n	800585c <HAL_RCC_OscConfig+0x378>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	2b05      	cmp	r3, #5
 8005818:	d110      	bne.n	800583c <HAL_RCC_OscConfig+0x358>
 800581a:	4b90      	ldr	r3, [pc, #576]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800581c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005820:	4a8e      	ldr	r2, [pc, #568]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005822:	f043 0304 	orr.w	r3, r3, #4
 8005826:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800582a:	4b8c      	ldr	r3, [pc, #560]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800582c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005830:	4a8a      	ldr	r2, [pc, #552]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005832:	f043 0301 	orr.w	r3, r3, #1
 8005836:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800583a:	e00f      	b.n	800585c <HAL_RCC_OscConfig+0x378>
 800583c:	4b87      	ldr	r3, [pc, #540]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800583e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005842:	4a86      	ldr	r2, [pc, #536]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005844:	f023 0301 	bic.w	r3, r3, #1
 8005848:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800584c:	4b83      	ldr	r3, [pc, #524]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800584e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005852:	4a82      	ldr	r2, [pc, #520]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005854:	f023 0304 	bic.w	r3, r3, #4
 8005858:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	689b      	ldr	r3, [r3, #8]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d016      	beq.n	8005892 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005864:	f7fd f8c8 	bl	80029f8 <HAL_GetTick>
 8005868:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800586a:	e00a      	b.n	8005882 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800586c:	f7fd f8c4 	bl	80029f8 <HAL_GetTick>
 8005870:	4602      	mov	r2, r0
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	1ad3      	subs	r3, r2, r3
 8005876:	f241 3288 	movw	r2, #5000	; 0x1388
 800587a:	4293      	cmp	r3, r2
 800587c:	d901      	bls.n	8005882 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800587e:	2303      	movs	r3, #3
 8005880:	e142      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005882:	4b76      	ldr	r3, [pc, #472]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005884:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005888:	f003 0302 	and.w	r3, r3, #2
 800588c:	2b00      	cmp	r3, #0
 800588e:	d0ed      	beq.n	800586c <HAL_RCC_OscConfig+0x388>
 8005890:	e015      	b.n	80058be <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005892:	f7fd f8b1 	bl	80029f8 <HAL_GetTick>
 8005896:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005898:	e00a      	b.n	80058b0 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800589a:	f7fd f8ad 	bl	80029f8 <HAL_GetTick>
 800589e:	4602      	mov	r2, r0
 80058a0:	693b      	ldr	r3, [r7, #16]
 80058a2:	1ad3      	subs	r3, r2, r3
 80058a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d901      	bls.n	80058b0 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80058ac:	2303      	movs	r3, #3
 80058ae:	e12b      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80058b0:	4b6a      	ldr	r3, [pc, #424]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80058b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058b6:	f003 0302 	and.w	r3, r3, #2
 80058ba:	2b00      	cmp	r3, #0
 80058bc:	d1ed      	bne.n	800589a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80058be:	7ffb      	ldrb	r3, [r7, #31]
 80058c0:	2b01      	cmp	r3, #1
 80058c2:	d105      	bne.n	80058d0 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058c4:	4b65      	ldr	r3, [pc, #404]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80058c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058c8:	4a64      	ldr	r2, [pc, #400]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80058ca:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058ce:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0320 	and.w	r3, r3, #32
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d03c      	beq.n	8005956 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	699b      	ldr	r3, [r3, #24]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d01c      	beq.n	800591e <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80058e4:	4b5d      	ldr	r3, [pc, #372]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80058e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80058ea:	4a5c      	ldr	r2, [pc, #368]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80058ec:	f043 0301 	orr.w	r3, r3, #1
 80058f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80058f4:	f7fd f880 	bl	80029f8 <HAL_GetTick>
 80058f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80058fa:	e008      	b.n	800590e <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80058fc:	f7fd f87c 	bl	80029f8 <HAL_GetTick>
 8005900:	4602      	mov	r2, r0
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	1ad3      	subs	r3, r2, r3
 8005906:	2b02      	cmp	r3, #2
 8005908:	d901      	bls.n	800590e <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 800590a:	2303      	movs	r3, #3
 800590c:	e0fc      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800590e:	4b53      	ldr	r3, [pc, #332]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005910:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005914:	f003 0302 	and.w	r3, r3, #2
 8005918:	2b00      	cmp	r3, #0
 800591a:	d0ef      	beq.n	80058fc <HAL_RCC_OscConfig+0x418>
 800591c:	e01b      	b.n	8005956 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800591e:	4b4f      	ldr	r3, [pc, #316]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005920:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005924:	4a4d      	ldr	r2, [pc, #308]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005926:	f023 0301 	bic.w	r3, r3, #1
 800592a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800592e:	f7fd f863 	bl	80029f8 <HAL_GetTick>
 8005932:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005934:	e008      	b.n	8005948 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005936:	f7fd f85f 	bl	80029f8 <HAL_GetTick>
 800593a:	4602      	mov	r2, r0
 800593c:	693b      	ldr	r3, [r7, #16]
 800593e:	1ad3      	subs	r3, r2, r3
 8005940:	2b02      	cmp	r3, #2
 8005942:	d901      	bls.n	8005948 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005944:	2303      	movs	r3, #3
 8005946:	e0df      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005948:	4b44      	ldr	r3, [pc, #272]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800594a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800594e:	f003 0302 	and.w	r3, r3, #2
 8005952:	2b00      	cmp	r3, #0
 8005954:	d1ef      	bne.n	8005936 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	69db      	ldr	r3, [r3, #28]
 800595a:	2b00      	cmp	r3, #0
 800595c:	f000 80d3 	beq.w	8005b06 <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005960:	4b3e      	ldr	r3, [pc, #248]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005962:	689b      	ldr	r3, [r3, #8]
 8005964:	f003 030c 	and.w	r3, r3, #12
 8005968:	2b0c      	cmp	r3, #12
 800596a:	f000 808d 	beq.w	8005a88 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	69db      	ldr	r3, [r3, #28]
 8005972:	2b02      	cmp	r3, #2
 8005974:	d15a      	bne.n	8005a2c <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005976:	4b39      	ldr	r3, [pc, #228]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	4a38      	ldr	r2, [pc, #224]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800597c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005980:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005982:	f7fd f839 	bl	80029f8 <HAL_GetTick>
 8005986:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005988:	e008      	b.n	800599c <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800598a:	f7fd f835 	bl	80029f8 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b02      	cmp	r3, #2
 8005996:	d901      	bls.n	800599c <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8005998:	2303      	movs	r3, #3
 800599a:	e0b5      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800599c:	4b2f      	ldr	r3, [pc, #188]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d1f0      	bne.n	800598a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80059a8:	4b2c      	ldr	r3, [pc, #176]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059aa:	68da      	ldr	r2, [r3, #12]
 80059ac:	4b2d      	ldr	r3, [pc, #180]	; (8005a64 <HAL_RCC_OscConfig+0x580>)
 80059ae:	4013      	ands	r3, r2
 80059b0:	687a      	ldr	r2, [r7, #4]
 80059b2:	6a11      	ldr	r1, [r2, #32]
 80059b4:	687a      	ldr	r2, [r7, #4]
 80059b6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80059b8:	3a01      	subs	r2, #1
 80059ba:	0112      	lsls	r2, r2, #4
 80059bc:	4311      	orrs	r1, r2
 80059be:	687a      	ldr	r2, [r7, #4]
 80059c0:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80059c2:	0212      	lsls	r2, r2, #8
 80059c4:	4311      	orrs	r1, r2
 80059c6:	687a      	ldr	r2, [r7, #4]
 80059c8:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80059ca:	0852      	lsrs	r2, r2, #1
 80059cc:	3a01      	subs	r2, #1
 80059ce:	0552      	lsls	r2, r2, #21
 80059d0:	4311      	orrs	r1, r2
 80059d2:	687a      	ldr	r2, [r7, #4]
 80059d4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80059d6:	0852      	lsrs	r2, r2, #1
 80059d8:	3a01      	subs	r2, #1
 80059da:	0652      	lsls	r2, r2, #25
 80059dc:	4311      	orrs	r1, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80059e2:	06d2      	lsls	r2, r2, #27
 80059e4:	430a      	orrs	r2, r1
 80059e6:	491d      	ldr	r1, [pc, #116]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059e8:	4313      	orrs	r3, r2
 80059ea:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	4a1a      	ldr	r2, [pc, #104]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80059f6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80059f8:	4b18      	ldr	r3, [pc, #96]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059fa:	68db      	ldr	r3, [r3, #12]
 80059fc:	4a17      	ldr	r2, [pc, #92]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 80059fe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005a02:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a04:	f7fc fff8 	bl	80029f8 <HAL_GetTick>
 8005a08:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a0a:	e008      	b.n	8005a1e <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a0c:	f7fc fff4 	bl	80029f8 <HAL_GetTick>
 8005a10:	4602      	mov	r2, r0
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	1ad3      	subs	r3, r2, r3
 8005a16:	2b02      	cmp	r3, #2
 8005a18:	d901      	bls.n	8005a1e <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8005a1a:	2303      	movs	r3, #3
 8005a1c:	e074      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005a1e:	4b0f      	ldr	r3, [pc, #60]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d0f0      	beq.n	8005a0c <HAL_RCC_OscConfig+0x528>
 8005a2a:	e06c      	b.n	8005b06 <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005a2c:	4b0b      	ldr	r3, [pc, #44]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	4a0a      	ldr	r2, [pc, #40]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a32:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a36:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005a38:	4b08      	ldr	r3, [pc, #32]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a3a:	68db      	ldr	r3, [r3, #12]
 8005a3c:	4a07      	ldr	r2, [pc, #28]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a3e:	f023 0303 	bic.w	r3, r3, #3
 8005a42:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005a44:	4b05      	ldr	r3, [pc, #20]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	4a04      	ldr	r2, [pc, #16]	; (8005a5c <HAL_RCC_OscConfig+0x578>)
 8005a4a:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005a4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a52:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a54:	f7fc ffd0 	bl	80029f8 <HAL_GetTick>
 8005a58:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a5a:	e00e      	b.n	8005a7a <HAL_RCC_OscConfig+0x596>
 8005a5c:	40021000 	.word	0x40021000
 8005a60:	40007000 	.word	0x40007000
 8005a64:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005a68:	f7fc ffc6 	bl	80029f8 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	693b      	ldr	r3, [r7, #16]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	2b02      	cmp	r3, #2
 8005a74:	d901      	bls.n	8005a7a <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 8005a76:	2303      	movs	r3, #3
 8005a78:	e046      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005a7a:	4b25      	ldr	r3, [pc, #148]	; (8005b10 <HAL_RCC_OscConfig+0x62c>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d1f0      	bne.n	8005a68 <HAL_RCC_OscConfig+0x584>
 8005a86:	e03e      	b.n	8005b06 <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	69db      	ldr	r3, [r3, #28]
 8005a8c:	2b01      	cmp	r3, #1
 8005a8e:	d101      	bne.n	8005a94 <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e039      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005a94:	4b1e      	ldr	r3, [pc, #120]	; (8005b10 <HAL_RCC_OscConfig+0x62c>)
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005a9a:	697b      	ldr	r3, [r7, #20]
 8005a9c:	f003 0203 	and.w	r2, r3, #3
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	6a1b      	ldr	r3, [r3, #32]
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d12c      	bne.n	8005b02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005aa8:	697b      	ldr	r3, [r7, #20]
 8005aaa:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ab2:	3b01      	subs	r3, #1
 8005ab4:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d123      	bne.n	8005b02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005ac6:	429a      	cmp	r2, r3
 8005ac8:	d11b      	bne.n	8005b02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aca:	697b      	ldr	r3, [r7, #20]
 8005acc:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005ad6:	429a      	cmp	r2, r3
 8005ad8:	d113      	bne.n	8005b02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005ada:	697b      	ldr	r3, [r7, #20]
 8005adc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ae4:	085b      	lsrs	r3, r3, #1
 8005ae6:	3b01      	subs	r3, #1
 8005ae8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005aea:	429a      	cmp	r2, r3
 8005aec:	d109      	bne.n	8005b02 <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8005aee:	697b      	ldr	r3, [r7, #20]
 8005af0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005af8:	085b      	lsrs	r3, r3, #1
 8005afa:	3b01      	subs	r3, #1
 8005afc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005afe:	429a      	cmp	r2, r3
 8005b00:	d001      	beq.n	8005b06 <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e000      	b.n	8005b08 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3720      	adds	r7, #32
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	bd80      	pop	{r7, pc}
 8005b10:	40021000 	.word	0x40021000

08005b14 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005b14:	b580      	push	{r7, lr}
 8005b16:	b086      	sub	sp, #24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
 8005b1c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005b1e:	2300      	movs	r3, #0
 8005b20:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2b00      	cmp	r3, #0
 8005b26:	d101      	bne.n	8005b2c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8005b28:	2301      	movs	r3, #1
 8005b2a:	e11e      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005b2c:	4b91      	ldr	r3, [pc, #580]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f003 030f 	and.w	r3, r3, #15
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d910      	bls.n	8005b5c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005b3a:	4b8e      	ldr	r3, [pc, #568]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	f023 020f 	bic.w	r2, r3, #15
 8005b42:	498c      	ldr	r1, [pc, #560]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	4313      	orrs	r3, r2
 8005b48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005b4a:	4b8a      	ldr	r3, [pc, #552]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	f003 030f 	and.w	r3, r3, #15
 8005b52:	683a      	ldr	r2, [r7, #0]
 8005b54:	429a      	cmp	r2, r3
 8005b56:	d001      	beq.n	8005b5c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	e106      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f003 0301 	and.w	r3, r3, #1
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d073      	beq.n	8005c50 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	685b      	ldr	r3, [r3, #4]
 8005b6c:	2b03      	cmp	r3, #3
 8005b6e:	d129      	bne.n	8005bc4 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005b70:	4b81      	ldr	r3, [pc, #516]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d101      	bne.n	8005b80 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	e0f4      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005b80:	f000 f966 	bl	8005e50 <RCC_GetSysClockFreqFromPLLSource>
 8005b84:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005b86:	693b      	ldr	r3, [r7, #16]
 8005b88:	4a7c      	ldr	r2, [pc, #496]	; (8005d7c <HAL_RCC_ClockConfig+0x268>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d93f      	bls.n	8005c0e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b8e:	4b7a      	ldr	r3, [pc, #488]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005b90:	689b      	ldr	r3, [r3, #8]
 8005b92:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	681b      	ldr	r3, [r3, #0]
 8005b9e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d033      	beq.n	8005c0e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d12f      	bne.n	8005c0e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bae:	4b72      	ldr	r3, [pc, #456]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005bb0:	689b      	ldr	r3, [r3, #8]
 8005bb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005bb6:	4a70      	ldr	r2, [pc, #448]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005bb8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bbc:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005bbe:	2380      	movs	r3, #128	; 0x80
 8005bc0:	617b      	str	r3, [r7, #20]
 8005bc2:	e024      	b.n	8005c0e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d107      	bne.n	8005bdc <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005bcc:	4b6a      	ldr	r3, [pc, #424]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d109      	bne.n	8005bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005bd8:	2301      	movs	r3, #1
 8005bda:	e0c6      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bdc:	4b66      	ldr	r3, [pc, #408]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005be4:	2b00      	cmp	r3, #0
 8005be6:	d101      	bne.n	8005bec <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005be8:	2301      	movs	r3, #1
 8005bea:	e0be      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005bec:	f000 f8ce 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005bf0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005bf2:	693b      	ldr	r3, [r7, #16]
 8005bf4:	4a61      	ldr	r2, [pc, #388]	; (8005d7c <HAL_RCC_ClockConfig+0x268>)
 8005bf6:	4293      	cmp	r3, r2
 8005bf8:	d909      	bls.n	8005c0e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005bfa:	4b5f      	ldr	r3, [pc, #380]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005bfc:	689b      	ldr	r3, [r3, #8]
 8005bfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005c02:	4a5d      	ldr	r2, [pc, #372]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c08:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005c0a:	2380      	movs	r3, #128	; 0x80
 8005c0c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005c0e:	4b5a      	ldr	r3, [pc, #360]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	f023 0203 	bic.w	r2, r3, #3
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	685b      	ldr	r3, [r3, #4]
 8005c1a:	4957      	ldr	r1, [pc, #348]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c1c:	4313      	orrs	r3, r2
 8005c1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005c20:	f7fc feea 	bl	80029f8 <HAL_GetTick>
 8005c24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c26:	e00a      	b.n	8005c3e <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005c28:	f7fc fee6 	bl	80029f8 <HAL_GetTick>
 8005c2c:	4602      	mov	r2, r0
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	1ad3      	subs	r3, r2, r3
 8005c32:	f241 3288 	movw	r2, #5000	; 0x1388
 8005c36:	4293      	cmp	r3, r2
 8005c38:	d901      	bls.n	8005c3e <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8005c3a:	2303      	movs	r3, #3
 8005c3c:	e095      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005c3e:	4b4e      	ldr	r3, [pc, #312]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	f003 020c 	and.w	r2, r3, #12
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	429a      	cmp	r2, r3
 8005c4e:	d1eb      	bne.n	8005c28 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	f003 0302 	and.w	r3, r3, #2
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d023      	beq.n	8005ca4 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	f003 0304 	and.w	r3, r3, #4
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d005      	beq.n	8005c74 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005c68:	4b43      	ldr	r3, [pc, #268]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c6a:	689b      	ldr	r3, [r3, #8]
 8005c6c:	4a42      	ldr	r2, [pc, #264]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c6e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c72:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	681b      	ldr	r3, [r3, #0]
 8005c78:	f003 0308 	and.w	r3, r3, #8
 8005c7c:	2b00      	cmp	r3, #0
 8005c7e:	d007      	beq.n	8005c90 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005c80:	4b3d      	ldr	r3, [pc, #244]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c82:	689b      	ldr	r3, [r3, #8]
 8005c84:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005c88:	4a3b      	ldr	r2, [pc, #236]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c8a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005c8e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c90:	4b39      	ldr	r3, [pc, #228]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	689b      	ldr	r3, [r3, #8]
 8005c9c:	4936      	ldr	r1, [pc, #216]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	608b      	str	r3, [r1, #8]
 8005ca2:	e008      	b.n	8005cb6 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	2b80      	cmp	r3, #128	; 0x80
 8005ca8:	d105      	bne.n	8005cb6 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005caa:	4b33      	ldr	r3, [pc, #204]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005cac:	689b      	ldr	r3, [r3, #8]
 8005cae:	4a32      	ldr	r2, [pc, #200]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005cb0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005cb4:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005cb6:	4b2f      	ldr	r3, [pc, #188]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f003 030f 	and.w	r3, r3, #15
 8005cbe:	683a      	ldr	r2, [r7, #0]
 8005cc0:	429a      	cmp	r2, r3
 8005cc2:	d21d      	bcs.n	8005d00 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005cc4:	4b2b      	ldr	r3, [pc, #172]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f023 020f 	bic.w	r2, r3, #15
 8005ccc:	4929      	ldr	r1, [pc, #164]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005cce:	683b      	ldr	r3, [r7, #0]
 8005cd0:	4313      	orrs	r3, r2
 8005cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005cd4:	f7fc fe90 	bl	80029f8 <HAL_GetTick>
 8005cd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cda:	e00a      	b.n	8005cf2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005cdc:	f7fc fe8c 	bl	80029f8 <HAL_GetTick>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	f241 3288 	movw	r2, #5000	; 0x1388
 8005cea:	4293      	cmp	r3, r2
 8005cec:	d901      	bls.n	8005cf2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8005cee:	2303      	movs	r3, #3
 8005cf0:	e03b      	b.n	8005d6a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cf2:	4b20      	ldr	r3, [pc, #128]	; (8005d74 <HAL_RCC_ClockConfig+0x260>)
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	f003 030f 	and.w	r3, r3, #15
 8005cfa:	683a      	ldr	r2, [r7, #0]
 8005cfc:	429a      	cmp	r2, r3
 8005cfe:	d1ed      	bne.n	8005cdc <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f003 0304 	and.w	r3, r3, #4
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d008      	beq.n	8005d1e <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d0c:	4b1a      	ldr	r3, [pc, #104]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	68db      	ldr	r3, [r3, #12]
 8005d18:	4917      	ldr	r1, [pc, #92]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005d1a:	4313      	orrs	r3, r2
 8005d1c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 0308 	and.w	r3, r3, #8
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d009      	beq.n	8005d3e <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d2a:	4b13      	ldr	r3, [pc, #76]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005d2c:	689b      	ldr	r3, [r3, #8]
 8005d2e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	691b      	ldr	r3, [r3, #16]
 8005d36:	00db      	lsls	r3, r3, #3
 8005d38:	490f      	ldr	r1, [pc, #60]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005d3a:	4313      	orrs	r3, r2
 8005d3c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d3e:	f000 f825 	bl	8005d8c <HAL_RCC_GetSysClockFreq>
 8005d42:	4602      	mov	r2, r0
 8005d44:	4b0c      	ldr	r3, [pc, #48]	; (8005d78 <HAL_RCC_ClockConfig+0x264>)
 8005d46:	689b      	ldr	r3, [r3, #8]
 8005d48:	091b      	lsrs	r3, r3, #4
 8005d4a:	f003 030f 	and.w	r3, r3, #15
 8005d4e:	490c      	ldr	r1, [pc, #48]	; (8005d80 <HAL_RCC_ClockConfig+0x26c>)
 8005d50:	5ccb      	ldrb	r3, [r1, r3]
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	fa22 f303 	lsr.w	r3, r2, r3
 8005d5a:	4a0a      	ldr	r2, [pc, #40]	; (8005d84 <HAL_RCC_ClockConfig+0x270>)
 8005d5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d5e:	4b0a      	ldr	r3, [pc, #40]	; (8005d88 <HAL_RCC_ClockConfig+0x274>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	4618      	mov	r0, r3
 8005d64:	f7fc fdfc 	bl	8002960 <HAL_InitTick>
 8005d68:	4603      	mov	r3, r0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3718      	adds	r7, #24
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bd80      	pop	{r7, pc}
 8005d72:	bf00      	nop
 8005d74:	40022000 	.word	0x40022000
 8005d78:	40021000 	.word	0x40021000
 8005d7c:	04c4b400 	.word	0x04c4b400
 8005d80:	0800a11c 	.word	0x0800a11c
 8005d84:	20000000 	.word	0x20000000
 8005d88:	20000004 	.word	0x20000004

08005d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005d8c:	b480      	push	{r7}
 8005d8e:	b087      	sub	sp, #28
 8005d90:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005d92:	4b2c      	ldr	r3, [pc, #176]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005d94:	689b      	ldr	r3, [r3, #8]
 8005d96:	f003 030c 	and.w	r3, r3, #12
 8005d9a:	2b04      	cmp	r3, #4
 8005d9c:	d102      	bne.n	8005da4 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005d9e:	4b2a      	ldr	r3, [pc, #168]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005da0:	613b      	str	r3, [r7, #16]
 8005da2:	e047      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005da4:	4b27      	ldr	r3, [pc, #156]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f003 030c 	and.w	r3, r3, #12
 8005dac:	2b08      	cmp	r3, #8
 8005dae:	d102      	bne.n	8005db6 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005db0:	4b26      	ldr	r3, [pc, #152]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	e03e      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005db6:	4b23      	ldr	r3, [pc, #140]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005db8:	689b      	ldr	r3, [r3, #8]
 8005dba:	f003 030c 	and.w	r3, r3, #12
 8005dbe:	2b0c      	cmp	r3, #12
 8005dc0:	d136      	bne.n	8005e30 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dc2:	4b20      	ldr	r3, [pc, #128]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0303 	and.w	r3, r3, #3
 8005dca:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005dcc:	4b1d      	ldr	r3, [pc, #116]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dce:	68db      	ldr	r3, [r3, #12]
 8005dd0:	091b      	lsrs	r3, r3, #4
 8005dd2:	f003 030f 	and.w	r3, r3, #15
 8005dd6:	3301      	adds	r3, #1
 8005dd8:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2b03      	cmp	r3, #3
 8005dde:	d10c      	bne.n	8005dfa <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005de0:	4a1a      	ldr	r2, [pc, #104]	; (8005e4c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005de2:	68bb      	ldr	r3, [r7, #8]
 8005de4:	fbb2 f3f3 	udiv	r3, r2, r3
 8005de8:	4a16      	ldr	r2, [pc, #88]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dea:	68d2      	ldr	r2, [r2, #12]
 8005dec:	0a12      	lsrs	r2, r2, #8
 8005dee:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005df2:	fb02 f303 	mul.w	r3, r2, r3
 8005df6:	617b      	str	r3, [r7, #20]
      break;
 8005df8:	e00c      	b.n	8005e14 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005dfa:	4a13      	ldr	r2, [pc, #76]	; (8005e48 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e02:	4a10      	ldr	r2, [pc, #64]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e04:	68d2      	ldr	r2, [r2, #12]
 8005e06:	0a12      	lsrs	r2, r2, #8
 8005e08:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e0c:	fb02 f303 	mul.w	r3, r2, r3
 8005e10:	617b      	str	r3, [r7, #20]
      break;
 8005e12:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e14:	4b0b      	ldr	r3, [pc, #44]	; (8005e44 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e16:	68db      	ldr	r3, [r3, #12]
 8005e18:	0e5b      	lsrs	r3, r3, #25
 8005e1a:	f003 0303 	and.w	r3, r3, #3
 8005e1e:	3301      	adds	r3, #1
 8005e20:	005b      	lsls	r3, r3, #1
 8005e22:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e24:	697a      	ldr	r2, [r7, #20]
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e2c:	613b      	str	r3, [r7, #16]
 8005e2e:	e001      	b.n	8005e34 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e30:	2300      	movs	r3, #0
 8005e32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e34:	693b      	ldr	r3, [r7, #16]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	371c      	adds	r7, #28
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e40:	4770      	bx	lr
 8005e42:	bf00      	nop
 8005e44:	40021000 	.word	0x40021000
 8005e48:	00f42400 	.word	0x00f42400
 8005e4c:	00b71b00 	.word	0x00b71b00

08005e50 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005e50:	b480      	push	{r7}
 8005e52:	b087      	sub	sp, #28
 8005e54:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005e56:	4b1e      	ldr	r3, [pc, #120]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e58:	68db      	ldr	r3, [r3, #12]
 8005e5a:	f003 0303 	and.w	r3, r3, #3
 8005e5e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e60:	4b1b      	ldr	r3, [pc, #108]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	091b      	lsrs	r3, r3, #4
 8005e66:	f003 030f 	and.w	r3, r3, #15
 8005e6a:	3301      	adds	r3, #1
 8005e6c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005e6e:	693b      	ldr	r3, [r7, #16]
 8005e70:	2b03      	cmp	r3, #3
 8005e72:	d10c      	bne.n	8005e8e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e74:	4a17      	ldr	r2, [pc, #92]	; (8005ed4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e7c:	4a14      	ldr	r2, [pc, #80]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e7e:	68d2      	ldr	r2, [r2, #12]
 8005e80:	0a12      	lsrs	r2, r2, #8
 8005e82:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005e86:	fb02 f303 	mul.w	r3, r2, r3
 8005e8a:	617b      	str	r3, [r7, #20]
    break;
 8005e8c:	e00c      	b.n	8005ea8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e8e:	4a12      	ldr	r2, [pc, #72]	; (8005ed8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e96:	4a0e      	ldr	r2, [pc, #56]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005e98:	68d2      	ldr	r2, [r2, #12]
 8005e9a:	0a12      	lsrs	r2, r2, #8
 8005e9c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005ea0:	fb02 f303 	mul.w	r3, r2, r3
 8005ea4:	617b      	str	r3, [r7, #20]
    break;
 8005ea6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ea8:	4b09      	ldr	r3, [pc, #36]	; (8005ed0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	0e5b      	lsrs	r3, r3, #25
 8005eae:	f003 0303 	and.w	r3, r3, #3
 8005eb2:	3301      	adds	r3, #1
 8005eb4:	005b      	lsls	r3, r3, #1
 8005eb6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005eb8:	697a      	ldr	r2, [r7, #20]
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ec0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ec2:	687b      	ldr	r3, [r7, #4]
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	371c      	adds	r7, #28
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr
 8005ed0:	40021000 	.word	0x40021000
 8005ed4:	00b71b00 	.word	0x00b71b00
 8005ed8:	00f42400 	.word	0x00f42400

08005edc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005edc:	b580      	push	{r7, lr}
 8005ede:	b086      	sub	sp, #24
 8005ee0:	af00      	add	r7, sp, #0
 8005ee2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005ee4:	2300      	movs	r3, #0
 8005ee6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8005ee8:	2300      	movs	r3, #0
 8005eea:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	f000 8098 	beq.w	800602a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005efa:	2300      	movs	r3, #0
 8005efc:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005efe:	4b43      	ldr	r3, [pc, #268]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10d      	bne.n	8005f26 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f0a:	4b40      	ldr	r3, [pc, #256]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f0c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f0e:	4a3f      	ldr	r2, [pc, #252]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f14:	6593      	str	r3, [r2, #88]	; 0x58
 8005f16:	4b3d      	ldr	r3, [pc, #244]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f1e:	60bb      	str	r3, [r7, #8]
 8005f20:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f22:	2301      	movs	r3, #1
 8005f24:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005f26:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	4a39      	ldr	r2, [pc, #228]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f2c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f30:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8005f32:	f7fc fd61 	bl	80029f8 <HAL_GetTick>
 8005f36:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f38:	e009      	b.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f3a:	f7fc fd5d 	bl	80029f8 <HAL_GetTick>
 8005f3e:	4602      	mov	r2, r0
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	1ad3      	subs	r3, r2, r3
 8005f44:	2b02      	cmp	r3, #2
 8005f46:	d902      	bls.n	8005f4e <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005f48:	2303      	movs	r3, #3
 8005f4a:	74fb      	strb	r3, [r7, #19]
        break;
 8005f4c:	e005      	b.n	8005f5a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005f4e:	4b30      	ldr	r3, [pc, #192]	; (8006010 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d0ef      	beq.n	8005f3a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005f5a:	7cfb      	ldrb	r3, [r7, #19]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d159      	bne.n	8006014 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005f60:	4b2a      	ldr	r3, [pc, #168]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f66:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f6a:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005f6c:	697b      	ldr	r3, [r7, #20]
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d01e      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f76:	697a      	ldr	r2, [r7, #20]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	d019      	beq.n	8005fb0 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005f7c:	4b23      	ldr	r3, [pc, #140]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f82:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f86:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005f88:	4b20      	ldr	r3, [pc, #128]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f8e:	4a1f      	ldr	r2, [pc, #124]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005f94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005f98:	4b1c      	ldr	r3, [pc, #112]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005f9e:	4a1b      	ldr	r2, [pc, #108]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005fa4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005fa8:	4a18      	ldr	r2, [pc, #96]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005faa:	697b      	ldr	r3, [r7, #20]
 8005fac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005fb0:	697b      	ldr	r3, [r7, #20]
 8005fb2:	f003 0301 	and.w	r3, r3, #1
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d016      	beq.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005fba:	f7fc fd1d 	bl	80029f8 <HAL_GetTick>
 8005fbe:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc0:	e00b      	b.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fc2:	f7fc fd19 	bl	80029f8 <HAL_GetTick>
 8005fc6:	4602      	mov	r2, r0
 8005fc8:	68fb      	ldr	r3, [r7, #12]
 8005fca:	1ad3      	subs	r3, r2, r3
 8005fcc:	f241 3288 	movw	r2, #5000	; 0x1388
 8005fd0:	4293      	cmp	r3, r2
 8005fd2:	d902      	bls.n	8005fda <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005fd4:	2303      	movs	r3, #3
 8005fd6:	74fb      	strb	r3, [r7, #19]
            break;
 8005fd8:	e006      	b.n	8005fe8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fda:	4b0c      	ldr	r3, [pc, #48]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005fdc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005fe0:	f003 0302 	and.w	r3, r3, #2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d0ec      	beq.n	8005fc2 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005fe8:	7cfb      	ldrb	r3, [r7, #19]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10b      	bne.n	8006006 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005fee:	4b07      	ldr	r3, [pc, #28]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005ff4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ffc:	4903      	ldr	r1, [pc, #12]	; (800600c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005ffe:	4313      	orrs	r3, r2
 8006000:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8006004:	e008      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8006006:	7cfb      	ldrb	r3, [r7, #19]
 8006008:	74bb      	strb	r3, [r7, #18]
 800600a:	e005      	b.n	8006018 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 800600c:	40021000 	.word	0x40021000
 8006010:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006014:	7cfb      	ldrb	r3, [r7, #19]
 8006016:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006018:	7c7b      	ldrb	r3, [r7, #17]
 800601a:	2b01      	cmp	r3, #1
 800601c:	d105      	bne.n	800602a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800601e:	4ba6      	ldr	r3, [pc, #664]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006020:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006022:	4aa5      	ldr	r2, [pc, #660]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006024:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006028:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	f003 0301 	and.w	r3, r3, #1
 8006032:	2b00      	cmp	r3, #0
 8006034:	d00a      	beq.n	800604c <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006036:	4ba0      	ldr	r3, [pc, #640]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006038:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800603c:	f023 0203 	bic.w	r2, r3, #3
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	499c      	ldr	r1, [pc, #624]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006046:	4313      	orrs	r3, r2
 8006048:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0302 	and.w	r3, r3, #2
 8006054:	2b00      	cmp	r3, #0
 8006056:	d00a      	beq.n	800606e <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8006058:	4b97      	ldr	r3, [pc, #604]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800605a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800605e:	f023 020c 	bic.w	r2, r3, #12
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	4994      	ldr	r1, [pc, #592]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006068:	4313      	orrs	r3, r2
 800606a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	f003 0304 	and.w	r3, r3, #4
 8006076:	2b00      	cmp	r3, #0
 8006078:	d00a      	beq.n	8006090 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800607a:	4b8f      	ldr	r3, [pc, #572]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800607c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006080:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	498b      	ldr	r1, [pc, #556]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 0308 	and.w	r3, r3, #8
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800609c:	4b86      	ldr	r3, [pc, #536]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800609e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060a2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	691b      	ldr	r3, [r3, #16]
 80060aa:	4983      	ldr	r1, [pc, #524]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ac:	4313      	orrs	r3, r2
 80060ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	f003 0320 	and.w	r3, r3, #32
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80060be:	4b7e      	ldr	r3, [pc, #504]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060c4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	695b      	ldr	r3, [r3, #20]
 80060cc:	497a      	ldr	r1, [pc, #488]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060ce:	4313      	orrs	r3, r2
 80060d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d00a      	beq.n	80060f6 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80060e0:	4b75      	ldr	r3, [pc, #468]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060e6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	699b      	ldr	r3, [r3, #24]
 80060ee:	4972      	ldr	r1, [pc, #456]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80060f0:	4313      	orrs	r3, r2
 80060f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060fe:	2b00      	cmp	r3, #0
 8006100:	d00a      	beq.n	8006118 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8006102:	4b6d      	ldr	r3, [pc, #436]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006104:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006108:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	69db      	ldr	r3, [r3, #28]
 8006110:	4969      	ldr	r1, [pc, #420]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006112:	4313      	orrs	r3, r2
 8006114:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006120:	2b00      	cmp	r3, #0
 8006122:	d00a      	beq.n	800613a <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006124:	4b64      	ldr	r3, [pc, #400]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006126:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800612a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6a1b      	ldr	r3, [r3, #32]
 8006132:	4961      	ldr	r1, [pc, #388]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006134:	4313      	orrs	r3, r2
 8006136:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006142:	2b00      	cmp	r3, #0
 8006144:	d00a      	beq.n	800615c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8006146:	4b5c      	ldr	r3, [pc, #368]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800614c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006154:	4958      	ldr	r1, [pc, #352]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006156:	4313      	orrs	r3, r2
 8006158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006164:	2b00      	cmp	r3, #0
 8006166:	d015      	beq.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006168:	4b53      	ldr	r3, [pc, #332]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800616a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800616e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006176:	4950      	ldr	r1, [pc, #320]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006178:	4313      	orrs	r3, r2
 800617a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006182:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006186:	d105      	bne.n	8006194 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006188:	4b4b      	ldr	r3, [pc, #300]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618a:	68db      	ldr	r3, [r3, #12]
 800618c:	4a4a      	ldr	r2, [pc, #296]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800618e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006192:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800619c:	2b00      	cmp	r3, #0
 800619e:	d015      	beq.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80061a0:	4b45      	ldr	r3, [pc, #276]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061a6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ae:	4942      	ldr	r1, [pc, #264]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061b0:	4313      	orrs	r3, r2
 80061b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80061be:	d105      	bne.n	80061cc <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061c0:	4b3d      	ldr	r3, [pc, #244]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c2:	68db      	ldr	r3, [r3, #12]
 80061c4:	4a3c      	ldr	r2, [pc, #240]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061c6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80061ca:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d015      	beq.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80061d8:	4b37      	ldr	r3, [pc, #220]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061de:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061e6:	4934      	ldr	r1, [pc, #208]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061e8:	4313      	orrs	r3, r2
 80061ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061f2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80061f6:	d105      	bne.n	8006204 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80061f8:	4b2f      	ldr	r3, [pc, #188]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fa:	68db      	ldr	r3, [r3, #12]
 80061fc:	4a2e      	ldr	r2, [pc, #184]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80061fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006202:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800620c:	2b00      	cmp	r3, #0
 800620e:	d015      	beq.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006210:	4b29      	ldr	r3, [pc, #164]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006212:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006216:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800621e:	4926      	ldr	r1, [pc, #152]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006220:	4313      	orrs	r3, r2
 8006222:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800622a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800622e:	d105      	bne.n	800623c <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006230:	4b21      	ldr	r3, [pc, #132]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006232:	68db      	ldr	r3, [r3, #12]
 8006234:	4a20      	ldr	r2, [pc, #128]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006236:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800623a:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006244:	2b00      	cmp	r3, #0
 8006246:	d015      	beq.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006248:	4b1b      	ldr	r3, [pc, #108]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800624a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800624e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006256:	4918      	ldr	r1, [pc, #96]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006258:	4313      	orrs	r3, r2
 800625a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006262:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8006266:	d105      	bne.n	8006274 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006268:	4b13      	ldr	r3, [pc, #76]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626a:	68db      	ldr	r3, [r3, #12]
 800626c:	4a12      	ldr	r2, [pc, #72]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800626e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006272:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d015      	beq.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8006280:	4b0d      	ldr	r3, [pc, #52]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006282:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006286:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800628e:	490a      	ldr	r1, [pc, #40]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8006290:	4313      	orrs	r3, r2
 8006292:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800629a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800629e:	d105      	bne.n	80062ac <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a2:	68db      	ldr	r3, [r3, #12]
 80062a4:	4a04      	ldr	r2, [pc, #16]	; (80062b8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80062a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062aa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80062ac:	7cbb      	ldrb	r3, [r7, #18]
}
 80062ae:	4618      	mov	r0, r3
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	40021000 	.word	0x40021000

080062bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b084      	sub	sp, #16
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d101      	bne.n	80062ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80062ca:	2301      	movs	r3, #1
 80062cc:	e09d      	b.n	800640a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d108      	bne.n	80062e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	685b      	ldr	r3, [r3, #4]
 80062da:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80062de:	d009      	beq.n	80062f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	61da      	str	r2, [r3, #28]
 80062e6:	e005      	b.n	80062f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2200      	movs	r2, #0
 80062ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fc f81c 	bl	800234c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681a      	ldr	r2, [r3, #0]
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800632a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006334:	d902      	bls.n	800633c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006336:	2300      	movs	r3, #0
 8006338:	60fb      	str	r3, [r7, #12]
 800633a:	e002      	b.n	8006342 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 800633c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006340:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	68db      	ldr	r3, [r3, #12]
 8006346:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 800634a:	d007      	beq.n	800635c <HAL_SPI_Init+0xa0>
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	68db      	ldr	r3, [r3, #12]
 8006350:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006354:	d002      	beq.n	800635c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2200      	movs	r2, #0
 800635a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	689b      	ldr	r3, [r3, #8]
 8006368:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 800636c:	431a      	orrs	r2, r3
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	691b      	ldr	r3, [r3, #16]
 8006372:	f003 0302 	and.w	r3, r3, #2
 8006376:	431a      	orrs	r2, r3
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	695b      	ldr	r3, [r3, #20]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	431a      	orrs	r2, r3
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800638a:	431a      	orrs	r2, r3
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	69db      	ldr	r3, [r3, #28]
 8006390:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006394:	431a      	orrs	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	6a1b      	ldr	r3, [r3, #32]
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	ea42 0103 	orr.w	r1, r2, r3
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063a6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	430a      	orrs	r2, r1
 80063b0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	699b      	ldr	r3, [r3, #24]
 80063b6:	0c1b      	lsrs	r3, r3, #16
 80063b8:	f003 0204 	and.w	r2, r3, #4
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063c0:	f003 0310 	and.w	r3, r3, #16
 80063c4:	431a      	orrs	r2, r3
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ca:	f003 0308 	and.w	r3, r3, #8
 80063ce:	431a      	orrs	r2, r3
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 80063d8:	ea42 0103 	orr.w	r1, r2, r3
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	430a      	orrs	r2, r1
 80063e8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	69da      	ldr	r2, [r3, #28]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063f8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	2201      	movs	r2, #1
 8006404:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8006408:	2300      	movs	r3, #0
}
 800640a:	4618      	mov	r0, r3
 800640c:	3710      	adds	r7, #16
 800640e:	46bd      	mov	sp, r7
 8006410:	bd80      	pop	{r7, pc}

08006412 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006412:	b580      	push	{r7, lr}
 8006414:	b088      	sub	sp, #32
 8006416:	af00      	add	r7, sp, #0
 8006418:	60f8      	str	r0, [r7, #12]
 800641a:	60b9      	str	r1, [r7, #8]
 800641c:	603b      	str	r3, [r7, #0]
 800641e:	4613      	mov	r3, r2
 8006420:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8006422:	2300      	movs	r3, #0
 8006424:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800642c:	2b01      	cmp	r3, #1
 800642e:	d101      	bne.n	8006434 <HAL_SPI_Transmit+0x22>
 8006430:	2302      	movs	r3, #2
 8006432:	e158      	b.n	80066e6 <HAL_SPI_Transmit+0x2d4>
 8006434:	68fb      	ldr	r3, [r7, #12]
 8006436:	2201      	movs	r2, #1
 8006438:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800643c:	f7fc fadc 	bl	80029f8 <HAL_GetTick>
 8006440:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8006442:	88fb      	ldrh	r3, [r7, #6]
 8006444:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006446:	68fb      	ldr	r3, [r7, #12]
 8006448:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d002      	beq.n	8006458 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8006452:	2302      	movs	r3, #2
 8006454:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006456:	e13d      	b.n	80066d4 <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d002      	beq.n	8006464 <HAL_SPI_Transmit+0x52>
 800645e:	88fb      	ldrh	r3, [r7, #6]
 8006460:	2b00      	cmp	r3, #0
 8006462:	d102      	bne.n	800646a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8006464:	2301      	movs	r3, #1
 8006466:	77fb      	strb	r3, [r7, #31]
    goto error;
 8006468:	e134      	b.n	80066d4 <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800646a:	68fb      	ldr	r3, [r7, #12]
 800646c:	2203      	movs	r2, #3
 800646e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	2200      	movs	r2, #0
 8006476:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	68ba      	ldr	r2, [r7, #8]
 800647c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	88fa      	ldrh	r2, [r7, #6]
 8006482:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	2200      	movs	r2, #0
 800648e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	2200      	movs	r2, #0
 8006494:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	2200      	movs	r2, #0
 800649c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2200      	movs	r2, #0
 80064a4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	2200      	movs	r2, #0
 80064aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	689b      	ldr	r3, [r3, #8]
 80064b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80064b4:	d10f      	bne.n	80064d6 <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	681a      	ldr	r2, [r3, #0]
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80064c4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80064c6:	68fb      	ldr	r3, [r7, #12]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	681a      	ldr	r2, [r3, #0]
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80064d4:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064e0:	2b40      	cmp	r3, #64	; 0x40
 80064e2:	d007      	beq.n	80064f4 <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	681a      	ldr	r2, [r3, #0]
 80064ea:	68fb      	ldr	r3, [r7, #12]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80064f2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	68db      	ldr	r3, [r3, #12]
 80064f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80064fc:	d94b      	bls.n	8006596 <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80064fe:	68fb      	ldr	r3, [r7, #12]
 8006500:	685b      	ldr	r3, [r3, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d002      	beq.n	800650c <HAL_SPI_Transmit+0xfa>
 8006506:	8afb      	ldrh	r3, [r7, #22]
 8006508:	2b01      	cmp	r3, #1
 800650a:	d13e      	bne.n	800658a <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006510:	881a      	ldrh	r2, [r3, #0]
 8006512:	68fb      	ldr	r3, [r7, #12]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800651c:	1c9a      	adds	r2, r3, #2
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006526:	b29b      	uxth	r3, r3
 8006528:	3b01      	subs	r3, #1
 800652a:	b29a      	uxth	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006530:	e02b      	b.n	800658a <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	689b      	ldr	r3, [r3, #8]
 8006538:	f003 0302 	and.w	r3, r3, #2
 800653c:	2b02      	cmp	r3, #2
 800653e:	d112      	bne.n	8006566 <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006544:	881a      	ldrh	r2, [r3, #0]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006550:	1c9a      	adds	r2, r3, #2
 8006552:	68fb      	ldr	r3, [r7, #12]
 8006554:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800655a:	b29b      	uxth	r3, r3
 800655c:	3b01      	subs	r3, #1
 800655e:	b29a      	uxth	r2, r3
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006564:	e011      	b.n	800658a <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006566:	f7fc fa47 	bl	80029f8 <HAL_GetTick>
 800656a:	4602      	mov	r2, r0
 800656c:	69bb      	ldr	r3, [r7, #24]
 800656e:	1ad3      	subs	r3, r2, r3
 8006570:	683a      	ldr	r2, [r7, #0]
 8006572:	429a      	cmp	r2, r3
 8006574:	d803      	bhi.n	800657e <HAL_SPI_Transmit+0x16c>
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	f1b3 3fff 	cmp.w	r3, #4294967295
 800657c:	d102      	bne.n	8006584 <HAL_SPI_Transmit+0x172>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b00      	cmp	r3, #0
 8006582:	d102      	bne.n	800658a <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8006584:	2303      	movs	r3, #3
 8006586:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006588:	e0a4      	b.n	80066d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800658e:	b29b      	uxth	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	d1ce      	bne.n	8006532 <HAL_SPI_Transmit+0x120>
 8006594:	e07c      	b.n	8006690 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	685b      	ldr	r3, [r3, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d002      	beq.n	80065a4 <HAL_SPI_Transmit+0x192>
 800659e:	8afb      	ldrh	r3, [r7, #22]
 80065a0:	2b01      	cmp	r3, #1
 80065a2:	d170      	bne.n	8006686 <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065a8:	b29b      	uxth	r3, r3
 80065aa:	2b01      	cmp	r3, #1
 80065ac:	d912      	bls.n	80065d4 <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b2:	881a      	ldrh	r2, [r3, #0]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065be:	1c9a      	adds	r2, r3, #2
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065c8:	b29b      	uxth	r3, r3
 80065ca:	3b02      	subs	r3, #2
 80065cc:	b29a      	uxth	r2, r3
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80065d2:	e058      	b.n	8006686 <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	330c      	adds	r3, #12
 80065de:	7812      	ldrb	r2, [r2, #0]
 80065e0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065e6:	1c5a      	adds	r2, r3, #1
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80065f0:	b29b      	uxth	r3, r3
 80065f2:	3b01      	subs	r3, #1
 80065f4:	b29a      	uxth	r2, r3
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80065fa:	e044      	b.n	8006686 <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	689b      	ldr	r3, [r3, #8]
 8006602:	f003 0302 	and.w	r3, r3, #2
 8006606:	2b02      	cmp	r3, #2
 8006608:	d12b      	bne.n	8006662 <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800660e:	b29b      	uxth	r3, r3
 8006610:	2b01      	cmp	r3, #1
 8006612:	d912      	bls.n	800663a <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006618:	881a      	ldrh	r2, [r3, #0]
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006624:	1c9a      	adds	r2, r3, #2
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800662e:	b29b      	uxth	r3, r3
 8006630:	3b02      	subs	r3, #2
 8006632:	b29a      	uxth	r2, r3
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006638:	e025      	b.n	8006686 <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	330c      	adds	r3, #12
 8006644:	7812      	ldrb	r2, [r2, #0]
 8006646:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800664c:	1c5a      	adds	r2, r3, #1
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006656:	b29b      	uxth	r3, r3
 8006658:	3b01      	subs	r3, #1
 800665a:	b29a      	uxth	r2, r3
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006660:	e011      	b.n	8006686 <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006662:	f7fc f9c9 	bl	80029f8 <HAL_GetTick>
 8006666:	4602      	mov	r2, r0
 8006668:	69bb      	ldr	r3, [r7, #24]
 800666a:	1ad3      	subs	r3, r2, r3
 800666c:	683a      	ldr	r2, [r7, #0]
 800666e:	429a      	cmp	r2, r3
 8006670:	d803      	bhi.n	800667a <HAL_SPI_Transmit+0x268>
 8006672:	683b      	ldr	r3, [r7, #0]
 8006674:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006678:	d102      	bne.n	8006680 <HAL_SPI_Transmit+0x26e>
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	2b00      	cmp	r3, #0
 800667e:	d102      	bne.n	8006686 <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8006680:	2303      	movs	r3, #3
 8006682:	77fb      	strb	r3, [r7, #31]
          goto error;
 8006684:	e026      	b.n	80066d4 <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800668a:	b29b      	uxth	r3, r3
 800668c:	2b00      	cmp	r3, #0
 800668e:	d1b5      	bne.n	80065fc <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006690:	69ba      	ldr	r2, [r7, #24]
 8006692:	6839      	ldr	r1, [r7, #0]
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f000 fce3 	bl	8007060 <SPI_EndRxTxTransaction>
 800669a:	4603      	mov	r3, r0
 800669c:	2b00      	cmp	r3, #0
 800669e:	d002      	beq.n	80066a6 <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	689b      	ldr	r3, [r3, #8]
 80066aa:	2b00      	cmp	r3, #0
 80066ac:	d10a      	bne.n	80066c4 <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80066ae:	2300      	movs	r3, #0
 80066b0:	613b      	str	r3, [r7, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	68db      	ldr	r3, [r3, #12]
 80066b8:	613b      	str	r3, [r7, #16]
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	689b      	ldr	r3, [r3, #8]
 80066c0:	613b      	str	r3, [r7, #16]
 80066c2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d002      	beq.n	80066d2 <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 80066cc:	2301      	movs	r3, #1
 80066ce:	77fb      	strb	r3, [r7, #31]
 80066d0:	e000      	b.n	80066d4 <HAL_SPI_Transmit+0x2c2>
  }

error:
 80066d2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2201      	movs	r2, #1
 80066d8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2200      	movs	r2, #0
 80066e0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 80066e4:	7ffb      	ldrb	r3, [r7, #31]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3720      	adds	r7, #32
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}

080066ee <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80066ee:	b580      	push	{r7, lr}
 80066f0:	b088      	sub	sp, #32
 80066f2:	af02      	add	r7, sp, #8
 80066f4:	60f8      	str	r0, [r7, #12]
 80066f6:	60b9      	str	r1, [r7, #8]
 80066f8:	603b      	str	r3, [r7, #0]
 80066fa:	4613      	mov	r3, r2
 80066fc:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	685b      	ldr	r3, [r3, #4]
 8006706:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800670a:	d112      	bne.n	8006732 <HAL_SPI_Receive+0x44>
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	689b      	ldr	r3, [r3, #8]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d10e      	bne.n	8006732 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	2204      	movs	r2, #4
 8006718:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800671c:	88fa      	ldrh	r2, [r7, #6]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	9300      	str	r3, [sp, #0]
 8006722:	4613      	mov	r3, r2
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	68b9      	ldr	r1, [r7, #8]
 8006728:	68f8      	ldr	r0, [r7, #12]
 800672a:	f000 f910 	bl	800694e <HAL_SPI_TransmitReceive>
 800672e:	4603      	mov	r3, r0
 8006730:	e109      	b.n	8006946 <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8006738:	2b01      	cmp	r3, #1
 800673a:	d101      	bne.n	8006740 <HAL_SPI_Receive+0x52>
 800673c:	2302      	movs	r3, #2
 800673e:	e102      	b.n	8006946 <HAL_SPI_Receive+0x258>
 8006740:	68fb      	ldr	r3, [r7, #12]
 8006742:	2201      	movs	r2, #1
 8006744:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006748:	f7fc f956 	bl	80029f8 <HAL_GetTick>
 800674c:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006754:	b2db      	uxtb	r3, r3
 8006756:	2b01      	cmp	r3, #1
 8006758:	d002      	beq.n	8006760 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800675a:	2302      	movs	r3, #2
 800675c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800675e:	e0e9      	b.n	8006934 <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d002      	beq.n	800676c <HAL_SPI_Receive+0x7e>
 8006766:	88fb      	ldrh	r3, [r7, #6]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d102      	bne.n	8006772 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800676c:	2301      	movs	r3, #1
 800676e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8006770:	e0e0      	b.n	8006934 <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2204      	movs	r2, #4
 8006776:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	88fa      	ldrh	r2, [r7, #6]
 800678a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	88fa      	ldrh	r2, [r7, #6]
 8006792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	2200      	movs	r2, #0
 800679a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2200      	movs	r2, #0
 80067a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	2200      	movs	r2, #0
 80067a6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	2200      	movs	r2, #0
 80067ac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2200      	movs	r2, #0
 80067b2:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80067bc:	d908      	bls.n	80067d0 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	685a      	ldr	r2, [r3, #4]
 80067c4:	68fb      	ldr	r3, [r7, #12]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80067cc:	605a      	str	r2, [r3, #4]
 80067ce:	e007      	b.n	80067e0 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	685a      	ldr	r2, [r3, #4]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80067de:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	689b      	ldr	r3, [r3, #8]
 80067e4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80067e8:	d10f      	bne.n	800680a <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	681a      	ldr	r2, [r3, #0]
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80067f8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	681a      	ldr	r2, [r3, #0]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006808:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006814:	2b40      	cmp	r3, #64	; 0x40
 8006816:	d007      	beq.n	8006828 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	681a      	ldr	r2, [r3, #0]
 800681e:	68fb      	ldr	r3, [r7, #12]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006826:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8006828:	68fb      	ldr	r3, [r7, #12]
 800682a:	68db      	ldr	r3, [r3, #12]
 800682c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006830:	d867      	bhi.n	8006902 <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8006832:	e030      	b.n	8006896 <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	689b      	ldr	r3, [r3, #8]
 800683a:	f003 0301 	and.w	r3, r3, #1
 800683e:	2b01      	cmp	r3, #1
 8006840:	d117      	bne.n	8006872 <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006842:	68fb      	ldr	r3, [r7, #12]
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	f103 020c 	add.w	r2, r3, #12
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800684e:	7812      	ldrb	r2, [r2, #0]
 8006850:	b2d2      	uxtb	r2, r2
 8006852:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006858:	1c5a      	adds	r2, r3, #1
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006864:	b29b      	uxth	r3, r3
 8006866:	3b01      	subs	r3, #1
 8006868:	b29a      	uxth	r2, r3
 800686a:	68fb      	ldr	r3, [r7, #12]
 800686c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8006870:	e011      	b.n	8006896 <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006872:	f7fc f8c1 	bl	80029f8 <HAL_GetTick>
 8006876:	4602      	mov	r2, r0
 8006878:	693b      	ldr	r3, [r7, #16]
 800687a:	1ad3      	subs	r3, r2, r3
 800687c:	683a      	ldr	r2, [r7, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d803      	bhi.n	800688a <HAL_SPI_Receive+0x19c>
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006888:	d102      	bne.n	8006890 <HAL_SPI_Receive+0x1a2>
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d102      	bne.n	8006896 <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8006890:	2303      	movs	r3, #3
 8006892:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006894:	e04e      	b.n	8006934 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800689c:	b29b      	uxth	r3, r3
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d1c8      	bne.n	8006834 <HAL_SPI_Receive+0x146>
 80068a2:	e034      	b.n	800690e <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	689b      	ldr	r3, [r3, #8]
 80068aa:	f003 0301 	and.w	r3, r3, #1
 80068ae:	2b01      	cmp	r3, #1
 80068b0:	d115      	bne.n	80068de <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	68da      	ldr	r2, [r3, #12]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068bc:	b292      	uxth	r2, r2
 80068be:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068c4:	1c9a      	adds	r2, r3, #2
 80068c6:	68fb      	ldr	r3, [r7, #12]
 80068c8:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80068d0:	b29b      	uxth	r3, r3
 80068d2:	3b01      	subs	r3, #1
 80068d4:	b29a      	uxth	r2, r3
 80068d6:	68fb      	ldr	r3, [r7, #12]
 80068d8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80068dc:	e011      	b.n	8006902 <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80068de:	f7fc f88b 	bl	80029f8 <HAL_GetTick>
 80068e2:	4602      	mov	r2, r0
 80068e4:	693b      	ldr	r3, [r7, #16]
 80068e6:	1ad3      	subs	r3, r2, r3
 80068e8:	683a      	ldr	r2, [r7, #0]
 80068ea:	429a      	cmp	r2, r3
 80068ec:	d803      	bhi.n	80068f6 <HAL_SPI_Receive+0x208>
 80068ee:	683b      	ldr	r3, [r7, #0]
 80068f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068f4:	d102      	bne.n	80068fc <HAL_SPI_Receive+0x20e>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d102      	bne.n	8006902 <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80068fc:	2303      	movs	r3, #3
 80068fe:	75fb      	strb	r3, [r7, #23]
          goto error;
 8006900:	e018      	b.n	8006934 <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006908:	b29b      	uxth	r3, r3
 800690a:	2b00      	cmp	r3, #0
 800690c:	d1ca      	bne.n	80068a4 <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800690e:	693a      	ldr	r2, [r7, #16]
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	68f8      	ldr	r0, [r7, #12]
 8006914:	f000 fb4c 	bl	8006fb0 <SPI_EndRxTransaction>
 8006918:	4603      	mov	r3, r0
 800691a:	2b00      	cmp	r3, #0
 800691c:	d002      	beq.n	8006924 <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	2220      	movs	r2, #32
 8006922:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006924:	68fb      	ldr	r3, [r7, #12]
 8006926:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 800692c:	2301      	movs	r3, #1
 800692e:	75fb      	strb	r3, [r7, #23]
 8006930:	e000      	b.n	8006934 <HAL_SPI_Receive+0x246>
  }

error :
 8006932:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006934:	68fb      	ldr	r3, [r7, #12]
 8006936:	2201      	movs	r2, #1
 8006938:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 800693c:	68fb      	ldr	r3, [r7, #12]
 800693e:	2200      	movs	r2, #0
 8006940:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006944:	7dfb      	ldrb	r3, [r7, #23]
}
 8006946:	4618      	mov	r0, r3
 8006948:	3718      	adds	r7, #24
 800694a:	46bd      	mov	sp, r7
 800694c:	bd80      	pop	{r7, pc}

0800694e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800694e:	b580      	push	{r7, lr}
 8006950:	b08a      	sub	sp, #40	; 0x28
 8006952:	af00      	add	r7, sp, #0
 8006954:	60f8      	str	r0, [r7, #12]
 8006956:	60b9      	str	r1, [r7, #8]
 8006958:	607a      	str	r2, [r7, #4]
 800695a:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800695c:	2301      	movs	r3, #1
 800695e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8006960:	2300      	movs	r3, #0
 8006962:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800696c:	2b01      	cmp	r3, #1
 800696e:	d101      	bne.n	8006974 <HAL_SPI_TransmitReceive+0x26>
 8006970:	2302      	movs	r3, #2
 8006972:	e1fb      	b.n	8006d6c <HAL_SPI_TransmitReceive+0x41e>
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2201      	movs	r2, #1
 8006978:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800697c:	f7fc f83c 	bl	80029f8 <HAL_GetTick>
 8006980:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8006988:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	685b      	ldr	r3, [r3, #4]
 800698e:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8006990:	887b      	ldrh	r3, [r7, #2]
 8006992:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 8006994:	887b      	ldrh	r3, [r7, #2]
 8006996:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006998:	7efb      	ldrb	r3, [r7, #27]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d00e      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x6e>
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80069a4:	d106      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	689b      	ldr	r3, [r3, #8]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d102      	bne.n	80069b4 <HAL_SPI_TransmitReceive+0x66>
 80069ae:	7efb      	ldrb	r3, [r7, #27]
 80069b0:	2b04      	cmp	r3, #4
 80069b2:	d003      	beq.n	80069bc <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80069b4:	2302      	movs	r3, #2
 80069b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80069ba:	e1cd      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80069bc:	68bb      	ldr	r3, [r7, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d005      	beq.n	80069ce <HAL_SPI_TransmitReceive+0x80>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	2b00      	cmp	r3, #0
 80069c6:	d002      	beq.n	80069ce <HAL_SPI_TransmitReceive+0x80>
 80069c8:	887b      	ldrh	r3, [r7, #2]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	d103      	bne.n	80069d6 <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80069ce:	2301      	movs	r3, #1
 80069d0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80069d4:	e1c0      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	2b04      	cmp	r3, #4
 80069e0:	d003      	beq.n	80069ea <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2205      	movs	r2, #5
 80069e6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	2200      	movs	r2, #0
 80069ee:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	687a      	ldr	r2, [r7, #4]
 80069f4:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	887a      	ldrh	r2, [r7, #2]
 80069fa:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	887a      	ldrh	r2, [r7, #2]
 8006a02:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006a06:	68fb      	ldr	r3, [r7, #12]
 8006a08:	68ba      	ldr	r2, [r7, #8]
 8006a0a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	887a      	ldrh	r2, [r7, #2]
 8006a10:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 8006a12:	68fb      	ldr	r3, [r7, #12]
 8006a14:	887a      	ldrh	r2, [r7, #2]
 8006a16:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8006a18:	68fb      	ldr	r3, [r7, #12]
 8006a1a:	2200      	movs	r2, #0
 8006a1c:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	2200      	movs	r2, #0
 8006a22:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	68db      	ldr	r3, [r3, #12]
 8006a28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a2c:	d802      	bhi.n	8006a34 <HAL_SPI_TransmitReceive+0xe6>
 8006a2e:	8a3b      	ldrh	r3, [r7, #16]
 8006a30:	2b01      	cmp	r3, #1
 8006a32:	d908      	bls.n	8006a46 <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	685a      	ldr	r2, [r3, #4]
 8006a3a:	68fb      	ldr	r3, [r7, #12]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006a42:	605a      	str	r2, [r3, #4]
 8006a44:	e007      	b.n	8006a56 <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	685a      	ldr	r2, [r3, #4]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006a54:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a60:	2b40      	cmp	r3, #64	; 0x40
 8006a62:	d007      	beq.n	8006a74 <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681a      	ldr	r2, [r3, #0]
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006a72:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	68db      	ldr	r3, [r3, #12]
 8006a78:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8006a7c:	d97c      	bls.n	8006b78 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d002      	beq.n	8006a8c <HAL_SPI_TransmitReceive+0x13e>
 8006a86:	8a7b      	ldrh	r3, [r7, #18]
 8006a88:	2b01      	cmp	r3, #1
 8006a8a:	d169      	bne.n	8006b60 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a90:	881a      	ldrh	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a9c:	1c9a      	adds	r2, r3, #2
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006ab0:	e056      	b.n	8006b60 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006ab2:	68fb      	ldr	r3, [r7, #12]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	689b      	ldr	r3, [r3, #8]
 8006ab8:	f003 0302 	and.w	r3, r3, #2
 8006abc:	2b02      	cmp	r3, #2
 8006abe:	d11b      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1aa>
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006ac4:	b29b      	uxth	r3, r3
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d016      	beq.n	8006af8 <HAL_SPI_TransmitReceive+0x1aa>
 8006aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006acc:	2b01      	cmp	r3, #1
 8006ace:	d113      	bne.n	8006af8 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	881a      	ldrh	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ae0:	1c9a      	adds	r2, r3, #2
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006aea:	b29b      	uxth	r3, r3
 8006aec:	3b01      	subs	r3, #1
 8006aee:	b29a      	uxth	r2, r3
 8006af0:	68fb      	ldr	r3, [r7, #12]
 8006af2:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006af4:	2300      	movs	r3, #0
 8006af6:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b01      	cmp	r3, #1
 8006b04:	d11c      	bne.n	8006b40 <HAL_SPI_TransmitReceive+0x1f2>
 8006b06:	68fb      	ldr	r3, [r7, #12]
 8006b08:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d016      	beq.n	8006b40 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68da      	ldr	r2, [r3, #12]
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1c:	b292      	uxth	r2, r2
 8006b1e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b24:	1c9a      	adds	r2, r3, #2
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	3b01      	subs	r3, #1
 8006b34:	b29a      	uxth	r2, r3
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006b3c:	2301      	movs	r3, #1
 8006b3e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006b40:	f7fb ff5a 	bl	80029f8 <HAL_GetTick>
 8006b44:	4602      	mov	r2, r0
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	1ad3      	subs	r3, r2, r3
 8006b4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d807      	bhi.n	8006b60 <HAL_SPI_TransmitReceive+0x212>
 8006b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b52:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b56:	d003      	beq.n	8006b60 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8006b58:	2303      	movs	r3, #3
 8006b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006b5e:	e0fb      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d1a3      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x164>
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006b70:	b29b      	uxth	r3, r3
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d19d      	bne.n	8006ab2 <HAL_SPI_TransmitReceive+0x164>
 8006b76:	e0df      	b.n	8006d38 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006b78:	68fb      	ldr	r3, [r7, #12]
 8006b7a:	685b      	ldr	r3, [r3, #4]
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d003      	beq.n	8006b88 <HAL_SPI_TransmitReceive+0x23a>
 8006b80:	8a7b      	ldrh	r3, [r7, #18]
 8006b82:	2b01      	cmp	r3, #1
 8006b84:	f040 80cb 	bne.w	8006d1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006b8c:	b29b      	uxth	r3, r3
 8006b8e:	2b01      	cmp	r3, #1
 8006b90:	d912      	bls.n	8006bb8 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b96:	881a      	ldrh	r2, [r3, #0]
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006b9e:	68fb      	ldr	r3, [r7, #12]
 8006ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba2:	1c9a      	adds	r2, r3, #2
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bac:	b29b      	uxth	r3, r3
 8006bae:	3b02      	subs	r3, #2
 8006bb0:	b29a      	uxth	r2, r3
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006bb6:	e0b2      	b.n	8006d1e <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	330c      	adds	r3, #12
 8006bc2:	7812      	ldrb	r2, [r2, #0]
 8006bc4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8006bc6:	68fb      	ldr	r3, [r7, #12]
 8006bc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006bca:	1c5a      	adds	r2, r3, #1
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bd4:	b29b      	uxth	r3, r3
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	b29a      	uxth	r2, r3
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006bde:	e09e      	b.n	8006d1e <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	689b      	ldr	r3, [r3, #8]
 8006be6:	f003 0302 	and.w	r3, r3, #2
 8006bea:	2b02      	cmp	r3, #2
 8006bec:	d134      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x30a>
 8006bee:	68fb      	ldr	r3, [r7, #12]
 8006bf0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006bf2:	b29b      	uxth	r3, r3
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d02f      	beq.n	8006c58 <HAL_SPI_TransmitReceive+0x30a>
 8006bf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d12c      	bne.n	8006c58 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c02:	b29b      	uxth	r3, r3
 8006c04:	2b01      	cmp	r3, #1
 8006c06:	d912      	bls.n	8006c2e <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c08:	68fb      	ldr	r3, [r7, #12]
 8006c0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c0c:	881a      	ldrh	r2, [r3, #0]
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c14:	68fb      	ldr	r3, [r7, #12]
 8006c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c18:	1c9a      	adds	r2, r3, #2
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c22:	b29b      	uxth	r3, r3
 8006c24:	3b02      	subs	r3, #2
 8006c26:	b29a      	uxth	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8006c2c:	e012      	b.n	8006c54 <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	330c      	adds	r3, #12
 8006c38:	7812      	ldrb	r2, [r2, #0]
 8006c3a:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c40:	1c5a      	adds	r2, r3, #1
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006c4a:	b29b      	uxth	r3, r3
 8006c4c:	3b01      	subs	r3, #1
 8006c4e:	b29a      	uxth	r2, r3
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8006c54:	2300      	movs	r3, #0
 8006c56:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006c58:	68fb      	ldr	r3, [r7, #12]
 8006c5a:	681b      	ldr	r3, [r3, #0]
 8006c5c:	689b      	ldr	r3, [r3, #8]
 8006c5e:	f003 0301 	and.w	r3, r3, #1
 8006c62:	2b01      	cmp	r3, #1
 8006c64:	d148      	bne.n	8006cf8 <HAL_SPI_TransmitReceive+0x3aa>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c6c:	b29b      	uxth	r3, r3
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d042      	beq.n	8006cf8 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 8006c72:	68fb      	ldr	r3, [r7, #12]
 8006c74:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d923      	bls.n	8006cc6 <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68da      	ldr	r2, [r3, #12]
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c88:	b292      	uxth	r2, r2
 8006c8a:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c90:	1c9a      	adds	r2, r3, #2
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006c9c:	b29b      	uxth	r3, r3
 8006c9e:	3b02      	subs	r3, #2
 8006ca0:	b29a      	uxth	r2, r3
 8006ca2:	68fb      	ldr	r3, [r7, #12]
 8006ca4:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006cae:	b29b      	uxth	r3, r3
 8006cb0:	2b01      	cmp	r3, #1
 8006cb2:	d81f      	bhi.n	8006cf4 <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	685a      	ldr	r2, [r3, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006cc2:	605a      	str	r2, [r3, #4]
 8006cc4:	e016      	b.n	8006cf4 <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006cc6:	68fb      	ldr	r3, [r7, #12]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	f103 020c 	add.w	r2, r3, #12
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cd2:	7812      	ldrb	r2, [r2, #0]
 8006cd4:	b2d2      	uxtb	r2, r2
 8006cd6:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006cdc:	1c5a      	adds	r2, r3, #1
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006ce8:	b29b      	uxth	r3, r3
 8006cea:	3b01      	subs	r3, #1
 8006cec:	b29a      	uxth	r2, r3
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8006cf4:	2301      	movs	r3, #1
 8006cf6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006cf8:	f7fb fe7e 	bl	80029f8 <HAL_GetTick>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	69fb      	ldr	r3, [r7, #28]
 8006d00:	1ad3      	subs	r3, r2, r3
 8006d02:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d803      	bhi.n	8006d10 <HAL_SPI_TransmitReceive+0x3c2>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d0e:	d102      	bne.n	8006d16 <HAL_SPI_TransmitReceive+0x3c8>
 8006d10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d103      	bne.n	8006d1e <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 8006d16:	2303      	movs	r3, #3
 8006d18:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8006d1c:	e01c      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8006d22:	b29b      	uxth	r3, r3
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	f47f af5b 	bne.w	8006be0 <HAL_SPI_TransmitReceive+0x292>
 8006d2a:	68fb      	ldr	r3, [r7, #12]
 8006d2c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8006d30:	b29b      	uxth	r3, r3
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	f47f af54 	bne.w	8006be0 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006d38:	69fa      	ldr	r2, [r7, #28]
 8006d3a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d3c:	68f8      	ldr	r0, [r7, #12]
 8006d3e:	f000 f98f 	bl	8007060 <SPI_EndRxTxTransaction>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d006      	beq.n	8006d56 <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8006d48:	2301      	movs	r3, #1
 8006d4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	2220      	movs	r2, #32
 8006d52:	661a      	str	r2, [r3, #96]	; 0x60
 8006d54:	e000      	b.n	8006d58 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 8006d56:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	2200      	movs	r2, #0
 8006d64:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8006d68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8006d6c:	4618      	mov	r0, r3
 8006d6e:	3728      	adds	r7, #40	; 0x28
 8006d70:	46bd      	mov	sp, r7
 8006d72:	bd80      	pop	{r7, pc}

08006d74 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b088      	sub	sp, #32
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	603b      	str	r3, [r7, #0]
 8006d80:	4613      	mov	r3, r2
 8006d82:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8006d84:	f7fb fe38 	bl	80029f8 <HAL_GetTick>
 8006d88:	4602      	mov	r2, r0
 8006d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d8c:	1a9b      	subs	r3, r3, r2
 8006d8e:	683a      	ldr	r2, [r7, #0]
 8006d90:	4413      	add	r3, r2
 8006d92:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8006d94:	f7fb fe30 	bl	80029f8 <HAL_GetTick>
 8006d98:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006d9a:	4b39      	ldr	r3, [pc, #228]	; (8006e80 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	015b      	lsls	r3, r3, #5
 8006da0:	0d1b      	lsrs	r3, r3, #20
 8006da2:	69fa      	ldr	r2, [r7, #28]
 8006da4:	fb02 f303 	mul.w	r3, r2, r3
 8006da8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006daa:	e054      	b.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006db2:	d050      	beq.n	8006e56 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006db4:	f7fb fe20 	bl	80029f8 <HAL_GetTick>
 8006db8:	4602      	mov	r2, r0
 8006dba:	69bb      	ldr	r3, [r7, #24]
 8006dbc:	1ad3      	subs	r3, r2, r3
 8006dbe:	69fa      	ldr	r2, [r7, #28]
 8006dc0:	429a      	cmp	r2, r3
 8006dc2:	d902      	bls.n	8006dca <SPI_WaitFlagStateUntilTimeout+0x56>
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d13d      	bne.n	8006e46 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006dd8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	685b      	ldr	r3, [r3, #4]
 8006dde:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006de2:	d111      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
 8006de4:	68fb      	ldr	r3, [r7, #12]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006dec:	d004      	beq.n	8006df8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006df6:	d107      	bne.n	8006e08 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006e06:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e0c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006e10:	d10f      	bne.n	8006e32 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	681a      	ldr	r2, [r3, #0]
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006e20:	601a      	str	r2, [r3, #0]
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006e30:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	2201      	movs	r2, #1
 8006e36:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006e42:	2303      	movs	r3, #3
 8006e44:	e017      	b.n	8006e76 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006e46:	697b      	ldr	r3, [r7, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006e50:	697b      	ldr	r3, [r7, #20]
 8006e52:	3b01      	subs	r3, #1
 8006e54:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	689a      	ldr	r2, [r3, #8]
 8006e5c:	68bb      	ldr	r3, [r7, #8]
 8006e5e:	4013      	ands	r3, r2
 8006e60:	68ba      	ldr	r2, [r7, #8]
 8006e62:	429a      	cmp	r2, r3
 8006e64:	bf0c      	ite	eq
 8006e66:	2301      	moveq	r3, #1
 8006e68:	2300      	movne	r3, #0
 8006e6a:	b2db      	uxtb	r3, r3
 8006e6c:	461a      	mov	r2, r3
 8006e6e:	79fb      	ldrb	r3, [r7, #7]
 8006e70:	429a      	cmp	r2, r3
 8006e72:	d19b      	bne.n	8006dac <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3720      	adds	r7, #32
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	20000000 	.word	0x20000000

08006e84 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8006e84:	b580      	push	{r7, lr}
 8006e86:	b08a      	sub	sp, #40	; 0x28
 8006e88:	af00      	add	r7, sp, #0
 8006e8a:	60f8      	str	r0, [r7, #12]
 8006e8c:	60b9      	str	r1, [r7, #8]
 8006e8e:	607a      	str	r2, [r7, #4]
 8006e90:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8006e92:	2300      	movs	r3, #0
 8006e94:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8006e96:	f7fb fdaf 	bl	80029f8 <HAL_GetTick>
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006e9e:	1a9b      	subs	r3, r3, r2
 8006ea0:	683a      	ldr	r2, [r7, #0]
 8006ea2:	4413      	add	r3, r2
 8006ea4:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8006ea6:	f7fb fda7 	bl	80029f8 <HAL_GetTick>
 8006eaa:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	330c      	adds	r3, #12
 8006eb2:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8006eb4:	4b3d      	ldr	r3, [pc, #244]	; (8006fac <SPI_WaitFifoStateUntilTimeout+0x128>)
 8006eb6:	681a      	ldr	r2, [r3, #0]
 8006eb8:	4613      	mov	r3, r2
 8006eba:	009b      	lsls	r3, r3, #2
 8006ebc:	4413      	add	r3, r2
 8006ebe:	00da      	lsls	r2, r3, #3
 8006ec0:	1ad3      	subs	r3, r2, r3
 8006ec2:	0d1b      	lsrs	r3, r3, #20
 8006ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ec6:	fb02 f303 	mul.w	r3, r2, r3
 8006eca:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8006ecc:	e060      	b.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8006ece:	68bb      	ldr	r3, [r7, #8]
 8006ed0:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 8006ed4:	d107      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8006edc:	69fb      	ldr	r3, [r7, #28]
 8006ede:	781b      	ldrb	r3, [r3, #0]
 8006ee0:	b2db      	uxtb	r3, r3
 8006ee2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8006ee4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 8006ee6:	683b      	ldr	r3, [r7, #0]
 8006ee8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006eec:	d050      	beq.n	8006f90 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8006eee:	f7fb fd83 	bl	80029f8 <HAL_GetTick>
 8006ef2:	4602      	mov	r2, r0
 8006ef4:	6a3b      	ldr	r3, [r7, #32]
 8006ef6:	1ad3      	subs	r3, r2, r3
 8006ef8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d902      	bls.n	8006f04 <SPI_WaitFifoStateUntilTimeout+0x80>
 8006efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d13d      	bne.n	8006f80 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	685a      	ldr	r2, [r3, #4]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006f12:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f14:	68fb      	ldr	r3, [r7, #12]
 8006f16:	685b      	ldr	r3, [r3, #4]
 8006f18:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006f1c:	d111      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	689b      	ldr	r3, [r3, #8]
 8006f22:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f26:	d004      	beq.n	8006f32 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006f28:	68fb      	ldr	r3, [r7, #12]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006f30:	d107      	bne.n	8006f42 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	681b      	ldr	r3, [r3, #0]
 8006f36:	681a      	ldr	r2, [r3, #0]
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f40:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006f46:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f4a:	d10f      	bne.n	8006f6c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681a      	ldr	r2, [r3, #0]
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006f5a:	601a      	str	r2, [r3, #0]
 8006f5c:	68fb      	ldr	r3, [r7, #12]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	681a      	ldr	r2, [r3, #0]
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006f6a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2201      	movs	r2, #1
 8006f70:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	2200      	movs	r2, #0
 8006f78:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8006f7c:	2303      	movs	r3, #3
 8006f7e:	e010      	b.n	8006fa2 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8006f80:	69bb      	ldr	r3, [r7, #24]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d101      	bne.n	8006f8a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8006f86:	2300      	movs	r3, #0
 8006f88:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8006f8a:	69bb      	ldr	r3, [r7, #24]
 8006f8c:	3b01      	subs	r3, #1
 8006f8e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	689a      	ldr	r2, [r3, #8]
 8006f96:	68bb      	ldr	r3, [r7, #8]
 8006f98:	4013      	ands	r3, r2
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	429a      	cmp	r2, r3
 8006f9e:	d196      	bne.n	8006ece <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8006fa0:	2300      	movs	r3, #0
}
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	3728      	adds	r7, #40	; 0x28
 8006fa6:	46bd      	mov	sp, r7
 8006fa8:	bd80      	pop	{r7, pc}
 8006faa:	bf00      	nop
 8006fac:	20000000 	.word	0x20000000

08006fb0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b086      	sub	sp, #24
 8006fb4:	af02      	add	r7, sp, #8
 8006fb6:	60f8      	str	r0, [r7, #12]
 8006fb8:	60b9      	str	r1, [r7, #8]
 8006fba:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006fc4:	d111      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	689b      	ldr	r3, [r3, #8]
 8006fca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fce:	d004      	beq.n	8006fda <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	689b      	ldr	r3, [r3, #8]
 8006fd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006fd8:	d107      	bne.n	8006fea <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	681a      	ldr	r2, [r3, #0]
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006fe8:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	9300      	str	r3, [sp, #0]
 8006fee:	68bb      	ldr	r3, [r7, #8]
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	2180      	movs	r1, #128	; 0x80
 8006ff4:	68f8      	ldr	r0, [r7, #12]
 8006ff6:	f7ff febd 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 8006ffa:	4603      	mov	r3, r0
 8006ffc:	2b00      	cmp	r3, #0
 8006ffe:	d007      	beq.n	8007010 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007004:	f043 0220 	orr.w	r2, r3, #32
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800700c:	2303      	movs	r3, #3
 800700e:	e023      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	685b      	ldr	r3, [r3, #4]
 8007014:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8007018:	d11d      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	689b      	ldr	r3, [r3, #8]
 800701e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007022:	d004      	beq.n	800702e <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	689b      	ldr	r3, [r3, #8]
 8007028:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800702c:	d113      	bne.n	8007056 <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	9300      	str	r3, [sp, #0]
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	2200      	movs	r2, #0
 8007036:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800703a:	68f8      	ldr	r0, [r7, #12]
 800703c:	f7ff ff22 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800704a:	f043 0220 	orr.w	r2, r3, #32
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 8007052:	2303      	movs	r3, #3
 8007054:	e000      	b.n	8007058 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 8007056:	2300      	movs	r3, #0
}
 8007058:	4618      	mov	r0, r3
 800705a:	3710      	adds	r7, #16
 800705c:	46bd      	mov	sp, r7
 800705e:	bd80      	pop	{r7, pc}

08007060 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8007060:	b580      	push	{r7, lr}
 8007062:	b086      	sub	sp, #24
 8007064:	af02      	add	r7, sp, #8
 8007066:	60f8      	str	r0, [r7, #12]
 8007068:	60b9      	str	r1, [r7, #8]
 800706a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	9300      	str	r3, [sp, #0]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	2200      	movs	r2, #0
 8007074:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8007078:	68f8      	ldr	r0, [r7, #12]
 800707a:	f7ff ff03 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 800707e:	4603      	mov	r3, r0
 8007080:	2b00      	cmp	r3, #0
 8007082:	d007      	beq.n	8007094 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007088:	f043 0220 	orr.w	r2, r3, #32
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8007090:	2303      	movs	r3, #3
 8007092:	e027      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8007094:	687b      	ldr	r3, [r7, #4]
 8007096:	9300      	str	r3, [sp, #0]
 8007098:	68bb      	ldr	r3, [r7, #8]
 800709a:	2200      	movs	r2, #0
 800709c:	2180      	movs	r1, #128	; 0x80
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f7ff fe68 	bl	8006d74 <SPI_WaitFlagStateUntilTimeout>
 80070a4:	4603      	mov	r3, r0
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d007      	beq.n	80070ba <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070ae:	f043 0220 	orr.w	r2, r3, #32
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e014      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	9300      	str	r3, [sp, #0]
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80070c6:	68f8      	ldr	r0, [r7, #12]
 80070c8:	f7ff fedc 	bl	8006e84 <SPI_WaitFifoStateUntilTimeout>
 80070cc:	4603      	mov	r3, r0
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d007      	beq.n	80070e2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80070d2:	68fb      	ldr	r3, [r7, #12]
 80070d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80070d6:	f043 0220 	orr.w	r2, r3, #32
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e000      	b.n	80070e4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80070e2:	2300      	movs	r3, #0
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3710      	adds	r7, #16
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}

080070ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d101      	bne.n	80070fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80070fa:	2301      	movs	r3, #1
 80070fc:	e049      	b.n	8007192 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007104:	b2db      	uxtb	r3, r3
 8007106:	2b00      	cmp	r3, #0
 8007108:	d106      	bne.n	8007118 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	2200      	movs	r2, #0
 800710e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007112:	6878      	ldr	r0, [r7, #4]
 8007114:	f7fb fb76 	bl	8002804 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2202      	movs	r2, #2
 800711c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	3304      	adds	r3, #4
 8007128:	4619      	mov	r1, r3
 800712a:	4610      	mov	r0, r2
 800712c:	f000 fe24 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	2201      	movs	r2, #1
 8007134:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2201      	movs	r2, #1
 8007144:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2201      	movs	r2, #1
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	2201      	movs	r2, #1
 8007154:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	2201      	movs	r2, #1
 800715c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	2201      	movs	r2, #1
 8007164:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	2201      	movs	r2, #1
 800716c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	2201      	movs	r2, #1
 8007174:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	2201      	movs	r2, #1
 800717c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2201      	movs	r2, #1
 8007184:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2201      	movs	r2, #1
 800718c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007190:	2300      	movs	r3, #0
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
	...

0800719c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800719c:	b480      	push	{r7}
 800719e:	b085      	sub	sp, #20
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	2b01      	cmp	r3, #1
 80071ae:	d001      	beq.n	80071b4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80071b0:	2301      	movs	r3, #1
 80071b2:	e042      	b.n	800723a <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	2202      	movs	r2, #2
 80071b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	4a21      	ldr	r2, [pc, #132]	; (8007248 <HAL_TIM_Base_Start+0xac>)
 80071c2:	4293      	cmp	r3, r2
 80071c4:	d018      	beq.n	80071f8 <HAL_TIM_Base_Start+0x5c>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ce:	d013      	beq.n	80071f8 <HAL_TIM_Base_Start+0x5c>
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	4a1d      	ldr	r2, [pc, #116]	; (800724c <HAL_TIM_Base_Start+0xb0>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d00e      	beq.n	80071f8 <HAL_TIM_Base_Start+0x5c>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	4a1c      	ldr	r2, [pc, #112]	; (8007250 <HAL_TIM_Base_Start+0xb4>)
 80071e0:	4293      	cmp	r3, r2
 80071e2:	d009      	beq.n	80071f8 <HAL_TIM_Base_Start+0x5c>
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	4a1a      	ldr	r2, [pc, #104]	; (8007254 <HAL_TIM_Base_Start+0xb8>)
 80071ea:	4293      	cmp	r3, r2
 80071ec:	d004      	beq.n	80071f8 <HAL_TIM_Base_Start+0x5c>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	4a19      	ldr	r2, [pc, #100]	; (8007258 <HAL_TIM_Base_Start+0xbc>)
 80071f4:	4293      	cmp	r3, r2
 80071f6:	d115      	bne.n	8007224 <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	689a      	ldr	r2, [r3, #8]
 80071fe:	4b17      	ldr	r3, [pc, #92]	; (800725c <HAL_TIM_Base_Start+0xc0>)
 8007200:	4013      	ands	r3, r2
 8007202:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	2b06      	cmp	r3, #6
 8007208:	d015      	beq.n	8007236 <HAL_TIM_Base_Start+0x9a>
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007210:	d011      	beq.n	8007236 <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	681a      	ldr	r2, [r3, #0]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	f042 0201 	orr.w	r2, r2, #1
 8007220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007222:	e008      	b.n	8007236 <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	681a      	ldr	r2, [r3, #0]
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f042 0201 	orr.w	r2, r2, #1
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	e000      	b.n	8007238 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007236:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007238:	2300      	movs	r3, #0
}
 800723a:	4618      	mov	r0, r3
 800723c:	3714      	adds	r7, #20
 800723e:	46bd      	mov	sp, r7
 8007240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007244:	4770      	bx	lr
 8007246:	bf00      	nop
 8007248:	40012c00 	.word	0x40012c00
 800724c:	40000400 	.word	0x40000400
 8007250:	40000800 	.word	0x40000800
 8007254:	40013400 	.word	0x40013400
 8007258:	40014000 	.word	0x40014000
 800725c:	00010007 	.word	0x00010007

08007260 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007260:	b480      	push	{r7}
 8007262:	b085      	sub	sp, #20
 8007264:	af00      	add	r7, sp, #0
 8007266:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800726e:	b2db      	uxtb	r3, r3
 8007270:	2b01      	cmp	r3, #1
 8007272:	d001      	beq.n	8007278 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007274:	2301      	movs	r3, #1
 8007276:	e04a      	b.n	800730e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2202      	movs	r2, #2
 800727c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f042 0201 	orr.w	r2, r2, #1
 800728e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a21      	ldr	r2, [pc, #132]	; (800731c <HAL_TIM_Base_Start_IT+0xbc>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d018      	beq.n	80072cc <HAL_TIM_Base_Start_IT+0x6c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80072a2:	d013      	beq.n	80072cc <HAL_TIM_Base_Start_IT+0x6c>
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	4a1d      	ldr	r2, [pc, #116]	; (8007320 <HAL_TIM_Base_Start_IT+0xc0>)
 80072aa:	4293      	cmp	r3, r2
 80072ac:	d00e      	beq.n	80072cc <HAL_TIM_Base_Start_IT+0x6c>
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	681b      	ldr	r3, [r3, #0]
 80072b2:	4a1c      	ldr	r2, [pc, #112]	; (8007324 <HAL_TIM_Base_Start_IT+0xc4>)
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d009      	beq.n	80072cc <HAL_TIM_Base_Start_IT+0x6c>
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	4a1a      	ldr	r2, [pc, #104]	; (8007328 <HAL_TIM_Base_Start_IT+0xc8>)
 80072be:	4293      	cmp	r3, r2
 80072c0:	d004      	beq.n	80072cc <HAL_TIM_Base_Start_IT+0x6c>
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	4a19      	ldr	r2, [pc, #100]	; (800732c <HAL_TIM_Base_Start_IT+0xcc>)
 80072c8:	4293      	cmp	r3, r2
 80072ca:	d115      	bne.n	80072f8 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689a      	ldr	r2, [r3, #8]
 80072d2:	4b17      	ldr	r3, [pc, #92]	; (8007330 <HAL_TIM_Base_Start_IT+0xd0>)
 80072d4:	4013      	ands	r3, r2
 80072d6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	2b06      	cmp	r3, #6
 80072dc:	d015      	beq.n	800730a <HAL_TIM_Base_Start_IT+0xaa>
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072e4:	d011      	beq.n	800730a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	681a      	ldr	r2, [r3, #0]
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	f042 0201 	orr.w	r2, r2, #1
 80072f4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f6:	e008      	b.n	800730a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	681a      	ldr	r2, [r3, #0]
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	f042 0201 	orr.w	r2, r2, #1
 8007306:	601a      	str	r2, [r3, #0]
 8007308:	e000      	b.n	800730c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800730a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800730c:	2300      	movs	r3, #0
}
 800730e:	4618      	mov	r0, r3
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	40012c00 	.word	0x40012c00
 8007320:	40000400 	.word	0x40000400
 8007324:	40000800 	.word	0x40000800
 8007328:	40013400 	.word	0x40013400
 800732c:	40014000 	.word	0x40014000
 8007330:	00010007 	.word	0x00010007

08007334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8007334:	b580      	push	{r7, lr}
 8007336:	b082      	sub	sp, #8
 8007338:	af00      	add	r7, sp, #0
 800733a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	2b00      	cmp	r3, #0
 8007340:	d101      	bne.n	8007346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8007342:	2301      	movs	r3, #1
 8007344:	e049      	b.n	80073da <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800734c:	b2db      	uxtb	r3, r3
 800734e:	2b00      	cmp	r3, #0
 8007350:	d106      	bne.n	8007360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007352:	687b      	ldr	r3, [r7, #4]
 8007354:	2200      	movs	r2, #0
 8007356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800735a:	6878      	ldr	r0, [r7, #4]
 800735c:	f000 f841 	bl	80073e2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	2202      	movs	r2, #2
 8007364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	3304      	adds	r3, #4
 8007370:	4619      	mov	r1, r3
 8007372:	4610      	mov	r0, r2
 8007374:	f000 fd00 	bl	8007d78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	2201      	movs	r2, #1
 800737c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	2201      	movs	r2, #1
 800738c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	2201      	movs	r2, #1
 8007394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	2201      	movs	r2, #1
 80073a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	2201      	movs	r2, #1
 80073ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	2201      	movs	r2, #1
 80073b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2201      	movs	r2, #1
 80073bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2201      	movs	r2, #1
 80073c4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	2201      	movs	r2, #1
 80073d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80073d8:	2300      	movs	r3, #0
}
 80073da:	4618      	mov	r0, r3
 80073dc:	3708      	adds	r7, #8
 80073de:	46bd      	mov	sp, r7
 80073e0:	bd80      	pop	{r7, pc}

080073e2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80073e2:	b480      	push	{r7}
 80073e4:	b083      	sub	sp, #12
 80073e6:	af00      	add	r7, sp, #0
 80073e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80073ea:	bf00      	nop
 80073ec:	370c      	adds	r7, #12
 80073ee:	46bd      	mov	sp, r7
 80073f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f4:	4770      	bx	lr
	...

080073f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b084      	sub	sp, #16
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	6078      	str	r0, [r7, #4]
 8007400:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	2b00      	cmp	r3, #0
 8007406:	d109      	bne.n	800741c <HAL_TIM_PWM_Start+0x24>
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800740e:	b2db      	uxtb	r3, r3
 8007410:	2b01      	cmp	r3, #1
 8007412:	bf14      	ite	ne
 8007414:	2301      	movne	r3, #1
 8007416:	2300      	moveq	r3, #0
 8007418:	b2db      	uxtb	r3, r3
 800741a:	e03c      	b.n	8007496 <HAL_TIM_PWM_Start+0x9e>
 800741c:	683b      	ldr	r3, [r7, #0]
 800741e:	2b04      	cmp	r3, #4
 8007420:	d109      	bne.n	8007436 <HAL_TIM_PWM_Start+0x3e>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007428:	b2db      	uxtb	r3, r3
 800742a:	2b01      	cmp	r3, #1
 800742c:	bf14      	ite	ne
 800742e:	2301      	movne	r3, #1
 8007430:	2300      	moveq	r3, #0
 8007432:	b2db      	uxtb	r3, r3
 8007434:	e02f      	b.n	8007496 <HAL_TIM_PWM_Start+0x9e>
 8007436:	683b      	ldr	r3, [r7, #0]
 8007438:	2b08      	cmp	r3, #8
 800743a:	d109      	bne.n	8007450 <HAL_TIM_PWM_Start+0x58>
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007442:	b2db      	uxtb	r3, r3
 8007444:	2b01      	cmp	r3, #1
 8007446:	bf14      	ite	ne
 8007448:	2301      	movne	r3, #1
 800744a:	2300      	moveq	r3, #0
 800744c:	b2db      	uxtb	r3, r3
 800744e:	e022      	b.n	8007496 <HAL_TIM_PWM_Start+0x9e>
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	2b0c      	cmp	r3, #12
 8007454:	d109      	bne.n	800746a <HAL_TIM_PWM_Start+0x72>
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800745c:	b2db      	uxtb	r3, r3
 800745e:	2b01      	cmp	r3, #1
 8007460:	bf14      	ite	ne
 8007462:	2301      	movne	r3, #1
 8007464:	2300      	moveq	r3, #0
 8007466:	b2db      	uxtb	r3, r3
 8007468:	e015      	b.n	8007496 <HAL_TIM_PWM_Start+0x9e>
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	2b10      	cmp	r3, #16
 800746e:	d109      	bne.n	8007484 <HAL_TIM_PWM_Start+0x8c>
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007476:	b2db      	uxtb	r3, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	bf14      	ite	ne
 800747c:	2301      	movne	r3, #1
 800747e:	2300      	moveq	r3, #0
 8007480:	b2db      	uxtb	r3, r3
 8007482:	e008      	b.n	8007496 <HAL_TIM_PWM_Start+0x9e>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d001      	beq.n	800749e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800749a:	2301      	movs	r3, #1
 800749c:	e097      	b.n	80075ce <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800749e:	683b      	ldr	r3, [r7, #0]
 80074a0:	2b00      	cmp	r3, #0
 80074a2:	d104      	bne.n	80074ae <HAL_TIM_PWM_Start+0xb6>
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	2202      	movs	r2, #2
 80074a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074ac:	e023      	b.n	80074f6 <HAL_TIM_PWM_Start+0xfe>
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	2b04      	cmp	r3, #4
 80074b2:	d104      	bne.n	80074be <HAL_TIM_PWM_Start+0xc6>
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	2202      	movs	r2, #2
 80074b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80074bc:	e01b      	b.n	80074f6 <HAL_TIM_PWM_Start+0xfe>
 80074be:	683b      	ldr	r3, [r7, #0]
 80074c0:	2b08      	cmp	r3, #8
 80074c2:	d104      	bne.n	80074ce <HAL_TIM_PWM_Start+0xd6>
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2202      	movs	r2, #2
 80074c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80074cc:	e013      	b.n	80074f6 <HAL_TIM_PWM_Start+0xfe>
 80074ce:	683b      	ldr	r3, [r7, #0]
 80074d0:	2b0c      	cmp	r3, #12
 80074d2:	d104      	bne.n	80074de <HAL_TIM_PWM_Start+0xe6>
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2202      	movs	r2, #2
 80074d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80074dc:	e00b      	b.n	80074f6 <HAL_TIM_PWM_Start+0xfe>
 80074de:	683b      	ldr	r3, [r7, #0]
 80074e0:	2b10      	cmp	r3, #16
 80074e2:	d104      	bne.n	80074ee <HAL_TIM_PWM_Start+0xf6>
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	2202      	movs	r2, #2
 80074e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80074ec:	e003      	b.n	80074f6 <HAL_TIM_PWM_Start+0xfe>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	2202      	movs	r2, #2
 80074f2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	2201      	movs	r2, #1
 80074fc:	6839      	ldr	r1, [r7, #0]
 80074fe:	4618      	mov	r0, r3
 8007500:	f001 f85c 	bl	80085bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	681b      	ldr	r3, [r3, #0]
 8007508:	4a33      	ldr	r2, [pc, #204]	; (80075d8 <HAL_TIM_PWM_Start+0x1e0>)
 800750a:	4293      	cmp	r3, r2
 800750c:	d013      	beq.n	8007536 <HAL_TIM_PWM_Start+0x13e>
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	4a32      	ldr	r2, [pc, #200]	; (80075dc <HAL_TIM_PWM_Start+0x1e4>)
 8007514:	4293      	cmp	r3, r2
 8007516:	d00e      	beq.n	8007536 <HAL_TIM_PWM_Start+0x13e>
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	4a30      	ldr	r2, [pc, #192]	; (80075e0 <HAL_TIM_PWM_Start+0x1e8>)
 800751e:	4293      	cmp	r3, r2
 8007520:	d009      	beq.n	8007536 <HAL_TIM_PWM_Start+0x13e>
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	4a2f      	ldr	r2, [pc, #188]	; (80075e4 <HAL_TIM_PWM_Start+0x1ec>)
 8007528:	4293      	cmp	r3, r2
 800752a:	d004      	beq.n	8007536 <HAL_TIM_PWM_Start+0x13e>
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a2d      	ldr	r2, [pc, #180]	; (80075e8 <HAL_TIM_PWM_Start+0x1f0>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d101      	bne.n	800753a <HAL_TIM_PWM_Start+0x142>
 8007536:	2301      	movs	r3, #1
 8007538:	e000      	b.n	800753c <HAL_TIM_PWM_Start+0x144>
 800753a:	2300      	movs	r3, #0
 800753c:	2b00      	cmp	r3, #0
 800753e:	d007      	beq.n	8007550 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007540:	687b      	ldr	r3, [r7, #4]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800754e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	4a20      	ldr	r2, [pc, #128]	; (80075d8 <HAL_TIM_PWM_Start+0x1e0>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d018      	beq.n	800758c <HAL_TIM_PWM_Start+0x194>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007562:	d013      	beq.n	800758c <HAL_TIM_PWM_Start+0x194>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a20      	ldr	r2, [pc, #128]	; (80075ec <HAL_TIM_PWM_Start+0x1f4>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00e      	beq.n	800758c <HAL_TIM_PWM_Start+0x194>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a1f      	ldr	r2, [pc, #124]	; (80075f0 <HAL_TIM_PWM_Start+0x1f8>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d009      	beq.n	800758c <HAL_TIM_PWM_Start+0x194>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a17      	ldr	r2, [pc, #92]	; (80075dc <HAL_TIM_PWM_Start+0x1e4>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d004      	beq.n	800758c <HAL_TIM_PWM_Start+0x194>
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	4a16      	ldr	r2, [pc, #88]	; (80075e0 <HAL_TIM_PWM_Start+0x1e8>)
 8007588:	4293      	cmp	r3, r2
 800758a:	d115      	bne.n	80075b8 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	689a      	ldr	r2, [r3, #8]
 8007592:	4b18      	ldr	r3, [pc, #96]	; (80075f4 <HAL_TIM_PWM_Start+0x1fc>)
 8007594:	4013      	ands	r3, r2
 8007596:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	2b06      	cmp	r3, #6
 800759c:	d015      	beq.n	80075ca <HAL_TIM_PWM_Start+0x1d2>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80075a4:	d011      	beq.n	80075ca <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075b6:	e008      	b.n	80075ca <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	681b      	ldr	r3, [r3, #0]
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f042 0201 	orr.w	r2, r2, #1
 80075c6:	601a      	str	r2, [r3, #0]
 80075c8:	e000      	b.n	80075cc <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075ca:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80075cc:	2300      	movs	r3, #0
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	3710      	adds	r7, #16
 80075d2:	46bd      	mov	sp, r7
 80075d4:	bd80      	pop	{r7, pc}
 80075d6:	bf00      	nop
 80075d8:	40012c00 	.word	0x40012c00
 80075dc:	40013400 	.word	0x40013400
 80075e0:	40014000 	.word	0x40014000
 80075e4:	40014400 	.word	0x40014400
 80075e8:	40014800 	.word	0x40014800
 80075ec:	40000400 	.word	0x40000400
 80075f0:	40000800 	.word	0x40000800
 80075f4:	00010007 	.word	0x00010007

080075f8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	691b      	ldr	r3, [r3, #16]
 8007606:	f003 0302 	and.w	r3, r3, #2
 800760a:	2b02      	cmp	r3, #2
 800760c:	d122      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	68db      	ldr	r3, [r3, #12]
 8007614:	f003 0302 	and.w	r3, r3, #2
 8007618:	2b02      	cmp	r3, #2
 800761a:	d11b      	bne.n	8007654 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f06f 0202 	mvn.w	r2, #2
 8007624:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	2201      	movs	r2, #1
 800762a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	699b      	ldr	r3, [r3, #24]
 8007632:	f003 0303 	and.w	r3, r3, #3
 8007636:	2b00      	cmp	r3, #0
 8007638:	d003      	beq.n	8007642 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800763a:	6878      	ldr	r0, [r7, #4]
 800763c:	f000 fb7e 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007640:	e005      	b.n	800764e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007642:	6878      	ldr	r0, [r7, #4]
 8007644:	f000 fb70 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 fb81 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	2200      	movs	r2, #0
 8007652:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	691b      	ldr	r3, [r3, #16]
 800765a:	f003 0304 	and.w	r3, r3, #4
 800765e:	2b04      	cmp	r3, #4
 8007660:	d122      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	68db      	ldr	r3, [r3, #12]
 8007668:	f003 0304 	and.w	r3, r3, #4
 800766c:	2b04      	cmp	r3, #4
 800766e:	d11b      	bne.n	80076a8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	f06f 0204 	mvn.w	r2, #4
 8007678:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2202      	movs	r2, #2
 800767e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	699b      	ldr	r3, [r3, #24]
 8007686:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800768a:	2b00      	cmp	r3, #0
 800768c:	d003      	beq.n	8007696 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800768e:	6878      	ldr	r0, [r7, #4]
 8007690:	f000 fb54 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 8007694:	e005      	b.n	80076a2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fb46 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800769c:	6878      	ldr	r0, [r7, #4]
 800769e:	f000 fb57 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	2200      	movs	r2, #0
 80076a6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	691b      	ldr	r3, [r3, #16]
 80076ae:	f003 0308 	and.w	r3, r3, #8
 80076b2:	2b08      	cmp	r3, #8
 80076b4:	d122      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	681b      	ldr	r3, [r3, #0]
 80076ba:	68db      	ldr	r3, [r3, #12]
 80076bc:	f003 0308 	and.w	r3, r3, #8
 80076c0:	2b08      	cmp	r3, #8
 80076c2:	d11b      	bne.n	80076fc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	f06f 0208 	mvn.w	r2, #8
 80076cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	2204      	movs	r2, #4
 80076d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	69db      	ldr	r3, [r3, #28]
 80076da:	f003 0303 	and.w	r3, r3, #3
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d003      	beq.n	80076ea <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fb2a 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 80076e8:	e005      	b.n	80076f6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076ea:	6878      	ldr	r0, [r7, #4]
 80076ec:	f000 fb1c 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076f0:	6878      	ldr	r0, [r7, #4]
 80076f2:	f000 fb2d 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2200      	movs	r2, #0
 80076fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	681b      	ldr	r3, [r3, #0]
 8007700:	691b      	ldr	r3, [r3, #16]
 8007702:	f003 0310 	and.w	r3, r3, #16
 8007706:	2b10      	cmp	r3, #16
 8007708:	d122      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	68db      	ldr	r3, [r3, #12]
 8007710:	f003 0310 	and.w	r3, r3, #16
 8007714:	2b10      	cmp	r3, #16
 8007716:	d11b      	bne.n	8007750 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	f06f 0210 	mvn.w	r2, #16
 8007720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2208      	movs	r2, #8
 8007726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	69db      	ldr	r3, [r3, #28]
 800772e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007732:	2b00      	cmp	r3, #0
 8007734:	d003      	beq.n	800773e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007736:	6878      	ldr	r0, [r7, #4]
 8007738:	f000 fb00 	bl	8007d3c <HAL_TIM_IC_CaptureCallback>
 800773c:	e005      	b.n	800774a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800773e:	6878      	ldr	r0, [r7, #4]
 8007740:	f000 faf2 	bl	8007d28 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007744:	6878      	ldr	r0, [r7, #4]
 8007746:	f000 fb03 	bl	8007d50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2200      	movs	r2, #0
 800774e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	691b      	ldr	r3, [r3, #16]
 8007756:	f003 0301 	and.w	r3, r3, #1
 800775a:	2b01      	cmp	r3, #1
 800775c:	d10e      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	68db      	ldr	r3, [r3, #12]
 8007764:	f003 0301 	and.w	r3, r3, #1
 8007768:	2b01      	cmp	r3, #1
 800776a:	d107      	bne.n	800777c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	f06f 0201 	mvn.w	r2, #1
 8007774:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 facc 	bl	8007d14 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	691b      	ldr	r3, [r3, #16]
 8007782:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007786:	2b80      	cmp	r3, #128	; 0x80
 8007788:	d10e      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007794:	2b80      	cmp	r3, #128	; 0x80
 8007796:	d107      	bne.n	80077a8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077a2:	6878      	ldr	r0, [r7, #4]
 80077a4:	f000 ffbc 	bl	8008720 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	691b      	ldr	r3, [r3, #16]
 80077ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80077b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80077b6:	d10e      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	68db      	ldr	r3, [r3, #12]
 80077be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c2:	2b80      	cmp	r3, #128	; 0x80
 80077c4:	d107      	bne.n	80077d6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80077ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80077d0:	6878      	ldr	r0, [r7, #4]
 80077d2:	f000 ffaf 	bl	8008734 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	691b      	ldr	r3, [r3, #16]
 80077dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077e0:	2b40      	cmp	r3, #64	; 0x40
 80077e2:	d10e      	bne.n	8007802 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	68db      	ldr	r3, [r3, #12]
 80077ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077ee:	2b40      	cmp	r3, #64	; 0x40
 80077f0:	d107      	bne.n	8007802 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80077fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80077fc:	6878      	ldr	r0, [r7, #4]
 80077fe:	f000 fab1 	bl	8007d64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	691b      	ldr	r3, [r3, #16]
 8007808:	f003 0320 	and.w	r3, r3, #32
 800780c:	2b20      	cmp	r3, #32
 800780e:	d10e      	bne.n	800782e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	68db      	ldr	r3, [r3, #12]
 8007816:	f003 0320 	and.w	r3, r3, #32
 800781a:	2b20      	cmp	r3, #32
 800781c:	d107      	bne.n	800782e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f06f 0220 	mvn.w	r2, #32
 8007826:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007828:	6878      	ldr	r0, [r7, #4]
 800782a:	f000 ff6f 	bl	800870c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	691b      	ldr	r3, [r3, #16]
 8007834:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007838:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800783c:	d10f      	bne.n	800785e <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	68db      	ldr	r3, [r3, #12]
 8007844:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007848:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800784c:	d107      	bne.n	800785e <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 8007856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8007858:	6878      	ldr	r0, [r7, #4]
 800785a:	f000 ff75 	bl	8008748 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	691b      	ldr	r3, [r3, #16]
 8007864:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007868:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800786c:	d10f      	bne.n	800788e <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007878:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800787c:	d107      	bne.n	800788e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8007886:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8007888:	6878      	ldr	r0, [r7, #4]
 800788a:	f000 ff67 	bl	800875c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	691b      	ldr	r3, [r3, #16]
 8007894:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007898:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800789c:	d10f      	bne.n	80078be <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	68db      	ldr	r3, [r3, #12]
 80078a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80078a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80078ac:	d107      	bne.n	80078be <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80078b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80078b8:	6878      	ldr	r0, [r7, #4]
 80078ba:	f000 ff59 	bl	8008770 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	691b      	ldr	r3, [r3, #16]
 80078c4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078cc:	d10f      	bne.n	80078ee <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	68db      	ldr	r3, [r3, #12]
 80078d4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80078d8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80078dc:	d107      	bne.n	80078ee <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80078e6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 ff4b 	bl	8008784 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80078ee:	bf00      	nop
 80078f0:	3708      	adds	r7, #8
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}
	...

080078f8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80078f8:	b580      	push	{r7, lr}
 80078fa:	b086      	sub	sp, #24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007904:	2300      	movs	r3, #0
 8007906:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800790e:	2b01      	cmp	r3, #1
 8007910:	d101      	bne.n	8007916 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007912:	2302      	movs	r3, #2
 8007914:	e0ff      	b.n	8007b16 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	2201      	movs	r2, #1
 800791a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2b14      	cmp	r3, #20
 8007922:	f200 80f0 	bhi.w	8007b06 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8007926:	a201      	add	r2, pc, #4	; (adr r2, 800792c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800792c:	08007981 	.word	0x08007981
 8007930:	08007b07 	.word	0x08007b07
 8007934:	08007b07 	.word	0x08007b07
 8007938:	08007b07 	.word	0x08007b07
 800793c:	080079c1 	.word	0x080079c1
 8007940:	08007b07 	.word	0x08007b07
 8007944:	08007b07 	.word	0x08007b07
 8007948:	08007b07 	.word	0x08007b07
 800794c:	08007a03 	.word	0x08007a03
 8007950:	08007b07 	.word	0x08007b07
 8007954:	08007b07 	.word	0x08007b07
 8007958:	08007b07 	.word	0x08007b07
 800795c:	08007a43 	.word	0x08007a43
 8007960:	08007b07 	.word	0x08007b07
 8007964:	08007b07 	.word	0x08007b07
 8007968:	08007b07 	.word	0x08007b07
 800796c:	08007a85 	.word	0x08007a85
 8007970:	08007b07 	.word	0x08007b07
 8007974:	08007b07 	.word	0x08007b07
 8007978:	08007b07 	.word	0x08007b07
 800797c:	08007ac5 	.word	0x08007ac5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	68b9      	ldr	r1, [r7, #8]
 8007986:	4618      	mov	r0, r3
 8007988:	f000 fa86 	bl	8007e98 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	699a      	ldr	r2, [r3, #24]
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f042 0208 	orr.w	r2, r2, #8
 800799a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	681b      	ldr	r3, [r3, #0]
 80079a0:	699a      	ldr	r2, [r3, #24]
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f022 0204 	bic.w	r2, r2, #4
 80079aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	6999      	ldr	r1, [r3, #24]
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	691a      	ldr	r2, [r3, #16]
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	430a      	orrs	r2, r1
 80079bc:	619a      	str	r2, [r3, #24]
      break;
 80079be:	e0a5      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	68b9      	ldr	r1, [r7, #8]
 80079c6:	4618      	mov	r0, r3
 80079c8:	f000 faf6 	bl	8007fb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079cc:	68fb      	ldr	r3, [r7, #12]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	699a      	ldr	r2, [r3, #24]
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	699a      	ldr	r2, [r3, #24]
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	6999      	ldr	r1, [r3, #24]
 80079f2:	68bb      	ldr	r3, [r7, #8]
 80079f4:	691b      	ldr	r3, [r3, #16]
 80079f6:	021a      	lsls	r2, r3, #8
 80079f8:	68fb      	ldr	r3, [r7, #12]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	430a      	orrs	r2, r1
 80079fe:	619a      	str	r2, [r3, #24]
      break;
 8007a00:	e084      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68b9      	ldr	r1, [r7, #8]
 8007a08:	4618      	mov	r0, r3
 8007a0a:	f000 fb5f 	bl	80080cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a0e:	68fb      	ldr	r3, [r7, #12]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	69da      	ldr	r2, [r3, #28]
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f042 0208 	orr.w	r2, r2, #8
 8007a1c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	69da      	ldr	r2, [r3, #28]
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 0204 	bic.w	r2, r2, #4
 8007a2c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a2e:	68fb      	ldr	r3, [r7, #12]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	69d9      	ldr	r1, [r3, #28]
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	691a      	ldr	r2, [r3, #16]
 8007a38:	68fb      	ldr	r3, [r7, #12]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	430a      	orrs	r2, r1
 8007a3e:	61da      	str	r2, [r3, #28]
      break;
 8007a40:	e064      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	68b9      	ldr	r1, [r7, #8]
 8007a48:	4618      	mov	r0, r3
 8007a4a:	f000 fbc7 	bl	80081dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	69da      	ldr	r2, [r3, #28]
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a5c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	69da      	ldr	r2, [r3, #28]
 8007a64:	68fb      	ldr	r3, [r7, #12]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a6c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a6e:	68fb      	ldr	r3, [r7, #12]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	69d9      	ldr	r1, [r3, #28]
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	691b      	ldr	r3, [r3, #16]
 8007a78:	021a      	lsls	r2, r3, #8
 8007a7a:	68fb      	ldr	r3, [r7, #12]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	430a      	orrs	r2, r1
 8007a80:	61da      	str	r2, [r3, #28]
      break;
 8007a82:	e043      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	681b      	ldr	r3, [r3, #0]
 8007a88:	68b9      	ldr	r1, [r7, #8]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f000 fc30 	bl	80082f0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	f042 0208 	orr.w	r2, r2, #8
 8007a9e:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8007aa0:	68fb      	ldr	r3, [r7, #12]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	f022 0204 	bic.w	r2, r2, #4
 8007aae:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007ab6:	68bb      	ldr	r3, [r7, #8]
 8007ab8:	691a      	ldr	r2, [r3, #16]
 8007aba:	68fb      	ldr	r3, [r7, #12]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	430a      	orrs	r2, r1
 8007ac0:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007ac2:	e023      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	68b9      	ldr	r1, [r7, #8]
 8007aca:	4618      	mov	r0, r3
 8007acc:	f000 fc74 	bl	80083b8 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ad6:	68fb      	ldr	r3, [r7, #12]
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007ade:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8007ae0:	68fb      	ldr	r3, [r7, #12]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007aee:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8007af6:	68bb      	ldr	r3, [r7, #8]
 8007af8:	691b      	ldr	r3, [r3, #16]
 8007afa:	021a      	lsls	r2, r3, #8
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	430a      	orrs	r2, r1
 8007b02:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8007b04:	e002      	b.n	8007b0c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8007b06:	2301      	movs	r3, #1
 8007b08:	75fb      	strb	r3, [r7, #23]
      break;
 8007b0a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	2200      	movs	r2, #0
 8007b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007b16:	4618      	mov	r0, r3
 8007b18:	3718      	adds	r7, #24
 8007b1a:	46bd      	mov	sp, r7
 8007b1c:	bd80      	pop	{r7, pc}
 8007b1e:	bf00      	nop

08007b20 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b084      	sub	sp, #16
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
 8007b28:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007b2a:	2300      	movs	r3, #0
 8007b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	d101      	bne.n	8007b3c <HAL_TIM_ConfigClockSource+0x1c>
 8007b38:	2302      	movs	r3, #2
 8007b3a:	e0de      	b.n	8007cfa <HAL_TIM_ConfigClockSource+0x1da>
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2202      	movs	r2, #2
 8007b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	689b      	ldr	r3, [r3, #8]
 8007b52:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8007b5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007b5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007b60:	68bb      	ldr	r3, [r7, #8]
 8007b62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007b66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	68ba      	ldr	r2, [r7, #8]
 8007b6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	4a63      	ldr	r2, [pc, #396]	; (8007d04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b76:	4293      	cmp	r3, r2
 8007b78:	f000 80a9 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007b7c:	4a61      	ldr	r2, [pc, #388]	; (8007d04 <HAL_TIM_ConfigClockSource+0x1e4>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	f200 80ae 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007b84:	4a60      	ldr	r2, [pc, #384]	; (8007d08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b86:	4293      	cmp	r3, r2
 8007b88:	f000 80a1 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007b8c:	4a5e      	ldr	r2, [pc, #376]	; (8007d08 <HAL_TIM_ConfigClockSource+0x1e8>)
 8007b8e:	4293      	cmp	r3, r2
 8007b90:	f200 80a6 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007b94:	4a5d      	ldr	r2, [pc, #372]	; (8007d0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	f000 8099 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007b9c:	4a5b      	ldr	r2, [pc, #364]	; (8007d0c <HAL_TIM_ConfigClockSource+0x1ec>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	f200 809e 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007ba4:	4a5a      	ldr	r2, [pc, #360]	; (8007d10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	f000 8091 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007bac:	4a58      	ldr	r2, [pc, #352]	; (8007d10 <HAL_TIM_ConfigClockSource+0x1f0>)
 8007bae:	4293      	cmp	r3, r2
 8007bb0:	f200 8096 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007bb4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bb8:	f000 8089 	beq.w	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007bbc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8007bc0:	f200 808e 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007bc4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bc8:	d03e      	beq.n	8007c48 <HAL_TIM_ConfigClockSource+0x128>
 8007bca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007bce:	f200 8087 	bhi.w	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007bd2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bd6:	f000 8086 	beq.w	8007ce6 <HAL_TIM_ConfigClockSource+0x1c6>
 8007bda:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007bde:	d87f      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007be0:	2b70      	cmp	r3, #112	; 0x70
 8007be2:	d01a      	beq.n	8007c1a <HAL_TIM_ConfigClockSource+0xfa>
 8007be4:	2b70      	cmp	r3, #112	; 0x70
 8007be6:	d87b      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007be8:	2b60      	cmp	r3, #96	; 0x60
 8007bea:	d050      	beq.n	8007c8e <HAL_TIM_ConfigClockSource+0x16e>
 8007bec:	2b60      	cmp	r3, #96	; 0x60
 8007bee:	d877      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007bf0:	2b50      	cmp	r3, #80	; 0x50
 8007bf2:	d03c      	beq.n	8007c6e <HAL_TIM_ConfigClockSource+0x14e>
 8007bf4:	2b50      	cmp	r3, #80	; 0x50
 8007bf6:	d873      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007bf8:	2b40      	cmp	r3, #64	; 0x40
 8007bfa:	d058      	beq.n	8007cae <HAL_TIM_ConfigClockSource+0x18e>
 8007bfc:	2b40      	cmp	r3, #64	; 0x40
 8007bfe:	d86f      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c00:	2b30      	cmp	r3, #48	; 0x30
 8007c02:	d064      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007c04:	2b30      	cmp	r3, #48	; 0x30
 8007c06:	d86b      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c08:	2b20      	cmp	r3, #32
 8007c0a:	d060      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007c0c:	2b20      	cmp	r3, #32
 8007c0e:	d867      	bhi.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
 8007c10:	2b00      	cmp	r3, #0
 8007c12:	d05c      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007c14:	2b10      	cmp	r3, #16
 8007c16:	d05a      	beq.n	8007cce <HAL_TIM_ConfigClockSource+0x1ae>
 8007c18:	e062      	b.n	8007ce0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6818      	ldr	r0, [r3, #0]
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	6899      	ldr	r1, [r3, #8]
 8007c22:	683b      	ldr	r3, [r7, #0]
 8007c24:	685a      	ldr	r2, [r3, #4]
 8007c26:	683b      	ldr	r3, [r7, #0]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f000 fca7 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	681b      	ldr	r3, [r3, #0]
 8007c32:	689b      	ldr	r3, [r3, #8]
 8007c34:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c3c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	609a      	str	r2, [r3, #8]
      break;
 8007c46:	e04f      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6818      	ldr	r0, [r3, #0]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	6899      	ldr	r1, [r3, #8]
 8007c50:	683b      	ldr	r3, [r7, #0]
 8007c52:	685a      	ldr	r2, [r3, #4]
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f000 fc90 	bl	800857c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	689a      	ldr	r2, [r3, #8]
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c6a:	609a      	str	r2, [r3, #8]
      break;
 8007c6c:	e03c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6818      	ldr	r0, [r3, #0]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	6859      	ldr	r1, [r3, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	461a      	mov	r2, r3
 8007c7c:	f000 fc02 	bl	8008484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	2150      	movs	r1, #80	; 0x50
 8007c86:	4618      	mov	r0, r3
 8007c88:	f000 fc5b 	bl	8008542 <TIM_ITRx_SetConfig>
      break;
 8007c8c:	e02c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	683b      	ldr	r3, [r7, #0]
 8007c94:	6859      	ldr	r1, [r3, #4]
 8007c96:	683b      	ldr	r3, [r7, #0]
 8007c98:	68db      	ldr	r3, [r3, #12]
 8007c9a:	461a      	mov	r2, r3
 8007c9c:	f000 fc21 	bl	80084e2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	2160      	movs	r1, #96	; 0x60
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	f000 fc4b 	bl	8008542 <TIM_ITRx_SetConfig>
      break;
 8007cac:	e01c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	6818      	ldr	r0, [r3, #0]
 8007cb2:	683b      	ldr	r3, [r7, #0]
 8007cb4:	6859      	ldr	r1, [r3, #4]
 8007cb6:	683b      	ldr	r3, [r7, #0]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	461a      	mov	r2, r3
 8007cbc:	f000 fbe2 	bl	8008484 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	2140      	movs	r1, #64	; 0x40
 8007cc6:	4618      	mov	r0, r3
 8007cc8:	f000 fc3b 	bl	8008542 <TIM_ITRx_SetConfig>
      break;
 8007ccc:	e00c      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	681a      	ldr	r2, [r3, #0]
 8007cd2:	683b      	ldr	r3, [r7, #0]
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	4619      	mov	r1, r3
 8007cd8:	4610      	mov	r0, r2
 8007cda:	f000 fc32 	bl	8008542 <TIM_ITRx_SetConfig>
      break;
 8007cde:	e003      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	73fb      	strb	r3, [r7, #15]
      break;
 8007ce4:	e000      	b.n	8007ce8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 8007ce6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2201      	movs	r2, #1
 8007cec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007cf8:	7bfb      	ldrb	r3, [r7, #15]
}
 8007cfa:	4618      	mov	r0, r3
 8007cfc:	3710      	adds	r7, #16
 8007cfe:	46bd      	mov	sp, r7
 8007d00:	bd80      	pop	{r7, pc}
 8007d02:	bf00      	nop
 8007d04:	00100070 	.word	0x00100070
 8007d08:	00100040 	.word	0x00100040
 8007d0c:	00100030 	.word	0x00100030
 8007d10:	00100020 	.word	0x00100020

08007d14 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d14:	b480      	push	{r7}
 8007d16:	b083      	sub	sp, #12
 8007d18:	af00      	add	r7, sp, #0
 8007d1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8007d1c:	bf00      	nop
 8007d1e:	370c      	adds	r7, #12
 8007d20:	46bd      	mov	sp, r7
 8007d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d26:	4770      	bx	lr

08007d28 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d28:	b480      	push	{r7}
 8007d2a:	b083      	sub	sp, #12
 8007d2c:	af00      	add	r7, sp, #0
 8007d2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d30:	bf00      	nop
 8007d32:	370c      	adds	r7, #12
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b083      	sub	sp, #12
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d44:	bf00      	nop
 8007d46:	370c      	adds	r7, #12
 8007d48:	46bd      	mov	sp, r7
 8007d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4e:	4770      	bx	lr

08007d50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
 8007d80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	681b      	ldr	r3, [r3, #0]
 8007d86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	4a3c      	ldr	r2, [pc, #240]	; (8007e7c <TIM_Base_SetConfig+0x104>)
 8007d8c:	4293      	cmp	r3, r2
 8007d8e:	d00f      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007d96:	d00b      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	4a39      	ldr	r2, [pc, #228]	; (8007e80 <TIM_Base_SetConfig+0x108>)
 8007d9c:	4293      	cmp	r3, r2
 8007d9e:	d007      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	4a38      	ldr	r2, [pc, #224]	; (8007e84 <TIM_Base_SetConfig+0x10c>)
 8007da4:	4293      	cmp	r3, r2
 8007da6:	d003      	beq.n	8007db0 <TIM_Base_SetConfig+0x38>
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	4a37      	ldr	r2, [pc, #220]	; (8007e88 <TIM_Base_SetConfig+0x110>)
 8007dac:	4293      	cmp	r3, r2
 8007dae:	d108      	bne.n	8007dc2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007db6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007db8:	683b      	ldr	r3, [r7, #0]
 8007dba:	685b      	ldr	r3, [r3, #4]
 8007dbc:	68fa      	ldr	r2, [r7, #12]
 8007dbe:	4313      	orrs	r3, r2
 8007dc0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	4a2d      	ldr	r2, [pc, #180]	; (8007e7c <TIM_Base_SetConfig+0x104>)
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d01b      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dd0:	d017      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	4a2a      	ldr	r2, [pc, #168]	; (8007e80 <TIM_Base_SetConfig+0x108>)
 8007dd6:	4293      	cmp	r3, r2
 8007dd8:	d013      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	4a29      	ldr	r2, [pc, #164]	; (8007e84 <TIM_Base_SetConfig+0x10c>)
 8007dde:	4293      	cmp	r3, r2
 8007de0:	d00f      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a28      	ldr	r2, [pc, #160]	; (8007e88 <TIM_Base_SetConfig+0x110>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d00b      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a27      	ldr	r2, [pc, #156]	; (8007e8c <TIM_Base_SetConfig+0x114>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d007      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	4a26      	ldr	r2, [pc, #152]	; (8007e90 <TIM_Base_SetConfig+0x118>)
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d003      	beq.n	8007e02 <TIM_Base_SetConfig+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a25      	ldr	r2, [pc, #148]	; (8007e94 <TIM_Base_SetConfig+0x11c>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d108      	bne.n	8007e14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e02:	68fb      	ldr	r3, [r7, #12]
 8007e04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e0a:	683b      	ldr	r3, [r7, #0]
 8007e0c:	68db      	ldr	r3, [r3, #12]
 8007e0e:	68fa      	ldr	r2, [r7, #12]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e14:	68fb      	ldr	r3, [r7, #12]
 8007e16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	695b      	ldr	r3, [r3, #20]
 8007e1e:	4313      	orrs	r3, r2
 8007e20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	68fa      	ldr	r2, [r7, #12]
 8007e26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e28:	683b      	ldr	r3, [r7, #0]
 8007e2a:	689a      	ldr	r2, [r3, #8]
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e30:	683b      	ldr	r3, [r7, #0]
 8007e32:	681a      	ldr	r2, [r3, #0]
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	4a10      	ldr	r2, [pc, #64]	; (8007e7c <TIM_Base_SetConfig+0x104>)
 8007e3c:	4293      	cmp	r3, r2
 8007e3e:	d00f      	beq.n	8007e60 <TIM_Base_SetConfig+0xe8>
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	4a11      	ldr	r2, [pc, #68]	; (8007e88 <TIM_Base_SetConfig+0x110>)
 8007e44:	4293      	cmp	r3, r2
 8007e46:	d00b      	beq.n	8007e60 <TIM_Base_SetConfig+0xe8>
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	4a10      	ldr	r2, [pc, #64]	; (8007e8c <TIM_Base_SetConfig+0x114>)
 8007e4c:	4293      	cmp	r3, r2
 8007e4e:	d007      	beq.n	8007e60 <TIM_Base_SetConfig+0xe8>
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	4a0f      	ldr	r2, [pc, #60]	; (8007e90 <TIM_Base_SetConfig+0x118>)
 8007e54:	4293      	cmp	r3, r2
 8007e56:	d003      	beq.n	8007e60 <TIM_Base_SetConfig+0xe8>
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	4a0e      	ldr	r2, [pc, #56]	; (8007e94 <TIM_Base_SetConfig+0x11c>)
 8007e5c:	4293      	cmp	r3, r2
 8007e5e:	d103      	bne.n	8007e68 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	691a      	ldr	r2, [r3, #16]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	615a      	str	r2, [r3, #20]
}
 8007e6e:	bf00      	nop
 8007e70:	3714      	adds	r7, #20
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40012c00 	.word	0x40012c00
 8007e80:	40000400 	.word	0x40000400
 8007e84:	40000800 	.word	0x40000800
 8007e88:	40013400 	.word	0x40013400
 8007e8c:	40014000 	.word	0x40014000
 8007e90:	40014400 	.word	0x40014400
 8007e94:	40014800 	.word	0x40014800

08007e98 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e98:	b480      	push	{r7}
 8007e9a:	b087      	sub	sp, #28
 8007e9c:	af00      	add	r7, sp, #0
 8007e9e:	6078      	str	r0, [r7, #4]
 8007ea0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	6a1b      	ldr	r3, [r3, #32]
 8007ea6:	f023 0201 	bic.w	r2, r3, #1
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6a1b      	ldr	r3, [r3, #32]
 8007eb2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	685b      	ldr	r3, [r3, #4]
 8007eb8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	699b      	ldr	r3, [r3, #24]
 8007ebe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ec6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007eca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ecc:	68fb      	ldr	r3, [r7, #12]
 8007ece:	f023 0303 	bic.w	r3, r3, #3
 8007ed2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed4:	683b      	ldr	r3, [r7, #0]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	68fa      	ldr	r2, [r7, #12]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ede:	697b      	ldr	r3, [r7, #20]
 8007ee0:	f023 0302 	bic.w	r3, r3, #2
 8007ee4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ee6:	683b      	ldr	r3, [r7, #0]
 8007ee8:	689b      	ldr	r3, [r3, #8]
 8007eea:	697a      	ldr	r2, [r7, #20]
 8007eec:	4313      	orrs	r3, r2
 8007eee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	4a2c      	ldr	r2, [pc, #176]	; (8007fa4 <TIM_OC1_SetConfig+0x10c>)
 8007ef4:	4293      	cmp	r3, r2
 8007ef6:	d00f      	beq.n	8007f18 <TIM_OC1_SetConfig+0x80>
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	4a2b      	ldr	r2, [pc, #172]	; (8007fa8 <TIM_OC1_SetConfig+0x110>)
 8007efc:	4293      	cmp	r3, r2
 8007efe:	d00b      	beq.n	8007f18 <TIM_OC1_SetConfig+0x80>
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	4a2a      	ldr	r2, [pc, #168]	; (8007fac <TIM_OC1_SetConfig+0x114>)
 8007f04:	4293      	cmp	r3, r2
 8007f06:	d007      	beq.n	8007f18 <TIM_OC1_SetConfig+0x80>
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	4a29      	ldr	r2, [pc, #164]	; (8007fb0 <TIM_OC1_SetConfig+0x118>)
 8007f0c:	4293      	cmp	r3, r2
 8007f0e:	d003      	beq.n	8007f18 <TIM_OC1_SetConfig+0x80>
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	4a28      	ldr	r2, [pc, #160]	; (8007fb4 <TIM_OC1_SetConfig+0x11c>)
 8007f14:	4293      	cmp	r3, r2
 8007f16:	d10c      	bne.n	8007f32 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007f18:	697b      	ldr	r3, [r7, #20]
 8007f1a:	f023 0308 	bic.w	r3, r3, #8
 8007f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f20:	683b      	ldr	r3, [r7, #0]
 8007f22:	68db      	ldr	r3, [r3, #12]
 8007f24:	697a      	ldr	r2, [r7, #20]
 8007f26:	4313      	orrs	r3, r2
 8007f28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f2a:	697b      	ldr	r3, [r7, #20]
 8007f2c:	f023 0304 	bic.w	r3, r3, #4
 8007f30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	4a1b      	ldr	r2, [pc, #108]	; (8007fa4 <TIM_OC1_SetConfig+0x10c>)
 8007f36:	4293      	cmp	r3, r2
 8007f38:	d00f      	beq.n	8007f5a <TIM_OC1_SetConfig+0xc2>
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	4a1a      	ldr	r2, [pc, #104]	; (8007fa8 <TIM_OC1_SetConfig+0x110>)
 8007f3e:	4293      	cmp	r3, r2
 8007f40:	d00b      	beq.n	8007f5a <TIM_OC1_SetConfig+0xc2>
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	4a19      	ldr	r2, [pc, #100]	; (8007fac <TIM_OC1_SetConfig+0x114>)
 8007f46:	4293      	cmp	r3, r2
 8007f48:	d007      	beq.n	8007f5a <TIM_OC1_SetConfig+0xc2>
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	4a18      	ldr	r2, [pc, #96]	; (8007fb0 <TIM_OC1_SetConfig+0x118>)
 8007f4e:	4293      	cmp	r3, r2
 8007f50:	d003      	beq.n	8007f5a <TIM_OC1_SetConfig+0xc2>
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	4a17      	ldr	r2, [pc, #92]	; (8007fb4 <TIM_OC1_SetConfig+0x11c>)
 8007f56:	4293      	cmp	r3, r2
 8007f58:	d111      	bne.n	8007f7e <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f5a:	693b      	ldr	r3, [r7, #16]
 8007f5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f60:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f62:	693b      	ldr	r3, [r7, #16]
 8007f64:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f68:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f6a:	683b      	ldr	r3, [r7, #0]
 8007f6c:	695b      	ldr	r3, [r3, #20]
 8007f6e:	693a      	ldr	r2, [r7, #16]
 8007f70:	4313      	orrs	r3, r2
 8007f72:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f74:	683b      	ldr	r3, [r7, #0]
 8007f76:	699b      	ldr	r3, [r3, #24]
 8007f78:	693a      	ldr	r2, [r7, #16]
 8007f7a:	4313      	orrs	r3, r2
 8007f7c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	693a      	ldr	r2, [r7, #16]
 8007f82:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	68fa      	ldr	r2, [r7, #12]
 8007f88:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f8a:	683b      	ldr	r3, [r7, #0]
 8007f8c:	685a      	ldr	r2, [r3, #4]
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	697a      	ldr	r2, [r7, #20]
 8007f96:	621a      	str	r2, [r3, #32]
}
 8007f98:	bf00      	nop
 8007f9a:	371c      	adds	r7, #28
 8007f9c:	46bd      	mov	sp, r7
 8007f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa2:	4770      	bx	lr
 8007fa4:	40012c00 	.word	0x40012c00
 8007fa8:	40013400 	.word	0x40013400
 8007fac:	40014000 	.word	0x40014000
 8007fb0:	40014400 	.word	0x40014400
 8007fb4:	40014800 	.word	0x40014800

08007fb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b087      	sub	sp, #28
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	6078      	str	r0, [r7, #4]
 8007fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	6a1b      	ldr	r3, [r3, #32]
 8007fc6:	f023 0210 	bic.w	r2, r3, #16
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	6a1b      	ldr	r3, [r3, #32]
 8007fd2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	685b      	ldr	r3, [r3, #4]
 8007fd8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	699b      	ldr	r3, [r3, #24]
 8007fde:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007fe0:	68fb      	ldr	r3, [r7, #12]
 8007fe2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007fe6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ff2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007ff4:	683b      	ldr	r3, [r7, #0]
 8007ff6:	681b      	ldr	r3, [r3, #0]
 8007ff8:	021b      	lsls	r3, r3, #8
 8007ffa:	68fa      	ldr	r2, [r7, #12]
 8007ffc:	4313      	orrs	r3, r2
 8007ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	f023 0320 	bic.w	r3, r3, #32
 8008006:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	011b      	lsls	r3, r3, #4
 800800e:	697a      	ldr	r2, [r7, #20]
 8008010:	4313      	orrs	r3, r2
 8008012:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	4a28      	ldr	r2, [pc, #160]	; (80080b8 <TIM_OC2_SetConfig+0x100>)
 8008018:	4293      	cmp	r3, r2
 800801a:	d003      	beq.n	8008024 <TIM_OC2_SetConfig+0x6c>
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	4a27      	ldr	r2, [pc, #156]	; (80080bc <TIM_OC2_SetConfig+0x104>)
 8008020:	4293      	cmp	r3, r2
 8008022:	d10d      	bne.n	8008040 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8008024:	697b      	ldr	r3, [r7, #20]
 8008026:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800802a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	68db      	ldr	r3, [r3, #12]
 8008030:	011b      	lsls	r3, r3, #4
 8008032:	697a      	ldr	r2, [r7, #20]
 8008034:	4313      	orrs	r3, r2
 8008036:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8008038:	697b      	ldr	r3, [r7, #20]
 800803a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800803e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	4a1d      	ldr	r2, [pc, #116]	; (80080b8 <TIM_OC2_SetConfig+0x100>)
 8008044:	4293      	cmp	r3, r2
 8008046:	d00f      	beq.n	8008068 <TIM_OC2_SetConfig+0xb0>
 8008048:	687b      	ldr	r3, [r7, #4]
 800804a:	4a1c      	ldr	r2, [pc, #112]	; (80080bc <TIM_OC2_SetConfig+0x104>)
 800804c:	4293      	cmp	r3, r2
 800804e:	d00b      	beq.n	8008068 <TIM_OC2_SetConfig+0xb0>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	4a1b      	ldr	r2, [pc, #108]	; (80080c0 <TIM_OC2_SetConfig+0x108>)
 8008054:	4293      	cmp	r3, r2
 8008056:	d007      	beq.n	8008068 <TIM_OC2_SetConfig+0xb0>
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	4a1a      	ldr	r2, [pc, #104]	; (80080c4 <TIM_OC2_SetConfig+0x10c>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d003      	beq.n	8008068 <TIM_OC2_SetConfig+0xb0>
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a19      	ldr	r2, [pc, #100]	; (80080c8 <TIM_OC2_SetConfig+0x110>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d113      	bne.n	8008090 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008068:	693b      	ldr	r3, [r7, #16]
 800806a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800806e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008076:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008078:	683b      	ldr	r3, [r7, #0]
 800807a:	695b      	ldr	r3, [r3, #20]
 800807c:	009b      	lsls	r3, r3, #2
 800807e:	693a      	ldr	r2, [r7, #16]
 8008080:	4313      	orrs	r3, r2
 8008082:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008084:	683b      	ldr	r3, [r7, #0]
 8008086:	699b      	ldr	r3, [r3, #24]
 8008088:	009b      	lsls	r3, r3, #2
 800808a:	693a      	ldr	r2, [r7, #16]
 800808c:	4313      	orrs	r3, r2
 800808e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	693a      	ldr	r2, [r7, #16]
 8008094:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800809c:	683b      	ldr	r3, [r7, #0]
 800809e:	685a      	ldr	r2, [r3, #4]
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	621a      	str	r2, [r3, #32]
}
 80080aa:	bf00      	nop
 80080ac:	371c      	adds	r7, #28
 80080ae:	46bd      	mov	sp, r7
 80080b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b4:	4770      	bx	lr
 80080b6:	bf00      	nop
 80080b8:	40012c00 	.word	0x40012c00
 80080bc:	40013400 	.word	0x40013400
 80080c0:	40014000 	.word	0x40014000
 80080c4:	40014400 	.word	0x40014400
 80080c8:	40014800 	.word	0x40014800

080080cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80080cc:	b480      	push	{r7}
 80080ce:	b087      	sub	sp, #28
 80080d0:	af00      	add	r7, sp, #0
 80080d2:	6078      	str	r0, [r7, #4]
 80080d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	6a1b      	ldr	r3, [r3, #32]
 80080da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	6a1b      	ldr	r3, [r3, #32]
 80080e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	685b      	ldr	r3, [r3, #4]
 80080ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	69db      	ldr	r3, [r3, #28]
 80080f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80080f4:	68fb      	ldr	r3, [r7, #12]
 80080f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80080fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80080fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	f023 0303 	bic.w	r3, r3, #3
 8008106:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008108:	683b      	ldr	r3, [r7, #0]
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68fa      	ldr	r2, [r7, #12]
 800810e:	4313      	orrs	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8008118:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	021b      	lsls	r3, r3, #8
 8008120:	697a      	ldr	r2, [r7, #20]
 8008122:	4313      	orrs	r3, r2
 8008124:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	4a27      	ldr	r2, [pc, #156]	; (80081c8 <TIM_OC3_SetConfig+0xfc>)
 800812a:	4293      	cmp	r3, r2
 800812c:	d003      	beq.n	8008136 <TIM_OC3_SetConfig+0x6a>
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	4a26      	ldr	r2, [pc, #152]	; (80081cc <TIM_OC3_SetConfig+0x100>)
 8008132:	4293      	cmp	r3, r2
 8008134:	d10d      	bne.n	8008152 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8008136:	697b      	ldr	r3, [r7, #20]
 8008138:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800813c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800813e:	683b      	ldr	r3, [r7, #0]
 8008140:	68db      	ldr	r3, [r3, #12]
 8008142:	021b      	lsls	r3, r3, #8
 8008144:	697a      	ldr	r2, [r7, #20]
 8008146:	4313      	orrs	r3, r2
 8008148:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008150:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	4a1c      	ldr	r2, [pc, #112]	; (80081c8 <TIM_OC3_SetConfig+0xfc>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d00f      	beq.n	800817a <TIM_OC3_SetConfig+0xae>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	4a1b      	ldr	r2, [pc, #108]	; (80081cc <TIM_OC3_SetConfig+0x100>)
 800815e:	4293      	cmp	r3, r2
 8008160:	d00b      	beq.n	800817a <TIM_OC3_SetConfig+0xae>
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a1a      	ldr	r2, [pc, #104]	; (80081d0 <TIM_OC3_SetConfig+0x104>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d007      	beq.n	800817a <TIM_OC3_SetConfig+0xae>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	4a19      	ldr	r2, [pc, #100]	; (80081d4 <TIM_OC3_SetConfig+0x108>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d003      	beq.n	800817a <TIM_OC3_SetConfig+0xae>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a18      	ldr	r2, [pc, #96]	; (80081d8 <TIM_OC3_SetConfig+0x10c>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d113      	bne.n	80081a2 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800817a:	693b      	ldr	r3, [r7, #16]
 800817c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008180:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8008182:	693b      	ldr	r3, [r7, #16]
 8008184:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008188:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	695b      	ldr	r3, [r3, #20]
 800818e:	011b      	lsls	r3, r3, #4
 8008190:	693a      	ldr	r2, [r7, #16]
 8008192:	4313      	orrs	r3, r2
 8008194:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	011b      	lsls	r3, r3, #4
 800819c:	693a      	ldr	r2, [r7, #16]
 800819e:	4313      	orrs	r3, r2
 80081a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	693a      	ldr	r2, [r7, #16]
 80081a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	68fa      	ldr	r2, [r7, #12]
 80081ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	685a      	ldr	r2, [r3, #4]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	697a      	ldr	r2, [r7, #20]
 80081ba:	621a      	str	r2, [r3, #32]
}
 80081bc:	bf00      	nop
 80081be:	371c      	adds	r7, #28
 80081c0:	46bd      	mov	sp, r7
 80081c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c6:	4770      	bx	lr
 80081c8:	40012c00 	.word	0x40012c00
 80081cc:	40013400 	.word	0x40013400
 80081d0:	40014000 	.word	0x40014000
 80081d4:	40014400 	.word	0x40014400
 80081d8:	40014800 	.word	0x40014800

080081dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80081dc:	b480      	push	{r7}
 80081de:	b087      	sub	sp, #28
 80081e0:	af00      	add	r7, sp, #0
 80081e2:	6078      	str	r0, [r7, #4]
 80081e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	6a1b      	ldr	r3, [r3, #32]
 80081ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	6a1b      	ldr	r3, [r3, #32]
 80081f6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	685b      	ldr	r3, [r3, #4]
 80081fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	69db      	ldr	r3, [r3, #28]
 8008202:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800820a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800820e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008210:	68fb      	ldr	r3, [r7, #12]
 8008212:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008216:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	021b      	lsls	r3, r3, #8
 800821e:	68fa      	ldr	r2, [r7, #12]
 8008220:	4313      	orrs	r3, r2
 8008222:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800822a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800822c:	683b      	ldr	r3, [r7, #0]
 800822e:	689b      	ldr	r3, [r3, #8]
 8008230:	031b      	lsls	r3, r3, #12
 8008232:	697a      	ldr	r2, [r7, #20]
 8008234:	4313      	orrs	r3, r2
 8008236:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	4a28      	ldr	r2, [pc, #160]	; (80082dc <TIM_OC4_SetConfig+0x100>)
 800823c:	4293      	cmp	r3, r2
 800823e:	d003      	beq.n	8008248 <TIM_OC4_SetConfig+0x6c>
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	4a27      	ldr	r2, [pc, #156]	; (80082e0 <TIM_OC4_SetConfig+0x104>)
 8008244:	4293      	cmp	r3, r2
 8008246:	d10d      	bne.n	8008264 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8008248:	697b      	ldr	r3, [r7, #20]
 800824a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800824e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8008250:	683b      	ldr	r3, [r7, #0]
 8008252:	68db      	ldr	r3, [r3, #12]
 8008254:	031b      	lsls	r3, r3, #12
 8008256:	697a      	ldr	r2, [r7, #20]
 8008258:	4313      	orrs	r3, r2
 800825a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800825c:	697b      	ldr	r3, [r7, #20]
 800825e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008262:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	4a1d      	ldr	r2, [pc, #116]	; (80082dc <TIM_OC4_SetConfig+0x100>)
 8008268:	4293      	cmp	r3, r2
 800826a:	d00f      	beq.n	800828c <TIM_OC4_SetConfig+0xb0>
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	4a1c      	ldr	r2, [pc, #112]	; (80082e0 <TIM_OC4_SetConfig+0x104>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00b      	beq.n	800828c <TIM_OC4_SetConfig+0xb0>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	4a1b      	ldr	r2, [pc, #108]	; (80082e4 <TIM_OC4_SetConfig+0x108>)
 8008278:	4293      	cmp	r3, r2
 800827a:	d007      	beq.n	800828c <TIM_OC4_SetConfig+0xb0>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a1a      	ldr	r2, [pc, #104]	; (80082e8 <TIM_OC4_SetConfig+0x10c>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_OC4_SetConfig+0xb0>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	4a19      	ldr	r2, [pc, #100]	; (80082ec <TIM_OC4_SetConfig+0x110>)
 8008288:	4293      	cmp	r3, r2
 800828a:	d113      	bne.n	80082b4 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8008292:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8008294:	693b      	ldr	r3, [r7, #16]
 8008296:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800829a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800829c:	683b      	ldr	r3, [r7, #0]
 800829e:	695b      	ldr	r3, [r3, #20]
 80082a0:	019b      	lsls	r3, r3, #6
 80082a2:	693a      	ldr	r2, [r7, #16]
 80082a4:	4313      	orrs	r3, r2
 80082a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 80082a8:	683b      	ldr	r3, [r7, #0]
 80082aa:	699b      	ldr	r3, [r3, #24]
 80082ac:	019b      	lsls	r3, r3, #6
 80082ae:	693a      	ldr	r2, [r7, #16]
 80082b0:	4313      	orrs	r3, r2
 80082b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	693a      	ldr	r2, [r7, #16]
 80082b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68fa      	ldr	r2, [r7, #12]
 80082be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685a      	ldr	r2, [r3, #4]
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	697a      	ldr	r2, [r7, #20]
 80082cc:	621a      	str	r2, [r3, #32]
}
 80082ce:	bf00      	nop
 80082d0:	371c      	adds	r7, #28
 80082d2:	46bd      	mov	sp, r7
 80082d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d8:	4770      	bx	lr
 80082da:	bf00      	nop
 80082dc:	40012c00 	.word	0x40012c00
 80082e0:	40013400 	.word	0x40013400
 80082e4:	40014000 	.word	0x40014000
 80082e8:	40014400 	.word	0x40014400
 80082ec:	40014800 	.word	0x40014800

080082f0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80082f0:	b480      	push	{r7}
 80082f2:	b087      	sub	sp, #28
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
 80082f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	6a1b      	ldr	r3, [r3, #32]
 80082fe:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	6a1b      	ldr	r3, [r3, #32]
 800830a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800831e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008324:	683b      	ldr	r3, [r7, #0]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	68fa      	ldr	r2, [r7, #12]
 800832a:	4313      	orrs	r3, r2
 800832c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800832e:	693b      	ldr	r3, [r7, #16]
 8008330:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8008334:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8008336:	683b      	ldr	r3, [r7, #0]
 8008338:	689b      	ldr	r3, [r3, #8]
 800833a:	041b      	lsls	r3, r3, #16
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	4a17      	ldr	r2, [pc, #92]	; (80083a4 <TIM_OC5_SetConfig+0xb4>)
 8008346:	4293      	cmp	r3, r2
 8008348:	d00f      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	4a16      	ldr	r2, [pc, #88]	; (80083a8 <TIM_OC5_SetConfig+0xb8>)
 800834e:	4293      	cmp	r3, r2
 8008350:	d00b      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	4a15      	ldr	r2, [pc, #84]	; (80083ac <TIM_OC5_SetConfig+0xbc>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d007      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	4a14      	ldr	r2, [pc, #80]	; (80083b0 <TIM_OC5_SetConfig+0xc0>)
 800835e:	4293      	cmp	r3, r2
 8008360:	d003      	beq.n	800836a <TIM_OC5_SetConfig+0x7a>
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	4a13      	ldr	r2, [pc, #76]	; (80083b4 <TIM_OC5_SetConfig+0xc4>)
 8008366:	4293      	cmp	r3, r2
 8008368:	d109      	bne.n	800837e <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800836a:	697b      	ldr	r3, [r7, #20]
 800836c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008370:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8008372:	683b      	ldr	r3, [r7, #0]
 8008374:	695b      	ldr	r3, [r3, #20]
 8008376:	021b      	lsls	r3, r3, #8
 8008378:	697a      	ldr	r2, [r7, #20]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800838a:	683b      	ldr	r3, [r7, #0]
 800838c:	685a      	ldr	r2, [r3, #4]
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	693a      	ldr	r2, [r7, #16]
 8008396:	621a      	str	r2, [r3, #32]
}
 8008398:	bf00      	nop
 800839a:	371c      	adds	r7, #28
 800839c:	46bd      	mov	sp, r7
 800839e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083a2:	4770      	bx	lr
 80083a4:	40012c00 	.word	0x40012c00
 80083a8:	40013400 	.word	0x40013400
 80083ac:	40014000 	.word	0x40014000
 80083b0:	40014400 	.word	0x40014400
 80083b4:	40014800 	.word	0x40014800

080083b8 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80083b8:	b480      	push	{r7}
 80083ba:	b087      	sub	sp, #28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	6078      	str	r0, [r7, #4]
 80083c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	685b      	ldr	r3, [r3, #4]
 80083d8:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80083de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80083e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80083ea:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	021b      	lsls	r3, r3, #8
 80083f2:	68fa      	ldr	r2, [r7, #12]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80083f8:	693b      	ldr	r3, [r7, #16]
 80083fa:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80083fe:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8008400:	683b      	ldr	r3, [r7, #0]
 8008402:	689b      	ldr	r3, [r3, #8]
 8008404:	051b      	lsls	r3, r3, #20
 8008406:	693a      	ldr	r2, [r7, #16]
 8008408:	4313      	orrs	r3, r2
 800840a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	4a18      	ldr	r2, [pc, #96]	; (8008470 <TIM_OC6_SetConfig+0xb8>)
 8008410:	4293      	cmp	r3, r2
 8008412:	d00f      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	4a17      	ldr	r2, [pc, #92]	; (8008474 <TIM_OC6_SetConfig+0xbc>)
 8008418:	4293      	cmp	r3, r2
 800841a:	d00b      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	4a16      	ldr	r2, [pc, #88]	; (8008478 <TIM_OC6_SetConfig+0xc0>)
 8008420:	4293      	cmp	r3, r2
 8008422:	d007      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	4a15      	ldr	r2, [pc, #84]	; (800847c <TIM_OC6_SetConfig+0xc4>)
 8008428:	4293      	cmp	r3, r2
 800842a:	d003      	beq.n	8008434 <TIM_OC6_SetConfig+0x7c>
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	4a14      	ldr	r2, [pc, #80]	; (8008480 <TIM_OC6_SetConfig+0xc8>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d109      	bne.n	8008448 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800843a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800843c:	683b      	ldr	r3, [r7, #0]
 800843e:	695b      	ldr	r3, [r3, #20]
 8008440:	029b      	lsls	r3, r3, #10
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	4313      	orrs	r3, r2
 8008446:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	697a      	ldr	r2, [r7, #20]
 800844c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	68fa      	ldr	r2, [r7, #12]
 8008452:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8008454:	683b      	ldr	r3, [r7, #0]
 8008456:	685a      	ldr	r2, [r3, #4]
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	693a      	ldr	r2, [r7, #16]
 8008460:	621a      	str	r2, [r3, #32]
}
 8008462:	bf00      	nop
 8008464:	371c      	adds	r7, #28
 8008466:	46bd      	mov	sp, r7
 8008468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846c:	4770      	bx	lr
 800846e:	bf00      	nop
 8008470:	40012c00 	.word	0x40012c00
 8008474:	40013400 	.word	0x40013400
 8008478:	40014000 	.word	0x40014000
 800847c:	40014400 	.word	0x40014400
 8008480:	40014800 	.word	0x40014800

08008484 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008484:	b480      	push	{r7}
 8008486:	b087      	sub	sp, #28
 8008488:	af00      	add	r7, sp, #0
 800848a:	60f8      	str	r0, [r7, #12]
 800848c:	60b9      	str	r1, [r7, #8]
 800848e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008496:	68fb      	ldr	r3, [r7, #12]
 8008498:	6a1b      	ldr	r3, [r3, #32]
 800849a:	f023 0201 	bic.w	r2, r3, #1
 800849e:	68fb      	ldr	r3, [r7, #12]
 80084a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084a2:	68fb      	ldr	r3, [r7, #12]
 80084a4:	699b      	ldr	r3, [r3, #24]
 80084a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	011b      	lsls	r3, r3, #4
 80084b4:	693a      	ldr	r2, [r7, #16]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80084ba:	697b      	ldr	r3, [r7, #20]
 80084bc:	f023 030a 	bic.w	r3, r3, #10
 80084c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80084c2:	697a      	ldr	r2, [r7, #20]
 80084c4:	68bb      	ldr	r3, [r7, #8]
 80084c6:	4313      	orrs	r3, r2
 80084c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80084ca:	68fb      	ldr	r3, [r7, #12]
 80084cc:	693a      	ldr	r2, [r7, #16]
 80084ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	621a      	str	r2, [r3, #32]
}
 80084d6:	bf00      	nop
 80084d8:	371c      	adds	r7, #28
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b087      	sub	sp, #28
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	60f8      	str	r0, [r7, #12]
 80084ea:	60b9      	str	r1, [r7, #8]
 80084ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	6a1b      	ldr	r3, [r3, #32]
 80084f2:	f023 0210 	bic.w	r2, r3, #16
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	699b      	ldr	r3, [r3, #24]
 80084fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008500:	68fb      	ldr	r3, [r7, #12]
 8008502:	6a1b      	ldr	r3, [r3, #32]
 8008504:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008506:	697b      	ldr	r3, [r7, #20]
 8008508:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800850c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	031b      	lsls	r3, r3, #12
 8008512:	697a      	ldr	r2, [r7, #20]
 8008514:	4313      	orrs	r3, r2
 8008516:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008518:	693b      	ldr	r3, [r7, #16]
 800851a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800851e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008520:	68bb      	ldr	r3, [r7, #8]
 8008522:	011b      	lsls	r3, r3, #4
 8008524:	693a      	ldr	r2, [r7, #16]
 8008526:	4313      	orrs	r3, r2
 8008528:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	693a      	ldr	r2, [r7, #16]
 8008534:	621a      	str	r2, [r3, #32]
}
 8008536:	bf00      	nop
 8008538:	371c      	adds	r7, #28
 800853a:	46bd      	mov	sp, r7
 800853c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008540:	4770      	bx	lr

08008542 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008542:	b480      	push	{r7}
 8008544:	b085      	sub	sp, #20
 8008546:	af00      	add	r7, sp, #0
 8008548:	6078      	str	r0, [r7, #4]
 800854a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8008558:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800855c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800855e:	683a      	ldr	r2, [r7, #0]
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	4313      	orrs	r3, r2
 8008564:	f043 0307 	orr.w	r3, r3, #7
 8008568:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	68fa      	ldr	r2, [r7, #12]
 800856e:	609a      	str	r2, [r3, #8]
}
 8008570:	bf00      	nop
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800857c:	b480      	push	{r7}
 800857e:	b087      	sub	sp, #28
 8008580:	af00      	add	r7, sp, #0
 8008582:	60f8      	str	r0, [r7, #12]
 8008584:	60b9      	str	r1, [r7, #8]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	689b      	ldr	r3, [r3, #8]
 800858e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008596:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008598:	683b      	ldr	r3, [r7, #0]
 800859a:	021a      	lsls	r2, r3, #8
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	431a      	orrs	r2, r3
 80085a0:	68bb      	ldr	r3, [r7, #8]
 80085a2:	4313      	orrs	r3, r2
 80085a4:	697a      	ldr	r2, [r7, #20]
 80085a6:	4313      	orrs	r3, r2
 80085a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085aa:	68fb      	ldr	r3, [r7, #12]
 80085ac:	697a      	ldr	r2, [r7, #20]
 80085ae:	609a      	str	r2, [r3, #8]
}
 80085b0:	bf00      	nop
 80085b2:	371c      	adds	r7, #28
 80085b4:	46bd      	mov	sp, r7
 80085b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ba:	4770      	bx	lr

080085bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80085bc:	b480      	push	{r7}
 80085be:	b087      	sub	sp, #28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	60f8      	str	r0, [r7, #12]
 80085c4:	60b9      	str	r1, [r7, #8]
 80085c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80085c8:	68bb      	ldr	r3, [r7, #8]
 80085ca:	f003 031f 	and.w	r3, r3, #31
 80085ce:	2201      	movs	r2, #1
 80085d0:	fa02 f303 	lsl.w	r3, r2, r3
 80085d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80085d6:	68fb      	ldr	r3, [r7, #12]
 80085d8:	6a1a      	ldr	r2, [r3, #32]
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	43db      	mvns	r3, r3
 80085de:	401a      	ands	r2, r3
 80085e0:	68fb      	ldr	r3, [r7, #12]
 80085e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	6a1a      	ldr	r2, [r3, #32]
 80085e8:	68bb      	ldr	r3, [r7, #8]
 80085ea:	f003 031f 	and.w	r3, r3, #31
 80085ee:	6879      	ldr	r1, [r7, #4]
 80085f0:	fa01 f303 	lsl.w	r3, r1, r3
 80085f4:	431a      	orrs	r2, r3
 80085f6:	68fb      	ldr	r3, [r7, #12]
 80085f8:	621a      	str	r2, [r3, #32]
}
 80085fa:	bf00      	nop
 80085fc:	371c      	adds	r7, #28
 80085fe:	46bd      	mov	sp, r7
 8008600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008604:	4770      	bx	lr
	...

08008608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008608:	b480      	push	{r7}
 800860a:	b085      	sub	sp, #20
 800860c:	af00      	add	r7, sp, #0
 800860e:	6078      	str	r0, [r7, #4]
 8008610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008618:	2b01      	cmp	r3, #1
 800861a:	d101      	bne.n	8008620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800861c:	2302      	movs	r3, #2
 800861e:	e065      	b.n	80086ec <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	2201      	movs	r2, #1
 8008624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2202      	movs	r2, #2
 800862c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	681b      	ldr	r3, [r3, #0]
 8008634:	685b      	ldr	r3, [r3, #4]
 8008636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a2c      	ldr	r2, [pc, #176]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d004      	beq.n	8008654 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	4a2b      	ldr	r2, [pc, #172]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008650:	4293      	cmp	r3, r2
 8008652:	d108      	bne.n	8008666 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008654:	68fb      	ldr	r3, [r7, #12]
 8008656:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800865a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4313      	orrs	r3, r2
 8008664:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008666:	68fb      	ldr	r3, [r7, #12]
 8008668:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800866c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008670:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	68fa      	ldr	r2, [r7, #12]
 8008678:	4313      	orrs	r3, r2
 800867a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68fa      	ldr	r2, [r7, #12]
 8008682:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	4a1b      	ldr	r2, [pc, #108]	; (80086f8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800868a:	4293      	cmp	r3, r2
 800868c:	d018      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008696:	d013      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	4a18      	ldr	r2, [pc, #96]	; (8008700 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 800869e:	4293      	cmp	r3, r2
 80086a0:	d00e      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	4a17      	ldr	r2, [pc, #92]	; (8008704 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80086a8:	4293      	cmp	r3, r2
 80086aa:	d009      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	4a12      	ldr	r2, [pc, #72]	; (80086fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80086b2:	4293      	cmp	r3, r2
 80086b4:	d004      	beq.n	80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	4a13      	ldr	r2, [pc, #76]	; (8008708 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80086bc:	4293      	cmp	r3, r2
 80086be:	d10c      	bne.n	80086da <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80086c0:	68bb      	ldr	r3, [r7, #8]
 80086c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80086c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80086c8:	683b      	ldr	r3, [r7, #0]
 80086ca:	689b      	ldr	r3, [r3, #8]
 80086cc:	68ba      	ldr	r2, [r7, #8]
 80086ce:	4313      	orrs	r3, r2
 80086d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	68ba      	ldr	r2, [r7, #8]
 80086d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2201      	movs	r2, #1
 80086de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	2200      	movs	r2, #0
 80086e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086ea:	2300      	movs	r3, #0
}
 80086ec:	4618      	mov	r0, r3
 80086ee:	3714      	adds	r7, #20
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr
 80086f8:	40012c00 	.word	0x40012c00
 80086fc:	40013400 	.word	0x40013400
 8008700:	40000400 	.word	0x40000400
 8008704:	40000800 	.word	0x40000800
 8008708:	40014000 	.word	0x40014000

0800870c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800870c:	b480      	push	{r7}
 800870e:	b083      	sub	sp, #12
 8008710:	af00      	add	r7, sp, #0
 8008712:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008714:	bf00      	nop
 8008716:	370c      	adds	r7, #12
 8008718:	46bd      	mov	sp, r7
 800871a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871e:	4770      	bx	lr

08008720 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008720:	b480      	push	{r7}
 8008722:	b083      	sub	sp, #12
 8008724:	af00      	add	r7, sp, #0
 8008726:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008728:	bf00      	nop
 800872a:	370c      	adds	r7, #12
 800872c:	46bd      	mov	sp, r7
 800872e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008732:	4770      	bx	lr

08008734 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008734:	b480      	push	{r7}
 8008736:	b083      	sub	sp, #12
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800873c:	bf00      	nop
 800873e:	370c      	adds	r7, #12
 8008740:	46bd      	mov	sp, r7
 8008742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008746:	4770      	bx	lr

08008748 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8008748:	b480      	push	{r7}
 800874a:	b083      	sub	sp, #12
 800874c:	af00      	add	r7, sp, #0
 800874e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8008750:	bf00      	nop
 8008752:	370c      	adds	r7, #12
 8008754:	46bd      	mov	sp, r7
 8008756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800875a:	4770      	bx	lr

0800875c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8008764:	bf00      	nop
 8008766:	370c      	adds	r7, #12
 8008768:	46bd      	mov	sp, r7
 800876a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876e:	4770      	bx	lr

08008770 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8008770:	b480      	push	{r7}
 8008772:	b083      	sub	sp, #12
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8008778:	bf00      	nop
 800877a:	370c      	adds	r7, #12
 800877c:	46bd      	mov	sp, r7
 800877e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008782:	4770      	bx	lr

08008784 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8008784:	b480      	push	{r7}
 8008786:	b083      	sub	sp, #12
 8008788:	af00      	add	r7, sp, #0
 800878a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 800878c:	bf00      	nop
 800878e:	370c      	adds	r7, #12
 8008790:	46bd      	mov	sp, r7
 8008792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008796:	4770      	bx	lr

08008798 <__errno>:
 8008798:	4b01      	ldr	r3, [pc, #4]	; (80087a0 <__errno+0x8>)
 800879a:	6818      	ldr	r0, [r3, #0]
 800879c:	4770      	bx	lr
 800879e:	bf00      	nop
 80087a0:	2000000c 	.word	0x2000000c

080087a4 <__libc_init_array>:
 80087a4:	b570      	push	{r4, r5, r6, lr}
 80087a6:	4d0d      	ldr	r5, [pc, #52]	; (80087dc <__libc_init_array+0x38>)
 80087a8:	4c0d      	ldr	r4, [pc, #52]	; (80087e0 <__libc_init_array+0x3c>)
 80087aa:	1b64      	subs	r4, r4, r5
 80087ac:	10a4      	asrs	r4, r4, #2
 80087ae:	2600      	movs	r6, #0
 80087b0:	42a6      	cmp	r6, r4
 80087b2:	d109      	bne.n	80087c8 <__libc_init_array+0x24>
 80087b4:	4d0b      	ldr	r5, [pc, #44]	; (80087e4 <__libc_init_array+0x40>)
 80087b6:	4c0c      	ldr	r4, [pc, #48]	; (80087e8 <__libc_init_array+0x44>)
 80087b8:	f001 f978 	bl	8009aac <_init>
 80087bc:	1b64      	subs	r4, r4, r5
 80087be:	10a4      	asrs	r4, r4, #2
 80087c0:	2600      	movs	r6, #0
 80087c2:	42a6      	cmp	r6, r4
 80087c4:	d105      	bne.n	80087d2 <__libc_init_array+0x2e>
 80087c6:	bd70      	pop	{r4, r5, r6, pc}
 80087c8:	f855 3b04 	ldr.w	r3, [r5], #4
 80087cc:	4798      	blx	r3
 80087ce:	3601      	adds	r6, #1
 80087d0:	e7ee      	b.n	80087b0 <__libc_init_array+0xc>
 80087d2:	f855 3b04 	ldr.w	r3, [r5], #4
 80087d6:	4798      	blx	r3
 80087d8:	3601      	adds	r6, #1
 80087da:	e7f2      	b.n	80087c2 <__libc_init_array+0x1e>
 80087dc:	0800a1cc 	.word	0x0800a1cc
 80087e0:	0800a1cc 	.word	0x0800a1cc
 80087e4:	0800a1cc 	.word	0x0800a1cc
 80087e8:	0800a1d0 	.word	0x0800a1d0

080087ec <memset>:
 80087ec:	4402      	add	r2, r0
 80087ee:	4603      	mov	r3, r0
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d100      	bne.n	80087f6 <memset+0xa>
 80087f4:	4770      	bx	lr
 80087f6:	f803 1b01 	strb.w	r1, [r3], #1
 80087fa:	e7f9      	b.n	80087f0 <memset+0x4>

080087fc <iprintf>:
 80087fc:	b40f      	push	{r0, r1, r2, r3}
 80087fe:	4b0a      	ldr	r3, [pc, #40]	; (8008828 <iprintf+0x2c>)
 8008800:	b513      	push	{r0, r1, r4, lr}
 8008802:	681c      	ldr	r4, [r3, #0]
 8008804:	b124      	cbz	r4, 8008810 <iprintf+0x14>
 8008806:	69a3      	ldr	r3, [r4, #24]
 8008808:	b913      	cbnz	r3, 8008810 <iprintf+0x14>
 800880a:	4620      	mov	r0, r4
 800880c:	f000 fa74 	bl	8008cf8 <__sinit>
 8008810:	ab05      	add	r3, sp, #20
 8008812:	9a04      	ldr	r2, [sp, #16]
 8008814:	68a1      	ldr	r1, [r4, #8]
 8008816:	9301      	str	r3, [sp, #4]
 8008818:	4620      	mov	r0, r4
 800881a:	f000 fc45 	bl	80090a8 <_vfiprintf_r>
 800881e:	b002      	add	sp, #8
 8008820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008824:	b004      	add	sp, #16
 8008826:	4770      	bx	lr
 8008828:	2000000c 	.word	0x2000000c

0800882c <putchar>:
 800882c:	4b09      	ldr	r3, [pc, #36]	; (8008854 <putchar+0x28>)
 800882e:	b513      	push	{r0, r1, r4, lr}
 8008830:	681c      	ldr	r4, [r3, #0]
 8008832:	4601      	mov	r1, r0
 8008834:	b134      	cbz	r4, 8008844 <putchar+0x18>
 8008836:	69a3      	ldr	r3, [r4, #24]
 8008838:	b923      	cbnz	r3, 8008844 <putchar+0x18>
 800883a:	9001      	str	r0, [sp, #4]
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fa5b 	bl	8008cf8 <__sinit>
 8008842:	9901      	ldr	r1, [sp, #4]
 8008844:	68a2      	ldr	r2, [r4, #8]
 8008846:	4620      	mov	r0, r4
 8008848:	b002      	add	sp, #8
 800884a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800884e:	f000 beef 	b.w	8009630 <_putc_r>
 8008852:	bf00      	nop
 8008854:	2000000c 	.word	0x2000000c

08008858 <_puts_r>:
 8008858:	b570      	push	{r4, r5, r6, lr}
 800885a:	460e      	mov	r6, r1
 800885c:	4605      	mov	r5, r0
 800885e:	b118      	cbz	r0, 8008868 <_puts_r+0x10>
 8008860:	6983      	ldr	r3, [r0, #24]
 8008862:	b90b      	cbnz	r3, 8008868 <_puts_r+0x10>
 8008864:	f000 fa48 	bl	8008cf8 <__sinit>
 8008868:	69ab      	ldr	r3, [r5, #24]
 800886a:	68ac      	ldr	r4, [r5, #8]
 800886c:	b913      	cbnz	r3, 8008874 <_puts_r+0x1c>
 800886e:	4628      	mov	r0, r5
 8008870:	f000 fa42 	bl	8008cf8 <__sinit>
 8008874:	4b2c      	ldr	r3, [pc, #176]	; (8008928 <_puts_r+0xd0>)
 8008876:	429c      	cmp	r4, r3
 8008878:	d120      	bne.n	80088bc <_puts_r+0x64>
 800887a:	686c      	ldr	r4, [r5, #4]
 800887c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800887e:	07db      	lsls	r3, r3, #31
 8008880:	d405      	bmi.n	800888e <_puts_r+0x36>
 8008882:	89a3      	ldrh	r3, [r4, #12]
 8008884:	0598      	lsls	r0, r3, #22
 8008886:	d402      	bmi.n	800888e <_puts_r+0x36>
 8008888:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800888a:	f000 fad3 	bl	8008e34 <__retarget_lock_acquire_recursive>
 800888e:	89a3      	ldrh	r3, [r4, #12]
 8008890:	0719      	lsls	r1, r3, #28
 8008892:	d51d      	bpl.n	80088d0 <_puts_r+0x78>
 8008894:	6923      	ldr	r3, [r4, #16]
 8008896:	b1db      	cbz	r3, 80088d0 <_puts_r+0x78>
 8008898:	3e01      	subs	r6, #1
 800889a:	68a3      	ldr	r3, [r4, #8]
 800889c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80088a0:	3b01      	subs	r3, #1
 80088a2:	60a3      	str	r3, [r4, #8]
 80088a4:	bb39      	cbnz	r1, 80088f6 <_puts_r+0x9e>
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	da38      	bge.n	800891c <_puts_r+0xc4>
 80088aa:	4622      	mov	r2, r4
 80088ac:	210a      	movs	r1, #10
 80088ae:	4628      	mov	r0, r5
 80088b0:	f000 f848 	bl	8008944 <__swbuf_r>
 80088b4:	3001      	adds	r0, #1
 80088b6:	d011      	beq.n	80088dc <_puts_r+0x84>
 80088b8:	250a      	movs	r5, #10
 80088ba:	e011      	b.n	80088e0 <_puts_r+0x88>
 80088bc:	4b1b      	ldr	r3, [pc, #108]	; (800892c <_puts_r+0xd4>)
 80088be:	429c      	cmp	r4, r3
 80088c0:	d101      	bne.n	80088c6 <_puts_r+0x6e>
 80088c2:	68ac      	ldr	r4, [r5, #8]
 80088c4:	e7da      	b.n	800887c <_puts_r+0x24>
 80088c6:	4b1a      	ldr	r3, [pc, #104]	; (8008930 <_puts_r+0xd8>)
 80088c8:	429c      	cmp	r4, r3
 80088ca:	bf08      	it	eq
 80088cc:	68ec      	ldreq	r4, [r5, #12]
 80088ce:	e7d5      	b.n	800887c <_puts_r+0x24>
 80088d0:	4621      	mov	r1, r4
 80088d2:	4628      	mov	r0, r5
 80088d4:	f000 f888 	bl	80089e8 <__swsetup_r>
 80088d8:	2800      	cmp	r0, #0
 80088da:	d0dd      	beq.n	8008898 <_puts_r+0x40>
 80088dc:	f04f 35ff 	mov.w	r5, #4294967295
 80088e0:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80088e2:	07da      	lsls	r2, r3, #31
 80088e4:	d405      	bmi.n	80088f2 <_puts_r+0x9a>
 80088e6:	89a3      	ldrh	r3, [r4, #12]
 80088e8:	059b      	lsls	r3, r3, #22
 80088ea:	d402      	bmi.n	80088f2 <_puts_r+0x9a>
 80088ec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80088ee:	f000 faa2 	bl	8008e36 <__retarget_lock_release_recursive>
 80088f2:	4628      	mov	r0, r5
 80088f4:	bd70      	pop	{r4, r5, r6, pc}
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	da04      	bge.n	8008904 <_puts_r+0xac>
 80088fa:	69a2      	ldr	r2, [r4, #24]
 80088fc:	429a      	cmp	r2, r3
 80088fe:	dc06      	bgt.n	800890e <_puts_r+0xb6>
 8008900:	290a      	cmp	r1, #10
 8008902:	d004      	beq.n	800890e <_puts_r+0xb6>
 8008904:	6823      	ldr	r3, [r4, #0]
 8008906:	1c5a      	adds	r2, r3, #1
 8008908:	6022      	str	r2, [r4, #0]
 800890a:	7019      	strb	r1, [r3, #0]
 800890c:	e7c5      	b.n	800889a <_puts_r+0x42>
 800890e:	4622      	mov	r2, r4
 8008910:	4628      	mov	r0, r5
 8008912:	f000 f817 	bl	8008944 <__swbuf_r>
 8008916:	3001      	adds	r0, #1
 8008918:	d1bf      	bne.n	800889a <_puts_r+0x42>
 800891a:	e7df      	b.n	80088dc <_puts_r+0x84>
 800891c:	6823      	ldr	r3, [r4, #0]
 800891e:	250a      	movs	r5, #10
 8008920:	1c5a      	adds	r2, r3, #1
 8008922:	6022      	str	r2, [r4, #0]
 8008924:	701d      	strb	r5, [r3, #0]
 8008926:	e7db      	b.n	80088e0 <_puts_r+0x88>
 8008928:	0800a150 	.word	0x0800a150
 800892c:	0800a170 	.word	0x0800a170
 8008930:	0800a130 	.word	0x0800a130

08008934 <puts>:
 8008934:	4b02      	ldr	r3, [pc, #8]	; (8008940 <puts+0xc>)
 8008936:	4601      	mov	r1, r0
 8008938:	6818      	ldr	r0, [r3, #0]
 800893a:	f7ff bf8d 	b.w	8008858 <_puts_r>
 800893e:	bf00      	nop
 8008940:	2000000c 	.word	0x2000000c

08008944 <__swbuf_r>:
 8008944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008946:	460e      	mov	r6, r1
 8008948:	4614      	mov	r4, r2
 800894a:	4605      	mov	r5, r0
 800894c:	b118      	cbz	r0, 8008956 <__swbuf_r+0x12>
 800894e:	6983      	ldr	r3, [r0, #24]
 8008950:	b90b      	cbnz	r3, 8008956 <__swbuf_r+0x12>
 8008952:	f000 f9d1 	bl	8008cf8 <__sinit>
 8008956:	4b21      	ldr	r3, [pc, #132]	; (80089dc <__swbuf_r+0x98>)
 8008958:	429c      	cmp	r4, r3
 800895a:	d12b      	bne.n	80089b4 <__swbuf_r+0x70>
 800895c:	686c      	ldr	r4, [r5, #4]
 800895e:	69a3      	ldr	r3, [r4, #24]
 8008960:	60a3      	str	r3, [r4, #8]
 8008962:	89a3      	ldrh	r3, [r4, #12]
 8008964:	071a      	lsls	r2, r3, #28
 8008966:	d52f      	bpl.n	80089c8 <__swbuf_r+0x84>
 8008968:	6923      	ldr	r3, [r4, #16]
 800896a:	b36b      	cbz	r3, 80089c8 <__swbuf_r+0x84>
 800896c:	6923      	ldr	r3, [r4, #16]
 800896e:	6820      	ldr	r0, [r4, #0]
 8008970:	1ac0      	subs	r0, r0, r3
 8008972:	6963      	ldr	r3, [r4, #20]
 8008974:	b2f6      	uxtb	r6, r6
 8008976:	4283      	cmp	r3, r0
 8008978:	4637      	mov	r7, r6
 800897a:	dc04      	bgt.n	8008986 <__swbuf_r+0x42>
 800897c:	4621      	mov	r1, r4
 800897e:	4628      	mov	r0, r5
 8008980:	f000 f926 	bl	8008bd0 <_fflush_r>
 8008984:	bb30      	cbnz	r0, 80089d4 <__swbuf_r+0x90>
 8008986:	68a3      	ldr	r3, [r4, #8]
 8008988:	3b01      	subs	r3, #1
 800898a:	60a3      	str	r3, [r4, #8]
 800898c:	6823      	ldr	r3, [r4, #0]
 800898e:	1c5a      	adds	r2, r3, #1
 8008990:	6022      	str	r2, [r4, #0]
 8008992:	701e      	strb	r6, [r3, #0]
 8008994:	6963      	ldr	r3, [r4, #20]
 8008996:	3001      	adds	r0, #1
 8008998:	4283      	cmp	r3, r0
 800899a:	d004      	beq.n	80089a6 <__swbuf_r+0x62>
 800899c:	89a3      	ldrh	r3, [r4, #12]
 800899e:	07db      	lsls	r3, r3, #31
 80089a0:	d506      	bpl.n	80089b0 <__swbuf_r+0x6c>
 80089a2:	2e0a      	cmp	r6, #10
 80089a4:	d104      	bne.n	80089b0 <__swbuf_r+0x6c>
 80089a6:	4621      	mov	r1, r4
 80089a8:	4628      	mov	r0, r5
 80089aa:	f000 f911 	bl	8008bd0 <_fflush_r>
 80089ae:	b988      	cbnz	r0, 80089d4 <__swbuf_r+0x90>
 80089b0:	4638      	mov	r0, r7
 80089b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80089b4:	4b0a      	ldr	r3, [pc, #40]	; (80089e0 <__swbuf_r+0x9c>)
 80089b6:	429c      	cmp	r4, r3
 80089b8:	d101      	bne.n	80089be <__swbuf_r+0x7a>
 80089ba:	68ac      	ldr	r4, [r5, #8]
 80089bc:	e7cf      	b.n	800895e <__swbuf_r+0x1a>
 80089be:	4b09      	ldr	r3, [pc, #36]	; (80089e4 <__swbuf_r+0xa0>)
 80089c0:	429c      	cmp	r4, r3
 80089c2:	bf08      	it	eq
 80089c4:	68ec      	ldreq	r4, [r5, #12]
 80089c6:	e7ca      	b.n	800895e <__swbuf_r+0x1a>
 80089c8:	4621      	mov	r1, r4
 80089ca:	4628      	mov	r0, r5
 80089cc:	f000 f80c 	bl	80089e8 <__swsetup_r>
 80089d0:	2800      	cmp	r0, #0
 80089d2:	d0cb      	beq.n	800896c <__swbuf_r+0x28>
 80089d4:	f04f 37ff 	mov.w	r7, #4294967295
 80089d8:	e7ea      	b.n	80089b0 <__swbuf_r+0x6c>
 80089da:	bf00      	nop
 80089dc:	0800a150 	.word	0x0800a150
 80089e0:	0800a170 	.word	0x0800a170
 80089e4:	0800a130 	.word	0x0800a130

080089e8 <__swsetup_r>:
 80089e8:	4b32      	ldr	r3, [pc, #200]	; (8008ab4 <__swsetup_r+0xcc>)
 80089ea:	b570      	push	{r4, r5, r6, lr}
 80089ec:	681d      	ldr	r5, [r3, #0]
 80089ee:	4606      	mov	r6, r0
 80089f0:	460c      	mov	r4, r1
 80089f2:	b125      	cbz	r5, 80089fe <__swsetup_r+0x16>
 80089f4:	69ab      	ldr	r3, [r5, #24]
 80089f6:	b913      	cbnz	r3, 80089fe <__swsetup_r+0x16>
 80089f8:	4628      	mov	r0, r5
 80089fa:	f000 f97d 	bl	8008cf8 <__sinit>
 80089fe:	4b2e      	ldr	r3, [pc, #184]	; (8008ab8 <__swsetup_r+0xd0>)
 8008a00:	429c      	cmp	r4, r3
 8008a02:	d10f      	bne.n	8008a24 <__swsetup_r+0x3c>
 8008a04:	686c      	ldr	r4, [r5, #4]
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a0c:	0719      	lsls	r1, r3, #28
 8008a0e:	d42c      	bmi.n	8008a6a <__swsetup_r+0x82>
 8008a10:	06dd      	lsls	r5, r3, #27
 8008a12:	d411      	bmi.n	8008a38 <__swsetup_r+0x50>
 8008a14:	2309      	movs	r3, #9
 8008a16:	6033      	str	r3, [r6, #0]
 8008a18:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008a1c:	81a3      	strh	r3, [r4, #12]
 8008a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8008a22:	e03e      	b.n	8008aa2 <__swsetup_r+0xba>
 8008a24:	4b25      	ldr	r3, [pc, #148]	; (8008abc <__swsetup_r+0xd4>)
 8008a26:	429c      	cmp	r4, r3
 8008a28:	d101      	bne.n	8008a2e <__swsetup_r+0x46>
 8008a2a:	68ac      	ldr	r4, [r5, #8]
 8008a2c:	e7eb      	b.n	8008a06 <__swsetup_r+0x1e>
 8008a2e:	4b24      	ldr	r3, [pc, #144]	; (8008ac0 <__swsetup_r+0xd8>)
 8008a30:	429c      	cmp	r4, r3
 8008a32:	bf08      	it	eq
 8008a34:	68ec      	ldreq	r4, [r5, #12]
 8008a36:	e7e6      	b.n	8008a06 <__swsetup_r+0x1e>
 8008a38:	0758      	lsls	r0, r3, #29
 8008a3a:	d512      	bpl.n	8008a62 <__swsetup_r+0x7a>
 8008a3c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a3e:	b141      	cbz	r1, 8008a52 <__swsetup_r+0x6a>
 8008a40:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008a44:	4299      	cmp	r1, r3
 8008a46:	d002      	beq.n	8008a4e <__swsetup_r+0x66>
 8008a48:	4630      	mov	r0, r6
 8008a4a:	f000 fa59 	bl	8008f00 <_free_r>
 8008a4e:	2300      	movs	r3, #0
 8008a50:	6363      	str	r3, [r4, #52]	; 0x34
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008a58:	81a3      	strh	r3, [r4, #12]
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	6063      	str	r3, [r4, #4]
 8008a5e:	6923      	ldr	r3, [r4, #16]
 8008a60:	6023      	str	r3, [r4, #0]
 8008a62:	89a3      	ldrh	r3, [r4, #12]
 8008a64:	f043 0308 	orr.w	r3, r3, #8
 8008a68:	81a3      	strh	r3, [r4, #12]
 8008a6a:	6923      	ldr	r3, [r4, #16]
 8008a6c:	b94b      	cbnz	r3, 8008a82 <__swsetup_r+0x9a>
 8008a6e:	89a3      	ldrh	r3, [r4, #12]
 8008a70:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a78:	d003      	beq.n	8008a82 <__swsetup_r+0x9a>
 8008a7a:	4621      	mov	r1, r4
 8008a7c:	4630      	mov	r0, r6
 8008a7e:	f000 f9ff 	bl	8008e80 <__smakebuf_r>
 8008a82:	89a0      	ldrh	r0, [r4, #12]
 8008a84:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008a88:	f010 0301 	ands.w	r3, r0, #1
 8008a8c:	d00a      	beq.n	8008aa4 <__swsetup_r+0xbc>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	60a3      	str	r3, [r4, #8]
 8008a92:	6963      	ldr	r3, [r4, #20]
 8008a94:	425b      	negs	r3, r3
 8008a96:	61a3      	str	r3, [r4, #24]
 8008a98:	6923      	ldr	r3, [r4, #16]
 8008a9a:	b943      	cbnz	r3, 8008aae <__swsetup_r+0xc6>
 8008a9c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008aa0:	d1ba      	bne.n	8008a18 <__swsetup_r+0x30>
 8008aa2:	bd70      	pop	{r4, r5, r6, pc}
 8008aa4:	0781      	lsls	r1, r0, #30
 8008aa6:	bf58      	it	pl
 8008aa8:	6963      	ldrpl	r3, [r4, #20]
 8008aaa:	60a3      	str	r3, [r4, #8]
 8008aac:	e7f4      	b.n	8008a98 <__swsetup_r+0xb0>
 8008aae:	2000      	movs	r0, #0
 8008ab0:	e7f7      	b.n	8008aa2 <__swsetup_r+0xba>
 8008ab2:	bf00      	nop
 8008ab4:	2000000c 	.word	0x2000000c
 8008ab8:	0800a150 	.word	0x0800a150
 8008abc:	0800a170 	.word	0x0800a170
 8008ac0:	0800a130 	.word	0x0800a130

08008ac4 <__sflush_r>:
 8008ac4:	898a      	ldrh	r2, [r1, #12]
 8008ac6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008aca:	4605      	mov	r5, r0
 8008acc:	0710      	lsls	r0, r2, #28
 8008ace:	460c      	mov	r4, r1
 8008ad0:	d458      	bmi.n	8008b84 <__sflush_r+0xc0>
 8008ad2:	684b      	ldr	r3, [r1, #4]
 8008ad4:	2b00      	cmp	r3, #0
 8008ad6:	dc05      	bgt.n	8008ae4 <__sflush_r+0x20>
 8008ad8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008ada:	2b00      	cmp	r3, #0
 8008adc:	dc02      	bgt.n	8008ae4 <__sflush_r+0x20>
 8008ade:	2000      	movs	r0, #0
 8008ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ae4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ae6:	2e00      	cmp	r6, #0
 8008ae8:	d0f9      	beq.n	8008ade <__sflush_r+0x1a>
 8008aea:	2300      	movs	r3, #0
 8008aec:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008af0:	682f      	ldr	r7, [r5, #0]
 8008af2:	602b      	str	r3, [r5, #0]
 8008af4:	d032      	beq.n	8008b5c <__sflush_r+0x98>
 8008af6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008af8:	89a3      	ldrh	r3, [r4, #12]
 8008afa:	075a      	lsls	r2, r3, #29
 8008afc:	d505      	bpl.n	8008b0a <__sflush_r+0x46>
 8008afe:	6863      	ldr	r3, [r4, #4]
 8008b00:	1ac0      	subs	r0, r0, r3
 8008b02:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008b04:	b10b      	cbz	r3, 8008b0a <__sflush_r+0x46>
 8008b06:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008b08:	1ac0      	subs	r0, r0, r3
 8008b0a:	2300      	movs	r3, #0
 8008b0c:	4602      	mov	r2, r0
 8008b0e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008b10:	6a21      	ldr	r1, [r4, #32]
 8008b12:	4628      	mov	r0, r5
 8008b14:	47b0      	blx	r6
 8008b16:	1c43      	adds	r3, r0, #1
 8008b18:	89a3      	ldrh	r3, [r4, #12]
 8008b1a:	d106      	bne.n	8008b2a <__sflush_r+0x66>
 8008b1c:	6829      	ldr	r1, [r5, #0]
 8008b1e:	291d      	cmp	r1, #29
 8008b20:	d82c      	bhi.n	8008b7c <__sflush_r+0xb8>
 8008b22:	4a2a      	ldr	r2, [pc, #168]	; (8008bcc <__sflush_r+0x108>)
 8008b24:	40ca      	lsrs	r2, r1
 8008b26:	07d6      	lsls	r6, r2, #31
 8008b28:	d528      	bpl.n	8008b7c <__sflush_r+0xb8>
 8008b2a:	2200      	movs	r2, #0
 8008b2c:	6062      	str	r2, [r4, #4]
 8008b2e:	04d9      	lsls	r1, r3, #19
 8008b30:	6922      	ldr	r2, [r4, #16]
 8008b32:	6022      	str	r2, [r4, #0]
 8008b34:	d504      	bpl.n	8008b40 <__sflush_r+0x7c>
 8008b36:	1c42      	adds	r2, r0, #1
 8008b38:	d101      	bne.n	8008b3e <__sflush_r+0x7a>
 8008b3a:	682b      	ldr	r3, [r5, #0]
 8008b3c:	b903      	cbnz	r3, 8008b40 <__sflush_r+0x7c>
 8008b3e:	6560      	str	r0, [r4, #84]	; 0x54
 8008b40:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008b42:	602f      	str	r7, [r5, #0]
 8008b44:	2900      	cmp	r1, #0
 8008b46:	d0ca      	beq.n	8008ade <__sflush_r+0x1a>
 8008b48:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008b4c:	4299      	cmp	r1, r3
 8008b4e:	d002      	beq.n	8008b56 <__sflush_r+0x92>
 8008b50:	4628      	mov	r0, r5
 8008b52:	f000 f9d5 	bl	8008f00 <_free_r>
 8008b56:	2000      	movs	r0, #0
 8008b58:	6360      	str	r0, [r4, #52]	; 0x34
 8008b5a:	e7c1      	b.n	8008ae0 <__sflush_r+0x1c>
 8008b5c:	6a21      	ldr	r1, [r4, #32]
 8008b5e:	2301      	movs	r3, #1
 8008b60:	4628      	mov	r0, r5
 8008b62:	47b0      	blx	r6
 8008b64:	1c41      	adds	r1, r0, #1
 8008b66:	d1c7      	bne.n	8008af8 <__sflush_r+0x34>
 8008b68:	682b      	ldr	r3, [r5, #0]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	d0c4      	beq.n	8008af8 <__sflush_r+0x34>
 8008b6e:	2b1d      	cmp	r3, #29
 8008b70:	d001      	beq.n	8008b76 <__sflush_r+0xb2>
 8008b72:	2b16      	cmp	r3, #22
 8008b74:	d101      	bne.n	8008b7a <__sflush_r+0xb6>
 8008b76:	602f      	str	r7, [r5, #0]
 8008b78:	e7b1      	b.n	8008ade <__sflush_r+0x1a>
 8008b7a:	89a3      	ldrh	r3, [r4, #12]
 8008b7c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b80:	81a3      	strh	r3, [r4, #12]
 8008b82:	e7ad      	b.n	8008ae0 <__sflush_r+0x1c>
 8008b84:	690f      	ldr	r7, [r1, #16]
 8008b86:	2f00      	cmp	r7, #0
 8008b88:	d0a9      	beq.n	8008ade <__sflush_r+0x1a>
 8008b8a:	0793      	lsls	r3, r2, #30
 8008b8c:	680e      	ldr	r6, [r1, #0]
 8008b8e:	bf08      	it	eq
 8008b90:	694b      	ldreq	r3, [r1, #20]
 8008b92:	600f      	str	r7, [r1, #0]
 8008b94:	bf18      	it	ne
 8008b96:	2300      	movne	r3, #0
 8008b98:	eba6 0807 	sub.w	r8, r6, r7
 8008b9c:	608b      	str	r3, [r1, #8]
 8008b9e:	f1b8 0f00 	cmp.w	r8, #0
 8008ba2:	dd9c      	ble.n	8008ade <__sflush_r+0x1a>
 8008ba4:	6a21      	ldr	r1, [r4, #32]
 8008ba6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008ba8:	4643      	mov	r3, r8
 8008baa:	463a      	mov	r2, r7
 8008bac:	4628      	mov	r0, r5
 8008bae:	47b0      	blx	r6
 8008bb0:	2800      	cmp	r0, #0
 8008bb2:	dc06      	bgt.n	8008bc2 <__sflush_r+0xfe>
 8008bb4:	89a3      	ldrh	r3, [r4, #12]
 8008bb6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008bba:	81a3      	strh	r3, [r4, #12]
 8008bbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008bc0:	e78e      	b.n	8008ae0 <__sflush_r+0x1c>
 8008bc2:	4407      	add	r7, r0
 8008bc4:	eba8 0800 	sub.w	r8, r8, r0
 8008bc8:	e7e9      	b.n	8008b9e <__sflush_r+0xda>
 8008bca:	bf00      	nop
 8008bcc:	20400001 	.word	0x20400001

08008bd0 <_fflush_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	690b      	ldr	r3, [r1, #16]
 8008bd4:	4605      	mov	r5, r0
 8008bd6:	460c      	mov	r4, r1
 8008bd8:	b913      	cbnz	r3, 8008be0 <_fflush_r+0x10>
 8008bda:	2500      	movs	r5, #0
 8008bdc:	4628      	mov	r0, r5
 8008bde:	bd38      	pop	{r3, r4, r5, pc}
 8008be0:	b118      	cbz	r0, 8008bea <_fflush_r+0x1a>
 8008be2:	6983      	ldr	r3, [r0, #24]
 8008be4:	b90b      	cbnz	r3, 8008bea <_fflush_r+0x1a>
 8008be6:	f000 f887 	bl	8008cf8 <__sinit>
 8008bea:	4b14      	ldr	r3, [pc, #80]	; (8008c3c <_fflush_r+0x6c>)
 8008bec:	429c      	cmp	r4, r3
 8008bee:	d11b      	bne.n	8008c28 <_fflush_r+0x58>
 8008bf0:	686c      	ldr	r4, [r5, #4]
 8008bf2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	d0ef      	beq.n	8008bda <_fflush_r+0xa>
 8008bfa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008bfc:	07d0      	lsls	r0, r2, #31
 8008bfe:	d404      	bmi.n	8008c0a <_fflush_r+0x3a>
 8008c00:	0599      	lsls	r1, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_fflush_r+0x3a>
 8008c04:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c06:	f000 f915 	bl	8008e34 <__retarget_lock_acquire_recursive>
 8008c0a:	4628      	mov	r0, r5
 8008c0c:	4621      	mov	r1, r4
 8008c0e:	f7ff ff59 	bl	8008ac4 <__sflush_r>
 8008c12:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c14:	07da      	lsls	r2, r3, #31
 8008c16:	4605      	mov	r5, r0
 8008c18:	d4e0      	bmi.n	8008bdc <_fflush_r+0xc>
 8008c1a:	89a3      	ldrh	r3, [r4, #12]
 8008c1c:	059b      	lsls	r3, r3, #22
 8008c1e:	d4dd      	bmi.n	8008bdc <_fflush_r+0xc>
 8008c20:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008c22:	f000 f908 	bl	8008e36 <__retarget_lock_release_recursive>
 8008c26:	e7d9      	b.n	8008bdc <_fflush_r+0xc>
 8008c28:	4b05      	ldr	r3, [pc, #20]	; (8008c40 <_fflush_r+0x70>)
 8008c2a:	429c      	cmp	r4, r3
 8008c2c:	d101      	bne.n	8008c32 <_fflush_r+0x62>
 8008c2e:	68ac      	ldr	r4, [r5, #8]
 8008c30:	e7df      	b.n	8008bf2 <_fflush_r+0x22>
 8008c32:	4b04      	ldr	r3, [pc, #16]	; (8008c44 <_fflush_r+0x74>)
 8008c34:	429c      	cmp	r4, r3
 8008c36:	bf08      	it	eq
 8008c38:	68ec      	ldreq	r4, [r5, #12]
 8008c3a:	e7da      	b.n	8008bf2 <_fflush_r+0x22>
 8008c3c:	0800a150 	.word	0x0800a150
 8008c40:	0800a170 	.word	0x0800a170
 8008c44:	0800a130 	.word	0x0800a130

08008c48 <std>:
 8008c48:	2300      	movs	r3, #0
 8008c4a:	b510      	push	{r4, lr}
 8008c4c:	4604      	mov	r4, r0
 8008c4e:	e9c0 3300 	strd	r3, r3, [r0]
 8008c52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008c56:	6083      	str	r3, [r0, #8]
 8008c58:	8181      	strh	r1, [r0, #12]
 8008c5a:	6643      	str	r3, [r0, #100]	; 0x64
 8008c5c:	81c2      	strh	r2, [r0, #14]
 8008c5e:	6183      	str	r3, [r0, #24]
 8008c60:	4619      	mov	r1, r3
 8008c62:	2208      	movs	r2, #8
 8008c64:	305c      	adds	r0, #92	; 0x5c
 8008c66:	f7ff fdc1 	bl	80087ec <memset>
 8008c6a:	4b05      	ldr	r3, [pc, #20]	; (8008c80 <std+0x38>)
 8008c6c:	6263      	str	r3, [r4, #36]	; 0x24
 8008c6e:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <std+0x3c>)
 8008c70:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c72:	4b05      	ldr	r3, [pc, #20]	; (8008c88 <std+0x40>)
 8008c74:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c76:	4b05      	ldr	r3, [pc, #20]	; (8008c8c <std+0x44>)
 8008c78:	6224      	str	r4, [r4, #32]
 8008c7a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c7c:	bd10      	pop	{r4, pc}
 8008c7e:	bf00      	nop
 8008c80:	080096e1 	.word	0x080096e1
 8008c84:	08009703 	.word	0x08009703
 8008c88:	0800973b 	.word	0x0800973b
 8008c8c:	0800975f 	.word	0x0800975f

08008c90 <_cleanup_r>:
 8008c90:	4901      	ldr	r1, [pc, #4]	; (8008c98 <_cleanup_r+0x8>)
 8008c92:	f000 b8af 	b.w	8008df4 <_fwalk_reent>
 8008c96:	bf00      	nop
 8008c98:	08008bd1 	.word	0x08008bd1

08008c9c <__sfmoreglue>:
 8008c9c:	b570      	push	{r4, r5, r6, lr}
 8008c9e:	1e4a      	subs	r2, r1, #1
 8008ca0:	2568      	movs	r5, #104	; 0x68
 8008ca2:	4355      	muls	r5, r2
 8008ca4:	460e      	mov	r6, r1
 8008ca6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008caa:	f000 f979 	bl	8008fa0 <_malloc_r>
 8008cae:	4604      	mov	r4, r0
 8008cb0:	b140      	cbz	r0, 8008cc4 <__sfmoreglue+0x28>
 8008cb2:	2100      	movs	r1, #0
 8008cb4:	e9c0 1600 	strd	r1, r6, [r0]
 8008cb8:	300c      	adds	r0, #12
 8008cba:	60a0      	str	r0, [r4, #8]
 8008cbc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008cc0:	f7ff fd94 	bl	80087ec <memset>
 8008cc4:	4620      	mov	r0, r4
 8008cc6:	bd70      	pop	{r4, r5, r6, pc}

08008cc8 <__sfp_lock_acquire>:
 8008cc8:	4801      	ldr	r0, [pc, #4]	; (8008cd0 <__sfp_lock_acquire+0x8>)
 8008cca:	f000 b8b3 	b.w	8008e34 <__retarget_lock_acquire_recursive>
 8008cce:	bf00      	nop
 8008cd0:	20000504 	.word	0x20000504

08008cd4 <__sfp_lock_release>:
 8008cd4:	4801      	ldr	r0, [pc, #4]	; (8008cdc <__sfp_lock_release+0x8>)
 8008cd6:	f000 b8ae 	b.w	8008e36 <__retarget_lock_release_recursive>
 8008cda:	bf00      	nop
 8008cdc:	20000504 	.word	0x20000504

08008ce0 <__sinit_lock_acquire>:
 8008ce0:	4801      	ldr	r0, [pc, #4]	; (8008ce8 <__sinit_lock_acquire+0x8>)
 8008ce2:	f000 b8a7 	b.w	8008e34 <__retarget_lock_acquire_recursive>
 8008ce6:	bf00      	nop
 8008ce8:	200004ff 	.word	0x200004ff

08008cec <__sinit_lock_release>:
 8008cec:	4801      	ldr	r0, [pc, #4]	; (8008cf4 <__sinit_lock_release+0x8>)
 8008cee:	f000 b8a2 	b.w	8008e36 <__retarget_lock_release_recursive>
 8008cf2:	bf00      	nop
 8008cf4:	200004ff 	.word	0x200004ff

08008cf8 <__sinit>:
 8008cf8:	b510      	push	{r4, lr}
 8008cfa:	4604      	mov	r4, r0
 8008cfc:	f7ff fff0 	bl	8008ce0 <__sinit_lock_acquire>
 8008d00:	69a3      	ldr	r3, [r4, #24]
 8008d02:	b11b      	cbz	r3, 8008d0c <__sinit+0x14>
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008d08:	f7ff bff0 	b.w	8008cec <__sinit_lock_release>
 8008d0c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008d10:	6523      	str	r3, [r4, #80]	; 0x50
 8008d12:	4b13      	ldr	r3, [pc, #76]	; (8008d60 <__sinit+0x68>)
 8008d14:	4a13      	ldr	r2, [pc, #76]	; (8008d64 <__sinit+0x6c>)
 8008d16:	681b      	ldr	r3, [r3, #0]
 8008d18:	62a2      	str	r2, [r4, #40]	; 0x28
 8008d1a:	42a3      	cmp	r3, r4
 8008d1c:	bf04      	itt	eq
 8008d1e:	2301      	moveq	r3, #1
 8008d20:	61a3      	streq	r3, [r4, #24]
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 f820 	bl	8008d68 <__sfp>
 8008d28:	6060      	str	r0, [r4, #4]
 8008d2a:	4620      	mov	r0, r4
 8008d2c:	f000 f81c 	bl	8008d68 <__sfp>
 8008d30:	60a0      	str	r0, [r4, #8]
 8008d32:	4620      	mov	r0, r4
 8008d34:	f000 f818 	bl	8008d68 <__sfp>
 8008d38:	2200      	movs	r2, #0
 8008d3a:	60e0      	str	r0, [r4, #12]
 8008d3c:	2104      	movs	r1, #4
 8008d3e:	6860      	ldr	r0, [r4, #4]
 8008d40:	f7ff ff82 	bl	8008c48 <std>
 8008d44:	68a0      	ldr	r0, [r4, #8]
 8008d46:	2201      	movs	r2, #1
 8008d48:	2109      	movs	r1, #9
 8008d4a:	f7ff ff7d 	bl	8008c48 <std>
 8008d4e:	68e0      	ldr	r0, [r4, #12]
 8008d50:	2202      	movs	r2, #2
 8008d52:	2112      	movs	r1, #18
 8008d54:	f7ff ff78 	bl	8008c48 <std>
 8008d58:	2301      	movs	r3, #1
 8008d5a:	61a3      	str	r3, [r4, #24]
 8008d5c:	e7d2      	b.n	8008d04 <__sinit+0xc>
 8008d5e:	bf00      	nop
 8008d60:	0800a12c 	.word	0x0800a12c
 8008d64:	08008c91 	.word	0x08008c91

08008d68 <__sfp>:
 8008d68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d6a:	4607      	mov	r7, r0
 8008d6c:	f7ff ffac 	bl	8008cc8 <__sfp_lock_acquire>
 8008d70:	4b1e      	ldr	r3, [pc, #120]	; (8008dec <__sfp+0x84>)
 8008d72:	681e      	ldr	r6, [r3, #0]
 8008d74:	69b3      	ldr	r3, [r6, #24]
 8008d76:	b913      	cbnz	r3, 8008d7e <__sfp+0x16>
 8008d78:	4630      	mov	r0, r6
 8008d7a:	f7ff ffbd 	bl	8008cf8 <__sinit>
 8008d7e:	3648      	adds	r6, #72	; 0x48
 8008d80:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008d84:	3b01      	subs	r3, #1
 8008d86:	d503      	bpl.n	8008d90 <__sfp+0x28>
 8008d88:	6833      	ldr	r3, [r6, #0]
 8008d8a:	b30b      	cbz	r3, 8008dd0 <__sfp+0x68>
 8008d8c:	6836      	ldr	r6, [r6, #0]
 8008d8e:	e7f7      	b.n	8008d80 <__sfp+0x18>
 8008d90:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008d94:	b9d5      	cbnz	r5, 8008dcc <__sfp+0x64>
 8008d96:	4b16      	ldr	r3, [pc, #88]	; (8008df0 <__sfp+0x88>)
 8008d98:	60e3      	str	r3, [r4, #12]
 8008d9a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008d9e:	6665      	str	r5, [r4, #100]	; 0x64
 8008da0:	f000 f847 	bl	8008e32 <__retarget_lock_init_recursive>
 8008da4:	f7ff ff96 	bl	8008cd4 <__sfp_lock_release>
 8008da8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008dac:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008db0:	6025      	str	r5, [r4, #0]
 8008db2:	61a5      	str	r5, [r4, #24]
 8008db4:	2208      	movs	r2, #8
 8008db6:	4629      	mov	r1, r5
 8008db8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008dbc:	f7ff fd16 	bl	80087ec <memset>
 8008dc0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008dc4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008dc8:	4620      	mov	r0, r4
 8008dca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008dcc:	3468      	adds	r4, #104	; 0x68
 8008dce:	e7d9      	b.n	8008d84 <__sfp+0x1c>
 8008dd0:	2104      	movs	r1, #4
 8008dd2:	4638      	mov	r0, r7
 8008dd4:	f7ff ff62 	bl	8008c9c <__sfmoreglue>
 8008dd8:	4604      	mov	r4, r0
 8008dda:	6030      	str	r0, [r6, #0]
 8008ddc:	2800      	cmp	r0, #0
 8008dde:	d1d5      	bne.n	8008d8c <__sfp+0x24>
 8008de0:	f7ff ff78 	bl	8008cd4 <__sfp_lock_release>
 8008de4:	230c      	movs	r3, #12
 8008de6:	603b      	str	r3, [r7, #0]
 8008de8:	e7ee      	b.n	8008dc8 <__sfp+0x60>
 8008dea:	bf00      	nop
 8008dec:	0800a12c 	.word	0x0800a12c
 8008df0:	ffff0001 	.word	0xffff0001

08008df4 <_fwalk_reent>:
 8008df4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008df8:	4606      	mov	r6, r0
 8008dfa:	4688      	mov	r8, r1
 8008dfc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008e00:	2700      	movs	r7, #0
 8008e02:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008e06:	f1b9 0901 	subs.w	r9, r9, #1
 8008e0a:	d505      	bpl.n	8008e18 <_fwalk_reent+0x24>
 8008e0c:	6824      	ldr	r4, [r4, #0]
 8008e0e:	2c00      	cmp	r4, #0
 8008e10:	d1f7      	bne.n	8008e02 <_fwalk_reent+0xe>
 8008e12:	4638      	mov	r0, r7
 8008e14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008e18:	89ab      	ldrh	r3, [r5, #12]
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d907      	bls.n	8008e2e <_fwalk_reent+0x3a>
 8008e1e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008e22:	3301      	adds	r3, #1
 8008e24:	d003      	beq.n	8008e2e <_fwalk_reent+0x3a>
 8008e26:	4629      	mov	r1, r5
 8008e28:	4630      	mov	r0, r6
 8008e2a:	47c0      	blx	r8
 8008e2c:	4307      	orrs	r7, r0
 8008e2e:	3568      	adds	r5, #104	; 0x68
 8008e30:	e7e9      	b.n	8008e06 <_fwalk_reent+0x12>

08008e32 <__retarget_lock_init_recursive>:
 8008e32:	4770      	bx	lr

08008e34 <__retarget_lock_acquire_recursive>:
 8008e34:	4770      	bx	lr

08008e36 <__retarget_lock_release_recursive>:
 8008e36:	4770      	bx	lr

08008e38 <__swhatbuf_r>:
 8008e38:	b570      	push	{r4, r5, r6, lr}
 8008e3a:	460e      	mov	r6, r1
 8008e3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e40:	2900      	cmp	r1, #0
 8008e42:	b096      	sub	sp, #88	; 0x58
 8008e44:	4614      	mov	r4, r2
 8008e46:	461d      	mov	r5, r3
 8008e48:	da07      	bge.n	8008e5a <__swhatbuf_r+0x22>
 8008e4a:	2300      	movs	r3, #0
 8008e4c:	602b      	str	r3, [r5, #0]
 8008e4e:	89b3      	ldrh	r3, [r6, #12]
 8008e50:	061a      	lsls	r2, r3, #24
 8008e52:	d410      	bmi.n	8008e76 <__swhatbuf_r+0x3e>
 8008e54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008e58:	e00e      	b.n	8008e78 <__swhatbuf_r+0x40>
 8008e5a:	466a      	mov	r2, sp
 8008e5c:	f000 fca6 	bl	80097ac <_fstat_r>
 8008e60:	2800      	cmp	r0, #0
 8008e62:	dbf2      	blt.n	8008e4a <__swhatbuf_r+0x12>
 8008e64:	9a01      	ldr	r2, [sp, #4]
 8008e66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008e6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008e6e:	425a      	negs	r2, r3
 8008e70:	415a      	adcs	r2, r3
 8008e72:	602a      	str	r2, [r5, #0]
 8008e74:	e7ee      	b.n	8008e54 <__swhatbuf_r+0x1c>
 8008e76:	2340      	movs	r3, #64	; 0x40
 8008e78:	2000      	movs	r0, #0
 8008e7a:	6023      	str	r3, [r4, #0]
 8008e7c:	b016      	add	sp, #88	; 0x58
 8008e7e:	bd70      	pop	{r4, r5, r6, pc}

08008e80 <__smakebuf_r>:
 8008e80:	898b      	ldrh	r3, [r1, #12]
 8008e82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008e84:	079d      	lsls	r5, r3, #30
 8008e86:	4606      	mov	r6, r0
 8008e88:	460c      	mov	r4, r1
 8008e8a:	d507      	bpl.n	8008e9c <__smakebuf_r+0x1c>
 8008e8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008e90:	6023      	str	r3, [r4, #0]
 8008e92:	6123      	str	r3, [r4, #16]
 8008e94:	2301      	movs	r3, #1
 8008e96:	6163      	str	r3, [r4, #20]
 8008e98:	b002      	add	sp, #8
 8008e9a:	bd70      	pop	{r4, r5, r6, pc}
 8008e9c:	ab01      	add	r3, sp, #4
 8008e9e:	466a      	mov	r2, sp
 8008ea0:	f7ff ffca 	bl	8008e38 <__swhatbuf_r>
 8008ea4:	9900      	ldr	r1, [sp, #0]
 8008ea6:	4605      	mov	r5, r0
 8008ea8:	4630      	mov	r0, r6
 8008eaa:	f000 f879 	bl	8008fa0 <_malloc_r>
 8008eae:	b948      	cbnz	r0, 8008ec4 <__smakebuf_r+0x44>
 8008eb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008eb4:	059a      	lsls	r2, r3, #22
 8008eb6:	d4ef      	bmi.n	8008e98 <__smakebuf_r+0x18>
 8008eb8:	f023 0303 	bic.w	r3, r3, #3
 8008ebc:	f043 0302 	orr.w	r3, r3, #2
 8008ec0:	81a3      	strh	r3, [r4, #12]
 8008ec2:	e7e3      	b.n	8008e8c <__smakebuf_r+0xc>
 8008ec4:	4b0d      	ldr	r3, [pc, #52]	; (8008efc <__smakebuf_r+0x7c>)
 8008ec6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008ec8:	89a3      	ldrh	r3, [r4, #12]
 8008eca:	6020      	str	r0, [r4, #0]
 8008ecc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008ed0:	81a3      	strh	r3, [r4, #12]
 8008ed2:	9b00      	ldr	r3, [sp, #0]
 8008ed4:	6163      	str	r3, [r4, #20]
 8008ed6:	9b01      	ldr	r3, [sp, #4]
 8008ed8:	6120      	str	r0, [r4, #16]
 8008eda:	b15b      	cbz	r3, 8008ef4 <__smakebuf_r+0x74>
 8008edc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ee0:	4630      	mov	r0, r6
 8008ee2:	f000 fc75 	bl	80097d0 <_isatty_r>
 8008ee6:	b128      	cbz	r0, 8008ef4 <__smakebuf_r+0x74>
 8008ee8:	89a3      	ldrh	r3, [r4, #12]
 8008eea:	f023 0303 	bic.w	r3, r3, #3
 8008eee:	f043 0301 	orr.w	r3, r3, #1
 8008ef2:	81a3      	strh	r3, [r4, #12]
 8008ef4:	89a0      	ldrh	r0, [r4, #12]
 8008ef6:	4305      	orrs	r5, r0
 8008ef8:	81a5      	strh	r5, [r4, #12]
 8008efa:	e7cd      	b.n	8008e98 <__smakebuf_r+0x18>
 8008efc:	08008c91 	.word	0x08008c91

08008f00 <_free_r>:
 8008f00:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008f02:	2900      	cmp	r1, #0
 8008f04:	d048      	beq.n	8008f98 <_free_r+0x98>
 8008f06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008f0a:	9001      	str	r0, [sp, #4]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	f1a1 0404 	sub.w	r4, r1, #4
 8008f12:	bfb8      	it	lt
 8008f14:	18e4      	addlt	r4, r4, r3
 8008f16:	f000 fc7d 	bl	8009814 <__malloc_lock>
 8008f1a:	4a20      	ldr	r2, [pc, #128]	; (8008f9c <_free_r+0x9c>)
 8008f1c:	9801      	ldr	r0, [sp, #4]
 8008f1e:	6813      	ldr	r3, [r2, #0]
 8008f20:	4615      	mov	r5, r2
 8008f22:	b933      	cbnz	r3, 8008f32 <_free_r+0x32>
 8008f24:	6063      	str	r3, [r4, #4]
 8008f26:	6014      	str	r4, [r2, #0]
 8008f28:	b003      	add	sp, #12
 8008f2a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008f2e:	f000 bc77 	b.w	8009820 <__malloc_unlock>
 8008f32:	42a3      	cmp	r3, r4
 8008f34:	d90b      	bls.n	8008f4e <_free_r+0x4e>
 8008f36:	6821      	ldr	r1, [r4, #0]
 8008f38:	1862      	adds	r2, r4, r1
 8008f3a:	4293      	cmp	r3, r2
 8008f3c:	bf04      	itt	eq
 8008f3e:	681a      	ldreq	r2, [r3, #0]
 8008f40:	685b      	ldreq	r3, [r3, #4]
 8008f42:	6063      	str	r3, [r4, #4]
 8008f44:	bf04      	itt	eq
 8008f46:	1852      	addeq	r2, r2, r1
 8008f48:	6022      	streq	r2, [r4, #0]
 8008f4a:	602c      	str	r4, [r5, #0]
 8008f4c:	e7ec      	b.n	8008f28 <_free_r+0x28>
 8008f4e:	461a      	mov	r2, r3
 8008f50:	685b      	ldr	r3, [r3, #4]
 8008f52:	b10b      	cbz	r3, 8008f58 <_free_r+0x58>
 8008f54:	42a3      	cmp	r3, r4
 8008f56:	d9fa      	bls.n	8008f4e <_free_r+0x4e>
 8008f58:	6811      	ldr	r1, [r2, #0]
 8008f5a:	1855      	adds	r5, r2, r1
 8008f5c:	42a5      	cmp	r5, r4
 8008f5e:	d10b      	bne.n	8008f78 <_free_r+0x78>
 8008f60:	6824      	ldr	r4, [r4, #0]
 8008f62:	4421      	add	r1, r4
 8008f64:	1854      	adds	r4, r2, r1
 8008f66:	42a3      	cmp	r3, r4
 8008f68:	6011      	str	r1, [r2, #0]
 8008f6a:	d1dd      	bne.n	8008f28 <_free_r+0x28>
 8008f6c:	681c      	ldr	r4, [r3, #0]
 8008f6e:	685b      	ldr	r3, [r3, #4]
 8008f70:	6053      	str	r3, [r2, #4]
 8008f72:	4421      	add	r1, r4
 8008f74:	6011      	str	r1, [r2, #0]
 8008f76:	e7d7      	b.n	8008f28 <_free_r+0x28>
 8008f78:	d902      	bls.n	8008f80 <_free_r+0x80>
 8008f7a:	230c      	movs	r3, #12
 8008f7c:	6003      	str	r3, [r0, #0]
 8008f7e:	e7d3      	b.n	8008f28 <_free_r+0x28>
 8008f80:	6825      	ldr	r5, [r4, #0]
 8008f82:	1961      	adds	r1, r4, r5
 8008f84:	428b      	cmp	r3, r1
 8008f86:	bf04      	itt	eq
 8008f88:	6819      	ldreq	r1, [r3, #0]
 8008f8a:	685b      	ldreq	r3, [r3, #4]
 8008f8c:	6063      	str	r3, [r4, #4]
 8008f8e:	bf04      	itt	eq
 8008f90:	1949      	addeq	r1, r1, r5
 8008f92:	6021      	streq	r1, [r4, #0]
 8008f94:	6054      	str	r4, [r2, #4]
 8008f96:	e7c7      	b.n	8008f28 <_free_r+0x28>
 8008f98:	b003      	add	sp, #12
 8008f9a:	bd30      	pop	{r4, r5, pc}
 8008f9c:	2000009c 	.word	0x2000009c

08008fa0 <_malloc_r>:
 8008fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fa2:	1ccd      	adds	r5, r1, #3
 8008fa4:	f025 0503 	bic.w	r5, r5, #3
 8008fa8:	3508      	adds	r5, #8
 8008faa:	2d0c      	cmp	r5, #12
 8008fac:	bf38      	it	cc
 8008fae:	250c      	movcc	r5, #12
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	4606      	mov	r6, r0
 8008fb4:	db01      	blt.n	8008fba <_malloc_r+0x1a>
 8008fb6:	42a9      	cmp	r1, r5
 8008fb8:	d903      	bls.n	8008fc2 <_malloc_r+0x22>
 8008fba:	230c      	movs	r3, #12
 8008fbc:	6033      	str	r3, [r6, #0]
 8008fbe:	2000      	movs	r0, #0
 8008fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fc2:	f000 fc27 	bl	8009814 <__malloc_lock>
 8008fc6:	4921      	ldr	r1, [pc, #132]	; (800904c <_malloc_r+0xac>)
 8008fc8:	680a      	ldr	r2, [r1, #0]
 8008fca:	4614      	mov	r4, r2
 8008fcc:	b99c      	cbnz	r4, 8008ff6 <_malloc_r+0x56>
 8008fce:	4f20      	ldr	r7, [pc, #128]	; (8009050 <_malloc_r+0xb0>)
 8008fd0:	683b      	ldr	r3, [r7, #0]
 8008fd2:	b923      	cbnz	r3, 8008fde <_malloc_r+0x3e>
 8008fd4:	4621      	mov	r1, r4
 8008fd6:	4630      	mov	r0, r6
 8008fd8:	f000 fb72 	bl	80096c0 <_sbrk_r>
 8008fdc:	6038      	str	r0, [r7, #0]
 8008fde:	4629      	mov	r1, r5
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 fb6d 	bl	80096c0 <_sbrk_r>
 8008fe6:	1c43      	adds	r3, r0, #1
 8008fe8:	d123      	bne.n	8009032 <_malloc_r+0x92>
 8008fea:	230c      	movs	r3, #12
 8008fec:	6033      	str	r3, [r6, #0]
 8008fee:	4630      	mov	r0, r6
 8008ff0:	f000 fc16 	bl	8009820 <__malloc_unlock>
 8008ff4:	e7e3      	b.n	8008fbe <_malloc_r+0x1e>
 8008ff6:	6823      	ldr	r3, [r4, #0]
 8008ff8:	1b5b      	subs	r3, r3, r5
 8008ffa:	d417      	bmi.n	800902c <_malloc_r+0x8c>
 8008ffc:	2b0b      	cmp	r3, #11
 8008ffe:	d903      	bls.n	8009008 <_malloc_r+0x68>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	441c      	add	r4, r3
 8009004:	6025      	str	r5, [r4, #0]
 8009006:	e004      	b.n	8009012 <_malloc_r+0x72>
 8009008:	6863      	ldr	r3, [r4, #4]
 800900a:	42a2      	cmp	r2, r4
 800900c:	bf0c      	ite	eq
 800900e:	600b      	streq	r3, [r1, #0]
 8009010:	6053      	strne	r3, [r2, #4]
 8009012:	4630      	mov	r0, r6
 8009014:	f000 fc04 	bl	8009820 <__malloc_unlock>
 8009018:	f104 000b 	add.w	r0, r4, #11
 800901c:	1d23      	adds	r3, r4, #4
 800901e:	f020 0007 	bic.w	r0, r0, #7
 8009022:	1ac2      	subs	r2, r0, r3
 8009024:	d0cc      	beq.n	8008fc0 <_malloc_r+0x20>
 8009026:	1a1b      	subs	r3, r3, r0
 8009028:	50a3      	str	r3, [r4, r2]
 800902a:	e7c9      	b.n	8008fc0 <_malloc_r+0x20>
 800902c:	4622      	mov	r2, r4
 800902e:	6864      	ldr	r4, [r4, #4]
 8009030:	e7cc      	b.n	8008fcc <_malloc_r+0x2c>
 8009032:	1cc4      	adds	r4, r0, #3
 8009034:	f024 0403 	bic.w	r4, r4, #3
 8009038:	42a0      	cmp	r0, r4
 800903a:	d0e3      	beq.n	8009004 <_malloc_r+0x64>
 800903c:	1a21      	subs	r1, r4, r0
 800903e:	4630      	mov	r0, r6
 8009040:	f000 fb3e 	bl	80096c0 <_sbrk_r>
 8009044:	3001      	adds	r0, #1
 8009046:	d1dd      	bne.n	8009004 <_malloc_r+0x64>
 8009048:	e7cf      	b.n	8008fea <_malloc_r+0x4a>
 800904a:	bf00      	nop
 800904c:	2000009c 	.word	0x2000009c
 8009050:	200000a0 	.word	0x200000a0

08009054 <__sfputc_r>:
 8009054:	6893      	ldr	r3, [r2, #8]
 8009056:	3b01      	subs	r3, #1
 8009058:	2b00      	cmp	r3, #0
 800905a:	b410      	push	{r4}
 800905c:	6093      	str	r3, [r2, #8]
 800905e:	da08      	bge.n	8009072 <__sfputc_r+0x1e>
 8009060:	6994      	ldr	r4, [r2, #24]
 8009062:	42a3      	cmp	r3, r4
 8009064:	db01      	blt.n	800906a <__sfputc_r+0x16>
 8009066:	290a      	cmp	r1, #10
 8009068:	d103      	bne.n	8009072 <__sfputc_r+0x1e>
 800906a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800906e:	f7ff bc69 	b.w	8008944 <__swbuf_r>
 8009072:	6813      	ldr	r3, [r2, #0]
 8009074:	1c58      	adds	r0, r3, #1
 8009076:	6010      	str	r0, [r2, #0]
 8009078:	7019      	strb	r1, [r3, #0]
 800907a:	4608      	mov	r0, r1
 800907c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009080:	4770      	bx	lr

08009082 <__sfputs_r>:
 8009082:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009084:	4606      	mov	r6, r0
 8009086:	460f      	mov	r7, r1
 8009088:	4614      	mov	r4, r2
 800908a:	18d5      	adds	r5, r2, r3
 800908c:	42ac      	cmp	r4, r5
 800908e:	d101      	bne.n	8009094 <__sfputs_r+0x12>
 8009090:	2000      	movs	r0, #0
 8009092:	e007      	b.n	80090a4 <__sfputs_r+0x22>
 8009094:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009098:	463a      	mov	r2, r7
 800909a:	4630      	mov	r0, r6
 800909c:	f7ff ffda 	bl	8009054 <__sfputc_r>
 80090a0:	1c43      	adds	r3, r0, #1
 80090a2:	d1f3      	bne.n	800908c <__sfputs_r+0xa>
 80090a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080090a8 <_vfiprintf_r>:
 80090a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ac:	460d      	mov	r5, r1
 80090ae:	b09d      	sub	sp, #116	; 0x74
 80090b0:	4614      	mov	r4, r2
 80090b2:	4698      	mov	r8, r3
 80090b4:	4606      	mov	r6, r0
 80090b6:	b118      	cbz	r0, 80090c0 <_vfiprintf_r+0x18>
 80090b8:	6983      	ldr	r3, [r0, #24]
 80090ba:	b90b      	cbnz	r3, 80090c0 <_vfiprintf_r+0x18>
 80090bc:	f7ff fe1c 	bl	8008cf8 <__sinit>
 80090c0:	4b89      	ldr	r3, [pc, #548]	; (80092e8 <_vfiprintf_r+0x240>)
 80090c2:	429d      	cmp	r5, r3
 80090c4:	d11b      	bne.n	80090fe <_vfiprintf_r+0x56>
 80090c6:	6875      	ldr	r5, [r6, #4]
 80090c8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090ca:	07d9      	lsls	r1, r3, #31
 80090cc:	d405      	bmi.n	80090da <_vfiprintf_r+0x32>
 80090ce:	89ab      	ldrh	r3, [r5, #12]
 80090d0:	059a      	lsls	r2, r3, #22
 80090d2:	d402      	bmi.n	80090da <_vfiprintf_r+0x32>
 80090d4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80090d6:	f7ff fead 	bl	8008e34 <__retarget_lock_acquire_recursive>
 80090da:	89ab      	ldrh	r3, [r5, #12]
 80090dc:	071b      	lsls	r3, r3, #28
 80090de:	d501      	bpl.n	80090e4 <_vfiprintf_r+0x3c>
 80090e0:	692b      	ldr	r3, [r5, #16]
 80090e2:	b9eb      	cbnz	r3, 8009120 <_vfiprintf_r+0x78>
 80090e4:	4629      	mov	r1, r5
 80090e6:	4630      	mov	r0, r6
 80090e8:	f7ff fc7e 	bl	80089e8 <__swsetup_r>
 80090ec:	b1c0      	cbz	r0, 8009120 <_vfiprintf_r+0x78>
 80090ee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80090f0:	07dc      	lsls	r4, r3, #31
 80090f2:	d50e      	bpl.n	8009112 <_vfiprintf_r+0x6a>
 80090f4:	f04f 30ff 	mov.w	r0, #4294967295
 80090f8:	b01d      	add	sp, #116	; 0x74
 80090fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090fe:	4b7b      	ldr	r3, [pc, #492]	; (80092ec <_vfiprintf_r+0x244>)
 8009100:	429d      	cmp	r5, r3
 8009102:	d101      	bne.n	8009108 <_vfiprintf_r+0x60>
 8009104:	68b5      	ldr	r5, [r6, #8]
 8009106:	e7df      	b.n	80090c8 <_vfiprintf_r+0x20>
 8009108:	4b79      	ldr	r3, [pc, #484]	; (80092f0 <_vfiprintf_r+0x248>)
 800910a:	429d      	cmp	r5, r3
 800910c:	bf08      	it	eq
 800910e:	68f5      	ldreq	r5, [r6, #12]
 8009110:	e7da      	b.n	80090c8 <_vfiprintf_r+0x20>
 8009112:	89ab      	ldrh	r3, [r5, #12]
 8009114:	0598      	lsls	r0, r3, #22
 8009116:	d4ed      	bmi.n	80090f4 <_vfiprintf_r+0x4c>
 8009118:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800911a:	f7ff fe8c 	bl	8008e36 <__retarget_lock_release_recursive>
 800911e:	e7e9      	b.n	80090f4 <_vfiprintf_r+0x4c>
 8009120:	2300      	movs	r3, #0
 8009122:	9309      	str	r3, [sp, #36]	; 0x24
 8009124:	2320      	movs	r3, #32
 8009126:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800912a:	f8cd 800c 	str.w	r8, [sp, #12]
 800912e:	2330      	movs	r3, #48	; 0x30
 8009130:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80092f4 <_vfiprintf_r+0x24c>
 8009134:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009138:	f04f 0901 	mov.w	r9, #1
 800913c:	4623      	mov	r3, r4
 800913e:	469a      	mov	sl, r3
 8009140:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009144:	b10a      	cbz	r2, 800914a <_vfiprintf_r+0xa2>
 8009146:	2a25      	cmp	r2, #37	; 0x25
 8009148:	d1f9      	bne.n	800913e <_vfiprintf_r+0x96>
 800914a:	ebba 0b04 	subs.w	fp, sl, r4
 800914e:	d00b      	beq.n	8009168 <_vfiprintf_r+0xc0>
 8009150:	465b      	mov	r3, fp
 8009152:	4622      	mov	r2, r4
 8009154:	4629      	mov	r1, r5
 8009156:	4630      	mov	r0, r6
 8009158:	f7ff ff93 	bl	8009082 <__sfputs_r>
 800915c:	3001      	adds	r0, #1
 800915e:	f000 80aa 	beq.w	80092b6 <_vfiprintf_r+0x20e>
 8009162:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009164:	445a      	add	r2, fp
 8009166:	9209      	str	r2, [sp, #36]	; 0x24
 8009168:	f89a 3000 	ldrb.w	r3, [sl]
 800916c:	2b00      	cmp	r3, #0
 800916e:	f000 80a2 	beq.w	80092b6 <_vfiprintf_r+0x20e>
 8009172:	2300      	movs	r3, #0
 8009174:	f04f 32ff 	mov.w	r2, #4294967295
 8009178:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800917c:	f10a 0a01 	add.w	sl, sl, #1
 8009180:	9304      	str	r3, [sp, #16]
 8009182:	9307      	str	r3, [sp, #28]
 8009184:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009188:	931a      	str	r3, [sp, #104]	; 0x68
 800918a:	4654      	mov	r4, sl
 800918c:	2205      	movs	r2, #5
 800918e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009192:	4858      	ldr	r0, [pc, #352]	; (80092f4 <_vfiprintf_r+0x24c>)
 8009194:	f7f7 f844 	bl	8000220 <memchr>
 8009198:	9a04      	ldr	r2, [sp, #16]
 800919a:	b9d8      	cbnz	r0, 80091d4 <_vfiprintf_r+0x12c>
 800919c:	06d1      	lsls	r1, r2, #27
 800919e:	bf44      	itt	mi
 80091a0:	2320      	movmi	r3, #32
 80091a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091a6:	0713      	lsls	r3, r2, #28
 80091a8:	bf44      	itt	mi
 80091aa:	232b      	movmi	r3, #43	; 0x2b
 80091ac:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80091b0:	f89a 3000 	ldrb.w	r3, [sl]
 80091b4:	2b2a      	cmp	r3, #42	; 0x2a
 80091b6:	d015      	beq.n	80091e4 <_vfiprintf_r+0x13c>
 80091b8:	9a07      	ldr	r2, [sp, #28]
 80091ba:	4654      	mov	r4, sl
 80091bc:	2000      	movs	r0, #0
 80091be:	f04f 0c0a 	mov.w	ip, #10
 80091c2:	4621      	mov	r1, r4
 80091c4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80091c8:	3b30      	subs	r3, #48	; 0x30
 80091ca:	2b09      	cmp	r3, #9
 80091cc:	d94e      	bls.n	800926c <_vfiprintf_r+0x1c4>
 80091ce:	b1b0      	cbz	r0, 80091fe <_vfiprintf_r+0x156>
 80091d0:	9207      	str	r2, [sp, #28]
 80091d2:	e014      	b.n	80091fe <_vfiprintf_r+0x156>
 80091d4:	eba0 0308 	sub.w	r3, r0, r8
 80091d8:	fa09 f303 	lsl.w	r3, r9, r3
 80091dc:	4313      	orrs	r3, r2
 80091de:	9304      	str	r3, [sp, #16]
 80091e0:	46a2      	mov	sl, r4
 80091e2:	e7d2      	b.n	800918a <_vfiprintf_r+0xe2>
 80091e4:	9b03      	ldr	r3, [sp, #12]
 80091e6:	1d19      	adds	r1, r3, #4
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	9103      	str	r1, [sp, #12]
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	bfbb      	ittet	lt
 80091f0:	425b      	neglt	r3, r3
 80091f2:	f042 0202 	orrlt.w	r2, r2, #2
 80091f6:	9307      	strge	r3, [sp, #28]
 80091f8:	9307      	strlt	r3, [sp, #28]
 80091fa:	bfb8      	it	lt
 80091fc:	9204      	strlt	r2, [sp, #16]
 80091fe:	7823      	ldrb	r3, [r4, #0]
 8009200:	2b2e      	cmp	r3, #46	; 0x2e
 8009202:	d10c      	bne.n	800921e <_vfiprintf_r+0x176>
 8009204:	7863      	ldrb	r3, [r4, #1]
 8009206:	2b2a      	cmp	r3, #42	; 0x2a
 8009208:	d135      	bne.n	8009276 <_vfiprintf_r+0x1ce>
 800920a:	9b03      	ldr	r3, [sp, #12]
 800920c:	1d1a      	adds	r2, r3, #4
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	9203      	str	r2, [sp, #12]
 8009212:	2b00      	cmp	r3, #0
 8009214:	bfb8      	it	lt
 8009216:	f04f 33ff 	movlt.w	r3, #4294967295
 800921a:	3402      	adds	r4, #2
 800921c:	9305      	str	r3, [sp, #20]
 800921e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009304 <_vfiprintf_r+0x25c>
 8009222:	7821      	ldrb	r1, [r4, #0]
 8009224:	2203      	movs	r2, #3
 8009226:	4650      	mov	r0, sl
 8009228:	f7f6 fffa 	bl	8000220 <memchr>
 800922c:	b140      	cbz	r0, 8009240 <_vfiprintf_r+0x198>
 800922e:	2340      	movs	r3, #64	; 0x40
 8009230:	eba0 000a 	sub.w	r0, r0, sl
 8009234:	fa03 f000 	lsl.w	r0, r3, r0
 8009238:	9b04      	ldr	r3, [sp, #16]
 800923a:	4303      	orrs	r3, r0
 800923c:	3401      	adds	r4, #1
 800923e:	9304      	str	r3, [sp, #16]
 8009240:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009244:	482c      	ldr	r0, [pc, #176]	; (80092f8 <_vfiprintf_r+0x250>)
 8009246:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800924a:	2206      	movs	r2, #6
 800924c:	f7f6 ffe8 	bl	8000220 <memchr>
 8009250:	2800      	cmp	r0, #0
 8009252:	d03f      	beq.n	80092d4 <_vfiprintf_r+0x22c>
 8009254:	4b29      	ldr	r3, [pc, #164]	; (80092fc <_vfiprintf_r+0x254>)
 8009256:	bb1b      	cbnz	r3, 80092a0 <_vfiprintf_r+0x1f8>
 8009258:	9b03      	ldr	r3, [sp, #12]
 800925a:	3307      	adds	r3, #7
 800925c:	f023 0307 	bic.w	r3, r3, #7
 8009260:	3308      	adds	r3, #8
 8009262:	9303      	str	r3, [sp, #12]
 8009264:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009266:	443b      	add	r3, r7
 8009268:	9309      	str	r3, [sp, #36]	; 0x24
 800926a:	e767      	b.n	800913c <_vfiprintf_r+0x94>
 800926c:	fb0c 3202 	mla	r2, ip, r2, r3
 8009270:	460c      	mov	r4, r1
 8009272:	2001      	movs	r0, #1
 8009274:	e7a5      	b.n	80091c2 <_vfiprintf_r+0x11a>
 8009276:	2300      	movs	r3, #0
 8009278:	3401      	adds	r4, #1
 800927a:	9305      	str	r3, [sp, #20]
 800927c:	4619      	mov	r1, r3
 800927e:	f04f 0c0a 	mov.w	ip, #10
 8009282:	4620      	mov	r0, r4
 8009284:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009288:	3a30      	subs	r2, #48	; 0x30
 800928a:	2a09      	cmp	r2, #9
 800928c:	d903      	bls.n	8009296 <_vfiprintf_r+0x1ee>
 800928e:	2b00      	cmp	r3, #0
 8009290:	d0c5      	beq.n	800921e <_vfiprintf_r+0x176>
 8009292:	9105      	str	r1, [sp, #20]
 8009294:	e7c3      	b.n	800921e <_vfiprintf_r+0x176>
 8009296:	fb0c 2101 	mla	r1, ip, r1, r2
 800929a:	4604      	mov	r4, r0
 800929c:	2301      	movs	r3, #1
 800929e:	e7f0      	b.n	8009282 <_vfiprintf_r+0x1da>
 80092a0:	ab03      	add	r3, sp, #12
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	462a      	mov	r2, r5
 80092a6:	4b16      	ldr	r3, [pc, #88]	; (8009300 <_vfiprintf_r+0x258>)
 80092a8:	a904      	add	r1, sp, #16
 80092aa:	4630      	mov	r0, r6
 80092ac:	f3af 8000 	nop.w
 80092b0:	4607      	mov	r7, r0
 80092b2:	1c78      	adds	r0, r7, #1
 80092b4:	d1d6      	bne.n	8009264 <_vfiprintf_r+0x1bc>
 80092b6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80092b8:	07d9      	lsls	r1, r3, #31
 80092ba:	d405      	bmi.n	80092c8 <_vfiprintf_r+0x220>
 80092bc:	89ab      	ldrh	r3, [r5, #12]
 80092be:	059a      	lsls	r2, r3, #22
 80092c0:	d402      	bmi.n	80092c8 <_vfiprintf_r+0x220>
 80092c2:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80092c4:	f7ff fdb7 	bl	8008e36 <__retarget_lock_release_recursive>
 80092c8:	89ab      	ldrh	r3, [r5, #12]
 80092ca:	065b      	lsls	r3, r3, #25
 80092cc:	f53f af12 	bmi.w	80090f4 <_vfiprintf_r+0x4c>
 80092d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80092d2:	e711      	b.n	80090f8 <_vfiprintf_r+0x50>
 80092d4:	ab03      	add	r3, sp, #12
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	462a      	mov	r2, r5
 80092da:	4b09      	ldr	r3, [pc, #36]	; (8009300 <_vfiprintf_r+0x258>)
 80092dc:	a904      	add	r1, sp, #16
 80092de:	4630      	mov	r0, r6
 80092e0:	f000 f880 	bl	80093e4 <_printf_i>
 80092e4:	e7e4      	b.n	80092b0 <_vfiprintf_r+0x208>
 80092e6:	bf00      	nop
 80092e8:	0800a150 	.word	0x0800a150
 80092ec:	0800a170 	.word	0x0800a170
 80092f0:	0800a130 	.word	0x0800a130
 80092f4:	0800a190 	.word	0x0800a190
 80092f8:	0800a19a 	.word	0x0800a19a
 80092fc:	00000000 	.word	0x00000000
 8009300:	08009083 	.word	0x08009083
 8009304:	0800a196 	.word	0x0800a196

08009308 <_printf_common>:
 8009308:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800930c:	4616      	mov	r6, r2
 800930e:	4699      	mov	r9, r3
 8009310:	688a      	ldr	r2, [r1, #8]
 8009312:	690b      	ldr	r3, [r1, #16]
 8009314:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009318:	4293      	cmp	r3, r2
 800931a:	bfb8      	it	lt
 800931c:	4613      	movlt	r3, r2
 800931e:	6033      	str	r3, [r6, #0]
 8009320:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009324:	4607      	mov	r7, r0
 8009326:	460c      	mov	r4, r1
 8009328:	b10a      	cbz	r2, 800932e <_printf_common+0x26>
 800932a:	3301      	adds	r3, #1
 800932c:	6033      	str	r3, [r6, #0]
 800932e:	6823      	ldr	r3, [r4, #0]
 8009330:	0699      	lsls	r1, r3, #26
 8009332:	bf42      	ittt	mi
 8009334:	6833      	ldrmi	r3, [r6, #0]
 8009336:	3302      	addmi	r3, #2
 8009338:	6033      	strmi	r3, [r6, #0]
 800933a:	6825      	ldr	r5, [r4, #0]
 800933c:	f015 0506 	ands.w	r5, r5, #6
 8009340:	d106      	bne.n	8009350 <_printf_common+0x48>
 8009342:	f104 0a19 	add.w	sl, r4, #25
 8009346:	68e3      	ldr	r3, [r4, #12]
 8009348:	6832      	ldr	r2, [r6, #0]
 800934a:	1a9b      	subs	r3, r3, r2
 800934c:	42ab      	cmp	r3, r5
 800934e:	dc26      	bgt.n	800939e <_printf_common+0x96>
 8009350:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009354:	1e13      	subs	r3, r2, #0
 8009356:	6822      	ldr	r2, [r4, #0]
 8009358:	bf18      	it	ne
 800935a:	2301      	movne	r3, #1
 800935c:	0692      	lsls	r2, r2, #26
 800935e:	d42b      	bmi.n	80093b8 <_printf_common+0xb0>
 8009360:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009364:	4649      	mov	r1, r9
 8009366:	4638      	mov	r0, r7
 8009368:	47c0      	blx	r8
 800936a:	3001      	adds	r0, #1
 800936c:	d01e      	beq.n	80093ac <_printf_common+0xa4>
 800936e:	6823      	ldr	r3, [r4, #0]
 8009370:	68e5      	ldr	r5, [r4, #12]
 8009372:	6832      	ldr	r2, [r6, #0]
 8009374:	f003 0306 	and.w	r3, r3, #6
 8009378:	2b04      	cmp	r3, #4
 800937a:	bf08      	it	eq
 800937c:	1aad      	subeq	r5, r5, r2
 800937e:	68a3      	ldr	r3, [r4, #8]
 8009380:	6922      	ldr	r2, [r4, #16]
 8009382:	bf0c      	ite	eq
 8009384:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009388:	2500      	movne	r5, #0
 800938a:	4293      	cmp	r3, r2
 800938c:	bfc4      	itt	gt
 800938e:	1a9b      	subgt	r3, r3, r2
 8009390:	18ed      	addgt	r5, r5, r3
 8009392:	2600      	movs	r6, #0
 8009394:	341a      	adds	r4, #26
 8009396:	42b5      	cmp	r5, r6
 8009398:	d11a      	bne.n	80093d0 <_printf_common+0xc8>
 800939a:	2000      	movs	r0, #0
 800939c:	e008      	b.n	80093b0 <_printf_common+0xa8>
 800939e:	2301      	movs	r3, #1
 80093a0:	4652      	mov	r2, sl
 80093a2:	4649      	mov	r1, r9
 80093a4:	4638      	mov	r0, r7
 80093a6:	47c0      	blx	r8
 80093a8:	3001      	adds	r0, #1
 80093aa:	d103      	bne.n	80093b4 <_printf_common+0xac>
 80093ac:	f04f 30ff 	mov.w	r0, #4294967295
 80093b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80093b4:	3501      	adds	r5, #1
 80093b6:	e7c6      	b.n	8009346 <_printf_common+0x3e>
 80093b8:	18e1      	adds	r1, r4, r3
 80093ba:	1c5a      	adds	r2, r3, #1
 80093bc:	2030      	movs	r0, #48	; 0x30
 80093be:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80093c2:	4422      	add	r2, r4
 80093c4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80093c8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80093cc:	3302      	adds	r3, #2
 80093ce:	e7c7      	b.n	8009360 <_printf_common+0x58>
 80093d0:	2301      	movs	r3, #1
 80093d2:	4622      	mov	r2, r4
 80093d4:	4649      	mov	r1, r9
 80093d6:	4638      	mov	r0, r7
 80093d8:	47c0      	blx	r8
 80093da:	3001      	adds	r0, #1
 80093dc:	d0e6      	beq.n	80093ac <_printf_common+0xa4>
 80093de:	3601      	adds	r6, #1
 80093e0:	e7d9      	b.n	8009396 <_printf_common+0x8e>
	...

080093e4 <_printf_i>:
 80093e4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80093e8:	460c      	mov	r4, r1
 80093ea:	4691      	mov	r9, r2
 80093ec:	7e27      	ldrb	r7, [r4, #24]
 80093ee:	990c      	ldr	r1, [sp, #48]	; 0x30
 80093f0:	2f78      	cmp	r7, #120	; 0x78
 80093f2:	4680      	mov	r8, r0
 80093f4:	469a      	mov	sl, r3
 80093f6:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80093fa:	d807      	bhi.n	800940c <_printf_i+0x28>
 80093fc:	2f62      	cmp	r7, #98	; 0x62
 80093fe:	d80a      	bhi.n	8009416 <_printf_i+0x32>
 8009400:	2f00      	cmp	r7, #0
 8009402:	f000 80d8 	beq.w	80095b6 <_printf_i+0x1d2>
 8009406:	2f58      	cmp	r7, #88	; 0x58
 8009408:	f000 80a3 	beq.w	8009552 <_printf_i+0x16e>
 800940c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009410:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009414:	e03a      	b.n	800948c <_printf_i+0xa8>
 8009416:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800941a:	2b15      	cmp	r3, #21
 800941c:	d8f6      	bhi.n	800940c <_printf_i+0x28>
 800941e:	a001      	add	r0, pc, #4	; (adr r0, 8009424 <_printf_i+0x40>)
 8009420:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8009424:	0800947d 	.word	0x0800947d
 8009428:	08009491 	.word	0x08009491
 800942c:	0800940d 	.word	0x0800940d
 8009430:	0800940d 	.word	0x0800940d
 8009434:	0800940d 	.word	0x0800940d
 8009438:	0800940d 	.word	0x0800940d
 800943c:	08009491 	.word	0x08009491
 8009440:	0800940d 	.word	0x0800940d
 8009444:	0800940d 	.word	0x0800940d
 8009448:	0800940d 	.word	0x0800940d
 800944c:	0800940d 	.word	0x0800940d
 8009450:	0800959d 	.word	0x0800959d
 8009454:	080094c1 	.word	0x080094c1
 8009458:	0800957f 	.word	0x0800957f
 800945c:	0800940d 	.word	0x0800940d
 8009460:	0800940d 	.word	0x0800940d
 8009464:	080095bf 	.word	0x080095bf
 8009468:	0800940d 	.word	0x0800940d
 800946c:	080094c1 	.word	0x080094c1
 8009470:	0800940d 	.word	0x0800940d
 8009474:	0800940d 	.word	0x0800940d
 8009478:	08009587 	.word	0x08009587
 800947c:	680b      	ldr	r3, [r1, #0]
 800947e:	1d1a      	adds	r2, r3, #4
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	600a      	str	r2, [r1, #0]
 8009484:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8009488:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800948c:	2301      	movs	r3, #1
 800948e:	e0a3      	b.n	80095d8 <_printf_i+0x1f4>
 8009490:	6825      	ldr	r5, [r4, #0]
 8009492:	6808      	ldr	r0, [r1, #0]
 8009494:	062e      	lsls	r6, r5, #24
 8009496:	f100 0304 	add.w	r3, r0, #4
 800949a:	d50a      	bpl.n	80094b2 <_printf_i+0xce>
 800949c:	6805      	ldr	r5, [r0, #0]
 800949e:	600b      	str	r3, [r1, #0]
 80094a0:	2d00      	cmp	r5, #0
 80094a2:	da03      	bge.n	80094ac <_printf_i+0xc8>
 80094a4:	232d      	movs	r3, #45	; 0x2d
 80094a6:	426d      	negs	r5, r5
 80094a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80094ac:	485e      	ldr	r0, [pc, #376]	; (8009628 <_printf_i+0x244>)
 80094ae:	230a      	movs	r3, #10
 80094b0:	e019      	b.n	80094e6 <_printf_i+0x102>
 80094b2:	f015 0f40 	tst.w	r5, #64	; 0x40
 80094b6:	6805      	ldr	r5, [r0, #0]
 80094b8:	600b      	str	r3, [r1, #0]
 80094ba:	bf18      	it	ne
 80094bc:	b22d      	sxthne	r5, r5
 80094be:	e7ef      	b.n	80094a0 <_printf_i+0xbc>
 80094c0:	680b      	ldr	r3, [r1, #0]
 80094c2:	6825      	ldr	r5, [r4, #0]
 80094c4:	1d18      	adds	r0, r3, #4
 80094c6:	6008      	str	r0, [r1, #0]
 80094c8:	0628      	lsls	r0, r5, #24
 80094ca:	d501      	bpl.n	80094d0 <_printf_i+0xec>
 80094cc:	681d      	ldr	r5, [r3, #0]
 80094ce:	e002      	b.n	80094d6 <_printf_i+0xf2>
 80094d0:	0669      	lsls	r1, r5, #25
 80094d2:	d5fb      	bpl.n	80094cc <_printf_i+0xe8>
 80094d4:	881d      	ldrh	r5, [r3, #0]
 80094d6:	4854      	ldr	r0, [pc, #336]	; (8009628 <_printf_i+0x244>)
 80094d8:	2f6f      	cmp	r7, #111	; 0x6f
 80094da:	bf0c      	ite	eq
 80094dc:	2308      	moveq	r3, #8
 80094de:	230a      	movne	r3, #10
 80094e0:	2100      	movs	r1, #0
 80094e2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80094e6:	6866      	ldr	r6, [r4, #4]
 80094e8:	60a6      	str	r6, [r4, #8]
 80094ea:	2e00      	cmp	r6, #0
 80094ec:	bfa2      	ittt	ge
 80094ee:	6821      	ldrge	r1, [r4, #0]
 80094f0:	f021 0104 	bicge.w	r1, r1, #4
 80094f4:	6021      	strge	r1, [r4, #0]
 80094f6:	b90d      	cbnz	r5, 80094fc <_printf_i+0x118>
 80094f8:	2e00      	cmp	r6, #0
 80094fa:	d04d      	beq.n	8009598 <_printf_i+0x1b4>
 80094fc:	4616      	mov	r6, r2
 80094fe:	fbb5 f1f3 	udiv	r1, r5, r3
 8009502:	fb03 5711 	mls	r7, r3, r1, r5
 8009506:	5dc7      	ldrb	r7, [r0, r7]
 8009508:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800950c:	462f      	mov	r7, r5
 800950e:	42bb      	cmp	r3, r7
 8009510:	460d      	mov	r5, r1
 8009512:	d9f4      	bls.n	80094fe <_printf_i+0x11a>
 8009514:	2b08      	cmp	r3, #8
 8009516:	d10b      	bne.n	8009530 <_printf_i+0x14c>
 8009518:	6823      	ldr	r3, [r4, #0]
 800951a:	07df      	lsls	r7, r3, #31
 800951c:	d508      	bpl.n	8009530 <_printf_i+0x14c>
 800951e:	6923      	ldr	r3, [r4, #16]
 8009520:	6861      	ldr	r1, [r4, #4]
 8009522:	4299      	cmp	r1, r3
 8009524:	bfde      	ittt	le
 8009526:	2330      	movle	r3, #48	; 0x30
 8009528:	f806 3c01 	strble.w	r3, [r6, #-1]
 800952c:	f106 36ff 	addle.w	r6, r6, #4294967295
 8009530:	1b92      	subs	r2, r2, r6
 8009532:	6122      	str	r2, [r4, #16]
 8009534:	f8cd a000 	str.w	sl, [sp]
 8009538:	464b      	mov	r3, r9
 800953a:	aa03      	add	r2, sp, #12
 800953c:	4621      	mov	r1, r4
 800953e:	4640      	mov	r0, r8
 8009540:	f7ff fee2 	bl	8009308 <_printf_common>
 8009544:	3001      	adds	r0, #1
 8009546:	d14c      	bne.n	80095e2 <_printf_i+0x1fe>
 8009548:	f04f 30ff 	mov.w	r0, #4294967295
 800954c:	b004      	add	sp, #16
 800954e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009552:	4835      	ldr	r0, [pc, #212]	; (8009628 <_printf_i+0x244>)
 8009554:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009558:	6823      	ldr	r3, [r4, #0]
 800955a:	680e      	ldr	r6, [r1, #0]
 800955c:	061f      	lsls	r7, r3, #24
 800955e:	f856 5b04 	ldr.w	r5, [r6], #4
 8009562:	600e      	str	r6, [r1, #0]
 8009564:	d514      	bpl.n	8009590 <_printf_i+0x1ac>
 8009566:	07d9      	lsls	r1, r3, #31
 8009568:	bf44      	itt	mi
 800956a:	f043 0320 	orrmi.w	r3, r3, #32
 800956e:	6023      	strmi	r3, [r4, #0]
 8009570:	b91d      	cbnz	r5, 800957a <_printf_i+0x196>
 8009572:	6823      	ldr	r3, [r4, #0]
 8009574:	f023 0320 	bic.w	r3, r3, #32
 8009578:	6023      	str	r3, [r4, #0]
 800957a:	2310      	movs	r3, #16
 800957c:	e7b0      	b.n	80094e0 <_printf_i+0xfc>
 800957e:	6823      	ldr	r3, [r4, #0]
 8009580:	f043 0320 	orr.w	r3, r3, #32
 8009584:	6023      	str	r3, [r4, #0]
 8009586:	2378      	movs	r3, #120	; 0x78
 8009588:	4828      	ldr	r0, [pc, #160]	; (800962c <_printf_i+0x248>)
 800958a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800958e:	e7e3      	b.n	8009558 <_printf_i+0x174>
 8009590:	065e      	lsls	r6, r3, #25
 8009592:	bf48      	it	mi
 8009594:	b2ad      	uxthmi	r5, r5
 8009596:	e7e6      	b.n	8009566 <_printf_i+0x182>
 8009598:	4616      	mov	r6, r2
 800959a:	e7bb      	b.n	8009514 <_printf_i+0x130>
 800959c:	680b      	ldr	r3, [r1, #0]
 800959e:	6826      	ldr	r6, [r4, #0]
 80095a0:	6960      	ldr	r0, [r4, #20]
 80095a2:	1d1d      	adds	r5, r3, #4
 80095a4:	600d      	str	r5, [r1, #0]
 80095a6:	0635      	lsls	r5, r6, #24
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	d501      	bpl.n	80095b0 <_printf_i+0x1cc>
 80095ac:	6018      	str	r0, [r3, #0]
 80095ae:	e002      	b.n	80095b6 <_printf_i+0x1d2>
 80095b0:	0671      	lsls	r1, r6, #25
 80095b2:	d5fb      	bpl.n	80095ac <_printf_i+0x1c8>
 80095b4:	8018      	strh	r0, [r3, #0]
 80095b6:	2300      	movs	r3, #0
 80095b8:	6123      	str	r3, [r4, #16]
 80095ba:	4616      	mov	r6, r2
 80095bc:	e7ba      	b.n	8009534 <_printf_i+0x150>
 80095be:	680b      	ldr	r3, [r1, #0]
 80095c0:	1d1a      	adds	r2, r3, #4
 80095c2:	600a      	str	r2, [r1, #0]
 80095c4:	681e      	ldr	r6, [r3, #0]
 80095c6:	6862      	ldr	r2, [r4, #4]
 80095c8:	2100      	movs	r1, #0
 80095ca:	4630      	mov	r0, r6
 80095cc:	f7f6 fe28 	bl	8000220 <memchr>
 80095d0:	b108      	cbz	r0, 80095d6 <_printf_i+0x1f2>
 80095d2:	1b80      	subs	r0, r0, r6
 80095d4:	6060      	str	r0, [r4, #4]
 80095d6:	6863      	ldr	r3, [r4, #4]
 80095d8:	6123      	str	r3, [r4, #16]
 80095da:	2300      	movs	r3, #0
 80095dc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095e0:	e7a8      	b.n	8009534 <_printf_i+0x150>
 80095e2:	6923      	ldr	r3, [r4, #16]
 80095e4:	4632      	mov	r2, r6
 80095e6:	4649      	mov	r1, r9
 80095e8:	4640      	mov	r0, r8
 80095ea:	47d0      	blx	sl
 80095ec:	3001      	adds	r0, #1
 80095ee:	d0ab      	beq.n	8009548 <_printf_i+0x164>
 80095f0:	6823      	ldr	r3, [r4, #0]
 80095f2:	079b      	lsls	r3, r3, #30
 80095f4:	d413      	bmi.n	800961e <_printf_i+0x23a>
 80095f6:	68e0      	ldr	r0, [r4, #12]
 80095f8:	9b03      	ldr	r3, [sp, #12]
 80095fa:	4298      	cmp	r0, r3
 80095fc:	bfb8      	it	lt
 80095fe:	4618      	movlt	r0, r3
 8009600:	e7a4      	b.n	800954c <_printf_i+0x168>
 8009602:	2301      	movs	r3, #1
 8009604:	4632      	mov	r2, r6
 8009606:	4649      	mov	r1, r9
 8009608:	4640      	mov	r0, r8
 800960a:	47d0      	blx	sl
 800960c:	3001      	adds	r0, #1
 800960e:	d09b      	beq.n	8009548 <_printf_i+0x164>
 8009610:	3501      	adds	r5, #1
 8009612:	68e3      	ldr	r3, [r4, #12]
 8009614:	9903      	ldr	r1, [sp, #12]
 8009616:	1a5b      	subs	r3, r3, r1
 8009618:	42ab      	cmp	r3, r5
 800961a:	dcf2      	bgt.n	8009602 <_printf_i+0x21e>
 800961c:	e7eb      	b.n	80095f6 <_printf_i+0x212>
 800961e:	2500      	movs	r5, #0
 8009620:	f104 0619 	add.w	r6, r4, #25
 8009624:	e7f5      	b.n	8009612 <_printf_i+0x22e>
 8009626:	bf00      	nop
 8009628:	0800a1a1 	.word	0x0800a1a1
 800962c:	0800a1b2 	.word	0x0800a1b2

08009630 <_putc_r>:
 8009630:	b570      	push	{r4, r5, r6, lr}
 8009632:	460d      	mov	r5, r1
 8009634:	4614      	mov	r4, r2
 8009636:	4606      	mov	r6, r0
 8009638:	b118      	cbz	r0, 8009642 <_putc_r+0x12>
 800963a:	6983      	ldr	r3, [r0, #24]
 800963c:	b90b      	cbnz	r3, 8009642 <_putc_r+0x12>
 800963e:	f7ff fb5b 	bl	8008cf8 <__sinit>
 8009642:	4b1c      	ldr	r3, [pc, #112]	; (80096b4 <_putc_r+0x84>)
 8009644:	429c      	cmp	r4, r3
 8009646:	d124      	bne.n	8009692 <_putc_r+0x62>
 8009648:	6874      	ldr	r4, [r6, #4]
 800964a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800964c:	07d8      	lsls	r0, r3, #31
 800964e:	d405      	bmi.n	800965c <_putc_r+0x2c>
 8009650:	89a3      	ldrh	r3, [r4, #12]
 8009652:	0599      	lsls	r1, r3, #22
 8009654:	d402      	bmi.n	800965c <_putc_r+0x2c>
 8009656:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009658:	f7ff fbec 	bl	8008e34 <__retarget_lock_acquire_recursive>
 800965c:	68a3      	ldr	r3, [r4, #8]
 800965e:	3b01      	subs	r3, #1
 8009660:	2b00      	cmp	r3, #0
 8009662:	60a3      	str	r3, [r4, #8]
 8009664:	da05      	bge.n	8009672 <_putc_r+0x42>
 8009666:	69a2      	ldr	r2, [r4, #24]
 8009668:	4293      	cmp	r3, r2
 800966a:	db1c      	blt.n	80096a6 <_putc_r+0x76>
 800966c:	b2eb      	uxtb	r3, r5
 800966e:	2b0a      	cmp	r3, #10
 8009670:	d019      	beq.n	80096a6 <_putc_r+0x76>
 8009672:	6823      	ldr	r3, [r4, #0]
 8009674:	1c5a      	adds	r2, r3, #1
 8009676:	6022      	str	r2, [r4, #0]
 8009678:	701d      	strb	r5, [r3, #0]
 800967a:	b2ed      	uxtb	r5, r5
 800967c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800967e:	07da      	lsls	r2, r3, #31
 8009680:	d405      	bmi.n	800968e <_putc_r+0x5e>
 8009682:	89a3      	ldrh	r3, [r4, #12]
 8009684:	059b      	lsls	r3, r3, #22
 8009686:	d402      	bmi.n	800968e <_putc_r+0x5e>
 8009688:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800968a:	f7ff fbd4 	bl	8008e36 <__retarget_lock_release_recursive>
 800968e:	4628      	mov	r0, r5
 8009690:	bd70      	pop	{r4, r5, r6, pc}
 8009692:	4b09      	ldr	r3, [pc, #36]	; (80096b8 <_putc_r+0x88>)
 8009694:	429c      	cmp	r4, r3
 8009696:	d101      	bne.n	800969c <_putc_r+0x6c>
 8009698:	68b4      	ldr	r4, [r6, #8]
 800969a:	e7d6      	b.n	800964a <_putc_r+0x1a>
 800969c:	4b07      	ldr	r3, [pc, #28]	; (80096bc <_putc_r+0x8c>)
 800969e:	429c      	cmp	r4, r3
 80096a0:	bf08      	it	eq
 80096a2:	68f4      	ldreq	r4, [r6, #12]
 80096a4:	e7d1      	b.n	800964a <_putc_r+0x1a>
 80096a6:	4629      	mov	r1, r5
 80096a8:	4622      	mov	r2, r4
 80096aa:	4630      	mov	r0, r6
 80096ac:	f7ff f94a 	bl	8008944 <__swbuf_r>
 80096b0:	4605      	mov	r5, r0
 80096b2:	e7e3      	b.n	800967c <_putc_r+0x4c>
 80096b4:	0800a150 	.word	0x0800a150
 80096b8:	0800a170 	.word	0x0800a170
 80096bc:	0800a130 	.word	0x0800a130

080096c0 <_sbrk_r>:
 80096c0:	b538      	push	{r3, r4, r5, lr}
 80096c2:	4d06      	ldr	r5, [pc, #24]	; (80096dc <_sbrk_r+0x1c>)
 80096c4:	2300      	movs	r3, #0
 80096c6:	4604      	mov	r4, r0
 80096c8:	4608      	mov	r0, r1
 80096ca:	602b      	str	r3, [r5, #0]
 80096cc:	f7f8 ff78 	bl	80025c0 <_sbrk>
 80096d0:	1c43      	adds	r3, r0, #1
 80096d2:	d102      	bne.n	80096da <_sbrk_r+0x1a>
 80096d4:	682b      	ldr	r3, [r5, #0]
 80096d6:	b103      	cbz	r3, 80096da <_sbrk_r+0x1a>
 80096d8:	6023      	str	r3, [r4, #0]
 80096da:	bd38      	pop	{r3, r4, r5, pc}
 80096dc:	20000508 	.word	0x20000508

080096e0 <__sread>:
 80096e0:	b510      	push	{r4, lr}
 80096e2:	460c      	mov	r4, r1
 80096e4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80096e8:	f000 f8a0 	bl	800982c <_read_r>
 80096ec:	2800      	cmp	r0, #0
 80096ee:	bfab      	itete	ge
 80096f0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80096f2:	89a3      	ldrhlt	r3, [r4, #12]
 80096f4:	181b      	addge	r3, r3, r0
 80096f6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80096fa:	bfac      	ite	ge
 80096fc:	6563      	strge	r3, [r4, #84]	; 0x54
 80096fe:	81a3      	strhlt	r3, [r4, #12]
 8009700:	bd10      	pop	{r4, pc}

08009702 <__swrite>:
 8009702:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009706:	461f      	mov	r7, r3
 8009708:	898b      	ldrh	r3, [r1, #12]
 800970a:	05db      	lsls	r3, r3, #23
 800970c:	4605      	mov	r5, r0
 800970e:	460c      	mov	r4, r1
 8009710:	4616      	mov	r6, r2
 8009712:	d505      	bpl.n	8009720 <__swrite+0x1e>
 8009714:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009718:	2302      	movs	r3, #2
 800971a:	2200      	movs	r2, #0
 800971c:	f000 f868 	bl	80097f0 <_lseek_r>
 8009720:	89a3      	ldrh	r3, [r4, #12]
 8009722:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009726:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800972a:	81a3      	strh	r3, [r4, #12]
 800972c:	4632      	mov	r2, r6
 800972e:	463b      	mov	r3, r7
 8009730:	4628      	mov	r0, r5
 8009732:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009736:	f000 b817 	b.w	8009768 <_write_r>

0800973a <__sseek>:
 800973a:	b510      	push	{r4, lr}
 800973c:	460c      	mov	r4, r1
 800973e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009742:	f000 f855 	bl	80097f0 <_lseek_r>
 8009746:	1c43      	adds	r3, r0, #1
 8009748:	89a3      	ldrh	r3, [r4, #12]
 800974a:	bf15      	itete	ne
 800974c:	6560      	strne	r0, [r4, #84]	; 0x54
 800974e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009752:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009756:	81a3      	strheq	r3, [r4, #12]
 8009758:	bf18      	it	ne
 800975a:	81a3      	strhne	r3, [r4, #12]
 800975c:	bd10      	pop	{r4, pc}

0800975e <__sclose>:
 800975e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009762:	f000 b813 	b.w	800978c <_close_r>
	...

08009768 <_write_r>:
 8009768:	b538      	push	{r3, r4, r5, lr}
 800976a:	4d07      	ldr	r5, [pc, #28]	; (8009788 <_write_r+0x20>)
 800976c:	4604      	mov	r4, r0
 800976e:	4608      	mov	r0, r1
 8009770:	4611      	mov	r1, r2
 8009772:	2200      	movs	r2, #0
 8009774:	602a      	str	r2, [r5, #0]
 8009776:	461a      	mov	r2, r3
 8009778:	f7f7 fd43 	bl	8001202 <_write>
 800977c:	1c43      	adds	r3, r0, #1
 800977e:	d102      	bne.n	8009786 <_write_r+0x1e>
 8009780:	682b      	ldr	r3, [r5, #0]
 8009782:	b103      	cbz	r3, 8009786 <_write_r+0x1e>
 8009784:	6023      	str	r3, [r4, #0]
 8009786:	bd38      	pop	{r3, r4, r5, pc}
 8009788:	20000508 	.word	0x20000508

0800978c <_close_r>:
 800978c:	b538      	push	{r3, r4, r5, lr}
 800978e:	4d06      	ldr	r5, [pc, #24]	; (80097a8 <_close_r+0x1c>)
 8009790:	2300      	movs	r3, #0
 8009792:	4604      	mov	r4, r0
 8009794:	4608      	mov	r0, r1
 8009796:	602b      	str	r3, [r5, #0]
 8009798:	f7f8 fedd 	bl	8002556 <_close>
 800979c:	1c43      	adds	r3, r0, #1
 800979e:	d102      	bne.n	80097a6 <_close_r+0x1a>
 80097a0:	682b      	ldr	r3, [r5, #0]
 80097a2:	b103      	cbz	r3, 80097a6 <_close_r+0x1a>
 80097a4:	6023      	str	r3, [r4, #0]
 80097a6:	bd38      	pop	{r3, r4, r5, pc}
 80097a8:	20000508 	.word	0x20000508

080097ac <_fstat_r>:
 80097ac:	b538      	push	{r3, r4, r5, lr}
 80097ae:	4d07      	ldr	r5, [pc, #28]	; (80097cc <_fstat_r+0x20>)
 80097b0:	2300      	movs	r3, #0
 80097b2:	4604      	mov	r4, r0
 80097b4:	4608      	mov	r0, r1
 80097b6:	4611      	mov	r1, r2
 80097b8:	602b      	str	r3, [r5, #0]
 80097ba:	f7f8 fed8 	bl	800256e <_fstat>
 80097be:	1c43      	adds	r3, r0, #1
 80097c0:	d102      	bne.n	80097c8 <_fstat_r+0x1c>
 80097c2:	682b      	ldr	r3, [r5, #0]
 80097c4:	b103      	cbz	r3, 80097c8 <_fstat_r+0x1c>
 80097c6:	6023      	str	r3, [r4, #0]
 80097c8:	bd38      	pop	{r3, r4, r5, pc}
 80097ca:	bf00      	nop
 80097cc:	20000508 	.word	0x20000508

080097d0 <_isatty_r>:
 80097d0:	b538      	push	{r3, r4, r5, lr}
 80097d2:	4d06      	ldr	r5, [pc, #24]	; (80097ec <_isatty_r+0x1c>)
 80097d4:	2300      	movs	r3, #0
 80097d6:	4604      	mov	r4, r0
 80097d8:	4608      	mov	r0, r1
 80097da:	602b      	str	r3, [r5, #0]
 80097dc:	f7f8 fed7 	bl	800258e <_isatty>
 80097e0:	1c43      	adds	r3, r0, #1
 80097e2:	d102      	bne.n	80097ea <_isatty_r+0x1a>
 80097e4:	682b      	ldr	r3, [r5, #0]
 80097e6:	b103      	cbz	r3, 80097ea <_isatty_r+0x1a>
 80097e8:	6023      	str	r3, [r4, #0]
 80097ea:	bd38      	pop	{r3, r4, r5, pc}
 80097ec:	20000508 	.word	0x20000508

080097f0 <_lseek_r>:
 80097f0:	b538      	push	{r3, r4, r5, lr}
 80097f2:	4d07      	ldr	r5, [pc, #28]	; (8009810 <_lseek_r+0x20>)
 80097f4:	4604      	mov	r4, r0
 80097f6:	4608      	mov	r0, r1
 80097f8:	4611      	mov	r1, r2
 80097fa:	2200      	movs	r2, #0
 80097fc:	602a      	str	r2, [r5, #0]
 80097fe:	461a      	mov	r2, r3
 8009800:	f7f8 fed0 	bl	80025a4 <_lseek>
 8009804:	1c43      	adds	r3, r0, #1
 8009806:	d102      	bne.n	800980e <_lseek_r+0x1e>
 8009808:	682b      	ldr	r3, [r5, #0]
 800980a:	b103      	cbz	r3, 800980e <_lseek_r+0x1e>
 800980c:	6023      	str	r3, [r4, #0]
 800980e:	bd38      	pop	{r3, r4, r5, pc}
 8009810:	20000508 	.word	0x20000508

08009814 <__malloc_lock>:
 8009814:	4801      	ldr	r0, [pc, #4]	; (800981c <__malloc_lock+0x8>)
 8009816:	f7ff bb0d 	b.w	8008e34 <__retarget_lock_acquire_recursive>
 800981a:	bf00      	nop
 800981c:	20000500 	.word	0x20000500

08009820 <__malloc_unlock>:
 8009820:	4801      	ldr	r0, [pc, #4]	; (8009828 <__malloc_unlock+0x8>)
 8009822:	f7ff bb08 	b.w	8008e36 <__retarget_lock_release_recursive>
 8009826:	bf00      	nop
 8009828:	20000500 	.word	0x20000500

0800982c <_read_r>:
 800982c:	b538      	push	{r3, r4, r5, lr}
 800982e:	4d07      	ldr	r5, [pc, #28]	; (800984c <_read_r+0x20>)
 8009830:	4604      	mov	r4, r0
 8009832:	4608      	mov	r0, r1
 8009834:	4611      	mov	r1, r2
 8009836:	2200      	movs	r2, #0
 8009838:	602a      	str	r2, [r5, #0]
 800983a:	461a      	mov	r2, r3
 800983c:	f7f8 fe6e 	bl	800251c <_read>
 8009840:	1c43      	adds	r3, r0, #1
 8009842:	d102      	bne.n	800984a <_read_r+0x1e>
 8009844:	682b      	ldr	r3, [r5, #0]
 8009846:	b103      	cbz	r3, 800984a <_read_r+0x1e>
 8009848:	6023      	str	r3, [r4, #0]
 800984a:	bd38      	pop	{r3, r4, r5, pc}
 800984c:	20000508 	.word	0x20000508

08009850 <floor>:
 8009850:	ec51 0b10 	vmov	r0, r1, d0
 8009854:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009858:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800985c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8009860:	2e13      	cmp	r6, #19
 8009862:	ee10 5a10 	vmov	r5, s0
 8009866:	ee10 8a10 	vmov	r8, s0
 800986a:	460c      	mov	r4, r1
 800986c:	dc32      	bgt.n	80098d4 <floor+0x84>
 800986e:	2e00      	cmp	r6, #0
 8009870:	da14      	bge.n	800989c <floor+0x4c>
 8009872:	a333      	add	r3, pc, #204	; (adr r3, 8009940 <floor+0xf0>)
 8009874:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009878:	f7f6 fe52 	bl	8000520 <__adddf3>
 800987c:	2200      	movs	r2, #0
 800987e:	2300      	movs	r3, #0
 8009880:	f7f7 f882 	bl	8000988 <__aeabi_dcmpgt>
 8009884:	b138      	cbz	r0, 8009896 <floor+0x46>
 8009886:	2c00      	cmp	r4, #0
 8009888:	da57      	bge.n	800993a <floor+0xea>
 800988a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800988e:	431d      	orrs	r5, r3
 8009890:	d001      	beq.n	8009896 <floor+0x46>
 8009892:	4c2d      	ldr	r4, [pc, #180]	; (8009948 <floor+0xf8>)
 8009894:	2500      	movs	r5, #0
 8009896:	4621      	mov	r1, r4
 8009898:	4628      	mov	r0, r5
 800989a:	e025      	b.n	80098e8 <floor+0x98>
 800989c:	4f2b      	ldr	r7, [pc, #172]	; (800994c <floor+0xfc>)
 800989e:	4137      	asrs	r7, r6
 80098a0:	ea01 0307 	and.w	r3, r1, r7
 80098a4:	4303      	orrs	r3, r0
 80098a6:	d01f      	beq.n	80098e8 <floor+0x98>
 80098a8:	a325      	add	r3, pc, #148	; (adr r3, 8009940 <floor+0xf0>)
 80098aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098ae:	f7f6 fe37 	bl	8000520 <__adddf3>
 80098b2:	2200      	movs	r2, #0
 80098b4:	2300      	movs	r3, #0
 80098b6:	f7f7 f867 	bl	8000988 <__aeabi_dcmpgt>
 80098ba:	2800      	cmp	r0, #0
 80098bc:	d0eb      	beq.n	8009896 <floor+0x46>
 80098be:	2c00      	cmp	r4, #0
 80098c0:	bfbe      	ittt	lt
 80098c2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80098c6:	fa43 f606 	asrlt.w	r6, r3, r6
 80098ca:	19a4      	addlt	r4, r4, r6
 80098cc:	ea24 0407 	bic.w	r4, r4, r7
 80098d0:	2500      	movs	r5, #0
 80098d2:	e7e0      	b.n	8009896 <floor+0x46>
 80098d4:	2e33      	cmp	r6, #51	; 0x33
 80098d6:	dd0b      	ble.n	80098f0 <floor+0xa0>
 80098d8:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80098dc:	d104      	bne.n	80098e8 <floor+0x98>
 80098de:	ee10 2a10 	vmov	r2, s0
 80098e2:	460b      	mov	r3, r1
 80098e4:	f7f6 fe1c 	bl	8000520 <__adddf3>
 80098e8:	ec41 0b10 	vmov	d0, r0, r1
 80098ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80098f0:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 80098f4:	f04f 33ff 	mov.w	r3, #4294967295
 80098f8:	fa23 f707 	lsr.w	r7, r3, r7
 80098fc:	4207      	tst	r7, r0
 80098fe:	d0f3      	beq.n	80098e8 <floor+0x98>
 8009900:	a30f      	add	r3, pc, #60	; (adr r3, 8009940 <floor+0xf0>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	f7f6 fe0b 	bl	8000520 <__adddf3>
 800990a:	2200      	movs	r2, #0
 800990c:	2300      	movs	r3, #0
 800990e:	f7f7 f83b 	bl	8000988 <__aeabi_dcmpgt>
 8009912:	2800      	cmp	r0, #0
 8009914:	d0bf      	beq.n	8009896 <floor+0x46>
 8009916:	2c00      	cmp	r4, #0
 8009918:	da02      	bge.n	8009920 <floor+0xd0>
 800991a:	2e14      	cmp	r6, #20
 800991c:	d103      	bne.n	8009926 <floor+0xd6>
 800991e:	3401      	adds	r4, #1
 8009920:	ea25 0507 	bic.w	r5, r5, r7
 8009924:	e7b7      	b.n	8009896 <floor+0x46>
 8009926:	2301      	movs	r3, #1
 8009928:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800992c:	fa03 f606 	lsl.w	r6, r3, r6
 8009930:	4435      	add	r5, r6
 8009932:	4545      	cmp	r5, r8
 8009934:	bf38      	it	cc
 8009936:	18e4      	addcc	r4, r4, r3
 8009938:	e7f2      	b.n	8009920 <floor+0xd0>
 800993a:	2500      	movs	r5, #0
 800993c:	462c      	mov	r4, r5
 800993e:	e7aa      	b.n	8009896 <floor+0x46>
 8009940:	8800759c 	.word	0x8800759c
 8009944:	7e37e43c 	.word	0x7e37e43c
 8009948:	bff00000 	.word	0xbff00000
 800994c:	000fffff 	.word	0x000fffff

08009950 <fmodf>:
 8009950:	b508      	push	{r3, lr}
 8009952:	ed2d 8b02 	vpush	{d8}
 8009956:	eef0 8a40 	vmov.f32	s17, s0
 800995a:	eeb0 8a60 	vmov.f32	s16, s1
 800995e:	f000 f823 	bl	80099a8 <__ieee754_fmodf>
 8009962:	4b0f      	ldr	r3, [pc, #60]	; (80099a0 <fmodf+0x50>)
 8009964:	f993 3000 	ldrsb.w	r3, [r3]
 8009968:	3301      	adds	r3, #1
 800996a:	d016      	beq.n	800999a <fmodf+0x4a>
 800996c:	eeb4 8a48 	vcmp.f32	s16, s16
 8009970:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009974:	d611      	bvs.n	800999a <fmodf+0x4a>
 8009976:	eef4 8a68 	vcmp.f32	s17, s17
 800997a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800997e:	d60c      	bvs.n	800999a <fmodf+0x4a>
 8009980:	eddf 8a08 	vldr	s17, [pc, #32]	; 80099a4 <fmodf+0x54>
 8009984:	eeb4 8a68 	vcmp.f32	s16, s17
 8009988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800998c:	d105      	bne.n	800999a <fmodf+0x4a>
 800998e:	f7fe ff03 	bl	8008798 <__errno>
 8009992:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8009996:	2321      	movs	r3, #33	; 0x21
 8009998:	6003      	str	r3, [r0, #0]
 800999a:	ecbd 8b02 	vpop	{d8}
 800999e:	bd08      	pop	{r3, pc}
 80099a0:	20000070 	.word	0x20000070
 80099a4:	00000000 	.word	0x00000000

080099a8 <__ieee754_fmodf>:
 80099a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099aa:	ee10 6a90 	vmov	r6, s1
 80099ae:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 80099b2:	d009      	beq.n	80099c8 <__ieee754_fmodf+0x20>
 80099b4:	ee10 2a10 	vmov	r2, s0
 80099b8:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 80099bc:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099c0:	da02      	bge.n	80099c8 <__ieee754_fmodf+0x20>
 80099c2:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 80099c6:	dd04      	ble.n	80099d2 <__ieee754_fmodf+0x2a>
 80099c8:	ee60 0a20 	vmul.f32	s1, s0, s1
 80099cc:	ee80 0aa0 	vdiv.f32	s0, s1, s1
 80099d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099d2:	42ab      	cmp	r3, r5
 80099d4:	dbfc      	blt.n	80099d0 <__ieee754_fmodf+0x28>
 80099d6:	f002 4400 	and.w	r4, r2, #2147483648	; 0x80000000
 80099da:	d106      	bne.n	80099ea <__ieee754_fmodf+0x42>
 80099dc:	4a32      	ldr	r2, [pc, #200]	; (8009aa8 <__ieee754_fmodf+0x100>)
 80099de:	0fe3      	lsrs	r3, r4, #31
 80099e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80099e4:	ed93 0a00 	vldr	s0, [r3]
 80099e8:	e7f2      	b.n	80099d0 <__ieee754_fmodf+0x28>
 80099ea:	f012 4fff 	tst.w	r2, #2139095040	; 0x7f800000
 80099ee:	d13f      	bne.n	8009a70 <__ieee754_fmodf+0xc8>
 80099f0:	0219      	lsls	r1, r3, #8
 80099f2:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 80099f6:	2900      	cmp	r1, #0
 80099f8:	dc37      	bgt.n	8009a6a <__ieee754_fmodf+0xc2>
 80099fa:	f016 4fff 	tst.w	r6, #2139095040	; 0x7f800000
 80099fe:	d13d      	bne.n	8009a7c <__ieee754_fmodf+0xd4>
 8009a00:	022f      	lsls	r7, r5, #8
 8009a02:	f06f 017d 	mvn.w	r1, #125	; 0x7d
 8009a06:	2f00      	cmp	r7, #0
 8009a08:	da35      	bge.n	8009a76 <__ieee754_fmodf+0xce>
 8009a0a:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 8009a0e:	bfbb      	ittet	lt
 8009a10:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8009a14:	1a12      	sublt	r2, r2, r0
 8009a16:	f3c2 0316 	ubfxge	r3, r2, #0, #23
 8009a1a:	4093      	lsllt	r3, r2
 8009a1c:	bfa8      	it	ge
 8009a1e:	f443 0300 	orrge.w	r3, r3, #8388608	; 0x800000
 8009a22:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009a26:	bfb5      	itete	lt
 8009a28:	f06f 027d 	mvnlt.w	r2, #125	; 0x7d
 8009a2c:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 8009a30:	1a52      	sublt	r2, r2, r1
 8009a32:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 8009a36:	bfb8      	it	lt
 8009a38:	4095      	lsllt	r5, r2
 8009a3a:	1a40      	subs	r0, r0, r1
 8009a3c:	1b5a      	subs	r2, r3, r5
 8009a3e:	bb00      	cbnz	r0, 8009a82 <__ieee754_fmodf+0xda>
 8009a40:	ea13 0322 	ands.w	r3, r3, r2, asr #32
 8009a44:	bf38      	it	cc
 8009a46:	4613      	movcc	r3, r2
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d0c7      	beq.n	80099dc <__ieee754_fmodf+0x34>
 8009a4c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009a50:	db1f      	blt.n	8009a92 <__ieee754_fmodf+0xea>
 8009a52:	f111 0f7e 	cmn.w	r1, #126	; 0x7e
 8009a56:	db1f      	blt.n	8009a98 <__ieee754_fmodf+0xf0>
 8009a58:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8009a5c:	317f      	adds	r1, #127	; 0x7f
 8009a5e:	4323      	orrs	r3, r4
 8009a60:	ea43 53c1 	orr.w	r3, r3, r1, lsl #23
 8009a64:	ee00 3a10 	vmov	s0, r3
 8009a68:	e7b2      	b.n	80099d0 <__ieee754_fmodf+0x28>
 8009a6a:	3801      	subs	r0, #1
 8009a6c:	0049      	lsls	r1, r1, #1
 8009a6e:	e7c2      	b.n	80099f6 <__ieee754_fmodf+0x4e>
 8009a70:	15d8      	asrs	r0, r3, #23
 8009a72:	387f      	subs	r0, #127	; 0x7f
 8009a74:	e7c1      	b.n	80099fa <__ieee754_fmodf+0x52>
 8009a76:	3901      	subs	r1, #1
 8009a78:	007f      	lsls	r7, r7, #1
 8009a7a:	e7c4      	b.n	8009a06 <__ieee754_fmodf+0x5e>
 8009a7c:	15e9      	asrs	r1, r5, #23
 8009a7e:	397f      	subs	r1, #127	; 0x7f
 8009a80:	e7c3      	b.n	8009a0a <__ieee754_fmodf+0x62>
 8009a82:	2a00      	cmp	r2, #0
 8009a84:	da02      	bge.n	8009a8c <__ieee754_fmodf+0xe4>
 8009a86:	005b      	lsls	r3, r3, #1
 8009a88:	3801      	subs	r0, #1
 8009a8a:	e7d7      	b.n	8009a3c <__ieee754_fmodf+0x94>
 8009a8c:	d0a6      	beq.n	80099dc <__ieee754_fmodf+0x34>
 8009a8e:	0053      	lsls	r3, r2, #1
 8009a90:	e7fa      	b.n	8009a88 <__ieee754_fmodf+0xe0>
 8009a92:	005b      	lsls	r3, r3, #1
 8009a94:	3901      	subs	r1, #1
 8009a96:	e7d9      	b.n	8009a4c <__ieee754_fmodf+0xa4>
 8009a98:	f1c1 21ff 	rsb	r1, r1, #4278255360	; 0xff00ff00
 8009a9c:	f501 017f 	add.w	r1, r1, #16711680	; 0xff0000
 8009aa0:	3182      	adds	r1, #130	; 0x82
 8009aa2:	410b      	asrs	r3, r1
 8009aa4:	4323      	orrs	r3, r4
 8009aa6:	e7dd      	b.n	8009a64 <__ieee754_fmodf+0xbc>
 8009aa8:	0800a1c4 	.word	0x0800a1c4

08009aac <_init>:
 8009aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aae:	bf00      	nop
 8009ab0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ab2:	bc08      	pop	{r3}
 8009ab4:	469e      	mov	lr, r3
 8009ab6:	4770      	bx	lr

08009ab8 <_fini>:
 8009ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009aba:	bf00      	nop
 8009abc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009abe:	bc08      	pop	{r3}
 8009ac0:	469e      	mov	lr, r3
 8009ac2:	4770      	bx	lr
