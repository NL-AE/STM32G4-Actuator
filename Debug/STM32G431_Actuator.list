
STM32G431_Actuator.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e80  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000170  08008060  08008060  00018060  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081d0  080081d0  00020070  2**0
                  CONTENTS
  4 .ARM          00000000  080081d0  080081d0  00020070  2**0
                  CONTENTS
  5 .preinit_array 00000000  080081d0  080081d0  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081d0  080081d0  000181d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081d4  080081d4  000181d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  080081d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003ac  20000070  08008248  00020070  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08008248  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001bbf6  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000031bf  00000000  00000000  0003bc96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001688  00000000  00000000  0003ee58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001510  00000000  00000000  000404e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022565  00000000  00000000  000419f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017a7a  00000000  00000000  00063f55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000df355  00000000  00000000  0007b9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0015ad24  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068c4  00000000  00000000  0015ad78  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000070 	.word	0x20000070
 80001fc:	00000000 	.word	0x00000000
 8000200:	08008048 	.word	0x08008048

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000074 	.word	0x20000074
 800021c:	08008048 	.word	0x08008048

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80002c0:	b580      	push	{r7, lr}
 80002c2:	b08c      	sub	sp, #48	; 0x30
 80002c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80002c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80002ca:	2200      	movs	r2, #0
 80002cc:	601a      	str	r2, [r3, #0]
 80002ce:	605a      	str	r2, [r3, #4]
 80002d0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80002d2:	1d3b      	adds	r3, r7, #4
 80002d4:	2220      	movs	r2, #32
 80002d6:	2100      	movs	r1, #0
 80002d8:	4618      	mov	r0, r3
 80002da:	f006 fe83 	bl	8006fe4 <memset>
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 80002de:	4b34      	ldr	r3, [pc, #208]	; (80003b0 <MX_ADC1_Init+0xf0>)
 80002e0:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80002e4:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80002e6:	4b32      	ldr	r3, [pc, #200]	; (80003b0 <MX_ADC1_Init+0xf0>)
 80002e8:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80002ec:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80002ee:	4b30      	ldr	r3, [pc, #192]	; (80003b0 <MX_ADC1_Init+0xf0>)
 80002f0:	2200      	movs	r2, #0
 80002f2:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80002f4:	4b2e      	ldr	r3, [pc, #184]	; (80003b0 <MX_ADC1_Init+0xf0>)
 80002f6:	2200      	movs	r2, #0
 80002f8:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 80002fa:	4b2d      	ldr	r3, [pc, #180]	; (80003b0 <MX_ADC1_Init+0xf0>)
 80002fc:	2200      	movs	r2, #0
 80002fe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000300:	4b2b      	ldr	r3, [pc, #172]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000302:	2200      	movs	r2, #0
 8000304:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000306:	4b2a      	ldr	r3, [pc, #168]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000308:	2208      	movs	r2, #8
 800030a:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800030c:	4b28      	ldr	r3, [pc, #160]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800030e:	2200      	movs	r2, #0
 8000310:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000312:	4b27      	ldr	r3, [pc, #156]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000314:	2200      	movs	r2, #0
 8000316:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000318:	4b25      	ldr	r3, [pc, #148]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800031a:	2201      	movs	r2, #1
 800031c:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800031e:	4b24      	ldr	r3, [pc, #144]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000320:	2200      	movs	r2, #0
 8000322:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000326:	4b22      	ldr	r3, [pc, #136]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000328:	2200      	movs	r2, #0
 800032a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800032c:	4b20      	ldr	r3, [pc, #128]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800032e:	2200      	movs	r2, #0
 8000330:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000332:	4b1f      	ldr	r3, [pc, #124]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000334:	2200      	movs	r2, #0
 8000336:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800033a:	4b1d      	ldr	r3, [pc, #116]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800033c:	2200      	movs	r2, #0
 800033e:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000340:	4b1b      	ldr	r3, [pc, #108]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000342:	2200      	movs	r2, #0
 8000344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000348:	4819      	ldr	r0, [pc, #100]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800034a:	f001 fc99 	bl	8001c80 <HAL_ADC_Init>
 800034e:	4603      	mov	r3, r0
 8000350:	2b00      	cmp	r3, #0
 8000352:	d001      	beq.n	8000358 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000354:	f000 fe70 	bl	8001038 <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_DUALMODE_REGSIMULT;
 8000358:	2306      	movs	r3, #6
 800035a:	627b      	str	r3, [r7, #36]	; 0x24
  multimode.DMAAccessMode = ADC_DMAACCESSMODE_DISABLED;
 800035c:	2300      	movs	r3, #0
 800035e:	62bb      	str	r3, [r7, #40]	; 0x28
  multimode.TwoSamplingDelay = ADC_TWOSAMPLINGDELAY_1CYCLE;
 8000360:	2300      	movs	r3, #0
 8000362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000364:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000368:	4619      	mov	r1, r3
 800036a:	4811      	ldr	r0, [pc, #68]	; (80003b0 <MX_ADC1_Init+0xf0>)
 800036c:	f002 fd1a 	bl	8002da4 <HAL_ADCEx_MultiModeConfigChannel>
 8000370:	4603      	mov	r3, r0
 8000372:	2b00      	cmp	r3, #0
 8000374:	d001      	beq.n	800037a <MX_ADC1_Init+0xba>
  {
    Error_Handler();
 8000376:	f000 fe5f 	bl	8001038 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 800037a:	4b0e      	ldr	r3, [pc, #56]	; (80003b4 <MX_ADC1_Init+0xf4>)
 800037c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800037e:	2306      	movs	r3, #6
 8000380:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000382:	2300      	movs	r3, #0
 8000384:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000386:	237f      	movs	r3, #127	; 0x7f
 8000388:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800038a:	2304      	movs	r3, #4
 800038c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800038e:	2300      	movs	r3, #0
 8000390:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000392:	1d3b      	adds	r3, r7, #4
 8000394:	4619      	mov	r1, r3
 8000396:	4806      	ldr	r0, [pc, #24]	; (80003b0 <MX_ADC1_Init+0xf0>)
 8000398:	f001 ff9e 	bl	80022d8 <HAL_ADC_ConfigChannel>
 800039c:	4603      	mov	r3, r0
 800039e:	2b00      	cmp	r3, #0
 80003a0:	d001      	beq.n	80003a6 <MX_ADC1_Init+0xe6>
  {
    Error_Handler();
 80003a2:	f000 fe49 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80003a6:	bf00      	nop
 80003a8:	3730      	adds	r7, #48	; 0x30
 80003aa:	46bd      	mov	sp, r7
 80003ac:	bd80      	pop	{r7, pc}
 80003ae:	bf00      	nop
 80003b0:	20000108 	.word	0x20000108
 80003b4:	3ef08000 	.word	0x3ef08000

080003b8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b088      	sub	sp, #32
 80003bc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003be:	463b      	mov	r3, r7
 80003c0:	2220      	movs	r2, #32
 80003c2:	2100      	movs	r1, #0
 80003c4:	4618      	mov	r0, r3
 80003c6:	f006 fe0d 	bl	8006fe4 <memset>
  /* USER CODE BEGIN ADC2_Init 1 */

  /* USER CODE END ADC2_Init 1 */
  /** Common config
  */
  hadc2.Instance = ADC2;
 80003ca:	4b28      	ldr	r3, [pc, #160]	; (800046c <MX_ADC2_Init+0xb4>)
 80003cc:	4a28      	ldr	r2, [pc, #160]	; (8000470 <MX_ADC2_Init+0xb8>)
 80003ce:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80003d0:	4b26      	ldr	r3, [pc, #152]	; (800046c <MX_ADC2_Init+0xb4>)
 80003d2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80003d6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80003d8:	4b24      	ldr	r3, [pc, #144]	; (800046c <MX_ADC2_Init+0xb4>)
 80003da:	2200      	movs	r2, #0
 80003dc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003de:	4b23      	ldr	r3, [pc, #140]	; (800046c <MX_ADC2_Init+0xb4>)
 80003e0:	2200      	movs	r2, #0
 80003e2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80003e4:	4b21      	ldr	r3, [pc, #132]	; (800046c <MX_ADC2_Init+0xb4>)
 80003e6:	2200      	movs	r2, #0
 80003e8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ea:	4b20      	ldr	r3, [pc, #128]	; (800046c <MX_ADC2_Init+0xb4>)
 80003ec:	2200      	movs	r2, #0
 80003ee:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f0:	4b1e      	ldr	r3, [pc, #120]	; (800046c <MX_ADC2_Init+0xb4>)
 80003f2:	2204      	movs	r2, #4
 80003f4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80003f6:	4b1d      	ldr	r3, [pc, #116]	; (800046c <MX_ADC2_Init+0xb4>)
 80003f8:	2200      	movs	r2, #0
 80003fa:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80003fc:	4b1b      	ldr	r3, [pc, #108]	; (800046c <MX_ADC2_Init+0xb4>)
 80003fe:	2200      	movs	r2, #0
 8000400:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000402:	4b1a      	ldr	r3, [pc, #104]	; (800046c <MX_ADC2_Init+0xb4>)
 8000404:	2201      	movs	r2, #1
 8000406:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000408:	4b18      	ldr	r3, [pc, #96]	; (800046c <MX_ADC2_Init+0xb4>)
 800040a:	2200      	movs	r2, #0
 800040c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000410:	4b16      	ldr	r3, [pc, #88]	; (800046c <MX_ADC2_Init+0xb4>)
 8000412:	2200      	movs	r2, #0
 8000414:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000418:	4b14      	ldr	r3, [pc, #80]	; (800046c <MX_ADC2_Init+0xb4>)
 800041a:	2200      	movs	r2, #0
 800041c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800041e:	4b13      	ldr	r3, [pc, #76]	; (800046c <MX_ADC2_Init+0xb4>)
 8000420:	2200      	movs	r2, #0
 8000422:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000426:	4811      	ldr	r0, [pc, #68]	; (800046c <MX_ADC2_Init+0xb4>)
 8000428:	f001 fc2a 	bl	8001c80 <HAL_ADC_Init>
 800042c:	4603      	mov	r3, r0
 800042e:	2b00      	cmp	r3, #0
 8000430:	d001      	beq.n	8000436 <MX_ADC2_Init+0x7e>
  {
    Error_Handler();
 8000432:	f000 fe01 	bl	8001038 <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000436:	4b0f      	ldr	r3, [pc, #60]	; (8000474 <MX_ADC2_Init+0xbc>)
 8000438:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800043a:	2306      	movs	r3, #6
 800043c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800043e:	2300      	movs	r3, #0
 8000440:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000442:	237f      	movs	r3, #127	; 0x7f
 8000444:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000446:	2304      	movs	r3, #4
 8000448:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800044a:	2300      	movs	r3, #0
 800044c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800044e:	463b      	mov	r3, r7
 8000450:	4619      	mov	r1, r3
 8000452:	4806      	ldr	r0, [pc, #24]	; (800046c <MX_ADC2_Init+0xb4>)
 8000454:	f001 ff40 	bl	80022d8 <HAL_ADC_ConfigChannel>
 8000458:	4603      	mov	r3, r0
 800045a:	2b00      	cmp	r3, #0
 800045c:	d001      	beq.n	8000462 <MX_ADC2_Init+0xaa>
  {
    Error_Handler();
 800045e:	f000 fdeb 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000462:	bf00      	nop
 8000464:	3720      	adds	r7, #32
 8000466:	46bd      	mov	sp, r7
 8000468:	bd80      	pop	{r7, pc}
 800046a:	bf00      	nop
 800046c:	2000009c 	.word	0x2000009c
 8000470:	50000100 	.word	0x50000100
 8000474:	10c00010 	.word	0x10c00010

08000478 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b09e      	sub	sp, #120	; 0x78
 800047c:	af00      	add	r7, sp, #0
 800047e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000480:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000484:	2200      	movs	r2, #0
 8000486:	601a      	str	r2, [r3, #0]
 8000488:	605a      	str	r2, [r3, #4]
 800048a:	609a      	str	r2, [r3, #8]
 800048c:	60da      	str	r2, [r3, #12]
 800048e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000490:	f107 0320 	add.w	r3, r7, #32
 8000494:	2244      	movs	r2, #68	; 0x44
 8000496:	2100      	movs	r1, #0
 8000498:	4618      	mov	r0, r3
 800049a:	f006 fda3 	bl	8006fe4 <memset>
  if(adcHandle->Instance==ADC1)
 800049e:	687b      	ldr	r3, [r7, #4]
 80004a0:	681b      	ldr	r3, [r3, #0]
 80004a2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80004a6:	d13d      	bne.n	8000524 <HAL_ADC_MspInit+0xac>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80004a8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80004ac:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80004ae:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80004b2:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80004b4:	f107 0320 	add.w	r3, r7, #32
 80004b8:	4618      	mov	r0, r3
 80004ba:	f004 f90b 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 80004be:	4603      	mov	r3, r0
 80004c0:	2b00      	cmp	r3, #0
 80004c2:	d001      	beq.n	80004c8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80004c4:	f000 fdb8 	bl	8001038 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80004c8:	4b46      	ldr	r3, [pc, #280]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 80004ca:	681b      	ldr	r3, [r3, #0]
 80004cc:	3301      	adds	r3, #1
 80004ce:	4a45      	ldr	r2, [pc, #276]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 80004d0:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80004d2:	4b44      	ldr	r3, [pc, #272]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 80004d4:	681b      	ldr	r3, [r3, #0]
 80004d6:	2b01      	cmp	r3, #1
 80004d8:	d10b      	bne.n	80004f2 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80004da:	4b43      	ldr	r3, [pc, #268]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 80004dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004de:	4a42      	ldr	r2, [pc, #264]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 80004e0:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80004e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004e6:	4b40      	ldr	r3, [pc, #256]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 80004e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80004ee:	61fb      	str	r3, [r7, #28]
 80004f0:	69fb      	ldr	r3, [r7, #28]
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80004f2:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 80004f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80004f6:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 80004f8:	f043 0302 	orr.w	r3, r3, #2
 80004fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80004fe:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000500:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000502:	f003 0302 	and.w	r3, r3, #2
 8000506:	61bb      	str	r3, [r7, #24]
 8000508:	69bb      	ldr	r3, [r7, #24]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = V_Sen_Pin|SO_A_Pin;
 800050a:	2303      	movs	r3, #3
 800050c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800050e:	2303      	movs	r3, #3
 8000510:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000512:	2300      	movs	r3, #0
 8000514:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000516:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800051a:	4619      	mov	r1, r3
 800051c:	4833      	ldr	r0, [pc, #204]	; (80005ec <HAL_ADC_MspInit+0x174>)
 800051e:	f003 f953 	bl	80037c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000522:	e05a      	b.n	80005da <HAL_ADC_MspInit+0x162>
  else if(adcHandle->Instance==ADC2)
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	4a31      	ldr	r2, [pc, #196]	; (80005f0 <HAL_ADC_MspInit+0x178>)
 800052a:	4293      	cmp	r3, r2
 800052c:	d155      	bne.n	80005da <HAL_ADC_MspInit+0x162>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800052e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000532:	623b      	str	r3, [r7, #32]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000534:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000538:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800053a:	f107 0320 	add.w	r3, r7, #32
 800053e:	4618      	mov	r0, r3
 8000540:	f004 f8c8 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 8000544:	4603      	mov	r3, r0
 8000546:	2b00      	cmp	r3, #0
 8000548:	d001      	beq.n	800054e <HAL_ADC_MspInit+0xd6>
      Error_Handler();
 800054a:	f000 fd75 	bl	8001038 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800054e:	4b25      	ldr	r3, [pc, #148]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	3301      	adds	r3, #1
 8000554:	4a23      	ldr	r2, [pc, #140]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 8000556:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000558:	4b22      	ldr	r3, [pc, #136]	; (80005e4 <HAL_ADC_MspInit+0x16c>)
 800055a:	681b      	ldr	r3, [r3, #0]
 800055c:	2b01      	cmp	r3, #1
 800055e:	d10b      	bne.n	8000578 <HAL_ADC_MspInit+0x100>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8000560:	4b21      	ldr	r3, [pc, #132]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000562:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000564:	4a20      	ldr	r2, [pc, #128]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000566:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800056a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800056c:	4b1e      	ldr	r3, [pc, #120]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 800056e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000570:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000574:	617b      	str	r3, [r7, #20]
 8000576:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000578:	4b1b      	ldr	r3, [pc, #108]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 800057a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057c:	4a1a      	ldr	r2, [pc, #104]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000584:	4b18      	ldr	r3, [pc, #96]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000588:	f003 0301 	and.w	r3, r3, #1
 800058c:	613b      	str	r3, [r7, #16]
 800058e:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000590:	4b15      	ldr	r3, [pc, #84]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000592:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000594:	4a14      	ldr	r2, [pc, #80]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 8000596:	f043 0302 	orr.w	r3, r3, #2
 800059a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059c:	4b12      	ldr	r3, [pc, #72]	; (80005e8 <HAL_ADC_MspInit+0x170>)
 800059e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005a0:	f003 0302 	and.w	r3, r3, #2
 80005a4:	60fb      	str	r3, [r7, #12]
 80005a6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = T_Sen_Pin;
 80005a8:	2380      	movs	r3, #128	; 0x80
 80005aa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005ac:	2303      	movs	r3, #3
 80005ae:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005b0:	2300      	movs	r3, #0
 80005b2:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(T_Sen_GPIO_Port, &GPIO_InitStruct);
 80005b4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005b8:	4619      	mov	r1, r3
 80005ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005be:	f003 f903 	bl	80037c8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = SO_B_Pin;
 80005c2:	2304      	movs	r3, #4
 80005c4:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80005c6:	2303      	movs	r3, #3
 80005c8:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005ca:	2300      	movs	r3, #0
 80005cc:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(SO_B_GPIO_Port, &GPIO_InitStruct);
 80005ce:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	; (80005ec <HAL_ADC_MspInit+0x174>)
 80005d6:	f003 f8f7 	bl	80037c8 <HAL_GPIO_Init>
}
 80005da:	bf00      	nop
 80005dc:	3778      	adds	r7, #120	; 0x78
 80005de:	46bd      	mov	sp, r7
 80005e0:	bd80      	pop	{r7, pc}
 80005e2:	bf00      	nop
 80005e4:	2000008c 	.word	0x2000008c
 80005e8:	40021000 	.word	0x40021000
 80005ec:	48000400 	.word	0x48000400
 80005f0:	50000100 	.word	0x50000100

080005f4 <MX_FDCAN1_Init>:

FDCAN_HandleTypeDef hfdcan1;

/* FDCAN1 init function */
void MX_FDCAN1_Init(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END FDCAN1_Init 0 */

  /* USER CODE BEGIN FDCAN1_Init 1 */

  /* USER CODE END FDCAN1_Init 1 */
  hfdcan1.Instance = FDCAN1;
 80005f8:	4b1f      	ldr	r3, [pc, #124]	; (8000678 <MX_FDCAN1_Init+0x84>)
 80005fa:	4a20      	ldr	r2, [pc, #128]	; (800067c <MX_FDCAN1_Init+0x88>)
 80005fc:	601a      	str	r2, [r3, #0]
  hfdcan1.Init.ClockDivider = FDCAN_CLOCK_DIV1;
 80005fe:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000600:	2200      	movs	r2, #0
 8000602:	605a      	str	r2, [r3, #4]
  hfdcan1.Init.FrameFormat = FDCAN_FRAME_CLASSIC;
 8000604:	4b1c      	ldr	r3, [pc, #112]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  hfdcan1.Init.Mode = FDCAN_MODE_NORMAL;
 800060a:	4b1b      	ldr	r3, [pc, #108]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800060c:	2200      	movs	r2, #0
 800060e:	60da      	str	r2, [r3, #12]
  hfdcan1.Init.AutoRetransmission = DISABLE;
 8000610:	4b19      	ldr	r3, [pc, #100]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000612:	2200      	movs	r2, #0
 8000614:	741a      	strb	r2, [r3, #16]
  hfdcan1.Init.TransmitPause = DISABLE;
 8000616:	4b18      	ldr	r3, [pc, #96]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000618:	2200      	movs	r2, #0
 800061a:	745a      	strb	r2, [r3, #17]
  hfdcan1.Init.ProtocolException = DISABLE;
 800061c:	4b16      	ldr	r3, [pc, #88]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800061e:	2200      	movs	r2, #0
 8000620:	749a      	strb	r2, [r3, #18]
  hfdcan1.Init.NominalPrescaler = 1;
 8000622:	4b15      	ldr	r3, [pc, #84]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000624:	2201      	movs	r2, #1
 8000626:	615a      	str	r2, [r3, #20]
  hfdcan1.Init.NominalSyncJumpWidth = 1;
 8000628:	4b13      	ldr	r3, [pc, #76]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800062a:	2201      	movs	r2, #1
 800062c:	619a      	str	r2, [r3, #24]
  hfdcan1.Init.NominalTimeSeg1 = 2;
 800062e:	4b12      	ldr	r3, [pc, #72]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000630:	2202      	movs	r2, #2
 8000632:	61da      	str	r2, [r3, #28]
  hfdcan1.Init.NominalTimeSeg2 = 2;
 8000634:	4b10      	ldr	r3, [pc, #64]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000636:	2202      	movs	r2, #2
 8000638:	621a      	str	r2, [r3, #32]
  hfdcan1.Init.DataPrescaler = 1;
 800063a:	4b0f      	ldr	r3, [pc, #60]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800063c:	2201      	movs	r2, #1
 800063e:	625a      	str	r2, [r3, #36]	; 0x24
  hfdcan1.Init.DataSyncJumpWidth = 1;
 8000640:	4b0d      	ldr	r3, [pc, #52]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000642:	2201      	movs	r2, #1
 8000644:	629a      	str	r2, [r3, #40]	; 0x28
  hfdcan1.Init.DataTimeSeg1 = 1;
 8000646:	4b0c      	ldr	r3, [pc, #48]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000648:	2201      	movs	r2, #1
 800064a:	62da      	str	r2, [r3, #44]	; 0x2c
  hfdcan1.Init.DataTimeSeg2 = 1;
 800064c:	4b0a      	ldr	r3, [pc, #40]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800064e:	2201      	movs	r2, #1
 8000650:	631a      	str	r2, [r3, #48]	; 0x30
  hfdcan1.Init.StdFiltersNbr = 0;
 8000652:	4b09      	ldr	r3, [pc, #36]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000654:	2200      	movs	r2, #0
 8000656:	635a      	str	r2, [r3, #52]	; 0x34
  hfdcan1.Init.ExtFiltersNbr = 0;
 8000658:	4b07      	ldr	r3, [pc, #28]	; (8000678 <MX_FDCAN1_Init+0x84>)
 800065a:	2200      	movs	r2, #0
 800065c:	639a      	str	r2, [r3, #56]	; 0x38
  hfdcan1.Init.TxFifoQueueMode = FDCAN_TX_FIFO_OPERATION;
 800065e:	4b06      	ldr	r3, [pc, #24]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000660:	2200      	movs	r2, #0
 8000662:	63da      	str	r2, [r3, #60]	; 0x3c
  if (HAL_FDCAN_Init(&hfdcan1) != HAL_OK)
 8000664:	4804      	ldr	r0, [pc, #16]	; (8000678 <MX_FDCAN1_Init+0x84>)
 8000666:	f002 fd51 	bl	800310c <HAL_FDCAN_Init>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <MX_FDCAN1_Init+0x80>
  {
    Error_Handler();
 8000670:	f000 fce2 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN FDCAN1_Init 2 */

  /* USER CODE END FDCAN1_Init 2 */

}
 8000674:	bf00      	nop
 8000676:	bd80      	pop	{r7, pc}
 8000678:	20000174 	.word	0x20000174
 800067c:	40006400 	.word	0x40006400

08000680 <HAL_FDCAN_MspInit>:

void HAL_FDCAN_MspInit(FDCAN_HandleTypeDef* fdcanHandle)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b09a      	sub	sp, #104	; 0x68
 8000684:	af00      	add	r7, sp, #0
 8000686:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000688:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800068c:	2200      	movs	r2, #0
 800068e:	601a      	str	r2, [r3, #0]
 8000690:	605a      	str	r2, [r3, #4]
 8000692:	609a      	str	r2, [r3, #8]
 8000694:	60da      	str	r2, [r3, #12]
 8000696:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000698:	f107 0310 	add.w	r3, r7, #16
 800069c:	2244      	movs	r2, #68	; 0x44
 800069e:	2100      	movs	r1, #0
 80006a0:	4618      	mov	r0, r3
 80006a2:	f006 fc9f 	bl	8006fe4 <memset>
  if(fdcanHandle->Instance==FDCAN1)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4a24      	ldr	r2, [pc, #144]	; (800073c <HAL_FDCAN_MspInit+0xbc>)
 80006ac:	4293      	cmp	r3, r2
 80006ae:	d140      	bne.n	8000732 <HAL_FDCAN_MspInit+0xb2>
  /* USER CODE BEGIN FDCAN1_MspInit 0 */

  /* USER CODE END FDCAN1_MspInit 0 */
  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_FDCAN;
 80006b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80006b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.FdcanClockSelection = RCC_FDCANCLKSOURCE_PCLK1;
 80006b6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80006ba:	643b      	str	r3, [r7, #64]	; 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006bc:	f107 0310 	add.w	r3, r7, #16
 80006c0:	4618      	mov	r0, r3
 80006c2:	f004 f807 	bl	80046d4 <HAL_RCCEx_PeriphCLKConfig>
 80006c6:	4603      	mov	r3, r0
 80006c8:	2b00      	cmp	r3, #0
 80006ca:	d001      	beq.n	80006d0 <HAL_FDCAN_MspInit+0x50>
    {
      Error_Handler();
 80006cc:	f000 fcb4 	bl	8001038 <Error_Handler>
    }

    /* FDCAN1 clock enable */
    __HAL_RCC_FDCAN_CLK_ENABLE();
 80006d0:	4b1b      	ldr	r3, [pc, #108]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006d4:	4a1a      	ldr	r2, [pc, #104]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006d6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80006da:	6593      	str	r3, [r2, #88]	; 0x58
 80006dc:	4b18      	ldr	r3, [pc, #96]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80006e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80006e4:	60fb      	str	r3, [r7, #12]
 80006e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e8:	4b15      	ldr	r3, [pc, #84]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006ec:	4a14      	ldr	r2, [pc, #80]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006ee:	f043 0302 	orr.w	r3, r3, #2
 80006f2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006f4:	4b12      	ldr	r3, [pc, #72]	; (8000740 <HAL_FDCAN_MspInit+0xc0>)
 80006f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006f8:	f003 0302 	and.w	r3, r3, #2
 80006fc:	60bb      	str	r3, [r7, #8]
 80006fe:	68bb      	ldr	r3, [r7, #8]
    /**FDCAN1 GPIO Configuration
    PB8-BOOT0     ------> FDCAN1_RX
    PB9     ------> FDCAN1_TX
    */
    GPIO_InitStruct.Pin = CAN_RX_Pin|CAN_TX_Pin;
 8000700:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000704:	657b      	str	r3, [r7, #84]	; 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000706:	2302      	movs	r3, #2
 8000708:	65bb      	str	r3, [r7, #88]	; 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800070a:	2300      	movs	r3, #0
 800070c:	65fb      	str	r3, [r7, #92]	; 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800070e:	2300      	movs	r3, #0
 8000710:	663b      	str	r3, [r7, #96]	; 0x60
    GPIO_InitStruct.Alternate = GPIO_AF9_FDCAN1;
 8000712:	2309      	movs	r3, #9
 8000714:	667b      	str	r3, [r7, #100]	; 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000716:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800071a:	4619      	mov	r1, r3
 800071c:	4809      	ldr	r0, [pc, #36]	; (8000744 <HAL_FDCAN_MspInit+0xc4>)
 800071e:	f003 f853 	bl	80037c8 <HAL_GPIO_Init>

    /* FDCAN1 interrupt Init */
    HAL_NVIC_SetPriority(FDCAN1_IT0_IRQn, 3, 0);
 8000722:	2200      	movs	r2, #0
 8000724:	2103      	movs	r1, #3
 8000726:	2015      	movs	r0, #21
 8000728:	f002 fcbb 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(FDCAN1_IT0_IRQn);
 800072c:	2015      	movs	r0, #21
 800072e:	f002 fcd2 	bl	80030d6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN FDCAN1_MspInit 1 */

  /* USER CODE END FDCAN1_MspInit 1 */
  }
}
 8000732:	bf00      	nop
 8000734:	3768      	adds	r7, #104	; 0x68
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	40006400 	.word	0x40006400
 8000740:	40021000 	.word	0x40021000
 8000744:	48000400 	.word	0x48000400

08000748 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b08a      	sub	sp, #40	; 0x28
 800074c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800074e:	f107 0314 	add.w	r3, r7, #20
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
 800075c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800075e:	4b41      	ldr	r3, [pc, #260]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000762:	4a40      	ldr	r2, [pc, #256]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000764:	f043 0320 	orr.w	r3, r3, #32
 8000768:	64d3      	str	r3, [r2, #76]	; 0x4c
 800076a:	4b3e      	ldr	r3, [pc, #248]	; (8000864 <MX_GPIO_Init+0x11c>)
 800076c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800076e:	f003 0320 	and.w	r3, r3, #32
 8000772:	613b      	str	r3, [r7, #16]
 8000774:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000776:	4b3b      	ldr	r3, [pc, #236]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000778:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077a:	4a3a      	ldr	r2, [pc, #232]	; (8000864 <MX_GPIO_Init+0x11c>)
 800077c:	f043 0301 	orr.w	r3, r3, #1
 8000780:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000782:	4b38      	ldr	r3, [pc, #224]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000784:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000786:	f003 0301 	and.w	r3, r3, #1
 800078a:	60fb      	str	r3, [r7, #12]
 800078c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800078e:	4b35      	ldr	r3, [pc, #212]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000790:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000792:	4a34      	ldr	r2, [pc, #208]	; (8000864 <MX_GPIO_Init+0x11c>)
 8000794:	f043 0302 	orr.w	r3, r3, #2
 8000798:	64d3      	str	r3, [r2, #76]	; 0x4c
 800079a:	4b32      	ldr	r3, [pc, #200]	; (8000864 <MX_GPIO_Init+0x11c>)
 800079c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800079e:	f003 0302 	and.w	r3, r3, #2
 80007a2:	60bb      	str	r3, [r7, #8]
 80007a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007a6:	4b2f      	ldr	r3, [pc, #188]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007aa:	4a2e      	ldr	r2, [pc, #184]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007ac:	f043 0304 	orr.w	r3, r3, #4
 80007b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007b2:	4b2c      	ldr	r3, [pc, #176]	; (8000864 <MX_GPIO_Init+0x11c>)
 80007b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007b6:	f003 0304 	and.w	r3, r3, #4
 80007ba:	607b      	str	r3, [r7, #4]
 80007bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LED_Y_Pin|LED_G_Pin, GPIO_PIN_RESET);
 80007be:	2200      	movs	r2, #0
 80007c0:	f44f 41a0 	mov.w	r1, #20480	; 0x5000
 80007c4:	4828      	ldr	r0, [pc, #160]	; (8000868 <MX_GPIO_Init+0x120>)
 80007c6:	f003 f999 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, GPIO_PIN_RESET);
 80007ca:	2200      	movs	r2, #0
 80007cc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80007d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007d4:	f003 f992 	bl	8003afc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_A_Pin;
 80007d8:	2320      	movs	r3, #32
 80007da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80007dc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007e0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007e2:	2300      	movs	r3, #0
 80007e4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_A_GPIO_Port, &GPIO_InitStruct);
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	4619      	mov	r1, r3
 80007ec:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f0:	f002 ffea 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = IF_B_Pin;
 80007f4:	2340      	movs	r3, #64	; 0x40
 80007f6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80007f8:	2300      	movs	r3, #0
 80007fa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(IF_B_GPIO_Port, &GPIO_InitStruct);
 8000800:	f107 0314 	add.w	r3, r7, #20
 8000804:	4619      	mov	r1, r3
 8000806:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800080a:	f002 ffdd 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LED_Y_Pin|LED_G_Pin;
 800080e:	f44f 43a0 	mov.w	r3, #20480	; 0x5000
 8000812:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 0314 	add.w	r3, r7, #20
 8000824:	4619      	mov	r1, r3
 8000826:	4810      	ldr	r0, [pc, #64]	; (8000868 <MX_GPIO_Init+0x120>)
 8000828:	f002 ffce 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = SPI_CS_Pin;
 800082c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000830:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000832:	2301      	movs	r3, #1
 8000834:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800083a:	2302      	movs	r3, #2
 800083c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(SPI_CS_GPIO_Port, &GPIO_InitStruct);
 800083e:	f107 0314 	add.w	r3, r7, #20
 8000842:	4619      	mov	r1, r3
 8000844:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000848:	f002 ffbe 	bl	80037c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 800084c:	2200      	movs	r2, #0
 800084e:	2100      	movs	r1, #0
 8000850:	2017      	movs	r0, #23
 8000852:	f002 fc26 	bl	80030a2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000856:	2017      	movs	r0, #23
 8000858:	f002 fc3d 	bl	80030d6 <HAL_NVIC_EnableIRQ>

}
 800085c:	bf00      	nop
 800085e:	3728      	adds	r7, #40	; 0x28
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40021000 	.word	0x40021000
 8000868:	48000400 	.word	0x48000400

0800086c <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 800086c:	b480      	push	{r7}
 800086e:	b083      	sub	sp, #12
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000874:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000878:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 800087c:	f003 0301 	and.w	r3, r3, #1
 8000880:	2b00      	cmp	r3, #0
 8000882:	d013      	beq.n	80008ac <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8000884:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000888:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 800088c:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8000890:	2b00      	cmp	r3, #0
 8000892:	d00b      	beq.n	80008ac <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8000894:	e000      	b.n	8000898 <ITM_SendChar+0x2c>
    {
      __NOP();
 8000896:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000898:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800089c:	681b      	ldr	r3, [r3, #0]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d0f9      	beq.n	8000896 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 80008a2:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80008a6:	687a      	ldr	r2, [r7, #4]
 80008a8:	b2d2      	uxtb	r2, r2
 80008aa:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 80008ac:	687b      	ldr	r3, [r7, #4]
}
 80008ae:	4618      	mov	r0, r3
 80008b0:	370c      	adds	r7, #12
 80008b2:	46bd      	mov	sp, r7
 80008b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b8:	4770      	bx	lr

080008ba <_write>:
/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

// For SWD debug port 0 printf()
int _write(int file, char *ptr, int len)
{
 80008ba:	b580      	push	{r7, lr}
 80008bc:	b086      	sub	sp, #24
 80008be:	af00      	add	r7, sp, #0
 80008c0:	60f8      	str	r0, [r7, #12]
 80008c2:	60b9      	str	r1, [r7, #8]
 80008c4:	607a      	str	r2, [r7, #4]
	int i=0;
 80008c6:	2300      	movs	r3, #0
 80008c8:	617b      	str	r3, [r7, #20]
	for(i=0; i<len; i++)
 80008ca:	2300      	movs	r3, #0
 80008cc:	617b      	str	r3, [r7, #20]
 80008ce:	e009      	b.n	80008e4 <_write+0x2a>
		ITM_SendChar((*ptr++));
 80008d0:	68bb      	ldr	r3, [r7, #8]
 80008d2:	1c5a      	adds	r2, r3, #1
 80008d4:	60ba      	str	r2, [r7, #8]
 80008d6:	781b      	ldrb	r3, [r3, #0]
 80008d8:	4618      	mov	r0, r3
 80008da:	f7ff ffc7 	bl	800086c <ITM_SendChar>
	for(i=0; i<len; i++)
 80008de:	697b      	ldr	r3, [r7, #20]
 80008e0:	3301      	adds	r3, #1
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697a      	ldr	r2, [r7, #20]
 80008e6:	687b      	ldr	r3, [r7, #4]
 80008e8:	429a      	cmp	r2, r3
 80008ea:	dbf1      	blt.n	80008d0 <_write+0x16>
	return len;
 80008ec:	687b      	ldr	r3, [r7, #4]
}
 80008ee:	4618      	mov	r0, r3
 80008f0:	3718      	adds	r7, #24
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}
	...

080008f8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fe:	f000 fed6 	bl	80016ae <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000902:	f000 f94b 	bl	8000b9c <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000906:	f7ff ff1f 	bl	8000748 <MX_GPIO_Init>
  MX_ADC1_Init();
 800090a:	f7ff fcd9 	bl	80002c0 <MX_ADC1_Init>
  MX_FDCAN1_Init();
 800090e:	f7ff fe71 	bl	80005f4 <MX_FDCAN1_Init>
  MX_TIM2_Init();
 8000912:	f000 fd5d 	bl	80013d0 <MX_TIM2_Init>
  MX_SPI3_Init();
 8000916:	f000 fbaf 	bl	8001078 <MX_SPI3_Init>
  MX_TIM3_Init();
 800091a:	f000 fde5 	bl	80014e8 <MX_TIM3_Init>
  MX_ADC2_Init();
 800091e:	f7ff fd4b 	bl	80003b8 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  printf("\nActuator Firmware Version: %i\n",REV);
 8000922:	2101      	movs	r1, #1
 8000924:	4884      	ldr	r0, [pc, #528]	; (8000b38 <main+0x240>)
 8000926:	f006 fb65 	bl	8006ff4 <iprintf>

  /* Start ADCs */
  printf("Start ADC... ");
 800092a:	4884      	ldr	r0, [pc, #528]	; (8000b3c <main+0x244>)
 800092c:	f006 fb62 	bl	8006ff4 <iprintf>
  HAL_ADCEx_Calibration_Start(&hadc1,LL_ADC_SINGLE_ENDED);
 8000930:	217f      	movs	r1, #127	; 0x7f
 8000932:	4883      	ldr	r0, [pc, #524]	; (8000b40 <main+0x248>)
 8000934:	f002 f9d4 	bl	8002ce0 <HAL_ADCEx_Calibration_Start>
  HAL_ADCEx_Calibration_Start(&hadc2,LL_ADC_SINGLE_ENDED);
 8000938:	217f      	movs	r1, #127	; 0x7f
 800093a:	4882      	ldr	r0, [pc, #520]	; (8000b44 <main+0x24c>)
 800093c:	f002 f9d0 	bl	8002ce0 <HAL_ADCEx_Calibration_Start>

  HAL_ADC_Start(&hadc1);
 8000940:	487f      	ldr	r0, [pc, #508]	; (8000b40 <main+0x248>)
 8000942:	f001 fb27 	bl	8001f94 <HAL_ADC_Start>
  HAL_ADC_Start(&hadc2);
 8000946:	487f      	ldr	r0, [pc, #508]	; (8000b44 <main+0x24c>)
 8000948:	f001 fb24 	bl	8001f94 <HAL_ADC_Start>
//  HAL_ADC_Start_DMA(&hadc1, (uint32_t*)adc.ADC1_DMA_Buff, 2);
//  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)adc.ADC2_DMA_Buff, 2);

  printf("Good\n");
 800094c:	487e      	ldr	r0, [pc, #504]	; (8000b48 <main+0x250>)
 800094e:	f006 fbed 	bl	800712c <puts>

  /* Start Timers */
  printf("Start TIM... ");
 8000952:	487e      	ldr	r0, [pc, #504]	; (8000b4c <main+0x254>)
 8000954:	f006 fb4e 	bl	8006ff4 <iprintf>
  HAL_TIM_Base_Start(&htim2);
 8000958:	487d      	ldr	r0, [pc, #500]	; (8000b50 <main+0x258>)
 800095a:	f005 f81b 	bl	8005994 <HAL_TIM_Base_Start>
  while(__HAL_TIM_GET_COUNTER(&htim2)<858+20){}	// wait for cycles to sync up clocks
 800095e:	bf00      	nop
 8000960:	4b7b      	ldr	r3, [pc, #492]	; (8000b50 <main+0x258>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000966:	f240 326d 	movw	r2, #877	; 0x36d
 800096a:	4293      	cmp	r3, r2
 800096c:	d9f8      	bls.n	8000960 <main+0x68>
  	  	  	  	  	  	  	  	  	  	  	  	// 858 cycles for middle
  	  	  	  	  	  	  	  	  	  	  	    // each cycle delays by around 7.5ns
  HAL_TIM_Base_Start_IT(&htim3);
 800096e:	4879      	ldr	r0, [pc, #484]	; (8000b54 <main+0x25c>)
 8000970:	f005 f872 	bl	8005a58 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, Phase_A_Ch);
 8000974:	210c      	movs	r1, #12
 8000976:	4876      	ldr	r0, [pc, #472]	; (8000b50 <main+0x258>)
 8000978:	f005 f93a 	bl	8005bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_B_Ch);
 800097c:	2108      	movs	r1, #8
 800097e:	4874      	ldr	r0, [pc, #464]	; (8000b50 <main+0x258>)
 8000980:	f005 f936 	bl	8005bf0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, Phase_C_Ch);
 8000984:	2100      	movs	r1, #0
 8000986:	4872      	ldr	r0, [pc, #456]	; (8000b50 <main+0x258>)
 8000988:	f005 f932 	bl	8005bf0 <HAL_TIM_PWM_Start>
  Set_PWM3(0,0,0);							// Set PWM channels to same value
 800098c:	ed9f 1a72 	vldr	s2, [pc, #456]	; 8000b58 <main+0x260>
 8000990:	eddf 0a71 	vldr	s1, [pc, #452]	; 8000b58 <main+0x260>
 8000994:	ed9f 0a70 	vldr	s0, [pc, #448]	; 8000b58 <main+0x260>
 8000998:	f000 faea 	bl	8000f70 <Set_PWM3>
  printf("Good\n");
 800099c:	486a      	ldr	r0, [pc, #424]	; (8000b48 <main+0x250>)
 800099e:	f006 fbc5 	bl	800712c <puts>

  /* Start Encoder */
  printf("Start ENC... ");
 80009a2:	486e      	ldr	r0, [pc, #440]	; (8000b5c <main+0x264>)
 80009a4:	f006 fb26 	bl	8006ff4 <iprintf>
  HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 80009a8:	2201      	movs	r2, #1
 80009aa:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80009ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009b2:	f003 f8a3 	bl	8003afc <HAL_GPIO_WritePin>
  // 10		- 0 access to current values/1 access all in buffer
  // 9-4	- 6 bit address
  // 3-0	- 4 bit number of data words	if 0000, no safety word

  // 		command1, 	command2,   data1,	    data2,      mask1,      mask2
  printf("\n");
 80009b6:	200a      	movs	r0, #10
 80009b8:	f006 fb34 	bl	8007024 <putchar>
//  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000001, 0b11000000, 0b00010111);		// write MOD_1	06 register		A/B
  ENC_Write(0b11010000, 0b01100001, 0b01000000, 0b00000010, 0b11000000, 0b00010111);		// write MOD_1	06 register		step/dir
 80009bc:	2317      	movs	r3, #23
 80009be:	9301      	str	r3, [sp, #4]
 80009c0:	23c0      	movs	r3, #192	; 0xc0
 80009c2:	9300      	str	r3, [sp, #0]
 80009c4:	2302      	movs	r3, #2
 80009c6:	2240      	movs	r2, #64	; 0x40
 80009c8:	2161      	movs	r1, #97	; 0x61
 80009ca:	20d0      	movs	r0, #208	; 0xd0
 80009cc:	f000 f9ce 	bl	8000d6c <ENC_Write>
  ENC_Write(0b11010000, 0b10000001, 0b00001000, 0b00000001, 0b01111111, 0b11111111);		// write MOD_2	08 register
 80009d0:	23ff      	movs	r3, #255	; 0xff
 80009d2:	9301      	str	r3, [sp, #4]
 80009d4:	237f      	movs	r3, #127	; 0x7f
 80009d6:	9300      	str	r3, [sp, #0]
 80009d8:	2301      	movs	r3, #1
 80009da:	2208      	movs	r2, #8
 80009dc:	2181      	movs	r1, #129	; 0x81
 80009de:	20d0      	movs	r0, #208	; 0xd0
 80009e0:	f000 f9c4 	bl	8000d6c <ENC_Write>
  ENC_Write(0b11010000, 0b10010001, 0b00000000, 0b00000000, 0b11111111, 0b11111111);		// write MOD_3  09 register
 80009e4:	23ff      	movs	r3, #255	; 0xff
 80009e6:	9301      	str	r3, [sp, #4]
 80009e8:	23ff      	movs	r3, #255	; 0xff
 80009ea:	9300      	str	r3, [sp, #0]
 80009ec:	2300      	movs	r3, #0
 80009ee:	2200      	movs	r2, #0
 80009f0:	2191      	movs	r1, #145	; 0x91
 80009f2:	20d0      	movs	r0, #208	; 0xd0
 80009f4:	f000 f9ba 	bl	8000d6c <ENC_Write>
  ENC_Write(0b11010000, 0b11010001, 0b00000000, 0b00001001, 0b11111111, 0b11111111);		// write IFAB	0D register	(13)
 80009f8:	23ff      	movs	r3, #255	; 0xff
 80009fa:	9301      	str	r3, [sp, #4]
 80009fc:	23ff      	movs	r3, #255	; 0xff
 80009fe:	9300      	str	r3, [sp, #0]
 8000a00:	2309      	movs	r3, #9
 8000a02:	2200      	movs	r2, #0
 8000a04:	21d1      	movs	r1, #209	; 0xd1
 8000a06:	20d0      	movs	r0, #208	; 0xd0
 8000a08:	f000 f9b0 	bl	8000d6c <ENC_Write>
  ENC_Write(0b11010000, 0b11100001, 0b00000000, 0b10000000, 0b00000001, 0b11111011);		// write MOD_4	0E register (14)
 8000a0c:	23fb      	movs	r3, #251	; 0xfb
 8000a0e:	9301      	str	r3, [sp, #4]
 8000a10:	2301      	movs	r3, #1
 8000a12:	9300      	str	r3, [sp, #0]
 8000a14:	2380      	movs	r3, #128	; 0x80
 8000a16:	2200      	movs	r2, #0
 8000a18:	21e1      	movs	r1, #225	; 0xe1
 8000a1a:	20d0      	movs	r0, #208	; 0xd0
 8000a1c:	f000 f9a6 	bl	8000d6c <ENC_Write>

  ENC_Read_Ang(&enc.SPI_theta);
 8000a20:	484f      	ldr	r0, [pc, #316]	; (8000b60 <main+0x268>)
 8000a22:	f000 f94f 	bl	8000cc4 <ENC_Read_Ang>
  enc.IIF_Counter = (int)(enc.SPI_theta /360.0f * 4095.0f);	// Zero encoder
 8000a26:	4b4e      	ldr	r3, [pc, #312]	; (8000b60 <main+0x268>)
 8000a28:	ed93 7a00 	vldr	s14, [r3]
 8000a2c:	eddf 6a4d 	vldr	s13, [pc, #308]	; 8000b64 <main+0x26c>
 8000a30:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a34:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8000b68 <main+0x270>
 8000a38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000a3c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000a40:	ee17 3a90 	vmov	r3, s15
 8000a44:	b21a      	sxth	r2, r3
 8000a46:	4b46      	ldr	r3, [pc, #280]	; (8000b60 <main+0x268>)
 8000a48:	809a      	strh	r2, [r3, #4]

  /* Start CAN */
  printf("Start CAN... ");
 8000a4a:	4848      	ldr	r0, [pc, #288]	; (8000b6c <main+0x274>)
 8000a4c:	f006 fad2 	bl	8006ff4 <iprintf>
  // can code
  printf("Good\n");
 8000a50:	483d      	ldr	r0, [pc, #244]	; (8000b48 <main+0x250>)
 8000a52:	f006 fb6b 	bl	800712c <puts>

  /* Setup FOC structure*/
  foc.Pole_Pairs = 21.0f;
 8000a56:	4b46      	ldr	r3, [pc, #280]	; (8000b70 <main+0x278>)
 8000a58:	2215      	movs	r2, #21
 8000a5a:	601a      	str	r2, [r3, #0]
  foc.dt = (float)(2.0f/(170.0f*1000000.0f/(htim2.Init.Period+1)/(htim2.Init.RepetitionCounter+1)));
 8000a5c:	4b3c      	ldr	r3, [pc, #240]	; (8000b50 <main+0x258>)
 8000a5e:	68db      	ldr	r3, [r3, #12]
 8000a60:	3301      	adds	r3, #1
 8000a62:	ee07 3a90 	vmov	s15, r3
 8000a66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a6a:	ed9f 7a42 	vldr	s14, [pc, #264]	; 8000b74 <main+0x27c>
 8000a6e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8000a72:	4b37      	ldr	r3, [pc, #220]	; (8000b50 <main+0x258>)
 8000a74:	695b      	ldr	r3, [r3, #20]
 8000a76:	3301      	adds	r3, #1
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000a80:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8000a84:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 8000a88:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000a8c:	4b38      	ldr	r3, [pc, #224]	; (8000b70 <main+0x278>)
 8000a8e:	edc3 7a01 	vstr	s15, [r3, #4]
  foc.PWM_Reg_Max = htim2.Init.Period;
 8000a92:	4b2f      	ldr	r3, [pc, #188]	; (8000b50 <main+0x258>)
 8000a94:	68db      	ldr	r3, [r3, #12]
 8000a96:	b29a      	uxth	r2, r3
 8000a98:	4b35      	ldr	r3, [pc, #212]	; (8000b70 <main+0x278>)
 8000a9a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c

  /* Setup Filter structure */
  fil.i_k[0]    = 0.421f;	fil.i_k[1]    = 0.158f;
 8000a9e:	4b36      	ldr	r3, [pc, #216]	; (8000b78 <main+0x280>)
 8000aa0:	4a36      	ldr	r2, [pc, #216]	; (8000b7c <main+0x284>)
 8000aa2:	601a      	str	r2, [r3, #0]
 8000aa4:	4b34      	ldr	r3, [pc, #208]	; (8000b78 <main+0x280>)
 8000aa6:	4a36      	ldr	r2, [pc, #216]	; (8000b80 <main+0x288>)
 8000aa8:	605a      	str	r2, [r3, #4]
  fil.Misc_k[0] = 0.421f;	fil.Misc_k[1] = 0.158f;
 8000aaa:	4b33      	ldr	r3, [pc, #204]	; (8000b78 <main+0x280>)
 8000aac:	4a33      	ldr	r2, [pc, #204]	; (8000b7c <main+0x284>)
 8000aae:	609a      	str	r2, [r3, #8]
 8000ab0:	4b31      	ldr	r3, [pc, #196]	; (8000b78 <main+0x280>)
 8000ab2:	4a33      	ldr	r2, [pc, #204]	; (8000b80 <main+0x288>)
 8000ab4:	60da      	str	r2, [r3, #12]

  printf("\nSetup complete!\n\n");
 8000ab6:	4833      	ldr	r0, [pc, #204]	; (8000b84 <main+0x28c>)
 8000ab8:	f006 fb38 	bl	800712c <puts>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 8000abc:	2201      	movs	r2, #1
 8000abe:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000ac2:	4831      	ldr	r0, [pc, #196]	; (8000b88 <main+0x290>)
 8000ac4:	f003 f81a 	bl	8003afc <HAL_GPIO_WritePin>

	  HAL_ADC_Start(&hadc1);
 8000ac8:	481d      	ldr	r0, [pc, #116]	; (8000b40 <main+0x248>)
 8000aca:	f001 fa63 	bl	8001f94 <HAL_ADC_Start>
	  HAL_ADC_Start(&hadc2);
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <main+0x24c>)
 8000ad0:	f001 fa60 	bl	8001f94 <HAL_ADC_Start>

	  HAL_ADC_PollForConversion(&hadc1, 1);
 8000ad4:	2101      	movs	r1, #1
 8000ad6:	481a      	ldr	r0, [pc, #104]	; (8000b40 <main+0x248>)
 8000ad8:	f001 fb18 	bl	800210c <HAL_ADC_PollForConversion>

	  adc.V_Raw = HAL_ADC_GetValue(&hadc1);
 8000adc:	4818      	ldr	r0, [pc, #96]	; (8000b40 <main+0x248>)
 8000ade:	f001 fbed 	bl	80022bc <HAL_ADC_GetValue>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	b29a      	uxth	r2, r3
 8000ae6:	4b29      	ldr	r3, [pc, #164]	; (8000b8c <main+0x294>)
 8000ae8:	829a      	strh	r2, [r3, #20]
	  adc.T_Raw = HAL_ADC_GetValue(&hadc2);
 8000aea:	4816      	ldr	r0, [pc, #88]	; (8000b44 <main+0x24c>)
 8000aec:	f001 fbe6 	bl	80022bc <HAL_ADC_GetValue>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b29a      	uxth	r2, r3
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <main+0x294>)
 8000af6:	82da      	strh	r2, [r3, #22]

	  ADC_Norm_Misc(adc.V_Raw, adc.T_Raw, &adc.V_Bus, &adc.Temp_C);
 8000af8:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <main+0x294>)
 8000afa:	8a98      	ldrh	r0, [r3, #20]
 8000afc:	4b23      	ldr	r3, [pc, #140]	; (8000b8c <main+0x294>)
 8000afe:	8ad9      	ldrh	r1, [r3, #22]
 8000b00:	4b23      	ldr	r3, [pc, #140]	; (8000b90 <main+0x298>)
 8000b02:	4a24      	ldr	r2, [pc, #144]	; (8000b94 <main+0x29c>)
 8000b04:	f000 f894 	bl	8000c30 <ADC_Norm_Misc>

	  printf("ADC1: %i\tADC2: %i\n", adc.V_Raw, adc.T_Raw);
 8000b08:	4b20      	ldr	r3, [pc, #128]	; (8000b8c <main+0x294>)
 8000b0a:	8a9b      	ldrh	r3, [r3, #20]
 8000b0c:	4619      	mov	r1, r3
 8000b0e:	4b1f      	ldr	r3, [pc, #124]	; (8000b8c <main+0x294>)
 8000b10:	8adb      	ldrh	r3, [r3, #22]
 8000b12:	461a      	mov	r2, r3
 8000b14:	4820      	ldr	r0, [pc, #128]	; (8000b98 <main+0x2a0>)
 8000b16:	f006 fa6d 	bl	8006ff4 <iprintf>

	  HAL_Delay(200);
 8000b1a:	20c8      	movs	r0, #200	; 0xc8
 8000b1c:	f000 fe38 	bl	8001790 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000b26:	4818      	ldr	r0, [pc, #96]	; (8000b88 <main+0x290>)
 8000b28:	f002 ffe8 	bl	8003afc <HAL_GPIO_WritePin>
	  HAL_Delay(800);
 8000b2c:	f44f 7048 	mov.w	r0, #800	; 0x320
 8000b30:	f000 fe2e 	bl	8001790 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_G_GPIO_Port, LED_G_Pin, 1);
 8000b34:	e7c2      	b.n	8000abc <main+0x1c4>
 8000b36:	bf00      	nop
 8000b38:	08008060 	.word	0x08008060
 8000b3c:	08008080 	.word	0x08008080
 8000b40:	20000108 	.word	0x20000108
 8000b44:	2000009c 	.word	0x2000009c
 8000b48:	08008090 	.word	0x08008090
 8000b4c:	08008098 	.word	0x08008098
 8000b50:	200003bc 	.word	0x200003bc
 8000b54:	20000370 	.word	0x20000370
 8000b58:	00000000 	.word	0x00000000
 8000b5c:	080080a8 	.word	0x080080a8
 8000b60:	200001d8 	.word	0x200001d8
 8000b64:	43b40000 	.word	0x43b40000
 8000b68:	457ff000 	.word	0x457ff000
 8000b6c:	080080b8 	.word	0x080080b8
 8000b70:	200001f0 	.word	0x200001f0
 8000b74:	4d221fe8 	.word	0x4d221fe8
 8000b78:	200002ec 	.word	0x200002ec
 8000b7c:	3ed78d50 	.word	0x3ed78d50
 8000b80:	3e21cac1 	.word	0x3e21cac1
 8000b84:	080080c8 	.word	0x080080c8
 8000b88:	48000400 	.word	0x48000400
 8000b8c:	2000024c 	.word	0x2000024c
 8000b90:	20000258 	.word	0x20000258
 8000b94:	20000254 	.word	0x20000254
 8000b98:	080080dc 	.word	0x080080dc

08000b9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	b094      	sub	sp, #80	; 0x50
 8000ba0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ba2:	f107 0318 	add.w	r3, r7, #24
 8000ba6:	2238      	movs	r2, #56	; 0x38
 8000ba8:	2100      	movs	r1, #0
 8000baa:	4618      	mov	r0, r3
 8000bac:	f006 fa1a 	bl	8006fe4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bb0:	1d3b      	adds	r3, r7, #4
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	601a      	str	r2, [r3, #0]
 8000bb6:	605a      	str	r2, [r3, #4]
 8000bb8:	609a      	str	r2, [r3, #8]
 8000bba:	60da      	str	r2, [r3, #12]
 8000bbc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000bbe:	2000      	movs	r0, #0
 8000bc0:	f002 ffd8 	bl	8003b74 <HAL_PWREx_ControlVoltageScaling>
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000bc4:	2301      	movs	r3, #1
 8000bc6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000bc8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bcc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bce:	2302      	movs	r3, #2
 8000bd0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bd2:	2303      	movs	r3, #3
 8000bd4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV3;
 8000bd6:	2303      	movs	r3, #3
 8000bd8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bda:	2355      	movs	r3, #85	; 0x55
 8000bdc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bde:	2302      	movs	r3, #2
 8000be0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000be2:	2302      	movs	r3, #2
 8000be4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000be6:	2302      	movs	r3, #2
 8000be8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bea:	f107 0318 	add.w	r3, r7, #24
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f003 f874 	bl	8003cdc <HAL_RCC_OscConfig>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	2b00      	cmp	r3, #0
 8000bf8:	d001      	beq.n	8000bfe <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bfa:	f000 fa1d 	bl	8001038 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bfe:	230f      	movs	r3, #15
 8000c00:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c02:	2303      	movs	r3, #3
 8000c04:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c06:	2300      	movs	r3, #0
 8000c08:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000c12:	1d3b      	adds	r3, r7, #4
 8000c14:	2104      	movs	r1, #4
 8000c16:	4618      	mov	r0, r3
 8000c18:	f003 fb78 	bl	800430c <HAL_RCC_ClockConfig>
 8000c1c:	4603      	mov	r3, r0
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d001      	beq.n	8000c26 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c22:	f000 fa09 	bl	8001038 <Error_Handler>
  }
}
 8000c26:	bf00      	nop
 8000c28:	3750      	adds	r7, #80	; 0x50
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
	...

08000c30 <ADC_Norm_Misc>:

	fil.PVDD_Pre_Fil = *PVDD_Fil;
	fil.Temp_Pre_Fil = *Temp_Fil;
}
void  ADC_Norm_Misc  (uint16_t PVDD_Fil, uint16_t Temp_Fil, float*PVDD, float*Temp)
{
 8000c30:	b480      	push	{r7}
 8000c32:	b085      	sub	sp, #20
 8000c34:	af00      	add	r7, sp, #0
 8000c36:	60ba      	str	r2, [r7, #8]
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	4603      	mov	r3, r0
 8000c3c:	81fb      	strh	r3, [r7, #14]
 8000c3e:	460b      	mov	r3, r1
 8000c40:	81bb      	strh	r3, [r7, #12]
	*PVDD = (float)PVDD_Fil*3.3f/4095.0f / R_Bot * (R_Bot + R_Top);
 8000c42:	89fb      	ldrh	r3, [r7, #14]
 8000c44:	ee07 3a90 	vmov	s15, r3
 8000c48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c4c:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8000cb0 <ADC_Norm_Misc+0x80>
 8000c50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c54:	eddf 6a17 	vldr	s13, [pc, #92]	; 8000cb4 <ADC_Norm_Misc+0x84>
 8000c58:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c5c:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
 8000c60:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c64:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8000cb8 <ADC_Norm_Misc+0x88>
 8000c68:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000c6c:	68bb      	ldr	r3, [r7, #8]
 8000c6e:	edc3 7a00 	vstr	s15, [r3]
	*Temp = (((float)Temp_Fil*3.3f/4095.0f)-T_Offset)/T_Slope;
 8000c72:	89bb      	ldrh	r3, [r7, #12]
 8000c74:	ee07 3a90 	vmov	s15, r3
 8000c78:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000c7c:	ed9f 7a0c 	vldr	s14, [pc, #48]	; 8000cb0 <ADC_Norm_Misc+0x80>
 8000c80:	ee27 7a87 	vmul.f32	s14, s15, s14
 8000c84:	eddf 6a0b 	vldr	s13, [pc, #44]	; 8000cb4 <ADC_Norm_Misc+0x84>
 8000c88:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c8c:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8000cbc <ADC_Norm_Misc+0x8c>
 8000c90:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8000c94:	eddf 6a0a 	vldr	s13, [pc, #40]	; 8000cc0 <ADC_Norm_Misc+0x90>
 8000c98:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	edc3 7a00 	vstr	s15, [r3]
}
 8000ca2:	bf00      	nop
 8000ca4:	3714      	adds	r7, #20
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cac:	4770      	bx	lr
 8000cae:	bf00      	nop
 8000cb0:	40533333 	.word	0x40533333
 8000cb4:	457ff000 	.word	0x457ff000
 8000cb8:	43848000 	.word	0x43848000
 8000cbc:	3ed91687 	.word	0x3ed91687
 8000cc0:	3bcccccd 	.word	0x3bcccccd

08000cc4 <ENC_Read_Ang>:
// Encoder
void  ENC_Read_Ang(float*Angle)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b086      	sub	sp, #24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	6078      	str	r0, [r7, #4]
	uint8_t ENC_ASK_POS   [2] = {0b10000000,0b00100001};	// Command for asking position
 8000ccc:	f44f 5306 	mov.w	r3, #8576	; 0x2180
 8000cd0:	823b      	strh	r3, [r7, #16]
	uint8_t SPI_BUFF[2] = {0,0};
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	81bb      	strh	r3, [r7, #12]

	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000cdc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ce0:	f002 ff0c 	bl	8003afc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_ASK_POS, 2, 10);	// Ask for data
 8000ce4:	f107 0110 	add.w	r1, r7, #16
 8000ce8:	230a      	movs	r3, #10
 8000cea:	2202      	movs	r2, #2
 8000cec:	481d      	ldr	r0, [pc, #116]	; (8000d64 <ENC_Read_Ang+0xa0>)
 8000cee:	f003 ff8c 	bl	8004c0a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF    , 2, 10);	// Receive 4 bytes of data
 8000cf2:	f107 010c 	add.w	r1, r7, #12
 8000cf6:	230a      	movs	r3, #10
 8000cf8:	2202      	movs	r2, #2
 8000cfa:	481a      	ldr	r0, [pc, #104]	; (8000d64 <ENC_Read_Ang+0xa0>)
 8000cfc:	f004 f8f3 	bl	8004ee6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000d00:	2201      	movs	r2, #1
 8000d02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000d06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000d0a:	f002 fef7 	bl	8003afc <HAL_GPIO_WritePin>

	int16_t SPI_ANG = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
 8000d0e:	7b3b      	ldrb	r3, [r7, #12]
 8000d10:	021b      	lsls	r3, r3, #8
 8000d12:	b21a      	sxth	r2, r3
 8000d14:	7b7b      	ldrb	r3, [r7, #13]
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	4313      	orrs	r3, r2
 8000d1a:	82fb      	strh	r3, [r7, #22]
	int16_t ANG_VAL = (0b0011111111111111 & SPI_ANG);					// keep last 14 bits
 8000d1c:	8afb      	ldrh	r3, [r7, #22]
 8000d1e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8000d22:	82bb      	strh	r3, [r7, #20]
	ANG_VAL -= (((SPI_ANG)&(1UL<<(14)))>>(14))*(-16384);
 8000d24:	8aba      	ldrh	r2, [r7, #20]
 8000d26:	8afb      	ldrh	r3, [r7, #22]
 8000d28:	0b9b      	lsrs	r3, r3, #14
 8000d2a:	b29b      	uxth	r3, r3
 8000d2c:	f003 0301 	and.w	r3, r3, #1
 8000d30:	b29b      	uxth	r3, r3
 8000d32:	4619      	mov	r1, r3
 8000d34:	0049      	lsls	r1, r1, #1
 8000d36:	440b      	add	r3, r1
 8000d38:	039b      	lsls	r3, r3, #14
 8000d3a:	b29b      	uxth	r3, r3
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	82bb      	strh	r3, [r7, #20]
	*Angle = 360.0f/32768.0f * ANG_VAL;
 8000d42:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000d46:	ee07 3a90 	vmov	s15, r3
 8000d4a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d4e:	ed9f 7a06 	vldr	s14, [pc, #24]	; 8000d68 <ENC_Read_Ang+0xa4>
 8000d52:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	edc3 7a00 	vstr	s15, [r3]
}
 8000d5c:	bf00      	nop
 8000d5e:	3718      	adds	r7, #24
 8000d60:	46bd      	mov	sp, r7
 8000d62:	bd80      	pop	{r7, pc}
 8000d64:	2000030c 	.word	0x2000030c
 8000d68:	3c340000 	.word	0x3c340000

08000d6c <ENC_Write>:
	int16_t SPI_VEL = (SPI_BUFF[0] << 8 | SPI_BUFF[1]);			// make 16 bit
	int16_t VEL_VAL = (0b0011111111111111 & SPI_VEL);			// keep last 14 bits
	*Velocity = 360.0f/32768.0f * VEL_VAL / 2.0f / 0.0000427f;
}
void  ENC_Write(uint8_t com1, uint8_t com2, uint8_t data1, uint8_t data2, uint8_t mask1, uint8_t mask2)
{
 8000d6c:	b590      	push	{r4, r7, lr}
 8000d6e:	b087      	sub	sp, #28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	4604      	mov	r4, r0
 8000d74:	4608      	mov	r0, r1
 8000d76:	4611      	mov	r1, r2
 8000d78:	461a      	mov	r2, r3
 8000d7a:	4623      	mov	r3, r4
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	4603      	mov	r3, r0
 8000d80:	71bb      	strb	r3, [r7, #6]
 8000d82:	460b      	mov	r3, r1
 8000d84:	717b      	strb	r3, [r7, #5]
 8000d86:	4613      	mov	r3, r2
 8000d88:	713b      	strb	r3, [r7, #4]
	uint8_t ADDR = (com2>>4)&0b00001111;
 8000d8a:	79bb      	ldrb	r3, [r7, #6]
 8000d8c:	091b      	lsrs	r3, r3, #4
 8000d8e:	75fb      	strb	r3, [r7, #23]
	printf("\tRegister 0x%02X... ",ADDR);
 8000d90:	7dfb      	ldrb	r3, [r7, #23]
 8000d92:	4619      	mov	r1, r3
 8000d94:	4855      	ldr	r0, [pc, #340]	; (8000eec <ENC_Write+0x180>)
 8000d96:	f006 f92d 	bl	8006ff4 <iprintf>

	// read
	uint8_t ENC_R_COM [2] = {com1|0b1000000,								// make into read command
 8000d9a:	79fb      	ldrb	r3, [r7, #7]
 8000d9c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000da0:	b2db      	uxtb	r3, r3
 8000da2:	753b      	strb	r3, [r7, #20]
 8000da4:	79bb      	ldrb	r3, [r7, #6]
 8000da6:	757b      	strb	r3, [r7, #21]
							 com2};
	uint8_t SPI_BUFF[2] = {0,0};
 8000da8:	2300      	movs	r3, #0
 8000daa:	823b      	strh	r3, [r7, #16]

//	printf("\n");
//	printf("\t\tTX: %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_R_COM[0]), BYTE_TO_BINARY(ENC_R_COM[1]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000dac:	2200      	movs	r2, #0
 8000dae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000db2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000db6:	f002 fea1 	bl	8003afc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8000dba:	f107 0114 	add.w	r1, r7, #20
 8000dbe:	230a      	movs	r3, #10
 8000dc0:	2202      	movs	r2, #2
 8000dc2:	484b      	ldr	r0, [pc, #300]	; (8000ef0 <ENC_Write+0x184>)
 8000dc4:	f003 ff21 	bl	8004c0a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8000dc8:	f107 0110 	add.w	r1, r7, #16
 8000dcc:	230a      	movs	r3, #10
 8000dce:	2202      	movs	r2, #2
 8000dd0:	4847      	ldr	r0, [pc, #284]	; (8000ef0 <ENC_Write+0x184>)
 8000dd2:	f004 f888 	bl	8004ee6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000dd6:	2201      	movs	r2, #1
 8000dd8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ddc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000de0:	f002 fe8c 	bl	8003afc <HAL_GPIO_WritePin>
//	printf("\t\tRead  : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	// write
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8000de4:	79fb      	ldrb	r3, [r7, #7]
 8000de6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8000dea:	b2db      	uxtb	r3, r3
 8000dec:	733b      	strb	r3, [r7, #12]
 8000dee:	79bb      	ldrb	r3, [r7, #6]
 8000df0:	737b      	strb	r3, [r7, #13]
						     com2,											// same
							 (SPI_BUFF[0] & (~mask1)) | (data1 & mask1),	// keep read when mask=0, keep data when mask=1
 8000df2:	7c3b      	ldrb	r3, [r7, #16]
 8000df4:	b25a      	sxtb	r2, r3
 8000df6:	f997 3028 	ldrsb.w	r3, [r7, #40]	; 0x28
 8000dfa:	43db      	mvns	r3, r3
 8000dfc:	b25b      	sxtb	r3, r3
 8000dfe:	4013      	ands	r3, r2
 8000e00:	b25a      	sxtb	r2, r3
 8000e02:	7979      	ldrb	r1, [r7, #5]
 8000e04:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000e08:	400b      	ands	r3, r1
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	b25b      	sxtb	r3, r3
 8000e0e:	4313      	orrs	r3, r2
 8000e10:	b25b      	sxtb	r3, r3
 8000e12:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8000e14:	73bb      	strb	r3, [r7, #14]
							 (SPI_BUFF[1] & (~mask2)) | (data2 & mask2)};	// keep read when mask=0, keep data when mask=1
 8000e16:	7c7b      	ldrb	r3, [r7, #17]
 8000e18:	b25a      	sxtb	r2, r3
 8000e1a:	f997 302c 	ldrsb.w	r3, [r7, #44]	; 0x2c
 8000e1e:	43db      	mvns	r3, r3
 8000e20:	b25b      	sxtb	r3, r3
 8000e22:	4013      	ands	r3, r2
 8000e24:	b25a      	sxtb	r2, r3
 8000e26:	7939      	ldrb	r1, [r7, #4]
 8000e28:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000e2c:	400b      	ands	r3, r1
 8000e2e:	b2db      	uxtb	r3, r3
 8000e30:	b25b      	sxtb	r3, r3
 8000e32:	4313      	orrs	r3, r2
 8000e34:	b25b      	sxtb	r3, r3
 8000e36:	b2db      	uxtb	r3, r3
	uint8_t ENC_W_EOM [4] = {com1&0b01111111,								// make into write command
 8000e38:	73fb      	strb	r3, [r7, #15]

//	printf("\t\tTX    : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(ENC_W_EOM[0]), BYTE_TO_BINARY(ENC_W_EOM[1]), BYTE_TO_BINARY(ENC_W_EOM[2]), BYTE_TO_BINARY(ENC_W_EOM[3]));
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e44:	f002 fe5a 	bl	8003afc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_W_EOM, 4, 10);		// Write to register
 8000e48:	f107 010c 	add.w	r1, r7, #12
 8000e4c:	230a      	movs	r3, #10
 8000e4e:	2204      	movs	r2, #4
 8000e50:	4827      	ldr	r0, [pc, #156]	; (8000ef0 <ENC_Write+0x184>)
 8000e52:	f003 feda 	bl	8004c0a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8000e56:	f107 0110 	add.w	r1, r7, #16
 8000e5a:	230a      	movs	r3, #10
 8000e5c:	2202      	movs	r2, #2
 8000e5e:	4824      	ldr	r0, [pc, #144]	; (8000ef0 <ENC_Write+0x184>)
 8000e60:	f004 f841 	bl	8004ee6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000e64:	2201      	movs	r2, #1
 8000e66:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e6a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e6e:	f002 fe45 	bl	8003afc <HAL_GPIO_WritePin>
//		if(ERR_4==0){printf("\t\t\tErr 4: Invalid angle value!\n");}
//		Error_Handler();
//	}

	// check if written
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 0);
 8000e72:	2200      	movs	r2, #0
 8000e74:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e7c:	f002 fe3e 	bl	8003afc <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi3, (uint8_t*)&ENC_R_COM, 2, 10);		// Read current register
 8000e80:	f107 0114 	add.w	r1, r7, #20
 8000e84:	230a      	movs	r3, #10
 8000e86:	2202      	movs	r2, #2
 8000e88:	4819      	ldr	r0, [pc, #100]	; (8000ef0 <ENC_Write+0x184>)
 8000e8a:	f003 febe 	bl	8004c0a <HAL_SPI_Transmit>
	HAL_SPI_Receive (&hspi3, (uint8_t*)SPI_BUFF, 2, 10);
 8000e8e:	f107 0110 	add.w	r1, r7, #16
 8000e92:	230a      	movs	r3, #10
 8000e94:	2202      	movs	r2, #2
 8000e96:	4816      	ldr	r0, [pc, #88]	; (8000ef0 <ENC_Write+0x184>)
 8000e98:	f004 f825 	bl	8004ee6 <HAL_SPI_Receive>
	HAL_GPIO_WritePin(SPI_CS_GPIO_Port, SPI_CS_Pin, 1);
 8000e9c:	2201      	movs	r2, #1
 8000e9e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000ea2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ea6:	f002 fe29 	bl	8003afc <HAL_GPIO_WritePin>
//	printf("\t\tNew   : %c%c%c%c %c%c%c%c   %c%c%c%c %c%c%c%c\n", BYTE_TO_BINARY(SPI_BUFF[0]), BYTE_TO_BINARY(SPI_BUFF[1]));

	if(((data1&mask1) != (SPI_BUFF[0]&mask1)) || (data2&mask2) != (SPI_BUFF[1]&mask2))
 8000eaa:	7c3a      	ldrb	r2, [r7, #16]
 8000eac:	797b      	ldrb	r3, [r7, #5]
 8000eae:	4053      	eors	r3, r2
 8000eb0:	b2da      	uxtb	r2, r3
 8000eb2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8000eb6:	4013      	ands	r3, r2
 8000eb8:	b2db      	uxtb	r3, r3
 8000eba:	2b00      	cmp	r3, #0
 8000ebc:	d109      	bne.n	8000ed2 <ENC_Write+0x166>
 8000ebe:	7c7a      	ldrb	r2, [r7, #17]
 8000ec0:	793b      	ldrb	r3, [r7, #4]
 8000ec2:	4053      	eors	r3, r2
 8000ec4:	b2da      	uxtb	r2, r3
 8000ec6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8000eca:	4013      	ands	r3, r2
 8000ecc:	b2db      	uxtb	r3, r3
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	d004      	beq.n	8000edc <ENC_Write+0x170>
	{
		printf("Error Writing\n");
 8000ed2:	4808      	ldr	r0, [pc, #32]	; (8000ef4 <ENC_Write+0x188>)
 8000ed4:	f006 f92a 	bl	800712c <puts>
		Error_Handler();
 8000ed8:	f000 f8ae 	bl	8001038 <Error_Handler>
	}

	printf("Good\n");
 8000edc:	4806      	ldr	r0, [pc, #24]	; (8000ef8 <ENC_Write+0x18c>)
 8000ede:	f006 f925 	bl	800712c <puts>
}
 8000ee2:	bf00      	nop
 8000ee4:	371c      	adds	r7, #28
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd90      	pop	{r4, r7, pc}
 8000eea:	bf00      	nop
 8000eec:	080080f0 	.word	0x080080f0
 8000ef0:	2000030c 	.word	0x2000030c
 8000ef4:	08008108 	.word	0x08008108
 8000ef8:	08008090 	.word	0x08008090

08000efc <ENC_Interrupt>:
void  ENC_Interrupt(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b082      	sub	sp, #8
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
 8000f04:	460b      	mov	r3, r1
 8000f06:	807b      	strh	r3, [r7, #2]
	if(HAL_GPIO_ReadPin(GPIOx, GPIO_Pin))
 8000f08:	887b      	ldrh	r3, [r7, #2]
 8000f0a:	4619      	mov	r1, r3
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f002 fddd 	bl	8003acc <HAL_GPIO_ReadPin>
 8000f12:	4603      	mov	r3, r0
 8000f14:	2b00      	cmp	r3, #0
 8000f16:	d009      	beq.n	8000f2c <ENC_Interrupt+0x30>
		enc.IIF_Counter++;		// If high, increment
 8000f18:	4b14      	ldr	r3, [pc, #80]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f1a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f1e:	b29b      	uxth	r3, r3
 8000f20:	3301      	adds	r3, #1
 8000f22:	b29b      	uxth	r3, r3
 8000f24:	b21a      	sxth	r2, r3
 8000f26:	4b11      	ldr	r3, [pc, #68]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f28:	809a      	strh	r2, [r3, #4]
 8000f2a:	e008      	b.n	8000f3e <ENC_Interrupt+0x42>
	else
		enc.IIF_Counter--;		// If low , decrement
 8000f2c:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f2e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f32:	b29b      	uxth	r3, r3
 8000f34:	3b01      	subs	r3, #1
 8000f36:	b29b      	uxth	r3, r3
 8000f38:	b21a      	sxth	r2, r3
 8000f3a:	4b0c      	ldr	r3, [pc, #48]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f3c:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter>=4096)	// If overflow
 8000f3e:	4b0b      	ldr	r3, [pc, #44]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f40:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f44:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f48:	db02      	blt.n	8000f50 <ENC_Interrupt+0x54>
		enc.IIF_Counter = 0;		// Set to 0
 8000f4a:	4b08      	ldr	r3, [pc, #32]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	809a      	strh	r2, [r3, #4]

	if(enc.IIF_Counter<0)		// If underflow
 8000f50:	4b06      	ldr	r3, [pc, #24]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	da03      	bge.n	8000f62 <ENC_Interrupt+0x66>
		enc.IIF_Counter = 4095;		// Set to 4095
 8000f5a:	4b04      	ldr	r3, [pc, #16]	; (8000f6c <ENC_Interrupt+0x70>)
 8000f5c:	f640 72ff 	movw	r2, #4095	; 0xfff
 8000f60:	809a      	strh	r2, [r3, #4]
}
 8000f62:	bf00      	nop
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	200001d8 	.word	0x200001d8

08000f70 <Set_PWM3>:
// FOC stuff
void  Set_PWM3(float DC_1, float DC_2, float DC_3)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0a03 	vstr	s0, [r7, #12]
 8000f7a:	edc7 0a02 	vstr	s1, [r7, #8]
 8000f7e:	ed87 1a01 	vstr	s2, [r7, #4]
	__HAL_TIM_SET_COMPARE(&htim2,Phase_A_Ch,foc.PWM_Reg_Max*DC_1);	// Set PWM channels
 8000f82:	4b1e      	ldr	r3, [pc, #120]	; (8000ffc <Set_PWM3+0x8c>)
 8000f84:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000f88:	ee07 3a90 	vmov	s15, r3
 8000f8c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000f90:	edd7 7a03 	vldr	s15, [r7, #12]
 8000f94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <Set_PWM3+0x90>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fa0:	ee17 2a90 	vmov	r2, s15
 8000fa4:	641a      	str	r2, [r3, #64]	; 0x40
	__HAL_TIM_SET_COMPARE(&htim2,Phase_B_Ch,foc.PWM_Reg_Max*DC_2);
 8000fa6:	4b15      	ldr	r3, [pc, #84]	; (8000ffc <Set_PWM3+0x8c>)
 8000fa8:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000fac:	ee07 3a90 	vmov	s15, r3
 8000fb0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fb4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <Set_PWM3+0x90>)
 8000fbe:	681b      	ldr	r3, [r3, #0]
 8000fc0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fc4:	ee17 2a90 	vmov	r2, s15
 8000fc8:	63da      	str	r2, [r3, #60]	; 0x3c
	__HAL_TIM_SET_COMPARE(&htim2,Phase_C_Ch,foc.PWM_Reg_Max*DC_3);
 8000fca:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <Set_PWM3+0x8c>)
 8000fcc:	f8b3 304c 	ldrh.w	r3, [r3, #76]	; 0x4c
 8000fd0:	ee07 3a90 	vmov	s15, r3
 8000fd4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000fd8:	edd7 7a01 	vldr	s15, [r7, #4]
 8000fdc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fe0:	4b07      	ldr	r3, [pc, #28]	; (8001000 <Set_PWM3+0x90>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000fe8:	ee17 2a90 	vmov	r2, s15
 8000fec:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000fee:	bf00      	nop
 8000ff0:	3714      	adds	r7, #20
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
 8000ffa:	bf00      	nop
 8000ffc:	200001f0 	.word	0x200001f0
 8001000:	200003bc 	.word	0x200003bc

08001004 <FOC_Interrupt>:
{
	return sin_lookup[(int)floor(fmodf(theta+270.0f,360.0f))];
}
// Timer Interrupts
void  FOC_Interrupt(void)
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	/* LED on */
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 8001008:	2201      	movs	r2, #1
 800100a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800100e:	4805      	ldr	r0, [pc, #20]	; (8001024 <FOC_Interrupt+0x20>)
 8001010:	f002 fd74 	bl	8003afc <HAL_GPIO_WritePin>
	/* Set PWM */
//	Set_PWM3(1.0f-foc.PWM_A, 1.0f-foc.PWM_B, 1.0f-foc.PWM_C);
//	Set_PWM3(1.0f-0.066f, 1.0f-0.500f, 1.0f-0.933f);

	/* LED off */
	HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 8001014:	2200      	movs	r2, #0
 8001016:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800101a:	4802      	ldr	r0, [pc, #8]	; (8001024 <FOC_Interrupt+0x20>)
 800101c:	f002 fd6e 	bl	8003afc <HAL_GPIO_WritePin>
}
 8001020:	bf00      	nop
 8001022:	bd80      	pop	{r7, pc}
 8001024:	48000400 	.word	0x48000400

08001028 <CAN_Interrupt>:
void  CAN_Interrupt(void)
{
 8001028:	b480      	push	{r7}
 800102a:	af00      	add	r7, sp, #0
//	{
//		// unpack and update target values
//	}
//
//	can.timeout = 0;	// reset timeout timer
}
 800102c:	bf00      	nop
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr
	...

08001038 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800103c:	b672      	cpsid	i
}
 800103e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
	  printf("Hardware Error\n");
 8001040:	480b      	ldr	r0, [pc, #44]	; (8001070 <Error_Handler+0x38>)
 8001042:	f006 f873 	bl	800712c <puts>
	  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 1);
 8001046:	2201      	movs	r2, #1
 8001048:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <Error_Handler+0x3c>)
 800104e:	f002 fd55 	bl	8003afc <HAL_GPIO_WritePin>
	  HAL_Delay(200);
 8001052:	20c8      	movs	r0, #200	; 0xc8
 8001054:	f000 fb9c 	bl	8001790 <HAL_Delay>
	  HAL_GPIO_WritePin(LED_Y_GPIO_Port, LED_Y_Pin, 0);
 8001058:	2200      	movs	r2, #0
 800105a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <Error_Handler+0x3c>)
 8001060:	f002 fd4c 	bl	8003afc <HAL_GPIO_WritePin>
	  HAL_Delay(800);
 8001064:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001068:	f000 fb92 	bl	8001790 <HAL_Delay>
	  printf("Hardware Error\n");
 800106c:	e7e8      	b.n	8001040 <Error_Handler+0x8>
 800106e:	bf00      	nop
 8001070:	08008118 	.word	0x08008118
 8001074:	48000400 	.word	0x48000400

08001078 <MX_SPI3_Init>:

SPI_HandleTypeDef hspi3;

/* SPI3 init function */
void MX_SPI3_Init(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 800107c:	4b1b      	ldr	r3, [pc, #108]	; (80010ec <MX_SPI3_Init+0x74>)
 800107e:	4a1c      	ldr	r2, [pc, #112]	; (80010f0 <MX_SPI3_Init+0x78>)
 8001080:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001082:	4b1a      	ldr	r3, [pc, #104]	; (80010ec <MX_SPI3_Init+0x74>)
 8001084:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001088:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_1LINE;
 800108a:	4b18      	ldr	r3, [pc, #96]	; (80010ec <MX_SPI3_Init+0x74>)
 800108c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001090:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_SPI3_Init+0x74>)
 8001094:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001098:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_SPI3_Init+0x74>)
 800109c:	2200      	movs	r2, #0
 800109e:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_SPI3_Init+0x74>)
 80010a2:	2201      	movs	r2, #1
 80010a4:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_SPI3_Init+0x74>)
 80010a8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010ac:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 80010ae:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_SPI3_Init+0x74>)
 80010b0:	2220      	movs	r2, #32
 80010b2:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010b4:	4b0d      	ldr	r3, [pc, #52]	; (80010ec <MX_SPI3_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_SPI3_Init+0x74>)
 80010bc:	2200      	movs	r2, #0
 80010be:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_SPI3_Init+0x74>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_SPI3_Init+0x74>)
 80010c8:	2207      	movs	r2, #7
 80010ca:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_SPI3_Init+0x74>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_SPI3_Init+0x74>)
 80010d4:	2200      	movs	r2, #0
 80010d6:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_SPI3_Init+0x74>)
 80010da:	f003 fceb 	bl	8004ab4 <HAL_SPI_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_SPI3_Init+0x70>
  {
    Error_Handler();
 80010e4:	f7ff ffa8 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	2000030c 	.word	0x2000030c
 80010f0:	40003c00 	.word	0x40003c00

080010f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b08a      	sub	sp, #40	; 0x28
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010fc:	f107 0314 	add.w	r3, r7, #20
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI3)
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a25      	ldr	r2, [pc, #148]	; (80011a8 <HAL_SPI_MspInit+0xb4>)
 8001112:	4293      	cmp	r3, r2
 8001114:	d144      	bne.n	80011a0 <HAL_SPI_MspInit+0xac>
  {
  /* USER CODE BEGIN SPI3_MspInit 0 */

  /* USER CODE END SPI3_MspInit 0 */
    /* SPI3 clock enable */
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001116:	4b25      	ldr	r3, [pc, #148]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001118:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800111a:	4a24      	ldr	r2, [pc, #144]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 800111c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001120:	6593      	str	r3, [r2, #88]	; 0x58
 8001122:	4b22      	ldr	r3, [pc, #136]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001124:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001126:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800112a:	613b      	str	r3, [r7, #16]
 800112c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800112e:	4b1f      	ldr	r3, [pc, #124]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001130:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001132:	4a1e      	ldr	r2, [pc, #120]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001134:	f043 0304 	orr.w	r3, r3, #4
 8001138:	64d3      	str	r3, [r2, #76]	; 0x4c
 800113a:	4b1c      	ldr	r3, [pc, #112]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 800113c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800113e:	f003 0304 	and.w	r3, r3, #4
 8001142:	60fb      	str	r3, [r7, #12]
 8001144:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001146:	4b19      	ldr	r3, [pc, #100]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001148:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800114a:	4a18      	ldr	r2, [pc, #96]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 800114c:	f043 0302 	orr.w	r3, r3, #2
 8001150:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001152:	4b16      	ldr	r3, [pc, #88]	; (80011ac <HAL_SPI_MspInit+0xb8>)
 8001154:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001156:	f003 0302 	and.w	r3, r3, #2
 800115a:	60bb      	str	r3, [r7, #8]
 800115c:	68bb      	ldr	r3, [r7, #8]
    /**SPI3 GPIO Configuration
    PC10     ------> SPI3_SCK
    PB5     ------> SPI3_MOSI
    */
    GPIO_InitStruct.Pin = SPI_SCK_Pin;
 800115e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001162:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001164:	2302      	movs	r3, #2
 8001166:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116c:	2300      	movs	r3, #0
 800116e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001170:	2306      	movs	r3, #6
 8001172:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_SCK_GPIO_Port, &GPIO_InitStruct);
 8001174:	f107 0314 	add.w	r3, r7, #20
 8001178:	4619      	mov	r1, r3
 800117a:	480d      	ldr	r0, [pc, #52]	; (80011b0 <HAL_SPI_MspInit+0xbc>)
 800117c:	f002 fb24 	bl	80037c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = SPI_MOSI_Pin;
 8001180:	2320      	movs	r3, #32
 8001182:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001184:	2302      	movs	r3, #2
 8001186:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001188:	2300      	movs	r3, #0
 800118a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	2300      	movs	r3, #0
 800118e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001190:	2306      	movs	r3, #6
 8001192:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(SPI_MOSI_GPIO_Port, &GPIO_InitStruct);
 8001194:	f107 0314 	add.w	r3, r7, #20
 8001198:	4619      	mov	r1, r3
 800119a:	4806      	ldr	r0, [pc, #24]	; (80011b4 <HAL_SPI_MspInit+0xc0>)
 800119c:	f002 fb14 	bl	80037c8 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }
}
 80011a0:	bf00      	nop
 80011a2:	3728      	adds	r7, #40	; 0x28
 80011a4:	46bd      	mov	sp, r7
 80011a6:	bd80      	pop	{r7, pc}
 80011a8:	40003c00 	.word	0x40003c00
 80011ac:	40021000 	.word	0x40021000
 80011b0:	48000800 	.word	0x48000800
 80011b4:	48000400 	.word	0x48000400

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 0301 	orr.w	r3, r3, #1
 80011c8:	6613      	str	r3, [r2, #96]	; 0x60
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011ce:	f003 0301 	and.w	r3, r3, #1
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e0:	6593      	str	r3, [r2, #88]	; 0x58
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011e6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80011ee:	f002 fd65 	bl	8003cbc <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011f2:	bf00      	nop
 80011f4:	3708      	adds	r7, #8
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	40021000 	.word	0x40021000

08001200 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001204:	e7fe      	b.n	8001204 <NMI_Handler+0x4>

08001206 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001206:	b480      	push	{r7}
 8001208:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800120a:	e7fe      	b.n	800120a <HardFault_Handler+0x4>

0800120c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001210:	e7fe      	b.n	8001210 <MemManage_Handler+0x4>

08001212 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <BusFault_Handler+0x4>

08001218 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <UsageFault_Handler+0x4>

0800121e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001222:	bf00      	nop
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122c:	b480      	push	{r7}
 800122e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001230:	bf00      	nop
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800123a:	b480      	push	{r7}
 800123c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	46bd      	mov	sp, r7
 8001242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001246:	4770      	bx	lr

08001248 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800124c:	f000 fa82 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001250:	bf00      	nop
 8001252:	bd80      	pop	{r7, pc}

08001254 <FDCAN1_IT0_IRQHandler>:

/**
  * @brief This function handles FDCAN1 interrupt 0.
  */
void FDCAN1_IT0_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 0 */

  /* USER CODE END FDCAN1_IT0_IRQn 0 */
  HAL_FDCAN_IRQHandler(&hfdcan1);
 8001258:	4803      	ldr	r0, [pc, #12]	; (8001268 <FDCAN1_IT0_IRQHandler+0x14>)
 800125a:	f002 f8b1 	bl	80033c0 <HAL_FDCAN_IRQHandler>
  /* USER CODE BEGIN FDCAN1_IT0_IRQn 1 */
  CAN_Interrupt();
 800125e:	f7ff fee3 	bl	8001028 <CAN_Interrupt>
  /* USER CODE END FDCAN1_IT0_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000174 	.word	0x20000174

0800126c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(IF_A_Pin);
 8001270:	2020      	movs	r0, #32
 8001272:	f002 fc5b 	bl	8003b2c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */
  ENC_Interrupt(IF_B_GPIO_Port, IF_B_Pin);
 8001276:	2140      	movs	r1, #64	; 0x40
 8001278:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800127c:	f7ff fe3e 	bl	8000efc <ENC_Interrupt>
  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}

08001284 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001288:	4803      	ldr	r0, [pc, #12]	; (8001298 <TIM3_IRQHandler+0x14>)
 800128a:	f004 fdb1 	bl	8005df0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */
  FOC_Interrupt();
 800128e:	f7ff feb9 	bl	8001004 <FOC_Interrupt>
  /* USER CODE END TIM3_IRQn 1 */
}
 8001292:	bf00      	nop
 8001294:	bd80      	pop	{r7, pc}
 8001296:	bf00      	nop
 8001298:	20000370 	.word	0x20000370

0800129c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b086      	sub	sp, #24
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	60f8      	str	r0, [r7, #12]
 80012a4:	60b9      	str	r1, [r7, #8]
 80012a6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012a8:	2300      	movs	r3, #0
 80012aa:	617b      	str	r3, [r7, #20]
 80012ac:	e00a      	b.n	80012c4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80012ae:	f3af 8000 	nop.w
 80012b2:	4601      	mov	r1, r0
 80012b4:	68bb      	ldr	r3, [r7, #8]
 80012b6:	1c5a      	adds	r2, r3, #1
 80012b8:	60ba      	str	r2, [r7, #8]
 80012ba:	b2ca      	uxtb	r2, r1
 80012bc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	3301      	adds	r3, #1
 80012c2:	617b      	str	r3, [r7, #20]
 80012c4:	697a      	ldr	r2, [r7, #20]
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	429a      	cmp	r2, r3
 80012ca:	dbf0      	blt.n	80012ae <_read+0x12>
	}

return len;
 80012cc:	687b      	ldr	r3, [r7, #4]
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3718      	adds	r7, #24
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <_close>:
	}
	return len;
}

int _close(int file)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
	return -1;
 80012de:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012e2:	4618      	mov	r0, r3
 80012e4:	370c      	adds	r7, #12
 80012e6:	46bd      	mov	sp, r7
 80012e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ec:	4770      	bx	lr

080012ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012ee:	b480      	push	{r7}
 80012f0:	b083      	sub	sp, #12
 80012f2:	af00      	add	r7, sp, #0
 80012f4:	6078      	str	r0, [r7, #4]
 80012f6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80012f8:	683b      	ldr	r3, [r7, #0]
 80012fa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80012fe:	605a      	str	r2, [r3, #4]
	return 0;
 8001300:	2300      	movs	r3, #0
}
 8001302:	4618      	mov	r0, r3
 8001304:	370c      	adds	r7, #12
 8001306:	46bd      	mov	sp, r7
 8001308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130c:	4770      	bx	lr

0800130e <_isatty>:

int _isatty(int file)
{
 800130e:	b480      	push	{r7}
 8001310:	b083      	sub	sp, #12
 8001312:	af00      	add	r7, sp, #0
 8001314:	6078      	str	r0, [r7, #4]
	return 1;
 8001316:	2301      	movs	r3, #1
}
 8001318:	4618      	mov	r0, r3
 800131a:	370c      	adds	r7, #12
 800131c:	46bd      	mov	sp, r7
 800131e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001322:	4770      	bx	lr

08001324 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001324:	b480      	push	{r7}
 8001326:	b085      	sub	sp, #20
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
	return 0;
 8001330:	2300      	movs	r3, #0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133c:	4770      	bx	lr
	...

08001340 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001348:	4a14      	ldr	r2, [pc, #80]	; (800139c <_sbrk+0x5c>)
 800134a:	4b15      	ldr	r3, [pc, #84]	; (80013a0 <_sbrk+0x60>)
 800134c:	1ad3      	subs	r3, r2, r3
 800134e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001350:	697b      	ldr	r3, [r7, #20]
 8001352:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001354:	4b13      	ldr	r3, [pc, #76]	; (80013a4 <_sbrk+0x64>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	2b00      	cmp	r3, #0
 800135a:	d102      	bne.n	8001362 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800135c:	4b11      	ldr	r3, [pc, #68]	; (80013a4 <_sbrk+0x64>)
 800135e:	4a12      	ldr	r2, [pc, #72]	; (80013a8 <_sbrk+0x68>)
 8001360:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <_sbrk+0x64>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	4413      	add	r3, r2
 800136a:	693a      	ldr	r2, [r7, #16]
 800136c:	429a      	cmp	r2, r3
 800136e:	d207      	bcs.n	8001380 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001370:	f005 fe0e 	bl	8006f90 <__errno>
 8001374:	4603      	mov	r3, r0
 8001376:	220c      	movs	r2, #12
 8001378:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800137a:	f04f 33ff 	mov.w	r3, #4294967295
 800137e:	e009      	b.n	8001394 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001380:	4b08      	ldr	r3, [pc, #32]	; (80013a4 <_sbrk+0x64>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001386:	4b07      	ldr	r3, [pc, #28]	; (80013a4 <_sbrk+0x64>)
 8001388:	681a      	ldr	r2, [r3, #0]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	4413      	add	r3, r2
 800138e:	4a05      	ldr	r2, [pc, #20]	; (80013a4 <_sbrk+0x64>)
 8001390:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001392:	68fb      	ldr	r3, [r7, #12]
}
 8001394:	4618      	mov	r0, r3
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	20008000 	.word	0x20008000
 80013a0:	00000400 	.word	0x00000400
 80013a4:	20000090 	.word	0x20000090
 80013a8:	20000420 	.word	0x20000420

080013ac <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80013b0:	4b06      	ldr	r3, [pc, #24]	; (80013cc <SystemInit+0x20>)
 80013b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013b6:	4a05      	ldr	r2, [pc, #20]	; (80013cc <SystemInit+0x20>)
 80013b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013c0:	bf00      	nop
 80013c2:	46bd      	mov	sp, r7
 80013c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c8:	4770      	bx	lr
 80013ca:	bf00      	nop
 80013cc:	e000ed00 	.word	0xe000ed00

080013d0 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b08e      	sub	sp, #56	; 0x38
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013da:	2200      	movs	r2, #0
 80013dc:	601a      	str	r2, [r3, #0]
 80013de:	605a      	str	r2, [r3, #4]
 80013e0:	609a      	str	r2, [r3, #8]
 80013e2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013e4:	f107 031c 	add.w	r3, r7, #28
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013f0:	463b      	mov	r3, r7
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
 80013fc:	611a      	str	r2, [r3, #16]
 80013fe:	615a      	str	r2, [r3, #20]
 8001400:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001402:	4b38      	ldr	r3, [pc, #224]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001404:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001408:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <MX_TIM2_Init+0x114>)
 800140c:	2200      	movs	r2, #0
 800140e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001410:	4b34      	ldr	r3, [pc, #208]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001412:	2220      	movs	r2, #32
 8001414:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2124;
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001418:	f640 024c 	movw	r2, #2124	; 0x84c
 800141c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800141e:	4b31      	ldr	r3, [pc, #196]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001420:	2200      	movs	r2, #0
 8001422:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001424:	4b2f      	ldr	r3, [pc, #188]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001426:	2280      	movs	r2, #128	; 0x80
 8001428:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800142a:	482e      	ldr	r0, [pc, #184]	; (80014e4 <MX_TIM2_Init+0x114>)
 800142c:	f004 fa5a 	bl	80058e4 <HAL_TIM_Base_Init>
 8001430:	4603      	mov	r3, r0
 8001432:	2b00      	cmp	r3, #0
 8001434:	d001      	beq.n	800143a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001436:	f7ff fdff 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800143a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800143e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001440:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001444:	4619      	mov	r1, r3
 8001446:	4827      	ldr	r0, [pc, #156]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001448:	f004 ff66 	bl	8006318 <HAL_TIM_ConfigClockSource>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001452:	f7ff fdf1 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001456:	4823      	ldr	r0, [pc, #140]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001458:	f004 fb68 	bl	8005b2c <HAL_TIM_PWM_Init>
 800145c:	4603      	mov	r3, r0
 800145e:	2b00      	cmp	r3, #0
 8001460:	d001      	beq.n	8001466 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001462:	f7ff fde9 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_ENABLE;
 8001466:	2310      	movs	r3, #16
 8001468:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800146a:	2380      	movs	r3, #128	; 0x80
 800146c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800146e:	f107 031c 	add.w	r3, r7, #28
 8001472:	4619      	mov	r1, r3
 8001474:	481b      	ldr	r0, [pc, #108]	; (80014e4 <MX_TIM2_Init+0x114>)
 8001476:	f005 fcc3 	bl	8006e00 <HAL_TIMEx_MasterConfigSynchronization>
 800147a:	4603      	mov	r3, r0
 800147c:	2b00      	cmp	r3, #0
 800147e:	d001      	beq.n	8001484 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001480:	f7ff fdda 	bl	8001038 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001484:	2370      	movs	r3, #112	; 0x70
 8001486:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001488:	2300      	movs	r3, #0
 800148a:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800148c:	2300      	movs	r3, #0
 800148e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001490:	2300      	movs	r3, #0
 8001492:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001494:	463b      	mov	r3, r7
 8001496:	2200      	movs	r2, #0
 8001498:	4619      	mov	r1, r3
 800149a:	4812      	ldr	r0, [pc, #72]	; (80014e4 <MX_TIM2_Init+0x114>)
 800149c:	f004 fe28 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80014a6:	f7ff fdc7 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80014aa:	463b      	mov	r3, r7
 80014ac:	2208      	movs	r2, #8
 80014ae:	4619      	mov	r1, r3
 80014b0:	480c      	ldr	r0, [pc, #48]	; (80014e4 <MX_TIM2_Init+0x114>)
 80014b2:	f004 fe1d 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 80014b6:	4603      	mov	r3, r0
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d001      	beq.n	80014c0 <MX_TIM2_Init+0xf0>
  {
    Error_Handler();
 80014bc:	f7ff fdbc 	bl	8001038 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80014c0:	463b      	mov	r3, r7
 80014c2:	220c      	movs	r2, #12
 80014c4:	4619      	mov	r1, r3
 80014c6:	4807      	ldr	r0, [pc, #28]	; (80014e4 <MX_TIM2_Init+0x114>)
 80014c8:	f004 fe12 	bl	80060f0 <HAL_TIM_PWM_ConfigChannel>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM2_Init+0x106>
  {
    Error_Handler();
 80014d2:	f7ff fdb1 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80014d6:	4803      	ldr	r0, [pc, #12]	; (80014e4 <MX_TIM2_Init+0x114>)
 80014d8:	f000 f88c 	bl	80015f4 <HAL_TIM_MspPostInit>

}
 80014dc:	bf00      	nop
 80014de:	3738      	adds	r7, #56	; 0x38
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	200003bc 	.word	0x200003bc

080014e8 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80014e8:	b580      	push	{r7, lr}
 80014ea:	b088      	sub	sp, #32
 80014ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ee:	f107 0310 	add.w	r3, r7, #16
 80014f2:	2200      	movs	r2, #0
 80014f4:	601a      	str	r2, [r3, #0]
 80014f6:	605a      	str	r2, [r3, #4]
 80014f8:	609a      	str	r2, [r3, #8]
 80014fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014fc:	1d3b      	adds	r3, r7, #4
 80014fe:	2200      	movs	r2, #0
 8001500:	601a      	str	r2, [r3, #0]
 8001502:	605a      	str	r2, [r3, #4]
 8001504:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001506:	4b1d      	ldr	r3, [pc, #116]	; (800157c <MX_TIM3_Init+0x94>)
 8001508:	4a1d      	ldr	r2, [pc, #116]	; (8001580 <MX_TIM3_Init+0x98>)
 800150a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800150c:	4b1b      	ldr	r3, [pc, #108]	; (800157c <MX_TIM3_Init+0x94>)
 800150e:	2200      	movs	r2, #0
 8001510:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001512:	4b1a      	ldr	r3, [pc, #104]	; (800157c <MX_TIM3_Init+0x94>)
 8001514:	2200      	movs	r2, #0
 8001516:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 16991;
 8001518:	4b18      	ldr	r3, [pc, #96]	; (800157c <MX_TIM3_Init+0x94>)
 800151a:	f244 225f 	movw	r2, #16991	; 0x425f
 800151e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001520:	4b16      	ldr	r3, [pc, #88]	; (800157c <MX_TIM3_Init+0x94>)
 8001522:	2200      	movs	r2, #0
 8001524:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001526:	4b15      	ldr	r3, [pc, #84]	; (800157c <MX_TIM3_Init+0x94>)
 8001528:	2200      	movs	r2, #0
 800152a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800152c:	4813      	ldr	r0, [pc, #76]	; (800157c <MX_TIM3_Init+0x94>)
 800152e:	f004 f9d9 	bl	80058e4 <HAL_TIM_Base_Init>
 8001532:	4603      	mov	r3, r0
 8001534:	2b00      	cmp	r3, #0
 8001536:	d001      	beq.n	800153c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8001538:	f7ff fd7e 	bl	8001038 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800153c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001540:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001542:	f107 0310 	add.w	r3, r7, #16
 8001546:	4619      	mov	r1, r3
 8001548:	480c      	ldr	r0, [pc, #48]	; (800157c <MX_TIM3_Init+0x94>)
 800154a:	f004 fee5 	bl	8006318 <HAL_TIM_ConfigClockSource>
 800154e:	4603      	mov	r3, r0
 8001550:	2b00      	cmp	r3, #0
 8001552:	d001      	beq.n	8001558 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001554:	f7ff fd70 	bl	8001038 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001558:	2300      	movs	r3, #0
 800155a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155c:	2300      	movs	r3, #0
 800155e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	4619      	mov	r1, r3
 8001564:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_TIM3_Init+0x94>)
 8001566:	f005 fc4b 	bl	8006e00 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001570:	f7ff fd62 	bl	8001038 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001574:	bf00      	nop
 8001576:	3720      	adds	r7, #32
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	20000370 	.word	0x20000370
 8001580:	40000400 	.word	0x40000400

08001584 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b084      	sub	sp, #16
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001594:	d10c      	bne.n	80015b0 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001596:	4b15      	ldr	r3, [pc, #84]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a14      	ldr	r2, [pc, #80]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 800159c:	f043 0301 	orr.w	r3, r3, #1
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b12      	ldr	r3, [pc, #72]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 0301 	and.w	r3, r3, #1
 80015aa:	60fb      	str	r3, [r7, #12]
 80015ac:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 80015ae:	e018      	b.n	80015e2 <HAL_TIM_Base_MspInit+0x5e>
  else if(tim_baseHandle->Instance==TIM3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a0e      	ldr	r2, [pc, #56]	; (80015f0 <HAL_TIM_Base_MspInit+0x6c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d113      	bne.n	80015e2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80015ba:	4b0c      	ldr	r3, [pc, #48]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 80015bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015be:	4a0b      	ldr	r2, [pc, #44]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6593      	str	r3, [r2, #88]	; 0x58
 80015c6:	4b09      	ldr	r3, [pc, #36]	; (80015ec <HAL_TIM_Base_MspInit+0x68>)
 80015c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80015d2:	2200      	movs	r2, #0
 80015d4:	2100      	movs	r1, #0
 80015d6:	201d      	movs	r0, #29
 80015d8:	f001 fd63 	bl	80030a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80015dc:	201d      	movs	r0, #29
 80015de:	f001 fd7a 	bl	80030d6 <HAL_NVIC_EnableIRQ>
}
 80015e2:	bf00      	nop
 80015e4:	3710      	adds	r7, #16
 80015e6:	46bd      	mov	sp, r7
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	40021000 	.word	0x40021000
 80015f0:	40000400 	.word	0x40000400

080015f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b088      	sub	sp, #32
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 030c 	add.w	r3, r7, #12
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001614:	d11c      	bne.n	8001650 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	4b10      	ldr	r3, [pc, #64]	; (8001658 <HAL_TIM_MspPostInit+0x64>)
 8001618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800161a:	4a0f      	ldr	r2, [pc, #60]	; (8001658 <HAL_TIM_MspPostInit+0x64>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001622:	4b0d      	ldr	r3, [pc, #52]	; (8001658 <HAL_TIM_MspPostInit+0x64>)
 8001624:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	60bb      	str	r3, [r7, #8]
 800162c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = PWM_C_Pin|PWM_B_Pin|PWM_A_Pin;
 800162e:	230d      	movs	r3, #13
 8001630:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001632:	2302      	movs	r3, #2
 8001634:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163a:	2300      	movs	r3, #0
 800163c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800163e:	2301      	movs	r3, #1
 8001640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001642:	f107 030c 	add.w	r3, r7, #12
 8001646:	4619      	mov	r1, r3
 8001648:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800164c:	f002 f8bc 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40021000 	.word	0x40021000

0800165c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800165e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001660:	480d      	ldr	r0, [pc, #52]	; (8001698 <LoopForever+0x6>)
  ldr r1, =_edata
 8001662:	490e      	ldr	r1, [pc, #56]	; (800169c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001664:	4a0e      	ldr	r2, [pc, #56]	; (80016a0 <LoopForever+0xe>)
  movs r3, #0
 8001666:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001668:	e002      	b.n	8001670 <LoopCopyDataInit>

0800166a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800166a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800166c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800166e:	3304      	adds	r3, #4

08001670 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001670:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001672:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001674:	d3f9      	bcc.n	800166a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001676:	4a0b      	ldr	r2, [pc, #44]	; (80016a4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001678:	4c0b      	ldr	r4, [pc, #44]	; (80016a8 <LoopForever+0x16>)
  movs r3, #0
 800167a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800167c:	e001      	b.n	8001682 <LoopFillZerobss>

0800167e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800167e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001680:	3204      	adds	r2, #4

08001682 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001682:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001684:	d3fb      	bcc.n	800167e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001686:	f7ff fe91 	bl	80013ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800168a:	f005 fc87 	bl	8006f9c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800168e:	f7ff f933 	bl	80008f8 <main>

08001692 <LoopForever>:

LoopForever:
    b LoopForever
 8001692:	e7fe      	b.n	8001692 <LoopForever>
  ldr   r0, =_estack
 8001694:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001698:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800169c:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 80016a0:	080081d8 	.word	0x080081d8
  ldr r2, =_sbss
 80016a4:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 80016a8:	2000041c 	.word	0x2000041c

080016ac <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016ac:	e7fe      	b.n	80016ac <ADC1_2_IRQHandler>

080016ae <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016b4:	2300      	movs	r3, #0
 80016b6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016b8:	2003      	movs	r0, #3
 80016ba:	f001 fce7 	bl	800308c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016be:	2000      	movs	r0, #0
 80016c0:	f000 f80e 	bl	80016e0 <HAL_InitTick>
 80016c4:	4603      	mov	r3, r0
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d002      	beq.n	80016d0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	71fb      	strb	r3, [r7, #7]
 80016ce:	e001      	b.n	80016d4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016d0:	f7ff fd72 	bl	80011b8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016d4:	79fb      	ldrb	r3, [r7, #7]

}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3708      	adds	r7, #8
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
	...

080016e0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b084      	sub	sp, #16
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80016e8:	2300      	movs	r3, #0
 80016ea:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80016ec:	4b16      	ldr	r3, [pc, #88]	; (8001748 <HAL_InitTick+0x68>)
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d022      	beq.n	800173a <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80016f4:	4b15      	ldr	r3, [pc, #84]	; (800174c <HAL_InitTick+0x6c>)
 80016f6:	681a      	ldr	r2, [r3, #0]
 80016f8:	4b13      	ldr	r3, [pc, #76]	; (8001748 <HAL_InitTick+0x68>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8001700:	fbb1 f3f3 	udiv	r3, r1, r3
 8001704:	fbb2 f3f3 	udiv	r3, r2, r3
 8001708:	4618      	mov	r0, r3
 800170a:	f001 fcf2 	bl	80030f2 <HAL_SYSTICK_Config>
 800170e:	4603      	mov	r3, r0
 8001710:	2b00      	cmp	r3, #0
 8001712:	d10f      	bne.n	8001734 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2b0f      	cmp	r3, #15
 8001718:	d809      	bhi.n	800172e <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800171a:	2200      	movs	r2, #0
 800171c:	6879      	ldr	r1, [r7, #4]
 800171e:	f04f 30ff 	mov.w	r0, #4294967295
 8001722:	f001 fcbe 	bl	80030a2 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001726:	4a0a      	ldr	r2, [pc, #40]	; (8001750 <HAL_InitTick+0x70>)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	e007      	b.n	800173e <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800172e:	2301      	movs	r3, #1
 8001730:	73fb      	strb	r3, [r7, #15]
 8001732:	e004      	b.n	800173e <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001734:	2301      	movs	r3, #1
 8001736:	73fb      	strb	r3, [r7, #15]
 8001738:	e001      	b.n	800173e <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800173e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000008 	.word	0x20000008
 800174c:	20000000 	.word	0x20000000
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b05      	ldr	r3, [pc, #20]	; (8001770 <HAL_IncTick+0x1c>)
 800175a:	681a      	ldr	r2, [r3, #0]
 800175c:	4b05      	ldr	r3, [pc, #20]	; (8001774 <HAL_IncTick+0x20>)
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	4413      	add	r3, r2
 8001762:	4a03      	ldr	r2, [pc, #12]	; (8001770 <HAL_IncTick+0x1c>)
 8001764:	6013      	str	r3, [r2, #0]
}
 8001766:	bf00      	nop
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr
 8001770:	20000408 	.word	0x20000408
 8001774:	20000008 	.word	0x20000008

08001778 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001778:	b480      	push	{r7}
 800177a:	af00      	add	r7, sp, #0
  return uwTick;
 800177c:	4b03      	ldr	r3, [pc, #12]	; (800178c <HAL_GetTick+0x14>)
 800177e:	681b      	ldr	r3, [r3, #0]
}
 8001780:	4618      	mov	r0, r3
 8001782:	46bd      	mov	sp, r7
 8001784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001788:	4770      	bx	lr
 800178a:	bf00      	nop
 800178c:	20000408 	.word	0x20000408

08001790 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b084      	sub	sp, #16
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001798:	f7ff ffee 	bl	8001778 <HAL_GetTick>
 800179c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017a8:	d004      	beq.n	80017b4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80017aa:	4b09      	ldr	r3, [pc, #36]	; (80017d0 <HAL_Delay+0x40>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	68fa      	ldr	r2, [r7, #12]
 80017b0:	4413      	add	r3, r2
 80017b2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017b4:	bf00      	nop
 80017b6:	f7ff ffdf 	bl	8001778 <HAL_GetTick>
 80017ba:	4602      	mov	r2, r0
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	1ad3      	subs	r3, r2, r3
 80017c0:	68fa      	ldr	r2, [r7, #12]
 80017c2:	429a      	cmp	r2, r3
 80017c4:	d8f7      	bhi.n	80017b6 <HAL_Delay+0x26>
  {
  }
}
 80017c6:	bf00      	nop
 80017c8:	bf00      	nop
 80017ca:	3710      	adds	r7, #16
 80017cc:	46bd      	mov	sp, r7
 80017ce:	bd80      	pop	{r7, pc}
 80017d0:	20000008 	.word	0x20000008

080017d4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b083      	sub	sp, #12
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
 80017dc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	689b      	ldr	r3, [r3, #8]
 80017e2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 80017e6:	683b      	ldr	r3, [r7, #0]
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	609a      	str	r2, [r3, #8]
}
 80017ee:	bf00      	nop
 80017f0:	370c      	adds	r7, #12
 80017f2:	46bd      	mov	sp, r7
 80017f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f8:	4770      	bx	lr

080017fa <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 80017fa:	b480      	push	{r7}
 80017fc:	b083      	sub	sp, #12
 80017fe:	af00      	add	r7, sp, #0
 8001800:	6078      	str	r0, [r7, #4]
 8001802:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	689b      	ldr	r3, [r3, #8]
 8001808:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	431a      	orrs	r2, r3
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	609a      	str	r2, [r3, #8]
}
 8001814:	bf00      	nop
 8001816:	370c      	adds	r7, #12
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr

08001820 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001820:	b480      	push	{r7}
 8001822:	b083      	sub	sp, #12
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	689b      	ldr	r3, [r3, #8]
 800182c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8001830:	4618      	mov	r0, r3
 8001832:	370c      	adds	r7, #12
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr

0800183c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800183c:	b480      	push	{r7}
 800183e:	b087      	sub	sp, #28
 8001840:	af00      	add	r7, sp, #0
 8001842:	60f8      	str	r0, [r7, #12]
 8001844:	60b9      	str	r1, [r7, #8]
 8001846:	607a      	str	r2, [r7, #4]
 8001848:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	3360      	adds	r3, #96	; 0x60
 800184e:	461a      	mov	r2, r3
 8001850:	68bb      	ldr	r3, [r7, #8]
 8001852:	009b      	lsls	r3, r3, #2
 8001854:	4413      	add	r3, r2
 8001856:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	681a      	ldr	r2, [r3, #0]
 800185c:	4b08      	ldr	r3, [pc, #32]	; (8001880 <LL_ADC_SetOffset+0x44>)
 800185e:	4013      	ands	r3, r2
 8001860:	687a      	ldr	r2, [r7, #4]
 8001862:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8001866:	683a      	ldr	r2, [r7, #0]
 8001868:	430a      	orrs	r2, r1
 800186a:	4313      	orrs	r3, r2
 800186c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001874:	bf00      	nop
 8001876:	371c      	adds	r7, #28
 8001878:	46bd      	mov	sp, r7
 800187a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800187e:	4770      	bx	lr
 8001880:	03fff000 	.word	0x03fff000

08001884 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001884:	b480      	push	{r7}
 8001886:	b085      	sub	sp, #20
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	3360      	adds	r3, #96	; 0x60
 8001892:	461a      	mov	r2, r3
 8001894:	683b      	ldr	r3, [r7, #0]
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	4413      	add	r3, r2
 800189a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr

080018b0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b087      	sub	sp, #28
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	60f8      	str	r0, [r7, #12]
 80018b8:	60b9      	str	r1, [r7, #8]
 80018ba:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	3360      	adds	r3, #96	; 0x60
 80018c0:	461a      	mov	r2, r3
 80018c2:	68bb      	ldr	r3, [r7, #8]
 80018c4:	009b      	lsls	r3, r3, #2
 80018c6:	4413      	add	r3, r2
 80018c8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80018ca:	697b      	ldr	r3, [r7, #20]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	431a      	orrs	r2, r3
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80018da:	bf00      	nop
 80018dc:	371c      	adds	r7, #28
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr

080018e6 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 80018e6:	b480      	push	{r7}
 80018e8:	b087      	sub	sp, #28
 80018ea:	af00      	add	r7, sp, #0
 80018ec:	60f8      	str	r0, [r7, #12]
 80018ee:	60b9      	str	r1, [r7, #8]
 80018f0:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	3360      	adds	r3, #96	; 0x60
 80018f6:	461a      	mov	r2, r3
 80018f8:	68bb      	ldr	r3, [r7, #8]
 80018fa:	009b      	lsls	r3, r3, #2
 80018fc:	4413      	add	r3, r2
 80018fe:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	431a      	orrs	r2, r3
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001910:	bf00      	nop
 8001912:	371c      	adds	r7, #28
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr

0800191c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 800191c:	b480      	push	{r7}
 800191e:	b087      	sub	sp, #28
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	60b9      	str	r1, [r7, #8]
 8001926:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	3360      	adds	r3, #96	; 0x60
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	009b      	lsls	r3, r3, #2
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	431a      	orrs	r2, r3
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001946:	bf00      	nop
 8001948:	371c      	adds	r7, #28
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr

08001952 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001952:	b480      	push	{r7}
 8001954:	b083      	sub	sp, #12
 8001956:	af00      	add	r7, sp, #0
 8001958:	6078      	str	r0, [r7, #4]
 800195a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	695b      	ldr	r3, [r3, #20]
 8001960:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001964:	683b      	ldr	r3, [r7, #0]
 8001966:	431a      	orrs	r2, r3
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	615a      	str	r2, [r3, #20]
}
 800196c:	bf00      	nop
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001988:	2b00      	cmp	r3, #0
 800198a:	d101      	bne.n	8001990 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800198c:	2301      	movs	r3, #1
 800198e:	e000      	b.n	8001992 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	370c      	adds	r7, #12
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr

0800199e <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800199e:	b480      	push	{r7}
 80019a0:	b087      	sub	sp, #28
 80019a2:	af00      	add	r7, sp, #0
 80019a4:	60f8      	str	r0, [r7, #12]
 80019a6:	60b9      	str	r1, [r7, #8]
 80019a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	3330      	adds	r3, #48	; 0x30
 80019ae:	461a      	mov	r2, r3
 80019b0:	68bb      	ldr	r3, [r7, #8]
 80019b2:	0a1b      	lsrs	r3, r3, #8
 80019b4:	009b      	lsls	r3, r3, #2
 80019b6:	f003 030c 	and.w	r3, r3, #12
 80019ba:	4413      	add	r3, r2
 80019bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019be:	697b      	ldr	r3, [r7, #20]
 80019c0:	681a      	ldr	r2, [r3, #0]
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	f003 031f 	and.w	r3, r3, #31
 80019c8:	211f      	movs	r1, #31
 80019ca:	fa01 f303 	lsl.w	r3, r1, r3
 80019ce:	43db      	mvns	r3, r3
 80019d0:	401a      	ands	r2, r3
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	0e9b      	lsrs	r3, r3, #26
 80019d6:	f003 011f 	and.w	r1, r3, #31
 80019da:	68bb      	ldr	r3, [r7, #8]
 80019dc:	f003 031f 	and.w	r3, r3, #31
 80019e0:	fa01 f303 	lsl.w	r3, r1, r3
 80019e4:	431a      	orrs	r2, r3
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80019ea:	bf00      	nop
 80019ec:	371c      	adds	r7, #28
 80019ee:	46bd      	mov	sp, r7
 80019f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f4:	4770      	bx	lr

080019f6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80019f6:	b480      	push	{r7}
 80019f8:	b087      	sub	sp, #28
 80019fa:	af00      	add	r7, sp, #0
 80019fc:	60f8      	str	r0, [r7, #12]
 80019fe:	60b9      	str	r1, [r7, #8]
 8001a00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	3314      	adds	r3, #20
 8001a06:	461a      	mov	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	0e5b      	lsrs	r3, r3, #25
 8001a0c:	009b      	lsls	r3, r3, #2
 8001a0e:	f003 0304 	and.w	r3, r3, #4
 8001a12:	4413      	add	r3, r2
 8001a14:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a16:	697b      	ldr	r3, [r7, #20]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	0d1b      	lsrs	r3, r3, #20
 8001a1e:	f003 031f 	and.w	r3, r3, #31
 8001a22:	2107      	movs	r1, #7
 8001a24:	fa01 f303 	lsl.w	r3, r1, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	401a      	ands	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	0d1b      	lsrs	r3, r3, #20
 8001a30:	f003 031f 	and.w	r3, r3, #31
 8001a34:	6879      	ldr	r1, [r7, #4]
 8001a36:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3a:	431a      	orrs	r2, r3
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001a40:	bf00      	nop
 8001a42:	371c      	adds	r7, #28
 8001a44:	46bd      	mov	sp, r7
 8001a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a4a:	4770      	bx	lr

08001a4c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b085      	sub	sp, #20
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	60f8      	str	r0, [r7, #12]
 8001a54:	60b9      	str	r1, [r7, #8]
 8001a56:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	4a0f      	ldr	r2, [pc, #60]	; (8001a98 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d10a      	bne.n	8001a76 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a66:	68bb      	ldr	r3, [r7, #8]
 8001a68:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a6c:	431a      	orrs	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001a74:	e00a      	b.n	8001a8c <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001a7c:	68bb      	ldr	r3, [r7, #8]
 8001a7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001a82:	43db      	mvns	r3, r3
 8001a84:	401a      	ands	r2, r3
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001a8c:	bf00      	nop
 8001a8e:	3714      	adds	r7, #20
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr
 8001a98:	407f0000 	.word	0x407f0000

08001a9c <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a9c:	b480      	push	{r7}
 8001a9e:	b083      	sub	sp, #12
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	689b      	ldr	r3, [r3, #8]
 8001aa8:	f003 031f 	and.w	r3, r3, #31
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	370c      	adds	r7, #12
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab6:	4770      	bx	lr

08001ab8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b083      	sub	sp, #12
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 8001ac8:	4618      	mov	r0, r3
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	689b      	ldr	r3, [r3, #8]
 8001ae0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001ae4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ae8:	687a      	ldr	r2, [r7, #4]
 8001aea:	6093      	str	r3, [r2, #8]
}
 8001aec:	bf00      	nop
 8001aee:	370c      	adds	r7, #12
 8001af0:	46bd      	mov	sp, r7
 8001af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af6:	4770      	bx	lr

08001af8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001af8:	b480      	push	{r7}
 8001afa:	b083      	sub	sp, #12
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	689b      	ldr	r3, [r3, #8]
 8001b04:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001b08:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001b0c:	d101      	bne.n	8001b12 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001b12:	2300      	movs	r3, #0
}
 8001b14:	4618      	mov	r0, r3
 8001b16:	370c      	adds	r7, #12
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1e:	4770      	bx	lr

08001b20 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	689b      	ldr	r3, [r3, #8]
 8001b2c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001b30:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b34:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001b3c:	bf00      	nop
 8001b3e:	370c      	adds	r7, #12
 8001b40:	46bd      	mov	sp, r7
 8001b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b46:	4770      	bx	lr

08001b48 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b083      	sub	sp, #12
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	689b      	ldr	r3, [r3, #8]
 8001b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b58:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001b5c:	d101      	bne.n	8001b62 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e000      	b.n	8001b64 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001b62:	2300      	movs	r3, #0
}
 8001b64:	4618      	mov	r0, r3
 8001b66:	370c      	adds	r7, #12
 8001b68:	46bd      	mov	sp, r7
 8001b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b6e:	4770      	bx	lr

08001b70 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	689b      	ldr	r3, [r3, #8]
 8001b7c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001b80:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001b84:	f043 0201 	orr.w	r2, r3, #1
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001b8c:	bf00      	nop
 8001b8e:	370c      	adds	r7, #12
 8001b90:	46bd      	mov	sp, r7
 8001b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b96:	4770      	bx	lr

08001b98 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b083      	sub	sp, #12
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	689b      	ldr	r3, [r3, #8]
 8001ba4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001ba8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001bac:	f043 0202 	orr.w	r2, r3, #2
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001bb4:	bf00      	nop
 8001bb6:	370c      	adds	r7, #12
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bbe:	4770      	bx	lr

08001bc0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001bc0:	b480      	push	{r7}
 8001bc2:	b083      	sub	sp, #12
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 0301 	and.w	r3, r3, #1
 8001bd0:	2b01      	cmp	r3, #1
 8001bd2:	d101      	bne.n	8001bd8 <LL_ADC_IsEnabled+0x18>
 8001bd4:	2301      	movs	r3, #1
 8001bd6:	e000      	b.n	8001bda <LL_ADC_IsEnabled+0x1a>
 8001bd8:	2300      	movs	r3, #0
}
 8001bda:	4618      	mov	r0, r3
 8001bdc:	370c      	adds	r7, #12
 8001bde:	46bd      	mov	sp, r7
 8001be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be4:	4770      	bx	lr

08001be6 <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8001be6:	b480      	push	{r7}
 8001be8:	b083      	sub	sp, #12
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	689b      	ldr	r3, [r3, #8]
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d101      	bne.n	8001bfe <LL_ADC_IsDisableOngoing+0x18>
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e000      	b.n	8001c00 <LL_ADC_IsDisableOngoing+0x1a>
 8001bfe:	2300      	movs	r3, #0
}
 8001c00:	4618      	mov	r0, r3
 8001c02:	370c      	adds	r7, #12
 8001c04:	46bd      	mov	sp, r7
 8001c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0a:	4770      	bx	lr

08001c0c <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001c1c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c20:	f043 0204 	orr.w	r2, r3, #4
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001c28:	bf00      	nop
 8001c2a:	370c      	adds	r7, #12
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c32:	4770      	bx	lr

08001c34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	f003 0304 	and.w	r3, r3, #4
 8001c44:	2b04      	cmp	r3, #4
 8001c46:	d101      	bne.n	8001c4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e000      	b.n	8001c4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001c4c:	2300      	movs	r3, #0
}
 8001c4e:	4618      	mov	r0, r3
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr

08001c5a <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001c5a:	b480      	push	{r7}
 8001c5c:	b083      	sub	sp, #12
 8001c5e:	af00      	add	r7, sp, #0
 8001c60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	f003 0308 	and.w	r3, r3, #8
 8001c6a:	2b08      	cmp	r3, #8
 8001c6c:	d101      	bne.n	8001c72 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e000      	b.n	8001c74 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001c72:	2300      	movs	r3, #0
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	370c      	adds	r7, #12
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7e:	4770      	bx	lr

08001c80 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b089      	sub	sp, #36	; 0x24
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e16d      	b.n	8001f76 <HAL_ADC_Init+0x2f6>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7fe fbe5 	bl	8000478 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	f7ff ff19 	bl	8001af8 <LL_ADC_IsDeepPowerDownEnabled>
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d004      	beq.n	8001cd6 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	f7ff feff 	bl	8001ad4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4618      	mov	r0, r3
 8001cdc:	f7ff ff34 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d115      	bne.n	8001d12 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4618      	mov	r0, r3
 8001cec:	f7ff ff18 	bl	8001b20 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001cf0:	4ba3      	ldr	r3, [pc, #652]	; (8001f80 <HAL_ADC_Init+0x300>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	099b      	lsrs	r3, r3, #6
 8001cf6:	4aa3      	ldr	r2, [pc, #652]	; (8001f84 <HAL_ADC_Init+0x304>)
 8001cf8:	fba2 2303 	umull	r2, r3, r2, r3
 8001cfc:	099b      	lsrs	r3, r3, #6
 8001cfe:	3301      	adds	r3, #1
 8001d00:	005b      	lsls	r3, r3, #1
 8001d02:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d04:	e002      	b.n	8001d0c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d06:	68bb      	ldr	r3, [r7, #8]
 8001d08:	3b01      	subs	r3, #1
 8001d0a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d0c:	68bb      	ldr	r3, [r7, #8]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d1f9      	bne.n	8001d06 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f7ff ff16 	bl	8001b48 <LL_ADC_IsInternalRegulatorEnabled>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d10d      	bne.n	8001d3e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	f043 0210 	orr.w	r2, r3, #16
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d32:	f043 0201 	orr.w	r2, r3, #1
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff76 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001d48:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d4e:	f003 0310 	and.w	r3, r3, #16
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	f040 8106 	bne.w	8001f64 <HAL_ADC_Init+0x2e4>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001d58:	697b      	ldr	r3, [r7, #20]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	f040 8102 	bne.w	8001f64 <HAL_ADC_Init+0x2e4>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d64:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001d68:	f043 0202 	orr.w	r2, r3, #2
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff23 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d111      	bne.n	8001da4 <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001d80:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001d84:	f7ff ff1c 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d88:	4604      	mov	r4, r0
 8001d8a:	487f      	ldr	r0, [pc, #508]	; (8001f88 <HAL_ADC_Init+0x308>)
 8001d8c:	f7ff ff18 	bl	8001bc0 <LL_ADC_IsEnabled>
 8001d90:	4603      	mov	r3, r0
 8001d92:	4323      	orrs	r3, r4
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d105      	bne.n	8001da4 <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	685b      	ldr	r3, [r3, #4]
 8001d9c:	4619      	mov	r1, r3
 8001d9e:	487b      	ldr	r0, [pc, #492]	; (8001f8c <HAL_ADC_Init+0x30c>)
 8001da0:	f7ff fd18 	bl	80017d4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	7f5b      	ldrb	r3, [r3, #29]
 8001da8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dae:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001db4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001dba:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dc2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001dc4:	4313      	orrs	r3, r2
 8001dc6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d106      	bne.n	8001de0 <HAL_ADC_Init+0x160>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001dd6:	3b01      	subs	r3, #1
 8001dd8:	045b      	lsls	r3, r3, #17
 8001dda:	69ba      	ldr	r2, [r7, #24]
 8001ddc:	4313      	orrs	r3, r2
 8001dde:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d009      	beq.n	8001dfc <HAL_ADC_Init+0x17c>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dec:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001df6:	69ba      	ldr	r2, [r7, #24]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68da      	ldr	r2, [r3, #12]
 8001e02:	4b63      	ldr	r3, [pc, #396]	; (8001f90 <HAL_ADC_Init+0x310>)
 8001e04:	4013      	ands	r3, r2
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	6812      	ldr	r2, [r2, #0]
 8001e0a:	69b9      	ldr	r1, [r7, #24]
 8001e0c:	430b      	orrs	r3, r1
 8001e0e:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	691b      	ldr	r3, [r3, #16]
 8001e16:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	430a      	orrs	r2, r1
 8001e24:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	f7ff ff02 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001e30:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	4618      	mov	r0, r3
 8001e38:	f7ff ff0f 	bl	8001c5a <LL_ADC_INJ_IsConversionOngoing>
 8001e3c:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d16d      	bne.n	8001f20 <HAL_ADC_Init+0x2a0>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d16a      	bne.n	8001f20 <HAL_ADC_Init+0x2a0>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e4e:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001e56:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001e58:	4313      	orrs	r3, r2
 8001e5a:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	68db      	ldr	r3, [r3, #12]
 8001e62:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001e66:	f023 0302 	bic.w	r3, r3, #2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6812      	ldr	r2, [r2, #0]
 8001e6e:	69b9      	ldr	r1, [r7, #24]
 8001e70:	430b      	orrs	r3, r1
 8001e72:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d017      	beq.n	8001eac <HAL_ADC_Init+0x22c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	691a      	ldr	r2, [r3, #16]
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001e8a:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001e94:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001e98:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001e9c:	687a      	ldr	r2, [r7, #4]
 8001e9e:	6911      	ldr	r1, [r2, #16]
 8001ea0:	687a      	ldr	r2, [r7, #4]
 8001ea2:	6812      	ldr	r2, [r2, #0]
 8001ea4:	430b      	orrs	r3, r1
 8001ea6:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001eaa:	e013      	b.n	8001ed4 <HAL_ADC_Init+0x254>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	691a      	ldr	r2, [r3, #16]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001eba:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001ec4:	687a      	ldr	r2, [r7, #4]
 8001ec6:	6812      	ldr	r2, [r2, #0]
 8001ec8:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001ecc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001ed0:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001eda:	2b01      	cmp	r3, #1
 8001edc:	d118      	bne.n	8001f10 <HAL_ADC_Init+0x290>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	691b      	ldr	r3, [r3, #16]
 8001ee4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001ee8:	f023 0304 	bic.w	r3, r3, #4
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001ef4:	4311      	orrs	r1, r2
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001efa:	4311      	orrs	r1, r2
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001f00:	430a      	orrs	r2, r1
 8001f02:	431a      	orrs	r2, r3
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f042 0201 	orr.w	r2, r2, #1
 8001f0c:	611a      	str	r2, [r3, #16]
 8001f0e:	e007      	b.n	8001f20 <HAL_ADC_Init+0x2a0>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	691a      	ldr	r2, [r3, #16]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f022 0201 	bic.w	r2, r2, #1
 8001f1e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	695b      	ldr	r3, [r3, #20]
 8001f24:	2b01      	cmp	r3, #1
 8001f26:	d10c      	bne.n	8001f42 <HAL_ADC_Init+0x2c2>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f2e:	f023 010f 	bic.w	r1, r3, #15
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	6a1b      	ldr	r3, [r3, #32]
 8001f36:	1e5a      	subs	r2, r3, #1
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	430a      	orrs	r2, r1
 8001f3e:	631a      	str	r2, [r3, #48]	; 0x30
 8001f40:	e007      	b.n	8001f52 <HAL_ADC_Init+0x2d2>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f022 020f 	bic.w	r2, r2, #15
 8001f50:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f56:	f023 0303 	bic.w	r3, r3, #3
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f62:	e007      	b.n	8001f74 <HAL_ADC_Init+0x2f4>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	f043 0210 	orr.w	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001f70:	2301      	movs	r3, #1
 8001f72:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001f74:	7ffb      	ldrb	r3, [r7, #31]
}
 8001f76:	4618      	mov	r0, r3
 8001f78:	3724      	adds	r7, #36	; 0x24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd90      	pop	{r4, r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	20000000 	.word	0x20000000
 8001f84:	053e2d63 	.word	0x053e2d63
 8001f88:	50000100 	.word	0x50000100
 8001f8c:	50000300 	.word	0x50000300
 8001f90:	fff04007 	.word	0xfff04007

08001f94 <HAL_ADC_Start>:
  *           if ADC is master, ADC is enabled and multimode conversion is started.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f9c:	4859      	ldr	r0, [pc, #356]	; (8002104 <HAL_ADC_Start+0x170>)
 8001f9e:	f7ff fd7d 	bl	8001a9c <LL_ADC_GetMultimode>
 8001fa2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	4618      	mov	r0, r3
 8001faa:	f7ff fe43 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8001fae:	4603      	mov	r3, r0
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	f040 809f 	bne.w	80020f4 <HAL_ADC_Start+0x160>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001fbc:	2b01      	cmp	r3, #1
 8001fbe:	d101      	bne.n	8001fc4 <HAL_ADC_Start+0x30>
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	e09a      	b.n	80020fa <HAL_ADC_Start+0x166>
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f000 fd73 	bl	8002ab8 <ADC_Enable>
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	f040 8086 	bne.w	80020ea <HAL_ADC_Start+0x156>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fe2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fe6:	f023 0301 	bic.w	r3, r3, #1
 8001fea:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a44      	ldr	r2, [pc, #272]	; (8002108 <HAL_ADC_Start+0x174>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d002      	beq.n	8002002 <HAL_ADC_Start+0x6e>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	e001      	b.n	8002006 <HAL_ADC_Start+0x72>
 8002002:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	6812      	ldr	r2, [r2, #0]
 800200a:	4293      	cmp	r3, r2
 800200c:	d002      	beq.n	8002014 <HAL_ADC_Start+0x80>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800200e:	693b      	ldr	r3, [r7, #16]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <HAL_ADC_Start+0x8c>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002018:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	65da      	str	r2, [r3, #92]	; 0x5c
      }
#endif

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002024:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002028:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800202c:	d106      	bne.n	800203c <HAL_ADC_Start+0xa8>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002032:	f023 0206 	bic.w	r2, r3, #6
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	661a      	str	r2, [r3, #96]	; 0x60
 800203a:	e002      	b.n	8002042 <HAL_ADC_Start+0xae>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	2200      	movs	r2, #0
 8002040:	661a      	str	r2, [r3, #96]	; 0x60
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	221c      	movs	r2, #28
 8002048:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	4a2c      	ldr	r2, [pc, #176]	; (8002108 <HAL_ADC_Start+0x174>)
 8002058:	4293      	cmp	r3, r2
 800205a:	d002      	beq.n	8002062 <HAL_ADC_Start+0xce>
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	e001      	b.n	8002066 <HAL_ADC_Start+0xd2>
 8002062:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	4293      	cmp	r3, r2
 800206c:	d008      	beq.n	8002080 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800206e:	693b      	ldr	r3, [r7, #16]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002074:	693b      	ldr	r3, [r7, #16]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d002      	beq.n	8002080 <HAL_ADC_Start+0xec>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800207a:	693b      	ldr	r3, [r7, #16]
 800207c:	2b09      	cmp	r3, #9
 800207e:	d114      	bne.n	80020aa <HAL_ADC_Start+0x116>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	68db      	ldr	r3, [r3, #12]
 8002086:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800208a:	2b00      	cmp	r3, #0
 800208c:	d007      	beq.n	800209e <HAL_ADC_Start+0x10a>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002096:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	65da      	str	r2, [r3, #92]	; 0x5c
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	4618      	mov	r0, r3
 80020a4:	f7ff fdb2 	bl	8001c0c <LL_ADC_REG_StartConversion>
 80020a8:	e026      	b.n	80020f8 <HAL_ADC_Start+0x164>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ae:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	65da      	str	r2, [r3, #92]	; 0x5c
        /* if Master ADC JAUTO bit is set, update Slave State in setting
           HAL_ADC_STATE_INJ_BUSY bit and in resetting HAL_ADC_STATE_INJ_EOC bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4a13      	ldr	r2, [pc, #76]	; (8002108 <HAL_ADC_Start+0x174>)
 80020bc:	4293      	cmp	r3, r2
 80020be:	d002      	beq.n	80020c6 <HAL_ADC_Start+0x132>
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	e001      	b.n	80020ca <HAL_ADC_Start+0x136>
 80020c6:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80020ca:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d00f      	beq.n	80020f8 <HAL_ADC_Start+0x164>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020dc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80020e0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e8:	e006      	b.n	80020f8 <HAL_ADC_Start+0x164>
#endif
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80020f2:	e001      	b.n	80020f8 <HAL_ADC_Start+0x164>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80020f4:	2302      	movs	r3, #2
 80020f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3718      	adds	r7, #24
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	50000300 	.word	0x50000300
 8002108:	50000100 	.word	0x50000100

0800210c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b088      	sub	sp, #32
 8002110:	af00      	add	r7, sp, #0
 8002112:	6078      	str	r0, [r7, #4]
 8002114:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t tmp_Flag_End;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002116:	4867      	ldr	r0, [pc, #412]	; (80022b4 <HAL_ADC_PollForConversion+0x1a8>)
 8002118:	f7ff fcc0 	bl	8001a9c <LL_ADC_GetMultimode>
 800211c:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	699b      	ldr	r3, [r3, #24]
 8002122:	2b08      	cmp	r3, #8
 8002124:	d102      	bne.n	800212c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8002126:	2308      	movs	r3, #8
 8002128:	61fb      	str	r3, [r7, #28]
 800212a:	e02a      	b.n	8002182 <HAL_ADC_PollForConversion+0x76>
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d005      	beq.n	800213e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002132:	697b      	ldr	r3, [r7, #20]
 8002134:	2b05      	cmp	r3, #5
 8002136:	d002      	beq.n	800213e <HAL_ADC_PollForConversion+0x32>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	2b09      	cmp	r3, #9
 800213c:	d111      	bne.n	8002162 <HAL_ADC_PollForConversion+0x56>
       )
    {
      /* Check ADC DMA mode in independent mode on ADC group regular */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	68db      	ldr	r3, [r3, #12]
 8002144:	f003 0301 	and.w	r3, r3, #1
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <HAL_ADC_PollForConversion+0x50>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002150:	f043 0220 	orr.w	r2, r3, #32
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	e0a6      	b.n	80022aa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800215c:	2304      	movs	r3, #4
 800215e:	61fb      	str	r3, [r7, #28]
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN) != 0UL)
 8002160:	e00f      	b.n	8002182 <HAL_ADC_PollForConversion+0x76>
      }
    }
    else
    {
      /* Check ADC DMA mode in multimode on ADC group regular */
      if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002162:	4854      	ldr	r0, [pc, #336]	; (80022b4 <HAL_ADC_PollForConversion+0x1a8>)
 8002164:	f7ff fca8 	bl	8001ab8 <LL_ADC_GetMultiDMATransfer>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d007      	beq.n	800217e <HAL_ADC_PollForConversion+0x72>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002172:	f043 0220 	orr.w	r2, r3, #32
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
        return HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	e095      	b.n	80022aa <HAL_ADC_PollForConversion+0x19e>
      }
      else
      {
        tmp_Flag_End = (ADC_FLAG_EOC);
 800217e:	2304      	movs	r3, #4
 8002180:	61fb      	str	r3, [r7, #28]
    }
#endif
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8002182:	f7ff faf9 	bl	8001778 <HAL_GetTick>
 8002186:	6138      	str	r0, [r7, #16]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8002188:	e021      	b.n	80021ce <HAL_ADC_PollForConversion+0xc2>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002190:	d01d      	beq.n	80021ce <HAL_ADC_PollForConversion+0xc2>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8002192:	f7ff faf1 	bl	8001778 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	683a      	ldr	r2, [r7, #0]
 800219e:	429a      	cmp	r2, r3
 80021a0:	d302      	bcc.n	80021a8 <HAL_ADC_PollForConversion+0x9c>
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d112      	bne.n	80021ce <HAL_ADC_PollForConversion+0xc2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	681a      	ldr	r2, [r3, #0]
 80021ae:	69fb      	ldr	r3, [r7, #28]
 80021b0:	4013      	ands	r3, r2
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d10b      	bne.n	80021ce <HAL_ADC_PollForConversion+0xc2>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	f043 0204 	orr.w	r2, r3, #4
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2200      	movs	r2, #0
 80021c6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

          return HAL_TIMEOUT;
 80021ca:	2303      	movs	r3, #3
 80021cc:	e06d      	b.n	80022aa <HAL_ADC_PollForConversion+0x19e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	681a      	ldr	r2, [r3, #0]
 80021d4:	69fb      	ldr	r3, [r7, #28]
 80021d6:	4013      	ands	r3, r2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0d6      	beq.n	800218a <HAL_ADC_PollForConversion+0x7e>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e0:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	4618      	mov	r0, r3
 80021ee:	f7ff fbc3 	bl	8001978 <LL_ADC_REG_IsTriggerSourceSWStart>
 80021f2:	4603      	mov	r3, r0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d01c      	beq.n	8002232 <HAL_ADC_PollForConversion+0x126>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	7f5b      	ldrb	r3, [r3, #29]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d118      	bne.n	8002232 <HAL_ADC_PollForConversion+0x126>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b08      	cmp	r3, #8
 800220c:	d111      	bne.n	8002232 <HAL_ADC_PollForConversion+0x126>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	65da      	str	r2, [r3, #92]	; 0x5c

      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_PollForConversion+0x126>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800222a:	f043 0201 	orr.w	r2, r3, #1
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Get relevant register CFGR in ADC instance of ADC master or slave        */
  /* in function of multimode state (for devices with multimode               */
  /* available).                                                              */
#if defined(ADC_MULTIMODE_SUPPORT)
  if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a20      	ldr	r2, [pc, #128]	; (80022b8 <HAL_ADC_PollForConversion+0x1ac>)
 8002238:	4293      	cmp	r3, r2
 800223a:	d002      	beq.n	8002242 <HAL_ADC_PollForConversion+0x136>
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	e001      	b.n	8002246 <HAL_ADC_PollForConversion+0x13a>
 8002242:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8002246:	687a      	ldr	r2, [r7, #4]
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	4293      	cmp	r3, r2
 800224c:	d008      	beq.n	8002260 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800224e:	697b      	ldr	r3, [r7, #20]
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002254:	697b      	ldr	r3, [r7, #20]
 8002256:	2b05      	cmp	r3, #5
 8002258:	d002      	beq.n	8002260 <HAL_ADC_PollForConversion+0x154>
      || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800225a:	697b      	ldr	r3, [r7, #20]
 800225c:	2b09      	cmp	r3, #9
 800225e:	d104      	bne.n	800226a <HAL_ADC_PollForConversion+0x15e>
     )
  {
    /* Retrieve handle ADC CFGR register */
    tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	e00d      	b.n	8002286 <HAL_ADC_PollForConversion+0x17a>
  }
  else
  {
    /* Retrieve Master ADC CFGR register */
    tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	4a12      	ldr	r2, [pc, #72]	; (80022b8 <HAL_ADC_PollForConversion+0x1ac>)
 8002270:	4293      	cmp	r3, r2
 8002272:	d002      	beq.n	800227a <HAL_ADC_PollForConversion+0x16e>
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	e001      	b.n	800227e <HAL_ADC_PollForConversion+0x172>
 800227a:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 800227e:	60fb      	str	r3, [r7, #12]
    tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	68db      	ldr	r3, [r3, #12]
 8002284:	61bb      	str	r3, [r7, #24]
  /* Retrieve handle ADC CFGR register */
  tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif

  /* Clear polled flag */
  if (tmp_Flag_End == ADC_FLAG_EOS)
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	2b08      	cmp	r3, #8
 800228a:	d104      	bne.n	8002296 <HAL_ADC_PollForConversion+0x18a>
  {
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOS);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2208      	movs	r2, #8
 8002292:	601a      	str	r2, [r3, #0]
 8002294:	e008      	b.n	80022a8 <HAL_ADC_PollForConversion+0x19c>
  else
  {
    /* Clear end of conversion EOC flag of regular group if low power feature */
    /* "LowPowerAutoWait " is disabled, to not interfere with this feature    */
    /* until data register is read using function HAL_ADC_GetValue().         */
    if (READ_BIT(tmp_cfgr, ADC_CFGR_AUTDLY) == 0UL)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d103      	bne.n	80022a8 <HAL_ADC_PollForConversion+0x19c>
    {
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	220c      	movs	r2, #12
 80022a6:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return HAL_OK;
 80022a8:	2300      	movs	r3, #0
}
 80022aa:	4618      	mov	r0, r3
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	50000300 	.word	0x50000300
 80022b8:	50000100 	.word	0x50000100

080022bc <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80022bc:	b480      	push	{r7}
 80022be:	b083      	sub	sp, #12
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	370c      	adds	r7, #12
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
	...

080022d8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0b6      	sub	sp, #216	; 0xd8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022e2:	2300      	movs	r3, #0
 80022e4:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d101      	bne.n	80022fa <HAL_ADC_ConfigChannel+0x22>
 80022f6:	2302      	movs	r3, #2
 80022f8:	e3c8      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x7b4>
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	2201      	movs	r2, #1
 80022fe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4618      	mov	r0, r3
 8002308:	f7ff fc94 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	f040 83ad 	bne.w	8002a6e <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6818      	ldr	r0, [r3, #0]
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	6859      	ldr	r1, [r3, #4]
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	461a      	mov	r2, r3
 8002322:	f7ff fb3c 	bl	800199e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	4618      	mov	r0, r3
 800232c:	f7ff fc82 	bl	8001c34 <LL_ADC_REG_IsConversionOngoing>
 8002330:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff fc8e 	bl	8001c5a <LL_ADC_INJ_IsConversionOngoing>
 800233e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002342:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8002346:	2b00      	cmp	r3, #0
 8002348:	f040 81d9 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800234c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8002350:	2b00      	cmp	r3, #0
 8002352:	f040 81d4 	bne.w	80026fe <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	689b      	ldr	r3, [r3, #8]
 800235a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800235e:	d10f      	bne.n	8002380 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	6818      	ldr	r0, [r3, #0]
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	2200      	movs	r2, #0
 800236a:	4619      	mov	r1, r3
 800236c:	f7ff fb43 	bl	80019f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002378:	4618      	mov	r0, r3
 800237a:	f7ff faea 	bl	8001952 <LL_ADC_SetSamplingTimeCommonConfig>
 800237e:	e00e      	b.n	800239e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6818      	ldr	r0, [r3, #0]
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	6819      	ldr	r1, [r3, #0]
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689b      	ldr	r3, [r3, #8]
 800238c:	461a      	mov	r2, r3
 800238e:	f7ff fb32 	bl	80019f6 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	2100      	movs	r1, #0
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fada 	bl	8001952 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	695a      	ldr	r2, [r3, #20]
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	08db      	lsrs	r3, r3, #3
 80023aa:	f003 0303 	and.w	r3, r3, #3
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	691b      	ldr	r3, [r3, #16]
 80023bc:	2b04      	cmp	r3, #4
 80023be:	d022      	beq.n	8002406 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	6818      	ldr	r0, [r3, #0]
 80023c4:	683b      	ldr	r3, [r7, #0]
 80023c6:	6919      	ldr	r1, [r3, #16]
 80023c8:	683b      	ldr	r3, [r7, #0]
 80023ca:	681a      	ldr	r2, [r3, #0]
 80023cc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80023d0:	f7ff fa34 	bl	800183c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6818      	ldr	r0, [r3, #0]
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6919      	ldr	r1, [r3, #16]
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	699b      	ldr	r3, [r3, #24]
 80023e0:	461a      	mov	r2, r3
 80023e2:	f7ff fa80 	bl	80018e6 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	6818      	ldr	r0, [r3, #0]
 80023ea:	683b      	ldr	r3, [r7, #0]
 80023ec:	6919      	ldr	r1, [r3, #16]
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	7f1b      	ldrb	r3, [r3, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d102      	bne.n	80023fc <HAL_ADC_ConfigChannel+0x124>
 80023f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80023fa:	e000      	b.n	80023fe <HAL_ADC_ConfigChannel+0x126>
 80023fc:	2300      	movs	r3, #0
 80023fe:	461a      	mov	r2, r3
 8002400:	f7ff fa8c 	bl	800191c <LL_ADC_SetOffsetSaturation>
 8002404:	e17b      	b.n	80026fe <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	2100      	movs	r1, #0
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff fa39 	bl	8001884 <LL_ADC_GetOffsetChannel>
 8002412:	4603      	mov	r3, r0
 8002414:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002418:	2b00      	cmp	r3, #0
 800241a:	d10a      	bne.n	8002432 <HAL_ADC_ConfigChannel+0x15a>
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	2100      	movs	r1, #0
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fa2e 	bl	8001884 <LL_ADC_GetOffsetChannel>
 8002428:	4603      	mov	r3, r0
 800242a:	0e9b      	lsrs	r3, r3, #26
 800242c:	f003 021f 	and.w	r2, r3, #31
 8002430:	e01e      	b.n	8002470 <HAL_ADC_ConfigChannel+0x198>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	2100      	movs	r1, #0
 8002438:	4618      	mov	r0, r3
 800243a:	f7ff fa23 	bl	8001884 <LL_ADC_GetOffsetChannel>
 800243e:	4603      	mov	r3, r0
 8002440:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002444:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8002448:	fa93 f3a3 	rbit	r3, r3
 800244c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002450:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002454:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002458:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800245c:	2b00      	cmp	r3, #0
 800245e:	d101      	bne.n	8002464 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 8002460:	2320      	movs	r3, #32
 8002462:	e004      	b.n	800246e <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 8002464:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002468:	fab3 f383 	clz	r3, r3
 800246c:	b2db      	uxtb	r3, r3
 800246e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002470:	683b      	ldr	r3, [r7, #0]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002478:	2b00      	cmp	r3, #0
 800247a:	d105      	bne.n	8002488 <HAL_ADC_ConfigChannel+0x1b0>
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	0e9b      	lsrs	r3, r3, #26
 8002482:	f003 031f 	and.w	r3, r3, #31
 8002486:	e018      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1e2>
 8002488:	683b      	ldr	r3, [r7, #0]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002490:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002494:	fa93 f3a3 	rbit	r3, r3
 8002498:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800249c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80024a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80024a4:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d101      	bne.n	80024b0 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 80024ac:	2320      	movs	r3, #32
 80024ae:	e004      	b.n	80024ba <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 80024b0:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80024b4:	fab3 f383 	clz	r3, r3
 80024b8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d106      	bne.n	80024cc <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	2200      	movs	r2, #0
 80024c4:	2100      	movs	r1, #0
 80024c6:	4618      	mov	r0, r3
 80024c8:	f7ff f9f2 	bl	80018b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2101      	movs	r1, #1
 80024d2:	4618      	mov	r0, r3
 80024d4:	f7ff f9d6 	bl	8001884 <LL_ADC_GetOffsetChannel>
 80024d8:	4603      	mov	r3, r0
 80024da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10a      	bne.n	80024f8 <HAL_ADC_ConfigChannel+0x220>
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	2101      	movs	r1, #1
 80024e8:	4618      	mov	r0, r3
 80024ea:	f7ff f9cb 	bl	8001884 <LL_ADC_GetOffsetChannel>
 80024ee:	4603      	mov	r3, r0
 80024f0:	0e9b      	lsrs	r3, r3, #26
 80024f2:	f003 021f 	and.w	r2, r3, #31
 80024f6:	e01e      	b.n	8002536 <HAL_ADC_ConfigChannel+0x25e>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	2101      	movs	r1, #1
 80024fe:	4618      	mov	r0, r3
 8002500:	f7ff f9c0 	bl	8001884 <LL_ADC_GetOffsetChannel>
 8002504:	4603      	mov	r3, r0
 8002506:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800250e:	fa93 f3a3 	rbit	r3, r3
 8002512:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800251a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800251e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 8002526:	2320      	movs	r3, #32
 8002528:	e004      	b.n	8002534 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 800252a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800252e:	fab3 f383 	clz	r3, r3
 8002532:	b2db      	uxtb	r3, r3
 8002534:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800253e:	2b00      	cmp	r3, #0
 8002540:	d105      	bne.n	800254e <HAL_ADC_ConfigChannel+0x276>
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	0e9b      	lsrs	r3, r3, #26
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	e018      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2a8>
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002556:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800255a:	fa93 f3a3 	rbit	r3, r3
 800255e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8002562:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002566:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800256a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002572:	2320      	movs	r3, #32
 8002574:	e004      	b.n	8002580 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002576:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800257a:	fab3 f383 	clz	r3, r3
 800257e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002580:	429a      	cmp	r2, r3
 8002582:	d106      	bne.n	8002592 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	2200      	movs	r2, #0
 800258a:	2101      	movs	r1, #1
 800258c:	4618      	mov	r0, r3
 800258e:	f7ff f98f 	bl	80018b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	2102      	movs	r1, #2
 8002598:	4618      	mov	r0, r3
 800259a:	f7ff f973 	bl	8001884 <LL_ADC_GetOffsetChannel>
 800259e:	4603      	mov	r3, r0
 80025a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d10a      	bne.n	80025be <HAL_ADC_ConfigChannel+0x2e6>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	2102      	movs	r1, #2
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7ff f968 	bl	8001884 <LL_ADC_GetOffsetChannel>
 80025b4:	4603      	mov	r3, r0
 80025b6:	0e9b      	lsrs	r3, r3, #26
 80025b8:	f003 021f 	and.w	r2, r3, #31
 80025bc:	e01e      	b.n	80025fc <HAL_ADC_ConfigChannel+0x324>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	2102      	movs	r1, #2
 80025c4:	4618      	mov	r0, r3
 80025c6:	f7ff f95d 	bl	8001884 <LL_ADC_GetOffsetChannel>
 80025ca:	4603      	mov	r3, r0
 80025cc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d0:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80025d4:	fa93 f3a3 	rbit	r3, r3
 80025d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80025dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80025e0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 80025e4:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e004      	b.n	80025fa <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 80025f0:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80025f4:	fab3 f383 	clz	r3, r3
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80025fc:	683b      	ldr	r3, [r7, #0]
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002604:	2b00      	cmp	r3, #0
 8002606:	d105      	bne.n	8002614 <HAL_ADC_ConfigChannel+0x33c>
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	0e9b      	lsrs	r3, r3, #26
 800260e:	f003 031f 	and.w	r3, r3, #31
 8002612:	e016      	b.n	8002642 <HAL_ADC_ConfigChannel+0x36a>
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800261c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8002620:	fa93 f3a3 	rbit	r3, r3
 8002624:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8002626:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002628:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800262c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002630:	2b00      	cmp	r3, #0
 8002632:	d101      	bne.n	8002638 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002634:	2320      	movs	r3, #32
 8002636:	e004      	b.n	8002642 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002638:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800263c:	fab3 f383 	clz	r3, r3
 8002640:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002642:	429a      	cmp	r2, r3
 8002644:	d106      	bne.n	8002654 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	2200      	movs	r2, #0
 800264c:	2102      	movs	r1, #2
 800264e:	4618      	mov	r0, r3
 8002650:	f7ff f92e 	bl	80018b0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	2103      	movs	r1, #3
 800265a:	4618      	mov	r0, r3
 800265c:	f7ff f912 	bl	8001884 <LL_ADC_GetOffsetChannel>
 8002660:	4603      	mov	r3, r0
 8002662:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002666:	2b00      	cmp	r3, #0
 8002668:	d10a      	bne.n	8002680 <HAL_ADC_ConfigChannel+0x3a8>
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	2103      	movs	r1, #3
 8002670:	4618      	mov	r0, r3
 8002672:	f7ff f907 	bl	8001884 <LL_ADC_GetOffsetChannel>
 8002676:	4603      	mov	r3, r0
 8002678:	0e9b      	lsrs	r3, r3, #26
 800267a:	f003 021f 	and.w	r2, r3, #31
 800267e:	e017      	b.n	80026b0 <HAL_ADC_ConfigChannel+0x3d8>
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2103      	movs	r1, #3
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff f8fc 	bl	8001884 <LL_ADC_GetOffsetChannel>
 800268c:	4603      	mov	r3, r0
 800268e:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002690:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002692:	fa93 f3a3 	rbit	r3, r3
 8002696:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002698:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800269a:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800269c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d101      	bne.n	80026a6 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 80026a2:	2320      	movs	r3, #32
 80026a4:	e003      	b.n	80026ae <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 80026a6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026a8:	fab3 f383 	clz	r3, r3
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_ConfigChannel+0x3f0>
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	0e9b      	lsrs	r3, r3, #26
 80026c2:	f003 031f 	and.w	r3, r3, #31
 80026c6:	e011      	b.n	80026ec <HAL_ADC_ConfigChannel+0x414>
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026ce:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80026d0:	fa93 f3a3 	rbit	r3, r3
 80026d4:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80026d6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80026d8:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80026da:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d101      	bne.n	80026e4 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 80026e0:	2320      	movs	r3, #32
 80026e2:	e003      	b.n	80026ec <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 80026e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80026e6:	fab3 f383 	clz	r3, r3
 80026ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d106      	bne.n	80026fe <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	2200      	movs	r2, #0
 80026f6:	2103      	movs	r1, #3
 80026f8:	4618      	mov	r0, r3
 80026fa:	f7ff f8d9 	bl	80018b0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4618      	mov	r0, r3
 8002704:	f7ff fa5c 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002708:	4603      	mov	r3, r0
 800270a:	2b00      	cmp	r3, #0
 800270c:	f040 8140 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6818      	ldr	r0, [r3, #0]
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	6819      	ldr	r1, [r3, #0]
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	461a      	mov	r2, r3
 800271e:	f7ff f995 	bl	8001a4c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68db      	ldr	r3, [r3, #12]
 8002726:	4a8f      	ldr	r2, [pc, #572]	; (8002964 <HAL_ADC_ConfigChannel+0x68c>)
 8002728:	4293      	cmp	r3, r2
 800272a:	f040 8131 	bne.w	8002990 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002732:	683b      	ldr	r3, [r7, #0]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800273a:	2b00      	cmp	r3, #0
 800273c:	d10b      	bne.n	8002756 <HAL_ADC_ConfigChannel+0x47e>
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	0e9b      	lsrs	r3, r3, #26
 8002744:	3301      	adds	r3, #1
 8002746:	f003 031f 	and.w	r3, r3, #31
 800274a:	2b09      	cmp	r3, #9
 800274c:	bf94      	ite	ls
 800274e:	2301      	movls	r3, #1
 8002750:	2300      	movhi	r3, #0
 8002752:	b2db      	uxtb	r3, r3
 8002754:	e019      	b.n	800278a <HAL_ADC_ConfigChannel+0x4b2>
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800275c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800275e:	fa93 f3a3 	rbit	r3, r3
 8002762:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8002764:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002766:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002768:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800276a:	2b00      	cmp	r3, #0
 800276c:	d101      	bne.n	8002772 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 800276e:	2320      	movs	r3, #32
 8002770:	e003      	b.n	800277a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002772:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002774:	fab3 f383 	clz	r3, r3
 8002778:	b2db      	uxtb	r3, r3
 800277a:	3301      	adds	r3, #1
 800277c:	f003 031f 	and.w	r3, r3, #31
 8002780:	2b09      	cmp	r3, #9
 8002782:	bf94      	ite	ls
 8002784:	2301      	movls	r3, #1
 8002786:	2300      	movhi	r3, #0
 8002788:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800278a:	2b00      	cmp	r3, #0
 800278c:	d079      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002796:	2b00      	cmp	r3, #0
 8002798:	d107      	bne.n	80027aa <HAL_ADC_ConfigChannel+0x4d2>
 800279a:	683b      	ldr	r3, [r7, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	0e9b      	lsrs	r3, r3, #26
 80027a0:	3301      	adds	r3, #1
 80027a2:	069b      	lsls	r3, r3, #26
 80027a4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027a8:	e015      	b.n	80027d6 <HAL_ADC_ConfigChannel+0x4fe>
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80027b2:	fa93 f3a3 	rbit	r3, r3
 80027b6:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80027b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80027ba:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80027bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 80027c2:	2320      	movs	r3, #32
 80027c4:	e003      	b.n	80027ce <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 80027c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80027c8:	fab3 f383 	clz	r3, r3
 80027cc:	b2db      	uxtb	r3, r3
 80027ce:	3301      	adds	r3, #1
 80027d0:	069b      	lsls	r3, r3, #26
 80027d2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d109      	bne.n	80027f6 <HAL_ADC_ConfigChannel+0x51e>
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	0e9b      	lsrs	r3, r3, #26
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 031f 	and.w	r3, r3, #31
 80027ee:	2101      	movs	r1, #1
 80027f0:	fa01 f303 	lsl.w	r3, r1, r3
 80027f4:	e017      	b.n	8002826 <HAL_ADC_ConfigChannel+0x54e>
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027fe:	fa93 f3a3 	rbit	r3, r3
 8002802:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002804:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002806:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002808:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800280a:	2b00      	cmp	r3, #0
 800280c:	d101      	bne.n	8002812 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 800280e:	2320      	movs	r3, #32
 8002810:	e003      	b.n	800281a <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002814:	fab3 f383 	clz	r3, r3
 8002818:	b2db      	uxtb	r3, r3
 800281a:	3301      	adds	r3, #1
 800281c:	f003 031f 	and.w	r3, r3, #31
 8002820:	2101      	movs	r1, #1
 8002822:	fa01 f303 	lsl.w	r3, r1, r3
 8002826:	ea42 0103 	orr.w	r1, r2, r3
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002832:	2b00      	cmp	r3, #0
 8002834:	d10a      	bne.n	800284c <HAL_ADC_ConfigChannel+0x574>
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	0e9b      	lsrs	r3, r3, #26
 800283c:	3301      	adds	r3, #1
 800283e:	f003 021f 	and.w	r2, r3, #31
 8002842:	4613      	mov	r3, r2
 8002844:	005b      	lsls	r3, r3, #1
 8002846:	4413      	add	r3, r2
 8002848:	051b      	lsls	r3, r3, #20
 800284a:	e018      	b.n	800287e <HAL_ADC_ConfigChannel+0x5a6>
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002852:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002854:	fa93 f3a3 	rbit	r3, r3
 8002858:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800285a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800285c:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 800285e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002860:	2b00      	cmp	r3, #0
 8002862:	d101      	bne.n	8002868 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002864:	2320      	movs	r3, #32
 8002866:	e003      	b.n	8002870 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002868:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800286a:	fab3 f383 	clz	r3, r3
 800286e:	b2db      	uxtb	r3, r3
 8002870:	3301      	adds	r3, #1
 8002872:	f003 021f 	and.w	r2, r3, #31
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800287e:	430b      	orrs	r3, r1
 8002880:	e081      	b.n	8002986 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800288a:	2b00      	cmp	r3, #0
 800288c:	d107      	bne.n	800289e <HAL_ADC_ConfigChannel+0x5c6>
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	0e9b      	lsrs	r3, r3, #26
 8002894:	3301      	adds	r3, #1
 8002896:	069b      	lsls	r3, r3, #26
 8002898:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800289c:	e015      	b.n	80028ca <HAL_ADC_ConfigChannel+0x5f2>
 800289e:	683b      	ldr	r3, [r7, #0]
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028a6:	fa93 f3a3 	rbit	r3, r3
 80028aa:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80028ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80028b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 80028b6:	2320      	movs	r3, #32
 80028b8:	e003      	b.n	80028c2 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 80028ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028bc:	fab3 f383 	clz	r3, r3
 80028c0:	b2db      	uxtb	r3, r3
 80028c2:	3301      	adds	r3, #1
 80028c4:	069b      	lsls	r3, r3, #26
 80028c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d109      	bne.n	80028ea <HAL_ADC_ConfigChannel+0x612>
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	0e9b      	lsrs	r3, r3, #26
 80028dc:	3301      	adds	r3, #1
 80028de:	f003 031f 	and.w	r3, r3, #31
 80028e2:	2101      	movs	r1, #1
 80028e4:	fa01 f303 	lsl.w	r3, r1, r3
 80028e8:	e017      	b.n	800291a <HAL_ADC_ConfigChannel+0x642>
 80028ea:	683b      	ldr	r3, [r7, #0]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028f0:	6a3b      	ldr	r3, [r7, #32]
 80028f2:	fa93 f3a3 	rbit	r3, r3
 80028f6:	61fb      	str	r3, [r7, #28]
  return result;
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80028fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d101      	bne.n	8002906 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002902:	2320      	movs	r3, #32
 8002904:	e003      	b.n	800290e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002906:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002908:	fab3 f383 	clz	r3, r3
 800290c:	b2db      	uxtb	r3, r3
 800290e:	3301      	adds	r3, #1
 8002910:	f003 031f 	and.w	r3, r3, #31
 8002914:	2101      	movs	r1, #1
 8002916:	fa01 f303 	lsl.w	r3, r1, r3
 800291a:	ea42 0103 	orr.w	r1, r2, r3
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002926:	2b00      	cmp	r3, #0
 8002928:	d10d      	bne.n	8002946 <HAL_ADC_ConfigChannel+0x66e>
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	0e9b      	lsrs	r3, r3, #26
 8002930:	3301      	adds	r3, #1
 8002932:	f003 021f 	and.w	r2, r3, #31
 8002936:	4613      	mov	r3, r2
 8002938:	005b      	lsls	r3, r3, #1
 800293a:	4413      	add	r3, r2
 800293c:	3b1e      	subs	r3, #30
 800293e:	051b      	lsls	r3, r3, #20
 8002940:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002944:	e01e      	b.n	8002984 <HAL_ADC_ConfigChannel+0x6ac>
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800294c:	697b      	ldr	r3, [r7, #20]
 800294e:	fa93 f3a3 	rbit	r3, r3
 8002952:	613b      	str	r3, [r7, #16]
  return result;
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002958:	69bb      	ldr	r3, [r7, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d104      	bne.n	8002968 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 800295e:	2320      	movs	r3, #32
 8002960:	e006      	b.n	8002970 <HAL_ADC_ConfigChannel+0x698>
 8002962:	bf00      	nop
 8002964:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002968:	69bb      	ldr	r3, [r7, #24]
 800296a:	fab3 f383 	clz	r3, r3
 800296e:	b2db      	uxtb	r3, r3
 8002970:	3301      	adds	r3, #1
 8002972:	f003 021f 	and.w	r2, r3, #31
 8002976:	4613      	mov	r3, r2
 8002978:	005b      	lsls	r3, r3, #1
 800297a:	4413      	add	r3, r2
 800297c:	3b1e      	subs	r3, #30
 800297e:	051b      	lsls	r3, r3, #20
 8002980:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002984:	430b      	orrs	r3, r1
 8002986:	683a      	ldr	r2, [r7, #0]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	4619      	mov	r1, r3
 800298c:	f7ff f833 	bl	80019f6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	681a      	ldr	r2, [r3, #0]
 8002994:	4b3f      	ldr	r3, [pc, #252]	; (8002a94 <HAL_ADC_ConfigChannel+0x7bc>)
 8002996:	4013      	ands	r3, r2
 8002998:	2b00      	cmp	r3, #0
 800299a:	d071      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800299c:	483e      	ldr	r0, [pc, #248]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 800299e:	f7fe ff3f 	bl	8001820 <LL_ADC_GetCommonPathInternalCh>
 80029a2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	4a3c      	ldr	r2, [pc, #240]	; (8002a9c <HAL_ADC_ConfigChannel+0x7c4>)
 80029ac:	4293      	cmp	r3, r2
 80029ae:	d004      	beq.n	80029ba <HAL_ADC_ConfigChannel+0x6e2>
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a3a      	ldr	r2, [pc, #232]	; (8002aa0 <HAL_ADC_ConfigChannel+0x7c8>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d127      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80029ba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029be:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d121      	bne.n	8002a0a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029ce:	d157      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80029d0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80029d4:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80029d8:	4619      	mov	r1, r3
 80029da:	482f      	ldr	r0, [pc, #188]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 80029dc:	f7fe ff0d 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80029e0:	4b30      	ldr	r3, [pc, #192]	; (8002aa4 <HAL_ADC_ConfigChannel+0x7cc>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	099b      	lsrs	r3, r3, #6
 80029e6:	4a30      	ldr	r2, [pc, #192]	; (8002aa8 <HAL_ADC_ConfigChannel+0x7d0>)
 80029e8:	fba2 2303 	umull	r2, r3, r2, r3
 80029ec:	099b      	lsrs	r3, r3, #6
 80029ee:	1c5a      	adds	r2, r3, #1
 80029f0:	4613      	mov	r3, r2
 80029f2:	005b      	lsls	r3, r3, #1
 80029f4:	4413      	add	r3, r2
 80029f6:	009b      	lsls	r3, r3, #2
 80029f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80029fa:	e002      	b.n	8002a02 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3b01      	subs	r3, #1
 8002a00:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d1f9      	bne.n	80029fc <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002a08:	e03a      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a27      	ldr	r2, [pc, #156]	; (8002aac <HAL_ADC_ConfigChannel+0x7d4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d113      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x764>
 8002a14:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a18:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d10d      	bne.n	8002a3c <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a22      	ldr	r2, [pc, #136]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d02a      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002a32:	4619      	mov	r1, r3
 8002a34:	4818      	ldr	r0, [pc, #96]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a36:	f7fe fee0 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002a3a:	e021      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a1c      	ldr	r2, [pc, #112]	; (8002ab4 <HAL_ADC_ConfigChannel+0x7dc>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d11c      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002a46:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d116      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a16      	ldr	r2, [pc, #88]	; (8002ab0 <HAL_ADC_ConfigChannel+0x7d8>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d011      	beq.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002a5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002a60:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a64:	4619      	mov	r1, r3
 8002a66:	480c      	ldr	r0, [pc, #48]	; (8002a98 <HAL_ADC_ConfigChannel+0x7c0>)
 8002a68:	f7fe fec7 	bl	80017fa <LL_ADC_SetCommonPathInternalCh>
 8002a6c:	e008      	b.n	8002a80 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a72:	f043 0220 	orr.w	r2, r3, #32
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002a7a:	2301      	movs	r3, #1
 8002a7c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2200      	movs	r2, #0
 8002a84:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002a88:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8002a8c:	4618      	mov	r0, r3
 8002a8e:	37d8      	adds	r7, #216	; 0xd8
 8002a90:	46bd      	mov	sp, r7
 8002a92:	bd80      	pop	{r7, pc}
 8002a94:	80080000 	.word	0x80080000
 8002a98:	50000300 	.word	0x50000300
 8002a9c:	c3210000 	.word	0xc3210000
 8002aa0:	90c00010 	.word	0x90c00010
 8002aa4:	20000000 	.word	0x20000000
 8002aa8:	053e2d63 	.word	0x053e2d63
 8002aac:	c7520000 	.word	0xc7520000
 8002ab0:	50000100 	.word	0x50000100
 8002ab4:	cb840000 	.word	0xcb840000

08002ab8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b084      	sub	sp, #16
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	f7ff f87b 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002aca:	4603      	mov	r3, r0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d14d      	bne.n	8002b6c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	689a      	ldr	r2, [r3, #8]
 8002ad6:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <ADC_Enable+0xc0>)
 8002ad8:	4013      	ands	r3, r2
 8002ada:	2b00      	cmp	r3, #0
 8002adc:	d00d      	beq.n	8002afa <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ae2:	f043 0210 	orr.w	r2, r3, #16
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002aee:	f043 0201 	orr.w	r2, r3, #1
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e039      	b.n	8002b6e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4618      	mov	r0, r3
 8002b00:	f7ff f836 	bl	8001b70 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002b04:	f7fe fe38 	bl	8001778 <HAL_GetTick>
 8002b08:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b0a:	e028      	b.n	8002b5e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4618      	mov	r0, r3
 8002b12:	f7ff f855 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002b16:	4603      	mov	r3, r0
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d104      	bne.n	8002b26 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7ff f825 	bl	8001b70 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b26:	f7fe fe27 	bl	8001778 <HAL_GetTick>
 8002b2a:	4602      	mov	r2, r0
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	1ad3      	subs	r3, r2, r3
 8002b30:	2b02      	cmp	r3, #2
 8002b32:	d914      	bls.n	8002b5e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0301 	and.w	r3, r3, #1
 8002b3e:	2b01      	cmp	r3, #1
 8002b40:	d00d      	beq.n	8002b5e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b46:	f043 0210 	orr.w	r2, r3, #16
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b52:	f043 0201 	orr.w	r2, r3, #1
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e007      	b.n	8002b6e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	f003 0301 	and.w	r3, r3, #1
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d1cf      	bne.n	8002b0c <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002b6c:	2300      	movs	r3, #0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3710      	adds	r7, #16
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	8000003f 	.word	0x8000003f

08002b7c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	b084      	sub	sp, #16
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7ff f82c 	bl	8001be6 <LL_ADC_IsDisableOngoing>
 8002b8e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f7ff f813 	bl	8001bc0 <LL_ADC_IsEnabled>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d047      	beq.n	8002c30 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d144      	bne.n	8002c30 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 030d 	and.w	r3, r3, #13
 8002bb0:	2b01      	cmp	r3, #1
 8002bb2:	d10c      	bne.n	8002bce <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	4618      	mov	r0, r3
 8002bba:	f7fe ffed 	bl	8001b98 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	2203      	movs	r2, #3
 8002bc4:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002bc6:	f7fe fdd7 	bl	8001778 <HAL_GetTick>
 8002bca:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bcc:	e029      	b.n	8002c22 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd2:	f043 0210 	orr.w	r2, r3, #16
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002bde:	f043 0201 	orr.w	r2, r3, #1
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002be6:	2301      	movs	r3, #1
 8002be8:	e023      	b.n	8002c32 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bea:	f7fe fdc5 	bl	8001778 <HAL_GetTick>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	68bb      	ldr	r3, [r7, #8]
 8002bf2:	1ad3      	subs	r3, r2, r3
 8002bf4:	2b02      	cmp	r3, #2
 8002bf6:	d914      	bls.n	8002c22 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	689b      	ldr	r3, [r3, #8]
 8002bfe:	f003 0301 	and.w	r3, r3, #1
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d00d      	beq.n	8002c22 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c0a:	f043 0210 	orr.w	r2, r3, #16
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c16:	f043 0201 	orr.w	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e007      	b.n	8002c32 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d1dc      	bne.n	8002bea <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002c30:	2300      	movs	r3, #0
}
 8002c32:	4618      	mov	r0, r3
 8002c34:	3710      	adds	r7, #16
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bd80      	pop	{r7, pc}

08002c3a <LL_ADC_IsEnabled>:
{
 8002c3a:	b480      	push	{r7}
 8002c3c:	b083      	sub	sp, #12
 8002c3e:	af00      	add	r7, sp, #0
 8002c40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	689b      	ldr	r3, [r3, #8]
 8002c46:	f003 0301 	and.w	r3, r3, #1
 8002c4a:	2b01      	cmp	r3, #1
 8002c4c:	d101      	bne.n	8002c52 <LL_ADC_IsEnabled+0x18>
 8002c4e:	2301      	movs	r3, #1
 8002c50:	e000      	b.n	8002c54 <LL_ADC_IsEnabled+0x1a>
 8002c52:	2300      	movs	r3, #0
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	370c      	adds	r7, #12
 8002c58:	46bd      	mov	sp, r7
 8002c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5e:	4770      	bx	lr

08002c60 <LL_ADC_StartCalibration>:
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	689b      	ldr	r3, [r3, #8]
 8002c6e:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002c72:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c76:	683a      	ldr	r2, [r7, #0]
 8002c78:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	609a      	str	r2, [r3, #8]
}
 8002c86:	bf00      	nop
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c90:	4770      	bx	lr

08002c92 <LL_ADC_IsCalibrationOnGoing>:
{
 8002c92:	b480      	push	{r7}
 8002c94:	b083      	sub	sp, #12
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002ca2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002ca6:	d101      	bne.n	8002cac <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002ca8:	2301      	movs	r3, #1
 8002caa:	e000      	b.n	8002cae <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002cac:	2300      	movs	r3, #0
}
 8002cae:	4618      	mov	r0, r3
 8002cb0:	370c      	adds	r7, #12
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr

08002cba <LL_ADC_REG_IsConversionOngoing>:
{
 8002cba:	b480      	push	{r7}
 8002cbc:	b083      	sub	sp, #12
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	689b      	ldr	r3, [r3, #8]
 8002cc6:	f003 0304 	and.w	r3, r3, #4
 8002cca:	2b04      	cmp	r3, #4
 8002ccc:	d101      	bne.n	8002cd2 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e000      	b.n	8002cd4 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002cd2:	2300      	movs	r3, #0
}
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	370c      	adds	r7, #12
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	b084      	sub	sp, #16
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <HAL_ADCEx_Calibration_Start+0x1c>
 8002cf8:	2302      	movs	r3, #2
 8002cfa:	e04d      	b.n	8002d98 <HAL_ADCEx_Calibration_Start+0xb8>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002d04:	6878      	ldr	r0, [r7, #4]
 8002d06:	f7ff ff39 	bl	8002b7c <ADC_Disable>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002d0e:	7bfb      	ldrb	r3, [r7, #15]
 8002d10:	2b00      	cmp	r3, #0
 8002d12:	d136      	bne.n	8002d82 <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d18:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002d1c:	f023 0302 	bic.w	r3, r3, #2
 8002d20:	f043 0202 	orr.w	r2, r3, #2
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6839      	ldr	r1, [r7, #0]
 8002d2e:	4618      	mov	r0, r3
 8002d30:	f7ff ff96 	bl	8002c60 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d34:	e014      	b.n	8002d60 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002d3c:	68bb      	ldr	r3, [r7, #8]
 8002d3e:	4a18      	ldr	r2, [pc, #96]	; (8002da0 <HAL_ADCEx_Calibration_Start+0xc0>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d90d      	bls.n	8002d60 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d48:	f023 0312 	bic.w	r3, r3, #18
 8002d4c:	f043 0210 	orr.w	r2, r3, #16
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	2200      	movs	r2, #0
 8002d58:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002d5c:	2301      	movs	r3, #1
 8002d5e:	e01b      	b.n	8002d98 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7ff ff94 	bl	8002c92 <LL_ADC_IsCalibrationOnGoing>
 8002d6a:	4603      	mov	r3, r0
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d1e2      	bne.n	8002d36 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d74:	f023 0303 	bic.w	r3, r3, #3
 8002d78:	f043 0201 	orr.w	r2, r3, #1
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002d80:	e005      	b.n	8002d8e <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002d86:	f043 0210 	orr.w	r2, r3, #16
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2200      	movs	r2, #0
 8002d92:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002d96:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	3710      	adds	r7, #16
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	bd80      	pop	{r7, pc}
 8002da0:	0004de01 	.word	0x0004de01

08002da4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b0a1      	sub	sp, #132	; 0x84
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002dba:	2b01      	cmp	r3, #1
 8002dbc:	d101      	bne.n	8002dc2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	e08b      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x136>
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	2201      	movs	r2, #1
 8002dc6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002dca:	2300      	movs	r3, #0
 8002dcc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002dce:	2300      	movs	r3, #0
 8002dd0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002dda:	d102      	bne.n	8002de2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002ddc:	4b41      	ldr	r3, [pc, #260]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002dde:	60bb      	str	r3, [r7, #8]
 8002de0:	e001      	b.n	8002de6 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002de2:	2300      	movs	r3, #0
 8002de4:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8002de6:	68bb      	ldr	r3, [r7, #8]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d10b      	bne.n	8002e04 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df0:	f043 0220 	orr.w	r2, r3, #32
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e06a      	b.n	8002eda <HAL_ADCEx_MultiModeConfigChannel+0x136>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8002e04:	68bb      	ldr	r3, [r7, #8]
 8002e06:	4618      	mov	r0, r3
 8002e08:	f7ff ff57 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 8002e0c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f7ff ff51 	bl	8002cba <LL_ADC_REG_IsConversionOngoing>
 8002e18:	4603      	mov	r3, r0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d14c      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8002e1e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d149      	bne.n	8002eb8 <HAL_ADCEx_MultiModeConfigChannel+0x114>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002e24:	4b30      	ldr	r3, [pc, #192]	; (8002ee8 <HAL_ADCEx_MultiModeConfigChannel+0x144>)
 8002e26:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d028      	beq.n	8002e82 <HAL_ADCEx_MultiModeConfigChannel+0xde>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002e30:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e32:	689b      	ldr	r3, [r3, #8]
 8002e34:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	6859      	ldr	r1, [r3, #4]
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002e42:	035b      	lsls	r3, r3, #13
 8002e44:	430b      	orrs	r3, r1
 8002e46:	431a      	orrs	r2, r3
 8002e48:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e4a:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e4c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e50:	f7ff fef3 	bl	8002c3a <LL_ADC_IsEnabled>
 8002e54:	4604      	mov	r4, r0
 8002e56:	4823      	ldr	r0, [pc, #140]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e58:	f7ff feef 	bl	8002c3a <LL_ADC_IsEnabled>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	4323      	orrs	r3, r4
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d133      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002e64:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002e6c:	f023 030f 	bic.w	r3, r3, #15
 8002e70:	683a      	ldr	r2, [r7, #0]
 8002e72:	6811      	ldr	r1, [r2, #0]
 8002e74:	683a      	ldr	r2, [r7, #0]
 8002e76:	6892      	ldr	r2, [r2, #8]
 8002e78:	430a      	orrs	r2, r1
 8002e7a:	431a      	orrs	r2, r3
 8002e7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e7e:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002e80:	e024      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002e82:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e84:	689b      	ldr	r3, [r3, #8]
 8002e86:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e8a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002e8c:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002e8e:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002e92:	f7ff fed2 	bl	8002c3a <LL_ADC_IsEnabled>
 8002e96:	4604      	mov	r4, r0
 8002e98:	4812      	ldr	r0, [pc, #72]	; (8002ee4 <HAL_ADCEx_MultiModeConfigChannel+0x140>)
 8002e9a:	f7ff fece 	bl	8002c3a <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	4323      	orrs	r3, r4
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d112      	bne.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ea6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002eae:	f023 030f 	bic.w	r3, r3, #15
 8002eb2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002eb4:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002eb6:	e009      	b.n	8002ecc <HAL_ADCEx_MultiModeConfigChannel+0x128>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ebc:	f043 0220 	orr.w	r2, r3, #32
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002ec4:	2301      	movs	r3, #1
 8002ec6:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002eca:	e000      	b.n	8002ece <HAL_ADCEx_MultiModeConfigChannel+0x12a>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ecc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	2200      	movs	r2, #0
 8002ed2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002ed6:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002eda:	4618      	mov	r0, r3
 8002edc:	3784      	adds	r7, #132	; 0x84
 8002ede:	46bd      	mov	sp, r7
 8002ee0:	bd90      	pop	{r4, r7, pc}
 8002ee2:	bf00      	nop
 8002ee4:	50000100 	.word	0x50000100
 8002ee8:	50000300 	.word	0x50000300

08002eec <__NVIC_SetPriorityGrouping>:
{
 8002eec:	b480      	push	{r7}
 8002eee:	b085      	sub	sp, #20
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	f003 0307 	and.w	r3, r3, #7
 8002efa:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002efc:	4b0c      	ldr	r3, [pc, #48]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f02:	68ba      	ldr	r2, [r7, #8]
 8002f04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f08:	4013      	ands	r3, r2
 8002f0a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f10:	68bb      	ldr	r3, [r7, #8]
 8002f12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f1e:	4a04      	ldr	r2, [pc, #16]	; (8002f30 <__NVIC_SetPriorityGrouping+0x44>)
 8002f20:	68bb      	ldr	r3, [r7, #8]
 8002f22:	60d3      	str	r3, [r2, #12]
}
 8002f24:	bf00      	nop
 8002f26:	3714      	adds	r7, #20
 8002f28:	46bd      	mov	sp, r7
 8002f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2e:	4770      	bx	lr
 8002f30:	e000ed00 	.word	0xe000ed00

08002f34 <__NVIC_GetPriorityGrouping>:
{
 8002f34:	b480      	push	{r7}
 8002f36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002f38:	4b04      	ldr	r3, [pc, #16]	; (8002f4c <__NVIC_GetPriorityGrouping+0x18>)
 8002f3a:	68db      	ldr	r3, [r3, #12]
 8002f3c:	0a1b      	lsrs	r3, r3, #8
 8002f3e:	f003 0307 	and.w	r3, r3, #7
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	46bd      	mov	sp, r7
 8002f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f4a:	4770      	bx	lr
 8002f4c:	e000ed00 	.word	0xe000ed00

08002f50 <__NVIC_EnableIRQ>:
{
 8002f50:	b480      	push	{r7}
 8002f52:	b083      	sub	sp, #12
 8002f54:	af00      	add	r7, sp, #0
 8002f56:	4603      	mov	r3, r0
 8002f58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	db0b      	blt.n	8002f7a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f62:	79fb      	ldrb	r3, [r7, #7]
 8002f64:	f003 021f 	and.w	r2, r3, #31
 8002f68:	4907      	ldr	r1, [pc, #28]	; (8002f88 <__NVIC_EnableIRQ+0x38>)
 8002f6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f6e:	095b      	lsrs	r3, r3, #5
 8002f70:	2001      	movs	r0, #1
 8002f72:	fa00 f202 	lsl.w	r2, r0, r2
 8002f76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002f7a:	bf00      	nop
 8002f7c:	370c      	adds	r7, #12
 8002f7e:	46bd      	mov	sp, r7
 8002f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f84:	4770      	bx	lr
 8002f86:	bf00      	nop
 8002f88:	e000e100 	.word	0xe000e100

08002f8c <__NVIC_SetPriority>:
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	b083      	sub	sp, #12
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	4603      	mov	r3, r0
 8002f94:	6039      	str	r1, [r7, #0]
 8002f96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	db0a      	blt.n	8002fb6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	490c      	ldr	r1, [pc, #48]	; (8002fd8 <__NVIC_SetPriority+0x4c>)
 8002fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002faa:	0112      	lsls	r2, r2, #4
 8002fac:	b2d2      	uxtb	r2, r2
 8002fae:	440b      	add	r3, r1
 8002fb0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002fb4:	e00a      	b.n	8002fcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	b2da      	uxtb	r2, r3
 8002fba:	4908      	ldr	r1, [pc, #32]	; (8002fdc <__NVIC_SetPriority+0x50>)
 8002fbc:	79fb      	ldrb	r3, [r7, #7]
 8002fbe:	f003 030f 	and.w	r3, r3, #15
 8002fc2:	3b04      	subs	r3, #4
 8002fc4:	0112      	lsls	r2, r2, #4
 8002fc6:	b2d2      	uxtb	r2, r2
 8002fc8:	440b      	add	r3, r1
 8002fca:	761a      	strb	r2, [r3, #24]
}
 8002fcc:	bf00      	nop
 8002fce:	370c      	adds	r7, #12
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd6:	4770      	bx	lr
 8002fd8:	e000e100 	.word	0xe000e100
 8002fdc:	e000ed00 	.word	0xe000ed00

08002fe0 <NVIC_EncodePriority>:
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b089      	sub	sp, #36	; 0x24
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	60f8      	str	r0, [r7, #12]
 8002fe8:	60b9      	str	r1, [r7, #8]
 8002fea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f003 0307 	and.w	r3, r3, #7
 8002ff2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f1c3 0307 	rsb	r3, r3, #7
 8002ffa:	2b04      	cmp	r3, #4
 8002ffc:	bf28      	it	cs
 8002ffe:	2304      	movcs	r3, #4
 8003000:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003002:	69fb      	ldr	r3, [r7, #28]
 8003004:	3304      	adds	r3, #4
 8003006:	2b06      	cmp	r3, #6
 8003008:	d902      	bls.n	8003010 <NVIC_EncodePriority+0x30>
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	3b03      	subs	r3, #3
 800300e:	e000      	b.n	8003012 <NVIC_EncodePriority+0x32>
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003014:	f04f 32ff 	mov.w	r2, #4294967295
 8003018:	69bb      	ldr	r3, [r7, #24]
 800301a:	fa02 f303 	lsl.w	r3, r2, r3
 800301e:	43da      	mvns	r2, r3
 8003020:	68bb      	ldr	r3, [r7, #8]
 8003022:	401a      	ands	r2, r3
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003028:	f04f 31ff 	mov.w	r1, #4294967295
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	fa01 f303 	lsl.w	r3, r1, r3
 8003032:	43d9      	mvns	r1, r3
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003038:	4313      	orrs	r3, r2
}
 800303a:	4618      	mov	r0, r3
 800303c:	3724      	adds	r7, #36	; 0x24
 800303e:	46bd      	mov	sp, r7
 8003040:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003044:	4770      	bx	lr
	...

08003048 <SysTick_Config>:
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b082      	sub	sp, #8
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	3b01      	subs	r3, #1
 8003054:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003058:	d301      	bcc.n	800305e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800305a:	2301      	movs	r3, #1
 800305c:	e00f      	b.n	800307e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800305e:	4a0a      	ldr	r2, [pc, #40]	; (8003088 <SysTick_Config+0x40>)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	3b01      	subs	r3, #1
 8003064:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003066:	210f      	movs	r1, #15
 8003068:	f04f 30ff 	mov.w	r0, #4294967295
 800306c:	f7ff ff8e 	bl	8002f8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003070:	4b05      	ldr	r3, [pc, #20]	; (8003088 <SysTick_Config+0x40>)
 8003072:	2200      	movs	r2, #0
 8003074:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003076:	4b04      	ldr	r3, [pc, #16]	; (8003088 <SysTick_Config+0x40>)
 8003078:	2207      	movs	r2, #7
 800307a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800307c:	2300      	movs	r3, #0
}
 800307e:	4618      	mov	r0, r3
 8003080:	3708      	adds	r7, #8
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	e000e010 	.word	0xe000e010

0800308c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b082      	sub	sp, #8
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003094:	6878      	ldr	r0, [r7, #4]
 8003096:	f7ff ff29 	bl	8002eec <__NVIC_SetPriorityGrouping>
}
 800309a:	bf00      	nop
 800309c:	3708      	adds	r7, #8
 800309e:	46bd      	mov	sp, r7
 80030a0:	bd80      	pop	{r7, pc}

080030a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80030a2:	b580      	push	{r7, lr}
 80030a4:	b086      	sub	sp, #24
 80030a6:	af00      	add	r7, sp, #0
 80030a8:	4603      	mov	r3, r0
 80030aa:	60b9      	str	r1, [r7, #8]
 80030ac:	607a      	str	r2, [r7, #4]
 80030ae:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80030b0:	f7ff ff40 	bl	8002f34 <__NVIC_GetPriorityGrouping>
 80030b4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030b6:	687a      	ldr	r2, [r7, #4]
 80030b8:	68b9      	ldr	r1, [r7, #8]
 80030ba:	6978      	ldr	r0, [r7, #20]
 80030bc:	f7ff ff90 	bl	8002fe0 <NVIC_EncodePriority>
 80030c0:	4602      	mov	r2, r0
 80030c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030c6:	4611      	mov	r1, r2
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7ff ff5f 	bl	8002f8c <__NVIC_SetPriority>
}
 80030ce:	bf00      	nop
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}

080030d6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80030d6:	b580      	push	{r7, lr}
 80030d8:	b082      	sub	sp, #8
 80030da:	af00      	add	r7, sp, #0
 80030dc:	4603      	mov	r3, r0
 80030de:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7ff ff33 	bl	8002f50 <__NVIC_EnableIRQ>
}
 80030ea:	bf00      	nop
 80030ec:	3708      	adds	r7, #8
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd80      	pop	{r7, pc}

080030f2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80030fa:	6878      	ldr	r0, [r7, #4]
 80030fc:	f7ff ffa4 	bl	8003048 <SysTick_Config>
 8003100:	4603      	mov	r3, r0
}
 8003102:	4618      	mov	r0, r3
 8003104:	3708      	adds	r7, #8
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}
	...

0800310c <HAL_FDCAN_Init>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_FDCAN_Init(FDCAN_HandleTypeDef *hfdcan)
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check FDCAN handle */
  if (hfdcan == NULL)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d101      	bne.n	800311e <HAL_FDCAN_Init+0x12>
  {
    return HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	e147      	b.n	80033ae <HAL_FDCAN_Init+0x2a2>

    /* Init the low level hardware: CLOCK, NVIC */
    hfdcan->MspInitCallback(hfdcan);
  }
#else
  if (hfdcan->State == HAL_FDCAN_STATE_RESET)
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8003124:	b2db      	uxtb	r3, r3
 8003126:	2b00      	cmp	r3, #0
 8003128:	d106      	bne.n	8003138 <HAL_FDCAN_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hfdcan->Lock = HAL_UNLOCKED;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Init the low level hardware: CLOCK, NVIC */
    HAL_FDCAN_MspInit(hfdcan);
 8003132:	6878      	ldr	r0, [r7, #4]
 8003134:	f7fd faa4 	bl	8000680 <HAL_FDCAN_MspInit>
  }
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */

  /* Exit from Sleep mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CSR);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	699a      	ldr	r2, [r3, #24]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f022 0210 	bic.w	r2, r2, #16
 8003146:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003148:	f7fe fb16 	bl	8001778 <HAL_GetTick>
 800314c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode acknowledge */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 800314e:	e012      	b.n	8003176 <HAL_FDCAN_Init+0x6a>
  {
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 8003150:	f7fe fb12 	bl	8001778 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	2b0a      	cmp	r3, #10
 800315c:	d90b      	bls.n	8003176 <HAL_FDCAN_Init+0x6a>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003162:	f043 0201 	orr.w	r2, r3, #1
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2203      	movs	r2, #3
 800316e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e11b      	b.n	80033ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_CSA) == FDCAN_CCCR_CSA)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	699b      	ldr	r3, [r3, #24]
 800317c:	f003 0308 	and.w	r3, r3, #8
 8003180:	2b08      	cmp	r3, #8
 8003182:	d0e5      	beq.n	8003150 <HAL_FDCAN_Init+0x44>
    }
  }

  /* Request initialisation */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_INIT);
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	699a      	ldr	r2, [r3, #24]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f042 0201 	orr.w	r2, r2, #1
 8003192:	619a      	str	r2, [r3, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003194:	f7fe faf0 	bl	8001778 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

  /* Wait until the INIT bit into CCCR register is set */
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 800319a:	e012      	b.n	80031c2 <HAL_FDCAN_Init+0xb6>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > FDCAN_TIMEOUT_VALUE)
 800319c:	f7fe faec 	bl	8001778 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b0a      	cmp	r3, #10
 80031a8:	d90b      	bls.n	80031c2 <HAL_FDCAN_Init+0xb6>
    {
      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_TIMEOUT;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80031ae:	f043 0201 	orr.w	r2, r3, #1
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	661a      	str	r2, [r3, #96]	; 0x60

      /* Change FDCAN state */
      hfdcan->State = HAL_FDCAN_STATE_ERROR;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	2203      	movs	r2, #3
 80031ba:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80031be:	2301      	movs	r3, #1
 80031c0:	e0f5      	b.n	80033ae <HAL_FDCAN_Init+0x2a2>
  while ((hfdcan->Instance->CCCR & FDCAN_CCCR_INIT) == 0U)
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	699b      	ldr	r3, [r3, #24]
 80031c8:	f003 0301 	and.w	r3, r3, #1
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d0e5      	beq.n	800319c <HAL_FDCAN_Init+0x90>
    }
  }

  /* Enable configuration change */
  SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_CCE);
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	699a      	ldr	r2, [r3, #24]
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	f042 0202 	orr.w	r2, r2, #2
 80031de:	619a      	str	r2, [r3, #24]

  /* Check FDCAN instance */
  if (hfdcan->Instance == FDCAN1)
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a74      	ldr	r2, [pc, #464]	; (80033b8 <HAL_FDCAN_Init+0x2ac>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d103      	bne.n	80031f2 <HAL_FDCAN_Init+0xe6>
  {
    /* Configure Clock divider */
    FDCAN_CONFIG->CKDIV = hfdcan->Init.ClockDivider;
 80031ea:	4a74      	ldr	r2, [pc, #464]	; (80033bc <HAL_FDCAN_Init+0x2b0>)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	6013      	str	r3, [r2, #0]
  }

  /* Set the no automatic retransmission */
  if (hfdcan->Init.AutoRetransmission == ENABLE)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	7c1b      	ldrb	r3, [r3, #16]
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d108      	bne.n	800320c <HAL_FDCAN_Init+0x100>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699a      	ldr	r2, [r3, #24]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003208:	619a      	str	r2, [r3, #24]
 800320a:	e007      	b.n	800321c <HAL_FDCAN_Init+0x110>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_DAR);
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800321a:	619a      	str	r2, [r3, #24]
  }

  /* Set the transmit pause feature */
  if (hfdcan->Init.TransmitPause == ENABLE)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	7c5b      	ldrb	r3, [r3, #17]
 8003220:	2b01      	cmp	r3, #1
 8003222:	d108      	bne.n	8003236 <HAL_FDCAN_Init+0x12a>
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	699a      	ldr	r2, [r3, #24]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003232:	619a      	str	r2, [r3, #24]
 8003234:	e007      	b.n	8003246 <HAL_FDCAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TXP);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	699a      	ldr	r2, [r3, #24]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003244:	619a      	str	r2, [r3, #24]
  }

  /* Set the Protocol Exception Handling */
  if (hfdcan->Init.ProtocolException == ENABLE)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	7c9b      	ldrb	r3, [r3, #18]
 800324a:	2b01      	cmp	r3, #1
 800324c:	d108      	bne.n	8003260 <HAL_FDCAN_Init+0x154>
  {
    CLEAR_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	699a      	ldr	r2, [r3, #24]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800325c:	619a      	str	r2, [r3, #24]
 800325e:	e007      	b.n	8003270 <HAL_FDCAN_Init+0x164>
  }
  else
  {
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_PXHD);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	699a      	ldr	r2, [r3, #24]
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800326e:	619a      	str	r2, [r3, #24]
  }

  /* Set FDCAN Frame Format */
  MODIFY_REG(hfdcan->Instance->CCCR, FDCAN_FRAME_FD_BRS, hfdcan->Init.FrameFormat);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	699b      	ldr	r3, [r3, #24]
 8003276:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	689a      	ldr	r2, [r3, #8]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	619a      	str	r2, [r3, #24]

  /* Reset FDCAN Operation Mode */
  CLEAR_BIT(hfdcan->Instance->CCCR, (FDCAN_CCCR_TEST | FDCAN_CCCR_MON | FDCAN_CCCR_ASM));
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	699a      	ldr	r2, [r3, #24]
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f022 02a4 	bic.w	r2, r2, #164	; 0xa4
 8003294:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	691a      	ldr	r2, [r3, #16]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f022 0210 	bic.w	r2, r2, #16
 80032a4:	611a      	str	r2, [r3, #16]
     CCCR.TEST |   0    |     0      |     0      |    1     |    1
     CCCR.MON  |   0    |     0      |     1      |    1     |    0
     TEST.LBCK |   0    |     0      |     0      |    1     |    1
     CCCR.ASM  |   0    |     1      |     0      |    0     |    0
  */
  if (hfdcan->Init.Mode == FDCAN_MODE_RESTRICTED_OPERATION)
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68db      	ldr	r3, [r3, #12]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d108      	bne.n	80032c0 <HAL_FDCAN_Init+0x1b4>
  {
    /* Enable Restricted Operation mode */
    SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_ASM);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	699a      	ldr	r2, [r3, #24]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f042 0204 	orr.w	r2, r2, #4
 80032bc:	619a      	str	r2, [r3, #24]
 80032be:	e02c      	b.n	800331a <HAL_FDCAN_Init+0x20e>
  }
  else if (hfdcan->Init.Mode != FDCAN_MODE_NORMAL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	68db      	ldr	r3, [r3, #12]
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	d028      	beq.n	800331a <HAL_FDCAN_Init+0x20e>
  {
    if (hfdcan->Init.Mode != FDCAN_MODE_BUS_MONITORING)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	68db      	ldr	r3, [r3, #12]
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d01c      	beq.n	800330a <HAL_FDCAN_Init+0x1fe>
    {
      /* Enable write access to TEST register */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_TEST);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80032de:	619a      	str	r2, [r3, #24]

      /* Enable LoopBack mode */
      SET_BIT(hfdcan->Instance->TEST, FDCAN_TEST_LBCK);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	691a      	ldr	r2, [r3, #16]
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	f042 0210 	orr.w	r2, r2, #16
 80032ee:	611a      	str	r2, [r3, #16]

      if (hfdcan->Init.Mode == FDCAN_MODE_INTERNAL_LOOPBACK)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	68db      	ldr	r3, [r3, #12]
 80032f4:	2b03      	cmp	r3, #3
 80032f6:	d110      	bne.n	800331a <HAL_FDCAN_Init+0x20e>
      {
        SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	699a      	ldr	r2, [r3, #24]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f042 0220 	orr.w	r2, r2, #32
 8003306:	619a      	str	r2, [r3, #24]
 8003308:	e007      	b.n	800331a <HAL_FDCAN_Init+0x20e>
      }
    }
    else
    {
      /* Enable bus monitoring mode */
      SET_BIT(hfdcan->Instance->CCCR, FDCAN_CCCR_MON);
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	699a      	ldr	r2, [r3, #24]
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	f042 0220 	orr.w	r2, r2, #32
 8003318:	619a      	str	r2, [r3, #24]
  {
    /* Nothing to do: normal mode */
  }

  /* Set the nominal bit timing register */
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	699b      	ldr	r3, [r3, #24]
 800331e:	3b01      	subs	r3, #1
 8003320:	065a      	lsls	r2, r3, #25
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	69db      	ldr	r3, [r3, #28]
 8003326:	3b01      	subs	r3, #1
 8003328:	021b      	lsls	r3, r3, #8
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800332a:	431a      	orrs	r2, r3
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	3b01      	subs	r3, #1
                            (((uint32_t)hfdcan->Init.NominalTimeSeg1 - 1U) << FDCAN_NBTP_NTSEG1_Pos)    | \
 8003332:	ea42 0103 	orr.w	r1, r2, r3
                            (((uint32_t)hfdcan->Init.NominalPrescaler - 1U) << FDCAN_NBTP_NBRP_Pos));
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	695b      	ldr	r3, [r3, #20]
 800333a:	3b01      	subs	r3, #1
 800333c:	041a      	lsls	r2, r3, #16
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
                            (((uint32_t)hfdcan->Init.NominalTimeSeg2 - 1U) << FDCAN_NBTP_NTSEG2_Pos)    | \
 8003342:	430a      	orrs	r2, r1
  hfdcan->Instance->NBTP = ((((uint32_t)hfdcan->Init.NominalSyncJumpWidth - 1U) << FDCAN_NBTP_NSJW_Pos) | \
 8003344:	61da      	str	r2, [r3, #28]

  /* If FD operation with BRS is selected, set the data bit timing register */
  if (hfdcan->Init.FrameFormat == FDCAN_FRAME_FD_BRS)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	689b      	ldr	r3, [r3, #8]
 800334a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800334e:	d115      	bne.n	800337c <HAL_FDCAN_Init+0x270>
  {
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003354:	1e5a      	subs	r2, r3, #1
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800335a:	3b01      	subs	r3, #1
 800335c:	021b      	lsls	r3, r3, #8
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800335e:	431a      	orrs	r2, r3
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003364:	3b01      	subs	r3, #1
 8003366:	011b      	lsls	r3, r3, #4
                              (((uint32_t)hfdcan->Init.DataTimeSeg1 - 1U) << FDCAN_DBTP_DTSEG1_Pos)     | \
 8003368:	ea42 0103 	orr.w	r1, r2, r3
                              (((uint32_t)hfdcan->Init.DataPrescaler - 1U) << FDCAN_DBTP_DBRP_Pos));
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	3b01      	subs	r3, #1
 8003372:	041a      	lsls	r2, r3, #16
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
                              (((uint32_t)hfdcan->Init.DataTimeSeg2 - 1U) << FDCAN_DBTP_DTSEG2_Pos)     | \
 8003378:	430a      	orrs	r2, r1
    hfdcan->Instance->DBTP = ((((uint32_t)hfdcan->Init.DataSyncJumpWidth - 1U) << FDCAN_DBTP_DSJW_Pos)  | \
 800337a:	60da      	str	r2, [r3, #12]
  }

  /* Select between Tx FIFO and Tx Queue operation modes */
  SET_BIT(hfdcan->Instance->TXBC, hfdcan->Init.TxFifoQueueMode);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f8d3 10c0 	ldr.w	r1, [r3, #192]	; 0xc0
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	430a      	orrs	r2, r1
 800338e:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0

  /* Calculate each RAM block address */
  FDCAN_CalcultateRamBlockAddresses(hfdcan);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9c2 	bl	800371c <FDCAN_CalcultateRamBlockAddresses>

  /* Initialize the Latest Tx request buffer index */
  hfdcan->LatestTxFifoQRequest = 0U;
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2200      	movs	r2, #0
 800339c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Initialize the error code */
  hfdcan->ErrorCode = HAL_FDCAN_ERROR_NONE;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Initialize the FDCAN state */
  hfdcan->State = HAL_FDCAN_STATE_READY;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Return function status */
  return HAL_OK;
 80033ac:	2300      	movs	r3, #0
}
 80033ae:	4618      	mov	r0, r3
 80033b0:	3710      	adds	r7, #16
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}
 80033b6:	bf00      	nop
 80033b8:	40006400 	.word	0x40006400
 80033bc:	40006500 	.word	0x40006500

080033c0 <HAL_FDCAN_IRQHandler>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval HAL status
  */
void HAL_FDCAN_IRQHandler(FDCAN_HandleTypeDef *hfdcan)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	b08a      	sub	sp, #40	; 0x28
 80033c4:	af00      	add	r7, sp, #0
 80033c6:	6078      	str	r0, [r7, #4]
  uint32_t Errors;
  uint32_t ErrorStatusITs;
  uint32_t TransmittedBuffers;
  uint32_t AbortedBuffers;

  TxEventFifoITs = hfdcan->Instance->IR & FDCAN_TX_EVENT_FIFO_MASK;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033ce:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 80033d2:	627b      	str	r3, [r7, #36]	; 0x24
  TxEventFifoITs &= hfdcan->Instance->IE;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033dc:	4013      	ands	r3, r2
 80033de:	627b      	str	r3, [r7, #36]	; 0x24
  RxFifo0ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO0_MASK;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033e6:	f003 0307 	and.w	r3, r3, #7
 80033ea:	623b      	str	r3, [r7, #32]
  RxFifo0ITs &= hfdcan->Instance->IE;
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033f2:	6a3a      	ldr	r2, [r7, #32]
 80033f4:	4013      	ands	r3, r2
 80033f6:	623b      	str	r3, [r7, #32]
  RxFifo1ITs = hfdcan->Instance->IR & FDCAN_RX_FIFO1_MASK;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80033fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003402:	61fb      	str	r3, [r7, #28]
  RxFifo1ITs &= hfdcan->Instance->IE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800340a:	69fa      	ldr	r2, [r7, #28]
 800340c:	4013      	ands	r3, r2
 800340e:	61fb      	str	r3, [r7, #28]
  Errors = hfdcan->Instance->IR & FDCAN_ERROR_MASK;
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003416:	f403 0371 	and.w	r3, r3, #15794176	; 0xf10000
 800341a:	61bb      	str	r3, [r7, #24]
  Errors &= hfdcan->Instance->IE;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003422:	69ba      	ldr	r2, [r7, #24]
 8003424:	4013      	ands	r3, r2
 8003426:	61bb      	str	r3, [r7, #24]
  ErrorStatusITs = hfdcan->Instance->IR & FDCAN_ERROR_STATUS_MASK;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800342e:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003432:	617b      	str	r3, [r7, #20]
  ErrorStatusITs &= hfdcan->Instance->IE;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	617b      	str	r3, [r7, #20]

  /* High Priority Message interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG) != 0U)
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003446:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800344a:	2b00      	cmp	r3, #0
 800344c:	d00d      	beq.n	800346a <HAL_FDCAN_IRQHandler+0xaa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RX_HIGH_PRIORITY_MSG) != 0U)
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003454:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003458:	2b00      	cmp	r3, #0
 800345a:	d006      	beq.n	800346a <HAL_FDCAN_IRQHandler+0xaa>
    {
      /* Clear the High Priority Message flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RX_HIGH_PRIORITY_MSG);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2240      	movs	r2, #64	; 0x40
 8003462:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->HighPriorityMessageCallback(hfdcan);
#else
      /* High Priority Message Callback */
      HAL_FDCAN_HighPriorityMessageCallback(hfdcan);
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f000 f939 	bl	80036dc <HAL_FDCAN_HighPriorityMessageCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Abort interrupt management **********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE) != 0U)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003470:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003474:	2b00      	cmp	r3, #0
 8003476:	d01b      	beq.n	80034b0 <HAL_FDCAN_IRQHandler+0xf0>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_ABORT_COMPLETE) != 0U)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800347e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003482:	2b00      	cmp	r3, #0
 8003484:	d014      	beq.n	80034b0 <HAL_FDCAN_IRQHandler+0xf0>
    {
      /* List of aborted monitored buffers */
      AbortedBuffers = hfdcan->Instance->TXBCF;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800348e:	613b      	str	r3, [r7, #16]
      AbortedBuffers &= hfdcan->Instance->TXBCIE;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8003498:	693a      	ldr	r2, [r7, #16]
 800349a:	4013      	ands	r3, r2
 800349c:	613b      	str	r3, [r7, #16]

      /* Clear the Transmission Cancellation flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_ABORT_COMPLETE);
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80034a6:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferAbortCallback(hfdcan, AbortedBuffers);
#else
      /* Transmission Cancellation Callback */
      HAL_FDCAN_TxBufferAbortCallback(hfdcan, AbortedBuffers);
 80034a8:	6939      	ldr	r1, [r7, #16]
 80034aa:	6878      	ldr	r0, [r7, #4]
 80034ac:	f000 f8f7 	bl	800369e <HAL_FDCAN_TxBufferAbortCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Tx event FIFO interrupts management **************************************/
  if (TxEventFifoITs != 0U)
 80034b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d007      	beq.n	80034c6 <HAL_FDCAN_IRQHandler+0x106>
  {
    /* Clear the Tx Event FIFO flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, TxEventFifoITs);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80034bc:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->TxEventFifoCallback(hfdcan, TxEventFifoITs);
#else
    /* Tx Event FIFO Callback */
    HAL_FDCAN_TxEventFifoCallback(hfdcan, TxEventFifoITs);
 80034be:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f8b6 	bl	8003632 <HAL_FDCAN_TxEventFifoCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 0 interrupts management ******************************************/
  if (RxFifo0ITs != 0U)
 80034c6:	6a3b      	ldr	r3, [r7, #32]
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d007      	beq.n	80034dc <HAL_FDCAN_IRQHandler+0x11c>
  {
    /* Clear the Rx FIFO 0 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo0ITs);
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	6a3a      	ldr	r2, [r7, #32]
 80034d2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo0Callback(hfdcan, RxFifo0ITs);
#else
    /* Rx FIFO 0 Callback */
    HAL_FDCAN_RxFifo0Callback(hfdcan, RxFifo0ITs);
 80034d4:	6a39      	ldr	r1, [r7, #32]
 80034d6:	6878      	ldr	r0, [r7, #4]
 80034d8:	f000 f8b6 	bl	8003648 <HAL_FDCAN_RxFifo0Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Rx FIFO 1 interrupts management ******************************************/
  if (RxFifo1ITs != 0U)
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d007      	beq.n	80034f2 <HAL_FDCAN_IRQHandler+0x132>
  {
    /* Clear the Rx FIFO 1 flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, RxFifo1ITs);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	69fa      	ldr	r2, [r7, #28]
 80034e8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->RxFifo1Callback(hfdcan, RxFifo1ITs);
#else
    /* Rx FIFO 1 Callback */
    HAL_FDCAN_RxFifo1Callback(hfdcan, RxFifo1ITs);
 80034ea:	69f9      	ldr	r1, [r7, #28]
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 f8b6 	bl	800365e <HAL_FDCAN_RxFifo1Callback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Tx FIFO empty interrupt management ***************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY) != 0U)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80034f8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d00e      	beq.n	800351e <HAL_FDCAN_IRQHandler+0x15e>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_FIFO_EMPTY) != 0U)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003506:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800350a:	2b00      	cmp	r3, #0
 800350c:	d007      	beq.n	800351e <HAL_FDCAN_IRQHandler+0x15e>
    {
      /* Clear the Tx FIFO empty flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_FIFO_EMPTY);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003516:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxFifoEmptyCallback(hfdcan);
#else
      /* Tx FIFO empty Callback */
      HAL_FDCAN_TxFifoEmptyCallback(hfdcan);
 8003518:	6878      	ldr	r0, [r7, #4]
 800351a:	f000 f8ab 	bl	8003674 <HAL_FDCAN_TxFifoEmptyCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Transmission Complete interrupt management *******************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE) != 0U)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003524:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003528:	2b00      	cmp	r3, #0
 800352a:	d01a      	beq.n	8003562 <HAL_FDCAN_IRQHandler+0x1a2>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TX_COMPLETE) != 0U)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003532:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003536:	2b00      	cmp	r3, #0
 8003538:	d013      	beq.n	8003562 <HAL_FDCAN_IRQHandler+0x1a2>
    {
      /* List of transmitted monitored buffers */
      TransmittedBuffers = hfdcan->Instance->TXBTO;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	; 0xd4
 8003542:	60fb      	str	r3, [r7, #12]
      TransmittedBuffers &= hfdcan->Instance->TXBTIE;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f8d3 30dc 	ldr.w	r3, [r3, #220]	; 0xdc
 800354c:	68fa      	ldr	r2, [r7, #12]
 800354e:	4013      	ands	r3, r2
 8003550:	60fb      	str	r3, [r7, #12]

      /* Clear the Transmission Complete flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TX_COMPLETE);
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	2280      	movs	r2, #128	; 0x80
 8003558:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
#else
      /* Transmission Complete Callback */
      HAL_FDCAN_TxBufferCompleteCallback(hfdcan, TransmittedBuffers);
 800355a:	68f9      	ldr	r1, [r7, #12]
 800355c:	6878      	ldr	r0, [r7, #4]
 800355e:	f000 f893 	bl	8003688 <HAL_FDCAN_TxBufferCompleteCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timestamp Wraparound interrupt management ********************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND) != 0U)
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800356c:	2b00      	cmp	r3, #0
 800356e:	d00e      	beq.n	800358e <HAL_FDCAN_IRQHandler+0x1ce>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMESTAMP_WRAPAROUND) != 0U)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003576:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800357a:	2b00      	cmp	r3, #0
 800357c:	d007      	beq.n	800358e <HAL_FDCAN_IRQHandler+0x1ce>
    {
      /* Clear the Timestamp Wraparound flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMESTAMP_WRAPAROUND);
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003586:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimestampWraparoundCallback(hfdcan);
#else
      /* Timestamp Wraparound Callback */
      HAL_FDCAN_TimestampWraparoundCallback(hfdcan);
 8003588:	6878      	ldr	r0, [r7, #4]
 800358a:	f000 f893 	bl	80036b4 <HAL_FDCAN_TimestampWraparoundCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Timeout Occurred interrupt management ************************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED) != 0U)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003594:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003598:	2b00      	cmp	r3, #0
 800359a:	d00e      	beq.n	80035ba <HAL_FDCAN_IRQHandler+0x1fa>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_TIMEOUT_OCCURRED) != 0U)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d007      	beq.n	80035ba <HAL_FDCAN_IRQHandler+0x1fa>
    {
      /* Clear the Timeout Occurred flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_TIMEOUT_OCCURRED);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80035b2:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hfdcan->TimeoutOccurredCallback(hfdcan);
#else
      /* Timeout Occurred Callback */
      HAL_FDCAN_TimeoutOccurredCallback(hfdcan);
 80035b4:	6878      	ldr	r0, [r7, #4]
 80035b6:	f000 f887 	bl	80036c8 <HAL_FDCAN_TimeoutOccurredCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
    }
  }

  /* Message RAM access failure interrupt management **************************/
  if (__HAL_FDCAN_GET_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE) != 0U)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80035c0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d011      	beq.n	80035ec <HAL_FDCAN_IRQHandler+0x22c>
  {
    if (__HAL_FDCAN_GET_IT_SOURCE(hfdcan, FDCAN_IT_RAM_ACCESS_FAILURE) != 0U)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d00a      	beq.n	80035ec <HAL_FDCAN_IRQHandler+0x22c>
    {
      /* Clear the Message RAM access failure flag */
      __HAL_FDCAN_CLEAR_FLAG(hfdcan, FDCAN_FLAG_RAM_ACCESS_FAILURE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80035de:	651a      	str	r2, [r3, #80]	; 0x50

      /* Update error code */
      hfdcan->ErrorCode |= HAL_FDCAN_ERROR_RAM_ACCESS;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035e4:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }

  /* Error Status interrupts management ***************************************/
  if (ErrorStatusITs != 0U)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d007      	beq.n	8003602 <HAL_FDCAN_IRQHandler+0x242>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, ErrorStatusITs);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	651a      	str	r2, [r3, #80]	; 0x50
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorStatusCallback(hfdcan, ErrorStatusITs);
#else
    /* Error Status Callback */
    HAL_FDCAN_ErrorStatusCallback(hfdcan, ErrorStatusITs);
 80035fa:	6979      	ldr	r1, [r7, #20]
 80035fc:	6878      	ldr	r0, [r7, #4]
 80035fe:	f000 f881 	bl	8003704 <HAL_FDCAN_ErrorStatusCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }

  /* Error interrupts management **********************************************/
  if (Errors != 0U)
 8003602:	69bb      	ldr	r3, [r7, #24]
 8003604:	2b00      	cmp	r3, #0
 8003606:	d009      	beq.n	800361c <HAL_FDCAN_IRQHandler+0x25c>
  {
    /* Clear the Error flags */
    __HAL_FDCAN_CLEAR_FLAG(hfdcan, Errors);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	69ba      	ldr	r2, [r7, #24]
 800360e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Update error code */
    hfdcan->ErrorCode |= Errors;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003614:	69bb      	ldr	r3, [r7, #24]
 8003616:	431a      	orrs	r2, r3
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  if (hfdcan->ErrorCode != HAL_FDCAN_ERROR_NONE)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003620:	2b00      	cmp	r3, #0
 8003622:	d002      	beq.n	800362a <HAL_FDCAN_IRQHandler+0x26a>
#if USE_HAL_FDCAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hfdcan->ErrorCallback(hfdcan);
#else
    /* Error Callback */
    HAL_FDCAN_ErrorCallback(hfdcan);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f863 	bl	80036f0 <HAL_FDCAN_ErrorCallback>
#endif /* USE_HAL_FDCAN_REGISTER_CALLBACKS */
  }
}
 800362a:	bf00      	nop
 800362c:	3728      	adds	r7, #40	; 0x28
 800362e:	46bd      	mov	sp, r7
 8003630:	bd80      	pop	{r7, pc}

08003632 <HAL_FDCAN_TxEventFifoCallback>:
  * @param  TxEventFifoITs indicates which Tx Event FIFO interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Tx_Event_Fifo_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_TxEventFifoCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t TxEventFifoITs)
{
 8003632:	b480      	push	{r7}
 8003634:	b083      	sub	sp, #12
 8003636:	af00      	add	r7, sp, #0
 8003638:	6078      	str	r0, [r7, #4]
 800363a:	6039      	str	r1, [r7, #0]
  UNUSED(TxEventFifoITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxEventFifoCallback could be implemented in the user file
   */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_FDCAN_RxFifo0Callback>:
  * @param  RxFifo0ITs indicates which Rx FIFO 0 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo0_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo0Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo0ITs)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
 8003650:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo0ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo0Callback could be implemented in the user file
   */
}
 8003652:	bf00      	nop
 8003654:	370c      	adds	r7, #12
 8003656:	46bd      	mov	sp, r7
 8003658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365c:	4770      	bx	lr

0800365e <HAL_FDCAN_RxFifo1Callback>:
  * @param  RxFifo1ITs indicates which Rx FIFO 1 interrupts are signalled.
  *         This parameter can be any combination of @arg FDCAN_Rx_Fifo1_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_RxFifo1Callback(FDCAN_HandleTypeDef *hfdcan, uint32_t RxFifo1ITs)
{
 800365e:	b480      	push	{r7}
 8003660:	b083      	sub	sp, #12
 8003662:	af00      	add	r7, sp, #0
 8003664:	6078      	str	r0, [r7, #4]
 8003666:	6039      	str	r1, [r7, #0]
  UNUSED(RxFifo1ITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_RxFifo1Callback could be implemented in the user file
   */
}
 8003668:	bf00      	nop
 800366a:	370c      	adds	r7, #12
 800366c:	46bd      	mov	sp, r7
 800366e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003672:	4770      	bx	lr

08003674 <HAL_FDCAN_TxFifoEmptyCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TxFifoEmptyCallback(FDCAN_HandleTypeDef *hfdcan)
{
 8003674:	b480      	push	{r7}
 8003676:	b083      	sub	sp, #12
 8003678:	af00      	add	r7, sp, #0
 800367a:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxFifoEmptyCallback could be implemented in the user file
   */
}
 800367c:	bf00      	nop
 800367e:	370c      	adds	r7, #12
 8003680:	46bd      	mov	sp, r7
 8003682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003686:	4770      	bx	lr

08003688 <HAL_FDCAN_TxBufferCompleteCallback>:
  * @param  BufferIndexes Indexes of the transmitted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferCompleteCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 8003688:	b480      	push	{r7}
 800368a:	b083      	sub	sp, #12
 800368c:	af00      	add	r7, sp, #0
 800368e:	6078      	str	r0, [r7, #4]
 8003690:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferCompleteCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_FDCAN_TxBufferAbortCallback>:
  * @param  BufferIndexes Indexes of the aborted buffers.
  *         This parameter can be any combination of @arg FDCAN_Tx_location.
  * @retval None
  */
__weak void HAL_FDCAN_TxBufferAbortCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t BufferIndexes)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
 80036a6:	6039      	str	r1, [r7, #0]
  UNUSED(BufferIndexes);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TxBufferAbortCallback could be implemented in the user file
   */
}
 80036a8:	bf00      	nop
 80036aa:	370c      	adds	r7, #12
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_FDCAN_TimestampWraparoundCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimestampWraparoundCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimestampWraparoundCallback could be implemented in the user file
   */
}
 80036bc:	bf00      	nop
 80036be:	370c      	adds	r7, #12
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr

080036c8 <HAL_FDCAN_TimeoutOccurredCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_TimeoutOccurredCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b083      	sub	sp, #12
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_TimeoutOccurredCallback could be implemented in the user file
   */
}
 80036d0:	bf00      	nop
 80036d2:	370c      	adds	r7, #12
 80036d4:	46bd      	mov	sp, r7
 80036d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036da:	4770      	bx	lr

080036dc <HAL_FDCAN_HighPriorityMessageCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_HighPriorityMessageCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036dc:	b480      	push	{r7}
 80036de:	b083      	sub	sp, #12
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_HighPriorityMessageCallback could be implemented in the user file
   */
}
 80036e4:	bf00      	nop
 80036e6:	370c      	adds	r7, #12
 80036e8:	46bd      	mov	sp, r7
 80036ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ee:	4770      	bx	lr

080036f0 <HAL_FDCAN_ErrorCallback>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorCallback(FDCAN_HandleTypeDef *hfdcan)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  UNUSED(hfdcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorCallback could be implemented in the user file
   */
}
 80036f8:	bf00      	nop
 80036fa:	370c      	adds	r7, #12
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <HAL_FDCAN_ErrorStatusCallback>:
  * @param  ErrorStatusITs indicates which Error Status interrupts are signaled.
  *         This parameter can be any combination of @arg FDCAN_Error_Status_Interrupts.
  * @retval None
  */
__weak void HAL_FDCAN_ErrorStatusCallback(FDCAN_HandleTypeDef *hfdcan, uint32_t ErrorStatusITs)
{
 8003704:	b480      	push	{r7}
 8003706:	b083      	sub	sp, #12
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
 800370c:	6039      	str	r1, [r7, #0]
  UNUSED(ErrorStatusITs);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_FDCAN_ErrorStatusCallback could be implemented in the user file
   */
}
 800370e:	bf00      	nop
 8003710:	370c      	adds	r7, #12
 8003712:	46bd      	mov	sp, r7
 8003714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003718:	4770      	bx	lr
	...

0800371c <FDCAN_CalcultateRamBlockAddresses>:
  * @param  hfdcan pointer to an FDCAN_HandleTypeDef structure that contains
  *         the configuration information for the specified FDCAN.
  * @retval none
 */
static void FDCAN_CalcultateRamBlockAddresses(FDCAN_HandleTypeDef *hfdcan)
{
 800371c:	b480      	push	{r7}
 800371e:	b085      	sub	sp, #20
 8003720:	af00      	add	r7, sp, #0
 8003722:	6078      	str	r0, [r7, #4]
  uint32_t RAMcounter;
  uint32_t SramCanInstanceBase = SRAMCAN_BASE;
 8003724:	4b27      	ldr	r3, [pc, #156]	; (80037c4 <FDCAN_CalcultateRamBlockAddresses+0xa8>)
 8003726:	60bb      	str	r3, [r7, #8]
    SramCanInstanceBase += SRAMCAN_SIZE * 2U;
  }
#endif /* FDCAN3 */

  /* Standard filter list start address */
  hfdcan->msgRam.StandardFilterSA = SramCanInstanceBase + SRAMCAN_FLSSA;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	68ba      	ldr	r2, [r7, #8]
 800372c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Standard filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSS, (hfdcan->Init.StdFiltersNbr << FDCAN_RXGFC_LSS_Pos));
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003736:	f423 11f8 	bic.w	r1, r3, #2031616	; 0x1f0000
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800373e:	041a      	lsls	r2, r3, #16
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	430a      	orrs	r2, r1
 8003746:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Extended filter list start address */
  hfdcan->msgRam.ExtendedFilterSA = SramCanInstanceBase + SRAMCAN_FLESA;
 800374a:	68bb      	ldr	r3, [r7, #8]
 800374c:	f103 0270 	add.w	r2, r3, #112	; 0x70
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	645a      	str	r2, [r3, #68]	; 0x44

  /* Extended filter elements number */
  MODIFY_REG(hfdcan->Instance->RXGFC, FDCAN_RXGFC_LSE, (hfdcan->Init.ExtFiltersNbr << FDCAN_RXGFC_LSE_Pos));
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800375c:	f023 6170 	bic.w	r1, r3, #251658240	; 0xf000000
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003764:	061a      	lsls	r2, r3, #24
 8003766:	687b      	ldr	r3, [r7, #4]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	430a      	orrs	r2, r1
 800376c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Rx FIFO 0 start address */
  hfdcan->msgRam.RxFIFO0SA = SramCanInstanceBase + SRAMCAN_RF0SA;
 8003770:	68bb      	ldr	r3, [r7, #8]
 8003772:	f103 02b0 	add.w	r2, r3, #176	; 0xb0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	649a      	str	r2, [r3, #72]	; 0x48

  /* Rx FIFO 1 start address */
  hfdcan->msgRam.RxFIFO1SA = SramCanInstanceBase + SRAMCAN_RF1SA;
 800377a:	68bb      	ldr	r3, [r7, #8]
 800377c:	f503 72c4 	add.w	r2, r3, #392	; 0x188
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Tx event FIFO start address */
  hfdcan->msgRam.TxEventFIFOSA = SramCanInstanceBase + SRAMCAN_TEFSA;
 8003784:	68bb      	ldr	r3, [r7, #8]
 8003786:	f503 7218 	add.w	r2, r3, #608	; 0x260
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Tx FIFO/queue start address */
  hfdcan->msgRam.TxFIFOQSA = SramCanInstanceBase + SRAMCAN_TFQSA;
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	f503 721e 	add.w	r2, r3, #632	; 0x278
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	655a      	str	r2, [r3, #84]	; 0x54

  /* Flush the allocated Message RAM area */
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 8003798:	68bb      	ldr	r3, [r7, #8]
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e005      	b.n	80037aa <FDCAN_CalcultateRamBlockAddresses+0x8e>
  {
    *(uint32_t *)(RAMcounter) = 0x00000000U;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]
  for (RAMcounter = SramCanInstanceBase; RAMcounter < (SramCanInstanceBase + SRAMCAN_SIZE); RAMcounter += 4U)
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3304      	adds	r3, #4
 80037a8:	60fb      	str	r3, [r7, #12]
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	f503 7354 	add.w	r3, r3, #848	; 0x350
 80037b0:	68fa      	ldr	r2, [r7, #12]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	d3f3      	bcc.n	800379e <FDCAN_CalcultateRamBlockAddresses+0x82>
  }
}
 80037b6:	bf00      	nop
 80037b8:	bf00      	nop
 80037ba:	3714      	adds	r7, #20
 80037bc:	46bd      	mov	sp, r7
 80037be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037c2:	4770      	bx	lr
 80037c4:	4000a400 	.word	0x4000a400

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037d6:	e15a      	b.n	8003a8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 814c 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d005      	beq.n	8003808 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003804:	2b02      	cmp	r3, #2
 8003806:	d130      	bne.n	800386a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383e:	2201      	movs	r2, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0201 	and.w	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d017      	beq.n	80038a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a6 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393c:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6613      	str	r3, [r2, #96]	; 0x60
 8003948:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800397e:	d01f      	beq.n	80039c0 <HAL_GPIO_Init+0x1f8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a4c      	ldr	r2, [pc, #304]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d019      	beq.n	80039bc <HAL_GPIO_Init+0x1f4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a4b      	ldr	r2, [pc, #300]	; (8003ab8 <HAL_GPIO_Init+0x2f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x1f0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <HAL_GPIO_Init+0x2f4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a49      	ldr	r2, [pc, #292]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a48      	ldr	r2, [pc, #288]	; (8003ac4 <HAL_GPIO_Init+0x2fc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_Init+0x1e4>
 80039a8:	2305      	movs	r3, #5
 80039aa:	e00a      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039ac:	2306      	movs	r3, #6
 80039ae:	e008      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039c0:	2300      	movs	r3, #0
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d2:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a04:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a2e:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f ae9d 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000c00 	.word	0x48000c00
 8003ac0:	48001000 	.word	0x48001000
 8003ac4:	48001400 	.word	0x48001400
 8003ac8:	40010400 	.word	0x40010400

08003acc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b085      	sub	sp, #20
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	691a      	ldr	r2, [r3, #16]
 8003adc:	887b      	ldrh	r3, [r7, #2]
 8003ade:	4013      	ands	r3, r2
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d002      	beq.n	8003aea <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ae4:	2301      	movs	r3, #1
 8003ae6:	73fb      	strb	r3, [r7, #15]
 8003ae8:	e001      	b.n	8003aee <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003aea:	2300      	movs	r3, #0
 8003aec:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	3714      	adds	r7, #20
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b083      	sub	sp, #12
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
 8003b04:	460b      	mov	r3, r1
 8003b06:	807b      	strh	r3, [r7, #2]
 8003b08:	4613      	mov	r3, r2
 8003b0a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003b0c:	787b      	ldrb	r3, [r7, #1]
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d003      	beq.n	8003b1a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003b12:	887a      	ldrh	r2, [r7, #2]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003b18:	e002      	b.n	8003b20 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003b1a:	887a      	ldrh	r2, [r7, #2]
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003b20:	bf00      	nop
 8003b22:	370c      	adds	r7, #12
 8003b24:	46bd      	mov	sp, r7
 8003b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2a:	4770      	bx	lr

08003b2c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b082      	sub	sp, #8
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b36:	4b08      	ldr	r3, [pc, #32]	; (8003b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b38:	695a      	ldr	r2, [r3, #20]
 8003b3a:	88fb      	ldrh	r3, [r7, #6]
 8003b3c:	4013      	ands	r3, r2
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d006      	beq.n	8003b50 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b42:	4a05      	ldr	r2, [pc, #20]	; (8003b58 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b44:	88fb      	ldrh	r3, [r7, #6]
 8003b46:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b48:	88fb      	ldrh	r3, [r7, #6]
 8003b4a:	4618      	mov	r0, r3
 8003b4c:	f000 f806 	bl	8003b5c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b50:	bf00      	nop
 8003b52:	3708      	adds	r7, #8
 8003b54:	46bd      	mov	sp, r7
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40010400 	.word	0x40010400

08003b5c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	4603      	mov	r3, r0
 8003b64:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b66:	bf00      	nop
 8003b68:	370c      	adds	r7, #12
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b70:	4770      	bx	lr
	...

08003b74 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b085      	sub	sp, #20
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d141      	bne.n	8003c06 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b82:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b8e:	d131      	bne.n	8003bf4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b90:	4b47      	ldr	r3, [pc, #284]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b96:	4a46      	ldr	r2, [pc, #280]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b9c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003ba0:	4b43      	ldr	r3, [pc, #268]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003ba8:	4a41      	ldr	r2, [pc, #260]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003baa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003bae:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bb0:	4b40      	ldr	r3, [pc, #256]	; (8003cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	2232      	movs	r2, #50	; 0x32
 8003bb6:	fb02 f303 	mul.w	r3, r2, r3
 8003bba:	4a3f      	ldr	r2, [pc, #252]	; (8003cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003bbc:	fba2 2303 	umull	r2, r3, r2, r3
 8003bc0:	0c9b      	lsrs	r3, r3, #18
 8003bc2:	3301      	adds	r3, #1
 8003bc4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bc6:	e002      	b.n	8003bce <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	3b01      	subs	r3, #1
 8003bcc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003bce:	4b38      	ldr	r3, [pc, #224]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bda:	d102      	bne.n	8003be2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d1f2      	bne.n	8003bc8 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003be2:	4b33      	ldr	r3, [pc, #204]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be4:	695b      	ldr	r3, [r3, #20]
 8003be6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bee:	d158      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e057      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bf4:	4b2e      	ldr	r3, [pc, #184]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bfa:	4a2d      	ldr	r2, [pc, #180]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003c00:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c04:	e04d      	b.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003c0c:	d141      	bne.n	8003c92 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c0e:	4b28      	ldr	r3, [pc, #160]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003c16:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c1a:	d131      	bne.n	8003c80 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c1c:	4b24      	ldr	r3, [pc, #144]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c22:	4a23      	ldr	r2, [pc, #140]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c24:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c28:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c2c:	4b20      	ldr	r3, [pc, #128]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c34:	4a1e      	ldr	r2, [pc, #120]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c3a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c3c:	4b1d      	ldr	r3, [pc, #116]	; (8003cb4 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	2232      	movs	r2, #50	; 0x32
 8003c42:	fb02 f303 	mul.w	r3, r2, r3
 8003c46:	4a1c      	ldr	r2, [pc, #112]	; (8003cb8 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c48:	fba2 2303 	umull	r2, r3, r2, r3
 8003c4c:	0c9b      	lsrs	r3, r3, #18
 8003c4e:	3301      	adds	r3, #1
 8003c50:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c52:	e002      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	3b01      	subs	r3, #1
 8003c58:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c5a:	4b15      	ldr	r3, [pc, #84]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c5c:	695b      	ldr	r3, [r3, #20]
 8003c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c66:	d102      	bne.n	8003c6e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2b00      	cmp	r3, #0
 8003c6c:	d1f2      	bne.n	8003c54 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c6e:	4b10      	ldr	r3, [pc, #64]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c70:	695b      	ldr	r3, [r3, #20]
 8003c72:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7a:	d112      	bne.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	e011      	b.n	8003ca4 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c80:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c82:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c90:	e007      	b.n	8003ca2 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c92:	4b07      	ldr	r3, [pc, #28]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c9a:	4a05      	ldr	r2, [pc, #20]	; (8003cb0 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ca0:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003ca2:	2300      	movs	r3, #0
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	3714      	adds	r7, #20
 8003ca8:	46bd      	mov	sp, r7
 8003caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cae:	4770      	bx	lr
 8003cb0:	40007000 	.word	0x40007000
 8003cb4:	20000000 	.word	0x20000000
 8003cb8:	431bde83 	.word	0x431bde83

08003cbc <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003cc0:	4b05      	ldr	r3, [pc, #20]	; (8003cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cc2:	689b      	ldr	r3, [r3, #8]
 8003cc4:	4a04      	ldr	r2, [pc, #16]	; (8003cd8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003cc6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003cca:	6093      	str	r3, [r2, #8]
}
 8003ccc:	bf00      	nop
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd4:	4770      	bx	lr
 8003cd6:	bf00      	nop
 8003cd8:	40007000 	.word	0x40007000

08003cdc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b088      	sub	sp, #32
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d101      	bne.n	8003cee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cea:	2301      	movs	r3, #1
 8003cec:	e308      	b.n	8004300 <HAL_RCC_OscConfig+0x624>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	f003 0301 	and.w	r3, r3, #1
 8003cf6:	2b00      	cmp	r3, #0
 8003cf8:	d075      	beq.n	8003de6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cfa:	4ba3      	ldr	r3, [pc, #652]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003cfc:	689b      	ldr	r3, [r3, #8]
 8003cfe:	f003 030c 	and.w	r3, r3, #12
 8003d02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d04:	4ba0      	ldr	r3, [pc, #640]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d06:	68db      	ldr	r3, [r3, #12]
 8003d08:	f003 0303 	and.w	r3, r3, #3
 8003d0c:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d0e:	69bb      	ldr	r3, [r7, #24]
 8003d10:	2b0c      	cmp	r3, #12
 8003d12:	d102      	bne.n	8003d1a <HAL_RCC_OscConfig+0x3e>
 8003d14:	697b      	ldr	r3, [r7, #20]
 8003d16:	2b03      	cmp	r3, #3
 8003d18:	d002      	beq.n	8003d20 <HAL_RCC_OscConfig+0x44>
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	2b08      	cmp	r3, #8
 8003d1e:	d10b      	bne.n	8003d38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d20:	4b99      	ldr	r3, [pc, #612]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d05b      	beq.n	8003de4 <HAL_RCC_OscConfig+0x108>
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	685b      	ldr	r3, [r3, #4]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d157      	bne.n	8003de4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d34:	2301      	movs	r3, #1
 8003d36:	e2e3      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d40:	d106      	bne.n	8003d50 <HAL_RCC_OscConfig+0x74>
 8003d42:	4b91      	ldr	r3, [pc, #580]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a90      	ldr	r2, [pc, #576]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d48:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	e01d      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	685b      	ldr	r3, [r3, #4]
 8003d54:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d58:	d10c      	bne.n	8003d74 <HAL_RCC_OscConfig+0x98>
 8003d5a:	4b8b      	ldr	r3, [pc, #556]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a8a      	ldr	r2, [pc, #552]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d60:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d64:	6013      	str	r3, [r2, #0]
 8003d66:	4b88      	ldr	r3, [pc, #544]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a87      	ldr	r2, [pc, #540]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d70:	6013      	str	r3, [r2, #0]
 8003d72:	e00b      	b.n	8003d8c <HAL_RCC_OscConfig+0xb0>
 8003d74:	4b84      	ldr	r3, [pc, #528]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	4a83      	ldr	r2, [pc, #524]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d7a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d7e:	6013      	str	r3, [r2, #0]
 8003d80:	4b81      	ldr	r3, [pc, #516]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	4a80      	ldr	r2, [pc, #512]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003d86:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	685b      	ldr	r3, [r3, #4]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d013      	beq.n	8003dbc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d94:	f7fd fcf0 	bl	8001778 <HAL_GetTick>
 8003d98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d9a:	e008      	b.n	8003dae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d9c:	f7fd fcec 	bl	8001778 <HAL_GetTick>
 8003da0:	4602      	mov	r2, r0
 8003da2:	693b      	ldr	r3, [r7, #16]
 8003da4:	1ad3      	subs	r3, r2, r3
 8003da6:	2b64      	cmp	r3, #100	; 0x64
 8003da8:	d901      	bls.n	8003dae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003daa:	2303      	movs	r3, #3
 8003dac:	e2a8      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dae:	4b76      	ldr	r3, [pc, #472]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d0f0      	beq.n	8003d9c <HAL_RCC_OscConfig+0xc0>
 8003dba:	e014      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dbc:	f7fd fcdc 	bl	8001778 <HAL_GetTick>
 8003dc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dc2:	e008      	b.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dc4:	f7fd fcd8 	bl	8001778 <HAL_GetTick>
 8003dc8:	4602      	mov	r2, r0
 8003dca:	693b      	ldr	r3, [r7, #16]
 8003dcc:	1ad3      	subs	r3, r2, r3
 8003dce:	2b64      	cmp	r3, #100	; 0x64
 8003dd0:	d901      	bls.n	8003dd6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dd2:	2303      	movs	r3, #3
 8003dd4:	e294      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003dd6:	4b6c      	ldr	r3, [pc, #432]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d1f0      	bne.n	8003dc4 <HAL_RCC_OscConfig+0xe8>
 8003de2:	e000      	b.n	8003de6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003de4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f003 0302 	and.w	r3, r3, #2
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d075      	beq.n	8003ede <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003df2:	4b65      	ldr	r3, [pc, #404]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003df4:	689b      	ldr	r3, [r3, #8]
 8003df6:	f003 030c 	and.w	r3, r3, #12
 8003dfa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dfc:	4b62      	ldr	r3, [pc, #392]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003dfe:	68db      	ldr	r3, [r3, #12]
 8003e00:	f003 0303 	and.w	r3, r3, #3
 8003e04:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e06:	69bb      	ldr	r3, [r7, #24]
 8003e08:	2b0c      	cmp	r3, #12
 8003e0a:	d102      	bne.n	8003e12 <HAL_RCC_OscConfig+0x136>
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	2b02      	cmp	r3, #2
 8003e10:	d002      	beq.n	8003e18 <HAL_RCC_OscConfig+0x13c>
 8003e12:	69bb      	ldr	r3, [r7, #24]
 8003e14:	2b04      	cmp	r3, #4
 8003e16:	d11f      	bne.n	8003e58 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e18:	4b5b      	ldr	r3, [pc, #364]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d005      	beq.n	8003e30 <HAL_RCC_OscConfig+0x154>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d101      	bne.n	8003e30 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	e267      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e30:	4b55      	ldr	r3, [pc, #340]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	691b      	ldr	r3, [r3, #16]
 8003e3c:	061b      	lsls	r3, r3, #24
 8003e3e:	4952      	ldr	r1, [pc, #328]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e40:	4313      	orrs	r3, r2
 8003e42:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e44:	4b51      	ldr	r3, [pc, #324]	; (8003f8c <HAL_RCC_OscConfig+0x2b0>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	4618      	mov	r0, r3
 8003e4a:	f7fd fc49 	bl	80016e0 <HAL_InitTick>
 8003e4e:	4603      	mov	r3, r0
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d043      	beq.n	8003edc <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e253      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	68db      	ldr	r3, [r3, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d023      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e60:	4b49      	ldr	r3, [pc, #292]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a48      	ldr	r2, [pc, #288]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e6a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e6c:	f7fd fc84 	bl	8001778 <HAL_GetTick>
 8003e70:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e72:	e008      	b.n	8003e86 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e74:	f7fd fc80 	bl	8001778 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	2b02      	cmp	r3, #2
 8003e80:	d901      	bls.n	8003e86 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e82:	2303      	movs	r3, #3
 8003e84:	e23c      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e86:	4b40      	ldr	r3, [pc, #256]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d0f0      	beq.n	8003e74 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e92:	4b3d      	ldr	r3, [pc, #244]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	691b      	ldr	r3, [r3, #16]
 8003e9e:	061b      	lsls	r3, r3, #24
 8003ea0:	4939      	ldr	r1, [pc, #228]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003ea2:	4313      	orrs	r3, r2
 8003ea4:	604b      	str	r3, [r1, #4]
 8003ea6:	e01a      	b.n	8003ede <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ea8:	4b37      	ldr	r3, [pc, #220]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4a36      	ldr	r2, [pc, #216]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003eae:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003eb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eb4:	f7fd fc60 	bl	8001778 <HAL_GetTick>
 8003eb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003eba:	e008      	b.n	8003ece <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ebc:	f7fd fc5c 	bl	8001778 <HAL_GetTick>
 8003ec0:	4602      	mov	r2, r0
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	2b02      	cmp	r3, #2
 8003ec8:	d901      	bls.n	8003ece <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003eca:	2303      	movs	r3, #3
 8003ecc:	e218      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003ece:	4b2e      	ldr	r3, [pc, #184]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d1f0      	bne.n	8003ebc <HAL_RCC_OscConfig+0x1e0>
 8003eda:	e000      	b.n	8003ede <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003edc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	f003 0308 	and.w	r3, r3, #8
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d03c      	beq.n	8003f64 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	695b      	ldr	r3, [r3, #20]
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d01c      	beq.n	8003f2c <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ef2:	4b25      	ldr	r3, [pc, #148]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003ef4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef8:	4a23      	ldr	r2, [pc, #140]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003efa:	f043 0301 	orr.w	r3, r3, #1
 8003efe:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f02:	f7fd fc39 	bl	8001778 <HAL_GetTick>
 8003f06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f08:	e008      	b.n	8003f1c <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f0a:	f7fd fc35 	bl	8001778 <HAL_GetTick>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	1ad3      	subs	r3, r2, r3
 8003f14:	2b02      	cmp	r3, #2
 8003f16:	d901      	bls.n	8003f1c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e1f1      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f1c:	4b1a      	ldr	r3, [pc, #104]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003f1e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d0ef      	beq.n	8003f0a <HAL_RCC_OscConfig+0x22e>
 8003f2a:	e01b      	b.n	8003f64 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f2c:	4b16      	ldr	r3, [pc, #88]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003f34:	f023 0301 	bic.w	r3, r3, #1
 8003f38:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f3c:	f7fd fc1c 	bl	8001778 <HAL_GetTick>
 8003f40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f42:	e008      	b.n	8003f56 <HAL_RCC_OscConfig+0x27a>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f44:	f7fd fc18 	bl	8001778 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	693b      	ldr	r3, [r7, #16]
 8003f4c:	1ad3      	subs	r3, r2, r3
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d901      	bls.n	8003f56 <HAL_RCC_OscConfig+0x27a>
        {
          return HAL_TIMEOUT;
 8003f52:	2303      	movs	r3, #3
 8003f54:	e1d4      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f56:	4b0c      	ldr	r3, [pc, #48]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003f58:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f5c:	f003 0302 	and.w	r3, r3, #2
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d1ef      	bne.n	8003f44 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	f003 0304 	and.w	r3, r3, #4
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ab 	beq.w	80040c8 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f72:	2300      	movs	r3, #0
 8003f74:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f76:	4b04      	ldr	r3, [pc, #16]	; (8003f88 <HAL_RCC_OscConfig+0x2ac>)
 8003f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d106      	bne.n	8003f90 <HAL_RCC_OscConfig+0x2b4>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e005      	b.n	8003f92 <HAL_RCC_OscConfig+0x2b6>
 8003f86:	bf00      	nop
 8003f88:	40021000 	.word	0x40021000
 8003f8c:	20000004 	.word	0x20000004
 8003f90:	2300      	movs	r3, #0
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d00d      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f96:	4baf      	ldr	r3, [pc, #700]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8003f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f9a:	4aae      	ldr	r2, [pc, #696]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fa2:	4bac      	ldr	r3, [pc, #688]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8003fa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60fb      	str	r3, [r7, #12]
 8003fac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb2:	4ba9      	ldr	r3, [pc, #676]	; (8004258 <HAL_RCC_OscConfig+0x57c>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003fbe:	4ba6      	ldr	r3, [pc, #664]	; (8004258 <HAL_RCC_OscConfig+0x57c>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4aa5      	ldr	r2, [pc, #660]	; (8004258 <HAL_RCC_OscConfig+0x57c>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fbd5 	bl	8001778 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd fbd1 	bl	8001778 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e18d      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fe4:	4b9c      	ldr	r3, [pc, #624]	; (8004258 <HAL_RCC_OscConfig+0x57c>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d108      	bne.n	800400a <HAL_RCC_OscConfig+0x32e>
 8003ff8:	4b96      	ldr	r3, [pc, #600]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8003ffa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ffe:	4a95      	ldr	r2, [pc, #596]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004000:	f043 0301 	orr.w	r3, r3, #1
 8004004:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004008:	e024      	b.n	8004054 <HAL_RCC_OscConfig+0x378>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	2b05      	cmp	r3, #5
 8004010:	d110      	bne.n	8004034 <HAL_RCC_OscConfig+0x358>
 8004012:	4b90      	ldr	r3, [pc, #576]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004018:	4a8e      	ldr	r2, [pc, #568]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800401a:	f043 0304 	orr.w	r3, r3, #4
 800401e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004022:	4b8c      	ldr	r3, [pc, #560]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004024:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004028:	4a8a      	ldr	r2, [pc, #552]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800402a:	f043 0301 	orr.w	r3, r3, #1
 800402e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004032:	e00f      	b.n	8004054 <HAL_RCC_OscConfig+0x378>
 8004034:	4b87      	ldr	r3, [pc, #540]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800403a:	4a86      	ldr	r2, [pc, #536]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800403c:	f023 0301 	bic.w	r3, r3, #1
 8004040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004044:	4b83      	ldr	r3, [pc, #524]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800404a:	4a82      	ldr	r2, [pc, #520]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800404c:	f023 0304 	bic.w	r3, r3, #4
 8004050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	689b      	ldr	r3, [r3, #8]
 8004058:	2b00      	cmp	r3, #0
 800405a:	d016      	beq.n	800408a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405c:	f7fd fb8c 	bl	8001778 <HAL_GetTick>
 8004060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004062:	e00a      	b.n	800407a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004064:	f7fd fb88 	bl	8001778 <HAL_GetTick>
 8004068:	4602      	mov	r2, r0
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	1ad3      	subs	r3, r2, r3
 800406e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004072:	4293      	cmp	r3, r2
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e142      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800407c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004080:	f003 0302 	and.w	r3, r3, #2
 8004084:	2b00      	cmp	r3, #0
 8004086:	d0ed      	beq.n	8004064 <HAL_RCC_OscConfig+0x388>
 8004088:	e015      	b.n	80040b6 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800408a:	f7fd fb75 	bl	8001778 <HAL_GetTick>
 800408e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004090:	e00a      	b.n	80040a8 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004092:	f7fd fb71 	bl	8001778 <HAL_GetTick>
 8004096:	4602      	mov	r2, r0
 8004098:	693b      	ldr	r3, [r7, #16]
 800409a:	1ad3      	subs	r3, r2, r3
 800409c:	f241 3288 	movw	r2, #5000	; 0x1388
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d901      	bls.n	80040a8 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 80040a4:	2303      	movs	r3, #3
 80040a6:	e12b      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80040a8:	4b6a      	ldr	r3, [pc, #424]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80040aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040ae:	f003 0302 	and.w	r3, r3, #2
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d1ed      	bne.n	8004092 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80040b6:	7ffb      	ldrb	r3, [r7, #31]
 80040b8:	2b01      	cmp	r3, #1
 80040ba:	d105      	bne.n	80040c8 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040bc:	4b65      	ldr	r3, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80040be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040c0:	4a64      	ldr	r2, [pc, #400]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80040c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f003 0320 	and.w	r3, r3, #32
 80040d0:	2b00      	cmp	r3, #0
 80040d2:	d03c      	beq.n	800414e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	699b      	ldr	r3, [r3, #24]
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d01c      	beq.n	8004116 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040dc:	4b5d      	ldr	r3, [pc, #372]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80040de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040e2:	4a5c      	ldr	r2, [pc, #368]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80040e4:	f043 0301 	orr.w	r3, r3, #1
 80040e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040ec:	f7fd fb44 	bl	8001778 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040f4:	f7fd fb40 	bl	8001778 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e0fc      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004106:	4b53      	ldr	r3, [pc, #332]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800410c:	f003 0302 	and.w	r3, r3, #2
 8004110:	2b00      	cmp	r3, #0
 8004112:	d0ef      	beq.n	80040f4 <HAL_RCC_OscConfig+0x418>
 8004114:	e01b      	b.n	800414e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8004116:	4b4f      	ldr	r3, [pc, #316]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800411c:	4a4d      	ldr	r2, [pc, #308]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800411e:	f023 0301 	bic.w	r3, r3, #1
 8004122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004126:	f7fd fb27 	bl	8001778 <HAL_GetTick>
 800412a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800412c:	e008      	b.n	8004140 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800412e:	f7fd fb23 	bl	8001778 <HAL_GetTick>
 8004132:	4602      	mov	r2, r0
 8004134:	693b      	ldr	r3, [r7, #16]
 8004136:	1ad3      	subs	r3, r2, r3
 8004138:	2b02      	cmp	r3, #2
 800413a:	d901      	bls.n	8004140 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e0df      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004140:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004146:	f003 0302 	and.w	r3, r3, #2
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1ef      	bne.n	800412e <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	69db      	ldr	r3, [r3, #28]
 8004152:	2b00      	cmp	r3, #0
 8004154:	f000 80d3 	beq.w	80042fe <HAL_RCC_OscConfig+0x622>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004158:	4b3e      	ldr	r3, [pc, #248]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800415a:	689b      	ldr	r3, [r3, #8]
 800415c:	f003 030c 	and.w	r3, r3, #12
 8004160:	2b0c      	cmp	r3, #12
 8004162:	f000 808d 	beq.w	8004280 <HAL_RCC_OscConfig+0x5a4>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	69db      	ldr	r3, [r3, #28]
 800416a:	2b02      	cmp	r3, #2
 800416c:	d15a      	bne.n	8004224 <HAL_RCC_OscConfig+0x548>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800416e:	4b39      	ldr	r3, [pc, #228]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4a38      	ldr	r2, [pc, #224]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004174:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004178:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800417a:	f7fd fafd 	bl	8001778 <HAL_GetTick>
 800417e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004180:	e008      	b.n	8004194 <HAL_RCC_OscConfig+0x4b8>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004182:	f7fd faf9 	bl	8001778 <HAL_GetTick>
 8004186:	4602      	mov	r2, r0
 8004188:	693b      	ldr	r3, [r7, #16]
 800418a:	1ad3      	subs	r3, r2, r3
 800418c:	2b02      	cmp	r3, #2
 800418e:	d901      	bls.n	8004194 <HAL_RCC_OscConfig+0x4b8>
          {
            return HAL_TIMEOUT;
 8004190:	2303      	movs	r3, #3
 8004192:	e0b5      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004194:	4b2f      	ldr	r3, [pc, #188]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800419c:	2b00      	cmp	r3, #0
 800419e:	d1f0      	bne.n	8004182 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80041a0:	4b2c      	ldr	r3, [pc, #176]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_OscConfig+0x580>)
 80041a6:	4013      	ands	r3, r2
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	6a11      	ldr	r1, [r2, #32]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041b0:	3a01      	subs	r2, #1
 80041b2:	0112      	lsls	r2, r2, #4
 80041b4:	4311      	orrs	r1, r2
 80041b6:	687a      	ldr	r2, [r7, #4]
 80041b8:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80041ba:	0212      	lsls	r2, r2, #8
 80041bc:	4311      	orrs	r1, r2
 80041be:	687a      	ldr	r2, [r7, #4]
 80041c0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80041c2:	0852      	lsrs	r2, r2, #1
 80041c4:	3a01      	subs	r2, #1
 80041c6:	0552      	lsls	r2, r2, #21
 80041c8:	4311      	orrs	r1, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041ce:	0852      	lsrs	r2, r2, #1
 80041d0:	3a01      	subs	r2, #1
 80041d2:	0652      	lsls	r2, r2, #25
 80041d4:	4311      	orrs	r1, r2
 80041d6:	687a      	ldr	r2, [r7, #4]
 80041d8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041da:	06d2      	lsls	r2, r2, #27
 80041dc:	430a      	orrs	r2, r1
 80041de:	491d      	ldr	r1, [pc, #116]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041e0:	4313      	orrs	r3, r2
 80041e2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041e4:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	4a1a      	ldr	r2, [pc, #104]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041ee:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041f0:	4b18      	ldr	r3, [pc, #96]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041f2:	68db      	ldr	r3, [r3, #12]
 80041f4:	4a17      	ldr	r2, [pc, #92]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 80041f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041fa:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041fc:	f7fd fabc 	bl	8001778 <HAL_GetTick>
 8004200:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004202:	e008      	b.n	8004216 <HAL_RCC_OscConfig+0x53a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004204:	f7fd fab8 	bl	8001778 <HAL_GetTick>
 8004208:	4602      	mov	r2, r0
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	1ad3      	subs	r3, r2, r3
 800420e:	2b02      	cmp	r3, #2
 8004210:	d901      	bls.n	8004216 <HAL_RCC_OscConfig+0x53a>
          {
            return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e074      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004216:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800421e:	2b00      	cmp	r3, #0
 8004220:	d0f0      	beq.n	8004204 <HAL_RCC_OscConfig+0x528>
 8004222:	e06c      	b.n	80042fe <HAL_RCC_OscConfig+0x622>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004224:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	4a0a      	ldr	r2, [pc, #40]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800422a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800422e:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8004230:	4b08      	ldr	r3, [pc, #32]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004232:	68db      	ldr	r3, [r3, #12]
 8004234:	4a07      	ldr	r2, [pc, #28]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004236:	f023 0303 	bic.w	r3, r3, #3
 800423a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800423c:	4b05      	ldr	r3, [pc, #20]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 800423e:	68db      	ldr	r3, [r3, #12]
 8004240:	4a04      	ldr	r2, [pc, #16]	; (8004254 <HAL_RCC_OscConfig+0x578>)
 8004242:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8004246:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800424a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800424c:	f7fd fa94 	bl	8001778 <HAL_GetTick>
 8004250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004252:	e00e      	b.n	8004272 <HAL_RCC_OscConfig+0x596>
 8004254:	40021000 	.word	0x40021000
 8004258:	40007000 	.word	0x40007000
 800425c:	019f800c 	.word	0x019f800c
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004260:	f7fd fa8a 	bl	8001778 <HAL_GetTick>
 8004264:	4602      	mov	r2, r0
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	1ad3      	subs	r3, r2, r3
 800426a:	2b02      	cmp	r3, #2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_OscConfig+0x596>
          {
            return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e046      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004272:	4b25      	ldr	r3, [pc, #148]	; (8004308 <HAL_RCC_OscConfig+0x62c>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d1f0      	bne.n	8004260 <HAL_RCC_OscConfig+0x584>
 800427e:	e03e      	b.n	80042fe <HAL_RCC_OscConfig+0x622>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	69db      	ldr	r3, [r3, #28]
 8004284:	2b01      	cmp	r3, #1
 8004286:	d101      	bne.n	800428c <HAL_RCC_OscConfig+0x5b0>
      {
        return HAL_ERROR;
 8004288:	2301      	movs	r3, #1
 800428a:	e039      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800428c:	4b1e      	ldr	r3, [pc, #120]	; (8004308 <HAL_RCC_OscConfig+0x62c>)
 800428e:	68db      	ldr	r3, [r3, #12]
 8004290:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004292:	697b      	ldr	r3, [r7, #20]
 8004294:	f003 0203 	and.w	r2, r3, #3
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6a1b      	ldr	r3, [r3, #32]
 800429c:	429a      	cmp	r2, r3
 800429e:	d12c      	bne.n	80042fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042aa:	3b01      	subs	r3, #1
 80042ac:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80042ae:	429a      	cmp	r2, r3
 80042b0:	d123      	bne.n	80042fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80042bc:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80042be:	429a      	cmp	r2, r3
 80042c0:	d11b      	bne.n	80042fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042cc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80042ce:	429a      	cmp	r2, r3
 80042d0:	d113      	bne.n	80042fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042d2:	697b      	ldr	r3, [r7, #20]
 80042d4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	085b      	lsrs	r3, r3, #1
 80042de:	3b01      	subs	r3, #1
 80042e0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80042e2:	429a      	cmp	r2, r3
 80042e4:	d109      	bne.n	80042fa <HAL_RCC_OscConfig+0x61e>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042e6:	697b      	ldr	r3, [r7, #20]
 80042e8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042f0:	085b      	lsrs	r3, r3, #1
 80042f2:	3b01      	subs	r3, #1
 80042f4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042f6:	429a      	cmp	r2, r3
 80042f8:	d001      	beq.n	80042fe <HAL_RCC_OscConfig+0x622>
      {
        return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e000      	b.n	8004300 <HAL_RCC_OscConfig+0x624>
      }
    }
  }
  }

  return HAL_OK;
 80042fe:	2300      	movs	r3, #0
}
 8004300:	4618      	mov	r0, r3
 8004302:	3720      	adds	r7, #32
 8004304:	46bd      	mov	sp, r7
 8004306:	bd80      	pop	{r7, pc}
 8004308:	40021000 	.word	0x40021000

0800430c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
 8004314:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8004316:	2300      	movs	r3, #0
 8004318:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2b00      	cmp	r3, #0
 800431e:	d101      	bne.n	8004324 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004320:	2301      	movs	r3, #1
 8004322:	e11e      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004324:	4b91      	ldr	r3, [pc, #580]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f003 030f 	and.w	r3, r3, #15
 800432c:	683a      	ldr	r2, [r7, #0]
 800432e:	429a      	cmp	r2, r3
 8004330:	d910      	bls.n	8004354 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004332:	4b8e      	ldr	r3, [pc, #568]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	f023 020f 	bic.w	r2, r3, #15
 800433a:	498c      	ldr	r1, [pc, #560]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	4313      	orrs	r3, r2
 8004340:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b8a      	ldr	r3, [pc, #552]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e106      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0301 	and.w	r3, r3, #1
 800435c:	2b00      	cmp	r3, #0
 800435e:	d073      	beq.n	8004448 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b03      	cmp	r3, #3
 8004366:	d129      	bne.n	80043bc <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004368:	4b81      	ldr	r3, [pc, #516]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d101      	bne.n	8004378 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004374:	2301      	movs	r3, #1
 8004376:	e0f4      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004378:	f000 f966 	bl	8004648 <RCC_GetSysClockFreqFromPLLSource>
 800437c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	4a7c      	ldr	r2, [pc, #496]	; (8004574 <HAL_RCC_ClockConfig+0x268>)
 8004382:	4293      	cmp	r3, r2
 8004384:	d93f      	bls.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004386:	4b7a      	ldr	r3, [pc, #488]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004388:	689b      	ldr	r3, [r3, #8]
 800438a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800438e:	2b00      	cmp	r3, #0
 8004390:	d009      	beq.n	80043a6 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800439a:	2b00      	cmp	r3, #0
 800439c:	d033      	beq.n	8004406 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d12f      	bne.n	8004406 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043a6:	4b72      	ldr	r3, [pc, #456]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043ae:	4a70      	ldr	r2, [pc, #448]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043b4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80043b6:	2380      	movs	r3, #128	; 0x80
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e024      	b.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	685b      	ldr	r3, [r3, #4]
 80043c0:	2b02      	cmp	r3, #2
 80043c2:	d107      	bne.n	80043d4 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d109      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043d0:	2301      	movs	r3, #1
 80043d2:	e0c6      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80043d4:	4b66      	ldr	r3, [pc, #408]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043dc:	2b00      	cmp	r3, #0
 80043de:	d101      	bne.n	80043e4 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0be      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043e4:	f000 f8ce 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 80043e8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	4a61      	ldr	r2, [pc, #388]	; (8004574 <HAL_RCC_ClockConfig+0x268>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d909      	bls.n	8004406 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043f2:	4b5f      	ldr	r3, [pc, #380]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043f4:	689b      	ldr	r3, [r3, #8]
 80043f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043fa:	4a5d      	ldr	r2, [pc, #372]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004400:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8004402:	2380      	movs	r3, #128	; 0x80
 8004404:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004406:	4b5a      	ldr	r3, [pc, #360]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f023 0203 	bic.w	r2, r3, #3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	685b      	ldr	r3, [r3, #4]
 8004412:	4957      	ldr	r1, [pc, #348]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004414:	4313      	orrs	r3, r2
 8004416:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004418:	f7fd f9ae 	bl	8001778 <HAL_GetTick>
 800441c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800441e:	e00a      	b.n	8004436 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004420:	f7fd f9aa 	bl	8001778 <HAL_GetTick>
 8004424:	4602      	mov	r2, r0
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	1ad3      	subs	r3, r2, r3
 800442a:	f241 3288 	movw	r2, #5000	; 0x1388
 800442e:	4293      	cmp	r3, r2
 8004430:	d901      	bls.n	8004436 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8004432:	2303      	movs	r3, #3
 8004434:	e095      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004436:	4b4e      	ldr	r3, [pc, #312]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	f003 020c 	and.w	r2, r3, #12
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	009b      	lsls	r3, r3, #2
 8004444:	429a      	cmp	r2, r3
 8004446:	d1eb      	bne.n	8004420 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	f003 0302 	and.w	r3, r3, #2
 8004450:	2b00      	cmp	r3, #0
 8004452:	d023      	beq.n	800449c <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f003 0304 	and.w	r3, r3, #4
 800445c:	2b00      	cmp	r3, #0
 800445e:	d005      	beq.n	800446c <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004460:	4b43      	ldr	r3, [pc, #268]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	4a42      	ldr	r2, [pc, #264]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004466:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800446a:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0308 	and.w	r3, r3, #8
 8004474:	2b00      	cmp	r3, #0
 8004476:	d007      	beq.n	8004488 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004478:	4b3d      	ldr	r3, [pc, #244]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004480:	4a3b      	ldr	r2, [pc, #236]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004482:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004486:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004488:	4b39      	ldr	r3, [pc, #228]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 800448a:	689b      	ldr	r3, [r3, #8]
 800448c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4936      	ldr	r1, [pc, #216]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004496:	4313      	orrs	r3, r2
 8004498:	608b      	str	r3, [r1, #8]
 800449a:	e008      	b.n	80044ae <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800449c:	697b      	ldr	r3, [r7, #20]
 800449e:	2b80      	cmp	r3, #128	; 0x80
 80044a0:	d105      	bne.n	80044ae <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80044a2:	4b33      	ldr	r3, [pc, #204]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80044a4:	689b      	ldr	r3, [r3, #8]
 80044a6:	4a32      	ldr	r2, [pc, #200]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 80044a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80044ae:	4b2f      	ldr	r3, [pc, #188]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d21d      	bcs.n	80044f8 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80044bc:	4b2b      	ldr	r3, [pc, #172]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f023 020f 	bic.w	r2, r3, #15
 80044c4:	4929      	ldr	r1, [pc, #164]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044c6:	683b      	ldr	r3, [r7, #0]
 80044c8:	4313      	orrs	r3, r2
 80044ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80044cc:	f7fd f954 	bl	8001778 <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044d2:	e00a      	b.n	80044ea <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044d4:	f7fd f950 	bl	8001778 <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f241 3288 	movw	r2, #5000	; 0x1388
 80044e2:	4293      	cmp	r3, r2
 80044e4:	d901      	bls.n	80044ea <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e03b      	b.n	8004562 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ea:	4b20      	ldr	r3, [pc, #128]	; (800456c <HAL_RCC_ClockConfig+0x260>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f003 030f 	and.w	r3, r3, #15
 80044f2:	683a      	ldr	r2, [r7, #0]
 80044f4:	429a      	cmp	r2, r3
 80044f6:	d1ed      	bne.n	80044d4 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	f003 0304 	and.w	r3, r3, #4
 8004500:	2b00      	cmp	r3, #0
 8004502:	d008      	beq.n	8004516 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004506:	689b      	ldr	r3, [r3, #8]
 8004508:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	4917      	ldr	r1, [pc, #92]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004512:	4313      	orrs	r3, r2
 8004514:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f003 0308 	and.w	r3, r3, #8
 800451e:	2b00      	cmp	r3, #0
 8004520:	d009      	beq.n	8004536 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004522:	4b13      	ldr	r3, [pc, #76]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	00db      	lsls	r3, r3, #3
 8004530:	490f      	ldr	r1, [pc, #60]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 8004532:	4313      	orrs	r3, r2
 8004534:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004536:	f000 f825 	bl	8004584 <HAL_RCC_GetSysClockFreq>
 800453a:	4602      	mov	r2, r0
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <HAL_RCC_ClockConfig+0x264>)
 800453e:	689b      	ldr	r3, [r3, #8]
 8004540:	091b      	lsrs	r3, r3, #4
 8004542:	f003 030f 	and.w	r3, r3, #15
 8004546:	490c      	ldr	r1, [pc, #48]	; (8004578 <HAL_RCC_ClockConfig+0x26c>)
 8004548:	5ccb      	ldrb	r3, [r1, r3]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	fa22 f303 	lsr.w	r3, r2, r3
 8004552:	4a0a      	ldr	r2, [pc, #40]	; (800457c <HAL_RCC_ClockConfig+0x270>)
 8004554:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8004556:	4b0a      	ldr	r3, [pc, #40]	; (8004580 <HAL_RCC_ClockConfig+0x274>)
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	4618      	mov	r0, r3
 800455c:	f7fd f8c0 	bl	80016e0 <HAL_InitTick>
 8004560:	4603      	mov	r3, r0
}
 8004562:	4618      	mov	r0, r3
 8004564:	3718      	adds	r7, #24
 8004566:	46bd      	mov	sp, r7
 8004568:	bd80      	pop	{r7, pc}
 800456a:	bf00      	nop
 800456c:	40022000 	.word	0x40022000
 8004570:	40021000 	.word	0x40021000
 8004574:	04c4b400 	.word	0x04c4b400
 8004578:	08008128 	.word	0x08008128
 800457c:	20000000 	.word	0x20000000
 8004580:	20000004 	.word	0x20000004

08004584 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004584:	b480      	push	{r7}
 8004586:	b087      	sub	sp, #28
 8004588:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800458a:	4b2c      	ldr	r3, [pc, #176]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800458c:	689b      	ldr	r3, [r3, #8]
 800458e:	f003 030c 	and.w	r3, r3, #12
 8004592:	2b04      	cmp	r3, #4
 8004594:	d102      	bne.n	800459c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8004596:	4b2a      	ldr	r3, [pc, #168]	; (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004598:	613b      	str	r3, [r7, #16]
 800459a:	e047      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800459c:	4b27      	ldr	r3, [pc, #156]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f003 030c 	and.w	r3, r3, #12
 80045a4:	2b08      	cmp	r3, #8
 80045a6:	d102      	bne.n	80045ae <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80045a8:	4b26      	ldr	r3, [pc, #152]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045aa:	613b      	str	r3, [r7, #16]
 80045ac:	e03e      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80045ae:	4b23      	ldr	r3, [pc, #140]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045b0:	689b      	ldr	r3, [r3, #8]
 80045b2:	f003 030c 	and.w	r3, r3, #12
 80045b6:	2b0c      	cmp	r3, #12
 80045b8:	d136      	bne.n	8004628 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80045ba:	4b20      	ldr	r3, [pc, #128]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045bc:	68db      	ldr	r3, [r3, #12]
 80045be:	f003 0303 	and.w	r3, r3, #3
 80045c2:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80045c4:	4b1d      	ldr	r3, [pc, #116]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c6:	68db      	ldr	r3, [r3, #12]
 80045c8:	091b      	lsrs	r3, r3, #4
 80045ca:	f003 030f 	and.w	r3, r3, #15
 80045ce:	3301      	adds	r3, #1
 80045d0:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b03      	cmp	r3, #3
 80045d6:	d10c      	bne.n	80045f2 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045d8:	4a1a      	ldr	r2, [pc, #104]	; (8004644 <HAL_RCC_GetSysClockFreq+0xc0>)
 80045da:	68bb      	ldr	r3, [r7, #8]
 80045dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e0:	4a16      	ldr	r2, [pc, #88]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045e2:	68d2      	ldr	r2, [r2, #12]
 80045e4:	0a12      	lsrs	r2, r2, #8
 80045e6:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ea:	fb02 f303 	mul.w	r3, r2, r3
 80045ee:	617b      	str	r3, [r7, #20]
      break;
 80045f0:	e00c      	b.n	800460c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045f2:	4a13      	ldr	r2, [pc, #76]	; (8004640 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045f4:	68bb      	ldr	r3, [r7, #8]
 80045f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80045fa:	4a10      	ldr	r2, [pc, #64]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 80045fc:	68d2      	ldr	r2, [r2, #12]
 80045fe:	0a12      	lsrs	r2, r2, #8
 8004600:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004604:	fb02 f303 	mul.w	r3, r2, r3
 8004608:	617b      	str	r3, [r7, #20]
      break;
 800460a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800460c:	4b0b      	ldr	r3, [pc, #44]	; (800463c <HAL_RCC_GetSysClockFreq+0xb8>)
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	0e5b      	lsrs	r3, r3, #25
 8004612:	f003 0303 	and.w	r3, r3, #3
 8004616:	3301      	adds	r3, #1
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 800461c:	697a      	ldr	r2, [r7, #20]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	fbb2 f3f3 	udiv	r3, r2, r3
 8004624:	613b      	str	r3, [r7, #16]
 8004626:	e001      	b.n	800462c <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8004628:	2300      	movs	r3, #0
 800462a:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 800462c:	693b      	ldr	r3, [r7, #16]
}
 800462e:	4618      	mov	r0, r3
 8004630:	371c      	adds	r7, #28
 8004632:	46bd      	mov	sp, r7
 8004634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004638:	4770      	bx	lr
 800463a:	bf00      	nop
 800463c:	40021000 	.word	0x40021000
 8004640:	00f42400 	.word	0x00f42400
 8004644:	00b71b00 	.word	0x00b71b00

08004648 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004648:	b480      	push	{r7}
 800464a:	b087      	sub	sp, #28
 800464c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800464e:	4b1e      	ldr	r3, [pc, #120]	; (80046c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004650:	68db      	ldr	r3, [r3, #12]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004658:	4b1b      	ldr	r3, [pc, #108]	; (80046c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800465a:	68db      	ldr	r3, [r3, #12]
 800465c:	091b      	lsrs	r3, r3, #4
 800465e:	f003 030f 	and.w	r3, r3, #15
 8004662:	3301      	adds	r3, #1
 8004664:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004666:	693b      	ldr	r3, [r7, #16]
 8004668:	2b03      	cmp	r3, #3
 800466a:	d10c      	bne.n	8004686 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800466c:	4a17      	ldr	r2, [pc, #92]	; (80046cc <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	fbb2 f3f3 	udiv	r3, r2, r3
 8004674:	4a14      	ldr	r2, [pc, #80]	; (80046c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004676:	68d2      	ldr	r2, [r2, #12]
 8004678:	0a12      	lsrs	r2, r2, #8
 800467a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800467e:	fb02 f303 	mul.w	r3, r2, r3
 8004682:	617b      	str	r3, [r7, #20]
    break;
 8004684:	e00c      	b.n	80046a0 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004686:	4a12      	ldr	r2, [pc, #72]	; (80046d0 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	fbb2 f3f3 	udiv	r3, r2, r3
 800468e:	4a0e      	ldr	r2, [pc, #56]	; (80046c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004690:	68d2      	ldr	r2, [r2, #12]
 8004692:	0a12      	lsrs	r2, r2, #8
 8004694:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8004698:	fb02 f303 	mul.w	r3, r2, r3
 800469c:	617b      	str	r3, [r7, #20]
    break;
 800469e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046a0:	4b09      	ldr	r3, [pc, #36]	; (80046c8 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	0e5b      	lsrs	r3, r3, #25
 80046a6:	f003 0303 	and.w	r3, r3, #3
 80046aa:	3301      	adds	r3, #1
 80046ac:	005b      	lsls	r3, r3, #1
 80046ae:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046b0:	697a      	ldr	r2, [r7, #20]
 80046b2:	68bb      	ldr	r3, [r7, #8]
 80046b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046b8:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046ba:	687b      	ldr	r3, [r7, #4]
}
 80046bc:	4618      	mov	r0, r3
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40021000 	.word	0x40021000
 80046cc:	00b71b00 	.word	0x00b71b00
 80046d0:	00f42400 	.word	0x00f42400

080046d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b086      	sub	sp, #24
 80046d8:	af00      	add	r7, sp, #0
 80046da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80046dc:	2300      	movs	r3, #0
 80046de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80046e0:	2300      	movs	r3, #0
 80046e2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8098 	beq.w	8004822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80046f2:	2300      	movs	r3, #0
 80046f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80046f6:	4b43      	ldr	r3, [pc, #268]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80046f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10d      	bne.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004702:	4b40      	ldr	r3, [pc, #256]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004706:	4a3f      	ldr	r2, [pc, #252]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004708:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800470c:	6593      	str	r3, [r2, #88]	; 0x58
 800470e:	4b3d      	ldr	r3, [pc, #244]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004712:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004716:	60bb      	str	r3, [r7, #8]
 8004718:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800471a:	2301      	movs	r3, #1
 800471c:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800471e:	4b3a      	ldr	r3, [pc, #232]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	4a39      	ldr	r2, [pc, #228]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004724:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004728:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800472a:	f7fd f825 	bl	8001778 <HAL_GetTick>
 800472e:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004730:	e009      	b.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004732:	f7fd f821 	bl	8001778 <HAL_GetTick>
 8004736:	4602      	mov	r2, r0
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	1ad3      	subs	r3, r2, r3
 800473c:	2b02      	cmp	r3, #2
 800473e:	d902      	bls.n	8004746 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004740:	2303      	movs	r3, #3
 8004742:	74fb      	strb	r3, [r7, #19]
        break;
 8004744:	e005      	b.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004746:	4b30      	ldr	r3, [pc, #192]	; (8004808 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800474e:	2b00      	cmp	r3, #0
 8004750:	d0ef      	beq.n	8004732 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004752:	7cfb      	ldrb	r3, [r7, #19]
 8004754:	2b00      	cmp	r3, #0
 8004756:	d159      	bne.n	800480c <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004758:	4b2a      	ldr	r3, [pc, #168]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800475a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800475e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004762:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004764:	697b      	ldr	r3, [r7, #20]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d01e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800476e:	697a      	ldr	r2, [r7, #20]
 8004770:	429a      	cmp	r2, r3
 8004772:	d019      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004774:	4b23      	ldr	r3, [pc, #140]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800477a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800477e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004780:	4b20      	ldr	r3, [pc, #128]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004782:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004786:	4a1f      	ldr	r2, [pc, #124]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800478c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004790:	4b1c      	ldr	r3, [pc, #112]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004792:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004796:	4a1b      	ldr	r2, [pc, #108]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004798:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800479c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047a0:	4a18      	ldr	r2, [pc, #96]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047a8:	697b      	ldr	r3, [r7, #20]
 80047aa:	f003 0301 	and.w	r3, r3, #1
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d016      	beq.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047b2:	f7fc ffe1 	bl	8001778 <HAL_GetTick>
 80047b6:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047b8:	e00b      	b.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ba:	f7fc ffdd 	bl	8001778 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d902      	bls.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 80047cc:	2303      	movs	r3, #3
 80047ce:	74fb      	strb	r3, [r7, #19]
            break;
 80047d0:	e006      	b.n	80047e0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047d2:	4b0c      	ldr	r3, [pc, #48]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047d8:	f003 0302 	and.w	r3, r3, #2
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d0ec      	beq.n	80047ba <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80047e0:	7cfb      	ldrb	r3, [r7, #19]
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d10b      	bne.n	80047fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80047e6:	4b07      	ldr	r3, [pc, #28]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047f4:	4903      	ldr	r1, [pc, #12]	; (8004804 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047f6:	4313      	orrs	r3, r2
 80047f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80047fc:	e008      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80047fe:	7cfb      	ldrb	r3, [r7, #19]
 8004800:	74bb      	strb	r3, [r7, #18]
 8004802:	e005      	b.n	8004810 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004804:	40021000 	.word	0x40021000
 8004808:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800480c:	7cfb      	ldrb	r3, [r7, #19]
 800480e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004810:	7c7b      	ldrb	r3, [r7, #17]
 8004812:	2b01      	cmp	r3, #1
 8004814:	d105      	bne.n	8004822 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004816:	4ba6      	ldr	r3, [pc, #664]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004818:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800481a:	4aa5      	ldr	r2, [pc, #660]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800481c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004820:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	f003 0301 	and.w	r3, r3, #1
 800482a:	2b00      	cmp	r3, #0
 800482c:	d00a      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482e:	4ba0      	ldr	r3, [pc, #640]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004834:	f023 0203 	bic.w	r2, r3, #3
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	499c      	ldr	r1, [pc, #624]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800483e:	4313      	orrs	r3, r2
 8004840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f003 0302 	and.w	r3, r3, #2
 800484c:	2b00      	cmp	r3, #0
 800484e:	d00a      	beq.n	8004866 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004850:	4b97      	ldr	r3, [pc, #604]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004852:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004856:	f023 020c 	bic.w	r2, r3, #12
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	689b      	ldr	r3, [r3, #8]
 800485e:	4994      	ldr	r1, [pc, #592]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004860:	4313      	orrs	r3, r2
 8004862:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f003 0304 	and.w	r3, r3, #4
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00a      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004872:	4b8f      	ldr	r3, [pc, #572]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004874:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004878:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68db      	ldr	r3, [r3, #12]
 8004880:	498b      	ldr	r1, [pc, #556]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004882:	4313      	orrs	r3, r2
 8004884:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 0308 	and.w	r3, r3, #8
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00a      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004894:	4b86      	ldr	r3, [pc, #536]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800489a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
 80048a2:	4983      	ldr	r1, [pc, #524]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048a4:	4313      	orrs	r3, r2
 80048a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 0320 	and.w	r3, r3, #32
 80048b2:	2b00      	cmp	r3, #0
 80048b4:	d00a      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80048b6:	4b7e      	ldr	r3, [pc, #504]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048bc:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	695b      	ldr	r3, [r3, #20]
 80048c4:	497a      	ldr	r1, [pc, #488]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048c6:	4313      	orrs	r3, r2
 80048c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d00a      	beq.n	80048ee <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80048d8:	4b75      	ldr	r3, [pc, #468]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048de:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	699b      	ldr	r3, [r3, #24]
 80048e6:	4972      	ldr	r1, [pc, #456]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048e8:	4313      	orrs	r3, r2
 80048ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d00a      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048fa:	4b6d      	ldr	r3, [pc, #436]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80048fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004900:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	69db      	ldr	r3, [r3, #28]
 8004908:	4969      	ldr	r1, [pc, #420]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800490a:	4313      	orrs	r3, r2
 800490c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00a      	beq.n	8004932 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800491c:	4b64      	ldr	r3, [pc, #400]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800491e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004922:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	6a1b      	ldr	r3, [r3, #32]
 800492a:	4961      	ldr	r1, [pc, #388]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800492c:	4313      	orrs	r3, r2
 800492e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800493a:	2b00      	cmp	r3, #0
 800493c:	d00a      	beq.n	8004954 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800493e:	4b5c      	ldr	r3, [pc, #368]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004940:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004944:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494c:	4958      	ldr	r1, [pc, #352]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800494e:	4313      	orrs	r3, r2
 8004950:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800495c:	2b00      	cmp	r3, #0
 800495e:	d015      	beq.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004960:	4b53      	ldr	r3, [pc, #332]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004962:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004966:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800496e:	4950      	ldr	r1, [pc, #320]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004970:	4313      	orrs	r3, r2
 8004972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800497a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800497e:	d105      	bne.n	800498c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004980:	4b4b      	ldr	r3, [pc, #300]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004982:	68db      	ldr	r3, [r3, #12]
 8004984:	4a4a      	ldr	r2, [pc, #296]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800498a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004994:	2b00      	cmp	r3, #0
 8004996:	d015      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004998:	4b45      	ldr	r3, [pc, #276]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800499e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049a6:	4942      	ldr	r1, [pc, #264]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049a8:	4313      	orrs	r3, r2
 80049aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80049b6:	d105      	bne.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049b8:	4b3d      	ldr	r3, [pc, #244]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	4a3c      	ldr	r2, [pc, #240]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049c2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d015      	beq.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80049d0:	4b37      	ldr	r3, [pc, #220]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049d6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049de:	4934      	ldr	r1, [pc, #208]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	4313      	orrs	r3, r2
 80049e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049ea:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80049ee:	d105      	bne.n	80049fc <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f0:	4b2f      	ldr	r3, [pc, #188]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f2:	68db      	ldr	r3, [r3, #12]
 80049f4:	4a2e      	ldr	r2, [pc, #184]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80049fa:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	681b      	ldr	r3, [r3, #0]
 8004a00:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d015      	beq.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a08:	4b29      	ldr	r3, [pc, #164]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a0e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a16:	4926      	ldr	r1, [pc, #152]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a22:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a26:	d105      	bne.n	8004a34 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a28:	4b21      	ldr	r3, [pc, #132]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	4a20      	ldr	r2, [pc, #128]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a2e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a32:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d015      	beq.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004a40:	4b1b      	ldr	r3, [pc, #108]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a46:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a4e:	4918      	ldr	r1, [pc, #96]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a50:	4313      	orrs	r3, r2
 8004a52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a5a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a5e:	d105      	bne.n	8004a6c <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a60:	4b13      	ldr	r3, [pc, #76]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a62:	68db      	ldr	r3, [r3, #12]
 8004a64:	4a12      	ldr	r2, [pc, #72]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d015      	beq.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004a78:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a7e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a86:	490a      	ldr	r1, [pc, #40]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004a96:	d105      	bne.n	8004aa4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004a98:	4b05      	ldr	r3, [pc, #20]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	4a04      	ldr	r2, [pc, #16]	; (8004ab0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004aa2:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004aa4:	7cbb      	ldrb	r3, [r7, #18]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3718      	adds	r7, #24
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}
 8004aae:	bf00      	nop
 8004ab0:	40021000 	.word	0x40021000

08004ab4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d101      	bne.n	8004ac6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004ac2:	2301      	movs	r3, #1
 8004ac4:	e09d      	b.n	8004c02 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d108      	bne.n	8004ae0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004ad6:	d009      	beq.n	8004aec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	2200      	movs	r2, #0
 8004adc:	61da      	str	r2, [r3, #28]
 8004ade:	e005      	b.n	8004aec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	2200      	movs	r2, #0
 8004af0:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004af8:	b2db      	uxtb	r3, r3
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d106      	bne.n	8004b0c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	2200      	movs	r2, #0
 8004b02:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004b06:	6878      	ldr	r0, [r7, #4]
 8004b08:	f7fc faf4 	bl	80010f4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2202      	movs	r2, #2
 8004b10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	681a      	ldr	r2, [r3, #0]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b22:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b2c:	d902      	bls.n	8004b34 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	60fb      	str	r3, [r7, #12]
 8004b32:	e002      	b.n	8004b3a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8004b34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004b38:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	68db      	ldr	r3, [r3, #12]
 8004b3e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8004b42:	d007      	beq.n	8004b54 <HAL_SPI_Init+0xa0>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004b4c:	d002      	beq.n	8004b54 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2200      	movs	r2, #0
 8004b52:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	689b      	ldr	r3, [r3, #8]
 8004b60:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004b64:	431a      	orrs	r2, r3
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	f003 0302 	and.w	r3, r3, #2
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	695b      	ldr	r3, [r3, #20]
 8004b74:	f003 0301 	and.w	r3, r3, #1
 8004b78:	431a      	orrs	r2, r3
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	699b      	ldr	r3, [r3, #24]
 8004b7e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004b82:	431a      	orrs	r2, r3
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004b8c:	431a      	orrs	r2, r3
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	6a1b      	ldr	r3, [r3, #32]
 8004b92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004b96:	ea42 0103 	orr.w	r1, r2, r3
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b9e:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	430a      	orrs	r2, r1
 8004ba8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	699b      	ldr	r3, [r3, #24]
 8004bae:	0c1b      	lsrs	r3, r3, #16
 8004bb0:	f003 0204 	and.w	r2, r3, #4
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb8:	f003 0310 	and.w	r3, r3, #16
 8004bbc:	431a      	orrs	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc2:	f003 0308 	and.w	r3, r3, #8
 8004bc6:	431a      	orrs	r2, r3
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	68db      	ldr	r3, [r3, #12]
 8004bcc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8004bd0:	ea42 0103 	orr.w	r1, r2, r3
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	430a      	orrs	r2, r1
 8004be0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	69da      	ldr	r2, [r3, #28]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004bf0:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8004c00:	2300      	movs	r3, #0
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3710      	adds	r7, #16
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}

08004c0a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c0a:	b580      	push	{r7, lr}
 8004c0c:	b088      	sub	sp, #32
 8004c0e:	af00      	add	r7, sp, #0
 8004c10:	60f8      	str	r0, [r7, #12]
 8004c12:	60b9      	str	r1, [r7, #8]
 8004c14:	603b      	str	r3, [r7, #0]
 8004c16:	4613      	mov	r3, r2
 8004c18:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004c24:	2b01      	cmp	r3, #1
 8004c26:	d101      	bne.n	8004c2c <HAL_SPI_Transmit+0x22>
 8004c28:	2302      	movs	r3, #2
 8004c2a:	e158      	b.n	8004ede <HAL_SPI_Transmit+0x2d4>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	2201      	movs	r2, #1
 8004c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004c34:	f7fc fda0 	bl	8001778 <HAL_GetTick>
 8004c38:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004c3a:	88fb      	ldrh	r3, [r7, #6]
 8004c3c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004c44:	b2db      	uxtb	r3, r3
 8004c46:	2b01      	cmp	r3, #1
 8004c48:	d002      	beq.n	8004c50 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004c4a:	2302      	movs	r3, #2
 8004c4c:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c4e:	e13d      	b.n	8004ecc <HAL_SPI_Transmit+0x2c2>
  }

  if ((pData == NULL) || (Size == 0U))
 8004c50:	68bb      	ldr	r3, [r7, #8]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d002      	beq.n	8004c5c <HAL_SPI_Transmit+0x52>
 8004c56:	88fb      	ldrh	r3, [r7, #6]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d102      	bne.n	8004c62 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004c5c:	2301      	movs	r3, #1
 8004c5e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004c60:	e134      	b.n	8004ecc <HAL_SPI_Transmit+0x2c2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	2203      	movs	r2, #3
 8004c66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004c6a:	68fb      	ldr	r3, [r7, #12]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	68ba      	ldr	r2, [r7, #8]
 8004c74:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	88fa      	ldrh	r2, [r7, #6]
 8004c7a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	88fa      	ldrh	r2, [r7, #6]
 8004c80:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2200      	movs	r2, #0
 8004c86:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	2200      	movs	r2, #0
 8004c94:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxISR       = NULL;
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cac:	d10f      	bne.n	8004cce <HAL_SPI_Transmit+0xc4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cbc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	681a      	ldr	r2, [r3, #0]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004ccc:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004cd8:	2b40      	cmp	r3, #64	; 0x40
 8004cda:	d007      	beq.n	8004cec <HAL_SPI_Transmit+0xe2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004cea:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004cf4:	d94b      	bls.n	8004d8e <HAL_SPI_Transmit+0x184>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	685b      	ldr	r3, [r3, #4]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d002      	beq.n	8004d04 <HAL_SPI_Transmit+0xfa>
 8004cfe:	8afb      	ldrh	r3, [r7, #22]
 8004d00:	2b01      	cmp	r3, #1
 8004d02:	d13e      	bne.n	8004d82 <HAL_SPI_Transmit+0x178>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d04:	68fb      	ldr	r3, [r7, #12]
 8004d06:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d08:	881a      	ldrh	r2, [r3, #0]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d14:	1c9a      	adds	r2, r3, #2
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d1e:	b29b      	uxth	r3, r3
 8004d20:	3b01      	subs	r3, #1
 8004d22:	b29a      	uxth	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004d28:	e02b      	b.n	8004d82 <HAL_SPI_Transmit+0x178>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	689b      	ldr	r3, [r3, #8]
 8004d30:	f003 0302 	and.w	r3, r3, #2
 8004d34:	2b02      	cmp	r3, #2
 8004d36:	d112      	bne.n	8004d5e <HAL_SPI_Transmit+0x154>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d3c:	881a      	ldrh	r2, [r3, #0]
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d48:	1c9a      	adds	r2, r3, #2
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d52:	b29b      	uxth	r3, r3
 8004d54:	3b01      	subs	r3, #1
 8004d56:	b29a      	uxth	r2, r3
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004d5c:	e011      	b.n	8004d82 <HAL_SPI_Transmit+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004d5e:	f7fc fd0b 	bl	8001778 <HAL_GetTick>
 8004d62:	4602      	mov	r2, r0
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	1ad3      	subs	r3, r2, r3
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	429a      	cmp	r2, r3
 8004d6c:	d803      	bhi.n	8004d76 <HAL_SPI_Transmit+0x16c>
 8004d6e:	683b      	ldr	r3, [r7, #0]
 8004d70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d74:	d102      	bne.n	8004d7c <HAL_SPI_Transmit+0x172>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d102      	bne.n	8004d82 <HAL_SPI_Transmit+0x178>
        {
          errorcode = HAL_TIMEOUT;
 8004d7c:	2303      	movs	r3, #3
 8004d7e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004d80:	e0a4      	b.n	8004ecc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004d86:	b29b      	uxth	r3, r3
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1ce      	bne.n	8004d2a <HAL_SPI_Transmit+0x120>
 8004d8c:	e07c      	b.n	8004e88 <HAL_SPI_Transmit+0x27e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	685b      	ldr	r3, [r3, #4]
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d002      	beq.n	8004d9c <HAL_SPI_Transmit+0x192>
 8004d96:	8afb      	ldrh	r3, [r7, #22]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d170      	bne.n	8004e7e <HAL_SPI_Transmit+0x274>
    {
      if (hspi->TxXferCount > 1U)
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004da0:	b29b      	uxth	r3, r3
 8004da2:	2b01      	cmp	r3, #1
 8004da4:	d912      	bls.n	8004dcc <HAL_SPI_Transmit+0x1c2>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004daa:	881a      	ldrh	r2, [r3, #0]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004db6:	1c9a      	adds	r2, r3, #2
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004dc0:	b29b      	uxth	r3, r3
 8004dc2:	3b02      	subs	r3, #2
 8004dc4:	b29a      	uxth	r2, r3
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004dca:	e058      	b.n	8004e7e <HAL_SPI_Transmit+0x274>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	330c      	adds	r3, #12
 8004dd6:	7812      	ldrb	r2, [r2, #0]
 8004dd8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dde:	1c5a      	adds	r2, r3, #1
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004de8:	b29b      	uxth	r3, r3
 8004dea:	3b01      	subs	r3, #1
 8004dec:	b29a      	uxth	r2, r3
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8004df2:	e044      	b.n	8004e7e <HAL_SPI_Transmit+0x274>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	689b      	ldr	r3, [r3, #8]
 8004dfa:	f003 0302 	and.w	r3, r3, #2
 8004dfe:	2b02      	cmp	r3, #2
 8004e00:	d12b      	bne.n	8004e5a <HAL_SPI_Transmit+0x250>
      {
        if (hspi->TxXferCount > 1U)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	2b01      	cmp	r3, #1
 8004e0a:	d912      	bls.n	8004e32 <HAL_SPI_Transmit+0x228>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e10:	881a      	ldrh	r2, [r3, #0]
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1c:	1c9a      	adds	r2, r3, #2
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e26:	b29b      	uxth	r3, r3
 8004e28:	3b02      	subs	r3, #2
 8004e2a:	b29a      	uxth	r2, r3
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e30:	e025      	b.n	8004e7e <HAL_SPI_Transmit+0x274>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	330c      	adds	r3, #12
 8004e3c:	7812      	ldrb	r2, [r2, #0]
 8004e3e:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e44:	1c5a      	adds	r2, r3, #1
 8004e46:	68fb      	ldr	r3, [r7, #12]
 8004e48:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e4e:	b29b      	uxth	r3, r3
 8004e50:	3b01      	subs	r3, #1
 8004e52:	b29a      	uxth	r2, r3
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	87da      	strh	r2, [r3, #62]	; 0x3e
 8004e58:	e011      	b.n	8004e7e <HAL_SPI_Transmit+0x274>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004e5a:	f7fc fc8d 	bl	8001778 <HAL_GetTick>
 8004e5e:	4602      	mov	r2, r0
 8004e60:	69bb      	ldr	r3, [r7, #24]
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	683a      	ldr	r2, [r7, #0]
 8004e66:	429a      	cmp	r2, r3
 8004e68:	d803      	bhi.n	8004e72 <HAL_SPI_Transmit+0x268>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e70:	d102      	bne.n	8004e78 <HAL_SPI_Transmit+0x26e>
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d102      	bne.n	8004e7e <HAL_SPI_Transmit+0x274>
        {
          errorcode = HAL_TIMEOUT;
 8004e78:	2303      	movs	r3, #3
 8004e7a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004e7c:	e026      	b.n	8004ecc <HAL_SPI_Transmit+0x2c2>
    while (hspi->TxXferCount > 0U)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004e82:	b29b      	uxth	r3, r3
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1b5      	bne.n	8004df4 <HAL_SPI_Transmit+0x1ea>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004e88:	69ba      	ldr	r2, [r7, #24]
 8004e8a:	6839      	ldr	r1, [r7, #0]
 8004e8c:	68f8      	ldr	r0, [r7, #12]
 8004e8e:	f000 fce3 	bl	8005858 <SPI_EndRxTxTransaction>
 8004e92:	4603      	mov	r3, r0
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d002      	beq.n	8004e9e <HAL_SPI_Transmit+0x294>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2220      	movs	r2, #32
 8004e9c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	689b      	ldr	r3, [r3, #8]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d10a      	bne.n	8004ebc <HAL_SPI_Transmit+0x2b2>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	613b      	str	r3, [r7, #16]
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	68db      	ldr	r3, [r3, #12]
 8004eb0:	613b      	str	r3, [r7, #16]
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	689b      	ldr	r3, [r3, #8]
 8004eb8:	613b      	str	r3, [r7, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d002      	beq.n	8004eca <HAL_SPI_Transmit+0x2c0>
  {
    errorcode = HAL_ERROR;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	77fb      	strb	r3, [r7, #31]
 8004ec8:	e000      	b.n	8004ecc <HAL_SPI_Transmit+0x2c2>
  }

error:
 8004eca:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2200      	movs	r2, #0
 8004ed8:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8004edc:	7ffb      	ldrb	r3, [r7, #31]
}
 8004ede:	4618      	mov	r0, r3
 8004ee0:	3720      	adds	r7, #32
 8004ee2:	46bd      	mov	sp, r7
 8004ee4:	bd80      	pop	{r7, pc}

08004ee6 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ee6:	b580      	push	{r7, lr}
 8004ee8:	b088      	sub	sp, #32
 8004eea:	af02      	add	r7, sp, #8
 8004eec:	60f8      	str	r0, [r7, #12]
 8004eee:	60b9      	str	r1, [r7, #8]
 8004ef0:	603b      	str	r3, [r7, #0]
 8004ef2:	4613      	mov	r3, r2
 8004ef4:	80fb      	strh	r3, [r7, #6]
  __IO uint32_t tmpreg = 0U;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004ef6:	2300      	movs	r3, #0
 8004ef8:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	685b      	ldr	r3, [r3, #4]
 8004efe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004f02:	d112      	bne.n	8004f2a <HAL_SPI_Receive+0x44>
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d10e      	bne.n	8004f2a <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	2204      	movs	r2, #4
 8004f10:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8004f14:	88fa      	ldrh	r2, [r7, #6]
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	4613      	mov	r3, r2
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 f910 	bl	8005146 <HAL_SPI_TransmitReceive>
 8004f26:	4603      	mov	r3, r0
 8004f28:	e109      	b.n	800513e <HAL_SPI_Receive+0x258>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d101      	bne.n	8004f38 <HAL_SPI_Receive+0x52>
 8004f34:	2302      	movs	r3, #2
 8004f36:	e102      	b.n	800513e <HAL_SPI_Receive+0x258>
 8004f38:	68fb      	ldr	r3, [r7, #12]
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004f40:	f7fc fc1a 	bl	8001778 <HAL_GetTick>
 8004f44:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b01      	cmp	r3, #1
 8004f50:	d002      	beq.n	8004f58 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 8004f52:	2302      	movs	r3, #2
 8004f54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f56:	e0e9      	b.n	800512c <HAL_SPI_Receive+0x246>
  }

  if ((pData == NULL) || (Size == 0U))
 8004f58:	68bb      	ldr	r3, [r7, #8]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d002      	beq.n	8004f64 <HAL_SPI_Receive+0x7e>
 8004f5e:	88fb      	ldrh	r3, [r7, #6]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d102      	bne.n	8004f6a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8004f64:	2301      	movs	r3, #1
 8004f66:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004f68:	e0e0      	b.n	800512c <HAL_SPI_Receive+0x246>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2204      	movs	r2, #4
 8004f6e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	2200      	movs	r2, #0
 8004f76:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	68ba      	ldr	r2, [r7, #8]
 8004f7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	88fa      	ldrh	r2, [r7, #6]
 8004f82:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	88fa      	ldrh	r2, [r7, #6]
 8004f8a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	2200      	movs	r2, #0
 8004f92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	2200      	movs	r2, #0
 8004f98:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxISR       = NULL;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	2200      	movs	r2, #0
 8004fa4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	68db      	ldr	r3, [r3, #12]
 8004fb0:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8004fb4:	d908      	bls.n	8004fc8 <HAL_SPI_Receive+0xe2>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685a      	ldr	r2, [r3, #4]
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fc4:	605a      	str	r2, [r3, #4]
 8004fc6:	e007      	b.n	8004fd8 <HAL_SPI_Receive+0xf2>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	685a      	ldr	r2, [r3, #4]
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004fd6:	605a      	str	r2, [r3, #4]
  }

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	689b      	ldr	r3, [r3, #8]
 8004fdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004fe0:	d10f      	bne.n	8005002 <HAL_SPI_Receive+0x11c>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	681a      	ldr	r2, [r3, #0]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004ff0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005000:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800500c:	2b40      	cmp	r3, #64	; 0x40
 800500e:	d007      	beq.n	8005020 <HAL_SPI_Receive+0x13a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800501e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize <= SPI_DATASIZE_8BIT)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005028:	d867      	bhi.n	80050fa <HAL_SPI_Receive+0x214>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800502a:	e030      	b.n	800508e <HAL_SPI_Receive+0x1a8>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	689b      	ldr	r3, [r3, #8]
 8005032:	f003 0301 	and.w	r3, r3, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	d117      	bne.n	800506a <HAL_SPI_Receive+0x184>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f103 020c 	add.w	r2, r3, #12
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	7812      	ldrb	r2, [r2, #0]
 8005048:	b2d2      	uxtb	r2, r2
 800504a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005050:	1c5a      	adds	r2, r3, #1
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800505c:	b29b      	uxth	r3, r3
 800505e:	3b01      	subs	r3, #1
 8005060:	b29a      	uxth	r2, r3
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8005068:	e011      	b.n	800508e <HAL_SPI_Receive+0x1a8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800506a:	f7fc fb85 	bl	8001778 <HAL_GetTick>
 800506e:	4602      	mov	r2, r0
 8005070:	693b      	ldr	r3, [r7, #16]
 8005072:	1ad3      	subs	r3, r2, r3
 8005074:	683a      	ldr	r2, [r7, #0]
 8005076:	429a      	cmp	r2, r3
 8005078:	d803      	bhi.n	8005082 <HAL_SPI_Receive+0x19c>
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005080:	d102      	bne.n	8005088 <HAL_SPI_Receive+0x1a2>
 8005082:	683b      	ldr	r3, [r7, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d102      	bne.n	800508e <HAL_SPI_Receive+0x1a8>
        {
          errorcode = HAL_TIMEOUT;
 8005088:	2303      	movs	r3, #3
 800508a:	75fb      	strb	r3, [r7, #23]
          goto error;
 800508c:	e04e      	b.n	800512c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d1c8      	bne.n	800502c <HAL_SPI_Receive+0x146>
 800509a:	e034      	b.n	8005106 <HAL_SPI_Receive+0x220>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d115      	bne.n	80050d6 <HAL_SPI_Receive+0x1f0>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68da      	ldr	r2, [r3, #12]
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	b292      	uxth	r2, r2
 80050b6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80050b8:	68fb      	ldr	r3, [r7, #12]
 80050ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050bc:	1c9a      	adds	r2, r3, #2
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80050c8:	b29b      	uxth	r3, r3
 80050ca:	3b01      	subs	r3, #1
 80050cc:	b29a      	uxth	r2, r3
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 80050d4:	e011      	b.n	80050fa <HAL_SPI_Receive+0x214>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80050d6:	f7fc fb4f 	bl	8001778 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	683a      	ldr	r2, [r7, #0]
 80050e2:	429a      	cmp	r2, r3
 80050e4:	d803      	bhi.n	80050ee <HAL_SPI_Receive+0x208>
 80050e6:	683b      	ldr	r3, [r7, #0]
 80050e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050ec:	d102      	bne.n	80050f4 <HAL_SPI_Receive+0x20e>
 80050ee:	683b      	ldr	r3, [r7, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d102      	bne.n	80050fa <HAL_SPI_Receive+0x214>
        {
          errorcode = HAL_TIMEOUT;
 80050f4:	2303      	movs	r3, #3
 80050f6:	75fb      	strb	r3, [r7, #23]
          goto error;
 80050f8:	e018      	b.n	800512c <HAL_SPI_Receive+0x246>
    while (hspi->RxXferCount > 0U)
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005100:	b29b      	uxth	r3, r3
 8005102:	2b00      	cmp	r3, #0
 8005104:	d1ca      	bne.n	800509c <HAL_SPI_Receive+0x1b6>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005106:	693a      	ldr	r2, [r7, #16]
 8005108:	6839      	ldr	r1, [r7, #0]
 800510a:	68f8      	ldr	r0, [r7, #12]
 800510c:	f000 fb4c 	bl	80057a8 <SPI_EndRxTransaction>
 8005110:	4603      	mov	r3, r0
 8005112:	2b00      	cmp	r3, #0
 8005114:	d002      	beq.n	800511c <HAL_SPI_Receive+0x236>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	661a      	str	r2, [r3, #96]	; 0x60
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005120:	2b00      	cmp	r3, #0
 8005122:	d002      	beq.n	800512a <HAL_SPI_Receive+0x244>
  {
    errorcode = HAL_ERROR;
 8005124:	2301      	movs	r3, #1
 8005126:	75fb      	strb	r3, [r7, #23]
 8005128:	e000      	b.n	800512c <HAL_SPI_Receive+0x246>
  }

error :
 800512a:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	2201      	movs	r2, #1
 8005130:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005134:	68fb      	ldr	r3, [r7, #12]
 8005136:	2200      	movs	r2, #0
 8005138:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800513c:	7dfb      	ldrb	r3, [r7, #23]
}
 800513e:	4618      	mov	r0, r3
 8005140:	3718      	adds	r7, #24
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}

08005146 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8005146:	b580      	push	{r7, lr}
 8005148:	b08a      	sub	sp, #40	; 0x28
 800514a:	af00      	add	r7, sp, #0
 800514c:	60f8      	str	r0, [r7, #12]
 800514e:	60b9      	str	r1, [r7, #8]
 8005150:	607a      	str	r2, [r7, #4]
 8005152:	807b      	strh	r3, [r7, #2]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8005154:	2301      	movs	r3, #1
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8005164:	2b01      	cmp	r3, #1
 8005166:	d101      	bne.n	800516c <HAL_SPI_TransmitReceive+0x26>
 8005168:	2302      	movs	r3, #2
 800516a:	e1fb      	b.n	8005564 <HAL_SPI_TransmitReceive+0x41e>
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005174:	f7fc fb00 	bl	8001778 <HAL_GetTick>
 8005178:	61f8      	str	r0, [r7, #28]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005180:	76fb      	strb	r3, [r7, #27]
  tmp_mode            = hspi->Init.Mode;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	685b      	ldr	r3, [r3, #4]
 8005186:	617b      	str	r3, [r7, #20]
  initial_TxXferCount = Size;
 8005188:	887b      	ldrh	r3, [r7, #2]
 800518a:	827b      	strh	r3, [r7, #18]
  initial_RxXferCount = Size;
 800518c:	887b      	ldrh	r3, [r7, #2]
 800518e:	823b      	strh	r3, [r7, #16]
#if (USE_SPI_CRC != 0U)
  spi_cr1             = READ_REG(hspi->Instance->CR1);
  spi_cr2             = READ_REG(hspi->Instance->CR2);
#endif /* USE_SPI_CRC */

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8005190:	7efb      	ldrb	r3, [r7, #27]
 8005192:	2b01      	cmp	r3, #1
 8005194:	d00e      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x6e>
 8005196:	697b      	ldr	r3, [r7, #20]
 8005198:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800519c:	d106      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x66>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d102      	bne.n	80051ac <HAL_SPI_TransmitReceive+0x66>
 80051a6:	7efb      	ldrb	r3, [r7, #27]
 80051a8:	2b04      	cmp	r3, #4
 80051aa:	d003      	beq.n	80051b4 <HAL_SPI_TransmitReceive+0x6e>
  {
    errorcode = HAL_BUSY;
 80051ac:	2302      	movs	r3, #2
 80051ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051b2:	e1cd      	b.n	8005550 <HAL_SPI_TransmitReceive+0x40a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d005      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x80>
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d002      	beq.n	80051c6 <HAL_SPI_TransmitReceive+0x80>
 80051c0:	887b      	ldrh	r3, [r7, #2]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d103      	bne.n	80051ce <HAL_SPI_TransmitReceive+0x88>
  {
    errorcode = HAL_ERROR;
 80051c6:	2301      	movs	r3, #1
 80051c8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    goto error;
 80051cc:	e1c0      	b.n	8005550 <HAL_SPI_TransmitReceive+0x40a>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	2b04      	cmp	r3, #4
 80051d8:	d003      	beq.n	80051e2 <HAL_SPI_TransmitReceive+0x9c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2205      	movs	r2, #5
 80051de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	2200      	movs	r2, #0
 80051e6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	687a      	ldr	r2, [r7, #4]
 80051ec:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount = Size;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	887a      	ldrh	r2, [r7, #2]
 80051f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxXferSize  = Size;
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	887a      	ldrh	r2, [r7, #2]
 80051fa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	68ba      	ldr	r2, [r7, #8]
 8005202:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount = Size;
 8005204:	68fb      	ldr	r3, [r7, #12]
 8005206:	887a      	ldrh	r2, [r7, #2]
 8005208:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxXferSize  = Size;
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	887a      	ldrh	r2, [r7, #2]
 800520e:	879a      	strh	r2, [r3, #60]	; 0x3c

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2200      	movs	r2, #0
 8005214:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	2200      	movs	r2, #0
 800521a:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the Rx Fifo threshold */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (initial_RxXferCount > 1U))
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	68db      	ldr	r3, [r3, #12]
 8005220:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005224:	d802      	bhi.n	800522c <HAL_SPI_TransmitReceive+0xe6>
 8005226:	8a3b      	ldrh	r3, [r7, #16]
 8005228:	2b01      	cmp	r3, #1
 800522a:	d908      	bls.n	800523e <HAL_SPI_TransmitReceive+0xf8>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	685a      	ldr	r2, [r3, #4]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800523a:	605a      	str	r2, [r3, #4]
 800523c:	e007      	b.n	800524e <HAL_SPI_TransmitReceive+0x108>
  }
  else
  {
    /* Set fiforxthreshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800524c:	605a      	str	r2, [r3, #4]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005258:	2b40      	cmp	r3, #64	; 0x40
 800525a:	d007      	beq.n	800526c <HAL_SPI_TransmitReceive+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800526a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	68db      	ldr	r3, [r3, #12]
 8005270:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005274:	d97c      	bls.n	8005370 <HAL_SPI_TransmitReceive+0x22a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	685b      	ldr	r3, [r3, #4]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d002      	beq.n	8005284 <HAL_SPI_TransmitReceive+0x13e>
 800527e:	8a7b      	ldrh	r3, [r7, #18]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d169      	bne.n	8005358 <HAL_SPI_TransmitReceive+0x212>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005288:	881a      	ldrh	r2, [r3, #0]
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	1c9a      	adds	r2, r3, #2
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800529e:	b29b      	uxth	r3, r3
 80052a0:	3b01      	subs	r3, #1
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80052a8:	e056      	b.n	8005358 <HAL_SPI_TransmitReceive+0x212>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80052aa:	68fb      	ldr	r3, [r7, #12]
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	f003 0302 	and.w	r3, r3, #2
 80052b4:	2b02      	cmp	r3, #2
 80052b6:	d11b      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x1aa>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052bc:	b29b      	uxth	r3, r3
 80052be:	2b00      	cmp	r3, #0
 80052c0:	d016      	beq.n	80052f0 <HAL_SPI_TransmitReceive+0x1aa>
 80052c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c4:	2b01      	cmp	r3, #1
 80052c6:	d113      	bne.n	80052f0 <HAL_SPI_TransmitReceive+0x1aa>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052cc:	881a      	ldrh	r2, [r3, #0]
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d8:	1c9a      	adds	r2, r3, #2
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80052e2:	b29b      	uxth	r3, r3
 80052e4:	3b01      	subs	r3, #1
 80052e6:	b29a      	uxth	r2, r3
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80052ec:	2300      	movs	r3, #0
 80052ee:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	689b      	ldr	r3, [r3, #8]
 80052f6:	f003 0301 	and.w	r3, r3, #1
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d11c      	bne.n	8005338 <HAL_SPI_TransmitReceive+0x1f2>
 80052fe:	68fb      	ldr	r3, [r7, #12]
 8005300:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005304:	b29b      	uxth	r3, r3
 8005306:	2b00      	cmp	r3, #0
 8005308:	d016      	beq.n	8005338 <HAL_SPI_TransmitReceive+0x1f2>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005314:	b292      	uxth	r2, r2
 8005316:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800531c:	1c9a      	adds	r2, r3, #2
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	641a      	str	r2, [r3, #64]	; 0x40
        hspi->RxXferCount--;
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005328:	b29b      	uxth	r3, r3
 800532a:	3b01      	subs	r3, #1
 800532c:	b29a      	uxth	r2, r3
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8005334:	2301      	movs	r3, #1
 8005336:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8005338:	f7fc fa1e 	bl	8001778 <HAL_GetTick>
 800533c:	4602      	mov	r2, r0
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	1ad3      	subs	r3, r2, r3
 8005342:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005344:	429a      	cmp	r2, r3
 8005346:	d807      	bhi.n	8005358 <HAL_SPI_TransmitReceive+0x212>
 8005348:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800534a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800534e:	d003      	beq.n	8005358 <HAL_SPI_TransmitReceive+0x212>
      {
        errorcode = HAL_TIMEOUT;
 8005350:	2303      	movs	r3, #3
 8005352:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005356:	e0fb      	b.n	8005550 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d1a3      	bne.n	80052aa <HAL_SPI_TransmitReceive+0x164>
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005368:	b29b      	uxth	r3, r3
 800536a:	2b00      	cmp	r3, #0
 800536c:	d19d      	bne.n	80052aa <HAL_SPI_TransmitReceive+0x164>
 800536e:	e0df      	b.n	8005530 <HAL_SPI_TransmitReceive+0x3ea>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	685b      	ldr	r3, [r3, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d003      	beq.n	8005380 <HAL_SPI_TransmitReceive+0x23a>
 8005378:	8a7b      	ldrh	r3, [r7, #18]
 800537a:	2b01      	cmp	r3, #1
 800537c:	f040 80cb 	bne.w	8005516 <HAL_SPI_TransmitReceive+0x3d0>
    {
      if (hspi->TxXferCount > 1U)
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005384:	b29b      	uxth	r3, r3
 8005386:	2b01      	cmp	r3, #1
 8005388:	d912      	bls.n	80053b0 <HAL_SPI_TransmitReceive+0x26a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800538e:	881a      	ldrh	r2, [r3, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800539a:	1c9a      	adds	r2, r3, #2
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053a4:	b29b      	uxth	r3, r3
 80053a6:	3b02      	subs	r3, #2
 80053a8:	b29a      	uxth	r2, r3
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80053ae:	e0b2      	b.n	8005516 <HAL_SPI_TransmitReceive+0x3d0>
      }
      else
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	330c      	adds	r3, #12
 80053ba:	7812      	ldrb	r2, [r2, #0]
 80053bc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80053c2:	1c5a      	adds	r2, r3, #1
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053cc:	b29b      	uxth	r3, r3
 80053ce:	3b01      	subs	r3, #1
 80053d0:	b29a      	uxth	r2, r3
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80053d6:	e09e      	b.n	8005516 <HAL_SPI_TransmitReceive+0x3d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	689b      	ldr	r3, [r3, #8]
 80053de:	f003 0302 	and.w	r3, r3, #2
 80053e2:	2b02      	cmp	r3, #2
 80053e4:	d134      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x30a>
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02f      	beq.n	8005450 <HAL_SPI_TransmitReceive+0x30a>
 80053f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f2:	2b01      	cmp	r3, #1
 80053f4:	d12c      	bne.n	8005450 <HAL_SPI_TransmitReceive+0x30a>
      {
        if (hspi->TxXferCount > 1U)
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80053fa:	b29b      	uxth	r3, r3
 80053fc:	2b01      	cmp	r3, #1
 80053fe:	d912      	bls.n	8005426 <HAL_SPI_TransmitReceive+0x2e0>
        {
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005404:	881a      	ldrh	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005410:	1c9a      	adds	r2, r3, #2
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800541a:	b29b      	uxth	r3, r3
 800541c:	3b02      	subs	r3, #2
 800541e:	b29a      	uxth	r2, r3
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	87da      	strh	r2, [r3, #62]	; 0x3e
 8005424:	e012      	b.n	800544c <HAL_SPI_TransmitReceive+0x306>
        }
        else
        {
          *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	330c      	adds	r3, #12
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005438:	1c5a      	adds	r2, r3, #1
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8005442:	b29b      	uxth	r3, r3
 8005444:	3b01      	subs	r3, #1
 8005446:	b29a      	uxth	r2, r3
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	87da      	strh	r2, [r3, #62]	; 0x3e
        }
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800544c:	2300      	movs	r3, #0
 800544e:	627b      	str	r3, [r7, #36]	; 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	f003 0301 	and.w	r3, r3, #1
 800545a:	2b01      	cmp	r3, #1
 800545c:	d148      	bne.n	80054f0 <HAL_SPI_TransmitReceive+0x3aa>
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005464:	b29b      	uxth	r3, r3
 8005466:	2b00      	cmp	r3, #0
 8005468:	d042      	beq.n	80054f0 <HAL_SPI_TransmitReceive+0x3aa>
      {
        if (hspi->RxXferCount > 1U)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005470:	b29b      	uxth	r3, r3
 8005472:	2b01      	cmp	r3, #1
 8005474:	d923      	bls.n	80054be <HAL_SPI_TransmitReceive+0x378>
        {
          *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68da      	ldr	r2, [r3, #12]
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005480:	b292      	uxth	r2, r2
 8005482:	801a      	strh	r2, [r3, #0]
          hspi->pRxBuffPtr += sizeof(uint16_t);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005488:	1c9a      	adds	r2, r3, #2
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount -= 2U;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005494:	b29b      	uxth	r3, r3
 8005496:	3b02      	subs	r3, #2
 8005498:	b29a      	uxth	r2, r3
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
          if (hspi->RxXferCount <= 1U)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054a6:	b29b      	uxth	r3, r3
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d81f      	bhi.n	80054ec <HAL_SPI_TransmitReceive+0x3a6>
          {
            /* Set RX Fifo threshold before to switch on 8 bit data size */
            SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	685a      	ldr	r2, [r3, #4]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80054ba:	605a      	str	r2, [r3, #4]
 80054bc:	e016      	b.n	80054ec <HAL_SPI_TransmitReceive+0x3a6>
          }
        }
        else
        {
          (*(uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f103 020c 	add.w	r2, r3, #12
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054ca:	7812      	ldrb	r2, [r2, #0]
 80054cc:	b2d2      	uxtb	r2, r2
 80054ce:	701a      	strb	r2, [r3, #0]
          hspi->pRxBuffPtr++;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d4:	1c5a      	adds	r2, r3, #1
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
          hspi->RxXferCount--;
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 80054e0:	b29b      	uxth	r3, r3
 80054e2:	3b01      	subs	r3, #1
 80054e4:	b29a      	uxth	r2, r3
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
        }
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80054ec:	2301      	movs	r3, #1
 80054ee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80054f0:	f7fc f942 	bl	8001778 <HAL_GetTick>
 80054f4:	4602      	mov	r2, r0
 80054f6:	69fb      	ldr	r3, [r7, #28]
 80054f8:	1ad3      	subs	r3, r2, r3
 80054fa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80054fc:	429a      	cmp	r2, r3
 80054fe:	d803      	bhi.n	8005508 <HAL_SPI_TransmitReceive+0x3c2>
 8005500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005506:	d102      	bne.n	800550e <HAL_SPI_TransmitReceive+0x3c8>
 8005508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800550a:	2b00      	cmp	r3, #0
 800550c:	d103      	bne.n	8005516 <HAL_SPI_TransmitReceive+0x3d0>
      {
        errorcode = HAL_TIMEOUT;
 800550e:	2303      	movs	r3, #3
 8005510:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
        goto error;
 8005514:	e01c      	b.n	8005550 <HAL_SPI_TransmitReceive+0x40a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800551a:	b29b      	uxth	r3, r3
 800551c:	2b00      	cmp	r3, #0
 800551e:	f47f af5b 	bne.w	80053d8 <HAL_SPI_TransmitReceive+0x292>
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8005528:	b29b      	uxth	r3, r3
 800552a:	2b00      	cmp	r3, #0
 800552c:	f47f af54 	bne.w	80053d8 <HAL_SPI_TransmitReceive+0x292>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005530:	69fa      	ldr	r2, [r7, #28]
 8005532:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005534:	68f8      	ldr	r0, [r7, #12]
 8005536:	f000 f98f 	bl	8005858 <SPI_EndRxTxTransaction>
 800553a:	4603      	mov	r3, r0
 800553c:	2b00      	cmp	r3, #0
 800553e:	d006      	beq.n	800554e <HAL_SPI_TransmitReceive+0x408>
  {
    errorcode = HAL_ERROR;
 8005540:	2301      	movs	r3, #1
 8005542:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2220      	movs	r2, #32
 800554a:	661a      	str	r2, [r3, #96]	; 0x60
 800554c:	e000      	b.n	8005550 <HAL_SPI_TransmitReceive+0x40a>
  }

error :
 800554e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	2201      	movs	r2, #1
 8005554:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  __HAL_UNLOCK(hspi);
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8005560:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
}
 8005564:	4618      	mov	r0, r3
 8005566:	3728      	adds	r7, #40	; 0x28
 8005568:	46bd      	mov	sp, r7
 800556a:	bd80      	pop	{r7, pc}

0800556c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b088      	sub	sp, #32
 8005570:	af00      	add	r7, sp, #0
 8005572:	60f8      	str	r0, [r7, #12]
 8005574:	60b9      	str	r1, [r7, #8]
 8005576:	603b      	str	r3, [r7, #0]
 8005578:	4613      	mov	r3, r2
 800557a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800557c:	f7fc f8fc 	bl	8001778 <HAL_GetTick>
 8005580:	4602      	mov	r2, r0
 8005582:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005584:	1a9b      	subs	r3, r3, r2
 8005586:	683a      	ldr	r2, [r7, #0]
 8005588:	4413      	add	r3, r2
 800558a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800558c:	f7fc f8f4 	bl	8001778 <HAL_GetTick>
 8005590:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005592:	4b39      	ldr	r3, [pc, #228]	; (8005678 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	015b      	lsls	r3, r3, #5
 8005598:	0d1b      	lsrs	r3, r3, #20
 800559a:	69fa      	ldr	r2, [r7, #28]
 800559c:	fb02 f303 	mul.w	r3, r2, r3
 80055a0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80055a2:	e054      	b.n	800564e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055aa:	d050      	beq.n	800564e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80055ac:	f7fc f8e4 	bl	8001778 <HAL_GetTick>
 80055b0:	4602      	mov	r2, r0
 80055b2:	69bb      	ldr	r3, [r7, #24]
 80055b4:	1ad3      	subs	r3, r2, r3
 80055b6:	69fa      	ldr	r2, [r7, #28]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d902      	bls.n	80055c2 <SPI_WaitFlagStateUntilTimeout+0x56>
 80055bc:	69fb      	ldr	r3, [r7, #28]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d13d      	bne.n	800563e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	685a      	ldr	r2, [r3, #4]
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80055d0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80055da:	d111      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x94>
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	689b      	ldr	r3, [r3, #8]
 80055e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80055e4:	d004      	beq.n	80055f0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	689b      	ldr	r3, [r3, #8]
 80055ea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80055ee:	d107      	bne.n	8005600 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	681a      	ldr	r2, [r3, #0]
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80055fe:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005604:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005608:	d10f      	bne.n	800562a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005618:	601a      	str	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005628:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2201      	movs	r2, #1
 800562e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800563a:	2303      	movs	r3, #3
 800563c:	e017      	b.n	800566e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800563e:	697b      	ldr	r3, [r7, #20]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d101      	bne.n	8005648 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8005644:	2300      	movs	r3, #0
 8005646:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8005648:	697b      	ldr	r3, [r7, #20]
 800564a:	3b01      	subs	r3, #1
 800564c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	689a      	ldr	r2, [r3, #8]
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	68ba      	ldr	r2, [r7, #8]
 800565a:	429a      	cmp	r2, r3
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	79fb      	ldrb	r3, [r7, #7]
 8005668:	429a      	cmp	r2, r3
 800566a:	d19b      	bne.n	80055a4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800566c:	2300      	movs	r3, #0
}
 800566e:	4618      	mov	r0, r3
 8005670:	3720      	adds	r7, #32
 8005672:	46bd      	mov	sp, r7
 8005674:	bd80      	pop	{r7, pc}
 8005676:	bf00      	nop
 8005678:	20000000 	.word	0x20000000

0800567c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b08a      	sub	sp, #40	; 0x28
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
 8005688:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800568a:	2300      	movs	r3, #0
 800568c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800568e:	f7fc f873 	bl	8001778 <HAL_GetTick>
 8005692:	4602      	mov	r2, r0
 8005694:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005696:	1a9b      	subs	r3, r3, r2
 8005698:	683a      	ldr	r2, [r7, #0]
 800569a:	4413      	add	r3, r2
 800569c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800569e:	f7fc f86b 	bl	8001778 <HAL_GetTick>
 80056a2:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	330c      	adds	r3, #12
 80056aa:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 80056ac:	4b3d      	ldr	r3, [pc, #244]	; (80057a4 <SPI_WaitFifoStateUntilTimeout+0x128>)
 80056ae:	681a      	ldr	r2, [r3, #0]
 80056b0:	4613      	mov	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4413      	add	r3, r2
 80056b6:	00da      	lsls	r2, r3, #3
 80056b8:	1ad3      	subs	r3, r2, r3
 80056ba:	0d1b      	lsrs	r3, r3, #20
 80056bc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056be:	fb02 f303 	mul.w	r3, r2, r3
 80056c2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80056c4:	e060      	b.n	8005788 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80056cc:	d107      	bne.n	80056de <SPI_WaitFifoStateUntilTimeout+0x62>
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d104      	bne.n	80056de <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80056d4:	69fb      	ldr	r3, [r7, #28]
 80056d6:	781b      	ldrb	r3, [r3, #0]
 80056d8:	b2db      	uxtb	r3, r3
 80056da:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80056dc:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056e4:	d050      	beq.n	8005788 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80056e6:	f7fc f847 	bl	8001778 <HAL_GetTick>
 80056ea:	4602      	mov	r2, r0
 80056ec:	6a3b      	ldr	r3, [r7, #32]
 80056ee:	1ad3      	subs	r3, r2, r3
 80056f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056f2:	429a      	cmp	r2, r3
 80056f4:	d902      	bls.n	80056fc <SPI_WaitFifoStateUntilTimeout+0x80>
 80056f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d13d      	bne.n	8005778 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	685a      	ldr	r2, [r3, #4]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800570a:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	685b      	ldr	r3, [r3, #4]
 8005710:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005714:	d111      	bne.n	800573a <SPI_WaitFifoStateUntilTimeout+0xbe>
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	689b      	ldr	r3, [r3, #8]
 800571a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800571e:	d004      	beq.n	800572a <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	689b      	ldr	r3, [r3, #8]
 8005724:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005728:	d107      	bne.n	800573a <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	681a      	ldr	r2, [r3, #0]
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005738:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800573e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005742:	d10f      	bne.n	8005764 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	681a      	ldr	r2, [r3, #0]
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005752:	601a      	str	r2, [r3, #0]
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005762:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	2201      	movs	r2, #1
 8005768:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2200      	movs	r2, #0
 8005770:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 8005774:	2303      	movs	r3, #3
 8005776:	e010      	b.n	800579a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8005778:	69bb      	ldr	r3, [r7, #24]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d101      	bne.n	8005782 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800577e:	2300      	movs	r3, #0
 8005780:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8005782:	69bb      	ldr	r3, [r7, #24]
 8005784:	3b01      	subs	r3, #1
 8005786:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	689a      	ldr	r2, [r3, #8]
 800578e:	68bb      	ldr	r3, [r7, #8]
 8005790:	4013      	ands	r3, r2
 8005792:	687a      	ldr	r2, [r7, #4]
 8005794:	429a      	cmp	r2, r3
 8005796:	d196      	bne.n	80056c6 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8005798:	2300      	movs	r3, #0
}
 800579a:	4618      	mov	r0, r3
 800579c:	3728      	adds	r7, #40	; 0x28
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000000 	.word	0x20000000

080057a8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80057a8:	b580      	push	{r7, lr}
 80057aa:	b086      	sub	sp, #24
 80057ac:	af02      	add	r7, sp, #8
 80057ae:	60f8      	str	r0, [r7, #12]
 80057b0:	60b9      	str	r1, [r7, #8]
 80057b2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80057bc:	d111      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80057c6:	d004      	beq.n	80057d2 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	689b      	ldr	r3, [r3, #8]
 80057cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80057d0:	d107      	bne.n	80057e2 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e0:	601a      	str	r2, [r3, #0]
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	9300      	str	r3, [sp, #0]
 80057e6:	68bb      	ldr	r3, [r7, #8]
 80057e8:	2200      	movs	r2, #0
 80057ea:	2180      	movs	r1, #128	; 0x80
 80057ec:	68f8      	ldr	r0, [r7, #12]
 80057ee:	f7ff febd 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d007      	beq.n	8005808 <SPI_EndRxTransaction+0x60>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057fc:	f043 0220 	orr.w	r2, r3, #32
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005804:	2303      	movs	r3, #3
 8005806:	e023      	b.n	8005850 <SPI_EndRxTransaction+0xa8>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005810:	d11d      	bne.n	800584e <SPI_EndRxTransaction+0xa6>
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	689b      	ldr	r3, [r3, #8]
 8005816:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800581a:	d004      	beq.n	8005826 <SPI_EndRxTransaction+0x7e>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	689b      	ldr	r3, [r3, #8]
 8005820:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005824:	d113      	bne.n	800584e <SPI_EndRxTransaction+0xa6>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	9300      	str	r3, [sp, #0]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	2200      	movs	r2, #0
 800582e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	f7ff ff22 	bl	800567c <SPI_WaitFifoStateUntilTimeout>
 8005838:	4603      	mov	r3, r0
 800583a:	2b00      	cmp	r3, #0
 800583c:	d007      	beq.n	800584e <SPI_EndRxTransaction+0xa6>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005842:	f043 0220 	orr.w	r2, r3, #32
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800584a:	2303      	movs	r3, #3
 800584c:	e000      	b.n	8005850 <SPI_EndRxTransaction+0xa8>
    }
  }
  return HAL_OK;
 800584e:	2300      	movs	r3, #0
}
 8005850:	4618      	mov	r0, r3
 8005852:	3710      	adds	r7, #16
 8005854:	46bd      	mov	sp, r7
 8005856:	bd80      	pop	{r7, pc}

08005858 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8005858:	b580      	push	{r7, lr}
 800585a:	b086      	sub	sp, #24
 800585c:	af02      	add	r7, sp, #8
 800585e:	60f8      	str	r0, [r7, #12]
 8005860:	60b9      	str	r1, [r7, #8]
 8005862:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	9300      	str	r3, [sp, #0]
 8005868:	68bb      	ldr	r3, [r7, #8]
 800586a:	2200      	movs	r2, #0
 800586c:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 8005870:	68f8      	ldr	r0, [r7, #12]
 8005872:	f7ff ff03 	bl	800567c <SPI_WaitFifoStateUntilTimeout>
 8005876:	4603      	mov	r3, r0
 8005878:	2b00      	cmp	r3, #0
 800587a:	d007      	beq.n	800588c <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005880:	f043 0220 	orr.w	r2, r3, #32
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8005888:	2303      	movs	r3, #3
 800588a:	e027      	b.n	80058dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	9300      	str	r3, [sp, #0]
 8005890:	68bb      	ldr	r3, [r7, #8]
 8005892:	2200      	movs	r2, #0
 8005894:	2180      	movs	r1, #128	; 0x80
 8005896:	68f8      	ldr	r0, [r7, #12]
 8005898:	f7ff fe68 	bl	800556c <SPI_WaitFlagStateUntilTimeout>
 800589c:	4603      	mov	r3, r0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d007      	beq.n	80058b2 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058a6:	f043 0220 	orr.w	r2, r3, #32
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058ae:	2303      	movs	r3, #3
 80058b0:	e014      	b.n	80058dc <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	9300      	str	r3, [sp, #0]
 80058b6:	68bb      	ldr	r3, [r7, #8]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f7ff fedc 	bl	800567c <SPI_WaitFifoStateUntilTimeout>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d007      	beq.n	80058da <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80058ce:	f043 0220 	orr.w	r2, r3, #32
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80058d6:	2303      	movs	r3, #3
 80058d8:	e000      	b.n	80058dc <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80058da:	2300      	movs	r3, #0
}
 80058dc:	4618      	mov	r0, r3
 80058de:	3710      	adds	r7, #16
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b082      	sub	sp, #8
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d101      	bne.n	80058f6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e049      	b.n	800598a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058fc:	b2db      	uxtb	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d106      	bne.n	8005910 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	2200      	movs	r2, #0
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	f7fb fe3a 	bl	8001584 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2202      	movs	r2, #2
 8005914:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	681a      	ldr	r2, [r3, #0]
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	3304      	adds	r3, #4
 8005920:	4619      	mov	r1, r3
 8005922:	4610      	mov	r0, r2
 8005924:	f000 fe24 	bl	8006570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2201      	movs	r2, #1
 800592c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2201      	movs	r2, #1
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2201      	movs	r2, #1
 800593c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2201      	movs	r2, #1
 8005944:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	2201      	movs	r2, #1
 8005954:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	2201      	movs	r2, #1
 800595c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	2201      	movs	r2, #1
 8005964:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	2201      	movs	r2, #1
 800596c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2201      	movs	r2, #1
 8005974:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2201      	movs	r2, #1
 800597c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	2201      	movs	r2, #1
 8005984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005988:	2300      	movs	r3, #0
}
 800598a:	4618      	mov	r0, r3
 800598c:	3708      	adds	r7, #8
 800598e:	46bd      	mov	sp, r7
 8005990:	bd80      	pop	{r7, pc}
	...

08005994 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005994:	b480      	push	{r7}
 8005996:	b085      	sub	sp, #20
 8005998:	af00      	add	r7, sp, #0
 800599a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	2b01      	cmp	r3, #1
 80059a6:	d001      	beq.n	80059ac <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059a8:	2301      	movs	r3, #1
 80059aa:	e042      	b.n	8005a32 <HAL_TIM_Base_Start+0x9e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2202      	movs	r2, #2
 80059b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	4a21      	ldr	r2, [pc, #132]	; (8005a40 <HAL_TIM_Base_Start+0xac>)
 80059ba:	4293      	cmp	r3, r2
 80059bc:	d018      	beq.n	80059f0 <HAL_TIM_Base_Start+0x5c>
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80059c6:	d013      	beq.n	80059f0 <HAL_TIM_Base_Start+0x5c>
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	4a1d      	ldr	r2, [pc, #116]	; (8005a44 <HAL_TIM_Base_Start+0xb0>)
 80059ce:	4293      	cmp	r3, r2
 80059d0:	d00e      	beq.n	80059f0 <HAL_TIM_Base_Start+0x5c>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	4a1c      	ldr	r2, [pc, #112]	; (8005a48 <HAL_TIM_Base_Start+0xb4>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d009      	beq.n	80059f0 <HAL_TIM_Base_Start+0x5c>
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	4a1a      	ldr	r2, [pc, #104]	; (8005a4c <HAL_TIM_Base_Start+0xb8>)
 80059e2:	4293      	cmp	r3, r2
 80059e4:	d004      	beq.n	80059f0 <HAL_TIM_Base_Start+0x5c>
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	4a19      	ldr	r2, [pc, #100]	; (8005a50 <HAL_TIM_Base_Start+0xbc>)
 80059ec:	4293      	cmp	r3, r2
 80059ee:	d115      	bne.n	8005a1c <HAL_TIM_Base_Start+0x88>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	689a      	ldr	r2, [r3, #8]
 80059f6:	4b17      	ldr	r3, [pc, #92]	; (8005a54 <HAL_TIM_Base_Start+0xc0>)
 80059f8:	4013      	ands	r3, r2
 80059fa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	2b06      	cmp	r3, #6
 8005a00:	d015      	beq.n	8005a2e <HAL_TIM_Base_Start+0x9a>
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a08:	d011      	beq.n	8005a2e <HAL_TIM_Base_Start+0x9a>
    {
      __HAL_TIM_ENABLE(htim);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	681a      	ldr	r2, [r3, #0]
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f042 0201 	orr.w	r2, r2, #1
 8005a18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a1a:	e008      	b.n	8005a2e <HAL_TIM_Base_Start+0x9a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f042 0201 	orr.w	r2, r2, #1
 8005a2a:	601a      	str	r2, [r3, #0]
 8005a2c:	e000      	b.n	8005a30 <HAL_TIM_Base_Start+0x9c>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a2e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005a30:	2300      	movs	r3, #0
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3714      	adds	r7, #20
 8005a36:	46bd      	mov	sp, r7
 8005a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	40012c00 	.word	0x40012c00
 8005a44:	40000400 	.word	0x40000400
 8005a48:	40000800 	.word	0x40000800
 8005a4c:	40013400 	.word	0x40013400
 8005a50:	40014000 	.word	0x40014000
 8005a54:	00010007 	.word	0x00010007

08005a58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b085      	sub	sp, #20
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	2b01      	cmp	r3, #1
 8005a6a:	d001      	beq.n	8005a70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a6c:	2301      	movs	r3, #1
 8005a6e:	e04a      	b.n	8005b06 <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	2202      	movs	r2, #2
 8005a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68da      	ldr	r2, [r3, #12]
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	f042 0201 	orr.w	r2, r2, #1
 8005a86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	4a21      	ldr	r2, [pc, #132]	; (8005b14 <HAL_TIM_Base_Start_IT+0xbc>)
 8005a8e:	4293      	cmp	r3, r2
 8005a90:	d018      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a9a:	d013      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a1d      	ldr	r2, [pc, #116]	; (8005b18 <HAL_TIM_Base_Start_IT+0xc0>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d00e      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	4a1c      	ldr	r2, [pc, #112]	; (8005b1c <HAL_TIM_Base_Start_IT+0xc4>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d009      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a1a      	ldr	r2, [pc, #104]	; (8005b20 <HAL_TIM_Base_Start_IT+0xc8>)
 8005ab6:	4293      	cmp	r3, r2
 8005ab8:	d004      	beq.n	8005ac4 <HAL_TIM_Base_Start_IT+0x6c>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	4a19      	ldr	r2, [pc, #100]	; (8005b24 <HAL_TIM_Base_Start_IT+0xcc>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d115      	bne.n	8005af0 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	689a      	ldr	r2, [r3, #8]
 8005aca:	4b17      	ldr	r3, [pc, #92]	; (8005b28 <HAL_TIM_Base_Start_IT+0xd0>)
 8005acc:	4013      	ands	r3, r2
 8005ace:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	2b06      	cmp	r3, #6
 8005ad4:	d015      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0xaa>
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005adc:	d011      	beq.n	8005b02 <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	681a      	ldr	r2, [r3, #0]
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f042 0201 	orr.w	r2, r2, #1
 8005aec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005aee:	e008      	b.n	8005b02 <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	681a      	ldr	r2, [r3, #0]
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	f042 0201 	orr.w	r2, r2, #1
 8005afe:	601a      	str	r2, [r3, #0]
 8005b00:	e000      	b.n	8005b04 <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005b04:	2300      	movs	r3, #0
}
 8005b06:	4618      	mov	r0, r3
 8005b08:	3714      	adds	r7, #20
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b10:	4770      	bx	lr
 8005b12:	bf00      	nop
 8005b14:	40012c00 	.word	0x40012c00
 8005b18:	40000400 	.word	0x40000400
 8005b1c:	40000800 	.word	0x40000800
 8005b20:	40013400 	.word	0x40013400
 8005b24:	40014000 	.word	0x40014000
 8005b28:	00010007 	.word	0x00010007

08005b2c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b082      	sub	sp, #8
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d101      	bne.n	8005b3e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	e049      	b.n	8005bd2 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b44:	b2db      	uxtb	r3, r3
 8005b46:	2b00      	cmp	r3, #0
 8005b48:	d106      	bne.n	8005b58 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f000 f841 	bl	8005bda <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2202      	movs	r2, #2
 8005b5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4619      	mov	r1, r3
 8005b6a:	4610      	mov	r0, r2
 8005b6c:	f000 fd00 	bl	8006570 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2201      	movs	r2, #1
 8005b9c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	2201      	movs	r2, #1
 8005ba4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2201      	movs	r2, #1
 8005bac:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	2201      	movs	r2, #1
 8005bb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	2201      	movs	r2, #1
 8005bbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	2201      	movs	r2, #1
 8005bc4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	2201      	movs	r2, #1
 8005bcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005be2:	bf00      	nop
 8005be4:	370c      	adds	r7, #12
 8005be6:	46bd      	mov	sp, r7
 8005be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bec:	4770      	bx	lr
	...

08005bf0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bfa:	683b      	ldr	r3, [r7, #0]
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d109      	bne.n	8005c14 <HAL_TIM_PWM_Start+0x24>
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	2b01      	cmp	r3, #1
 8005c0a:	bf14      	ite	ne
 8005c0c:	2301      	movne	r3, #1
 8005c0e:	2300      	moveq	r3, #0
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	e03c      	b.n	8005c8e <HAL_TIM_PWM_Start+0x9e>
 8005c14:	683b      	ldr	r3, [r7, #0]
 8005c16:	2b04      	cmp	r3, #4
 8005c18:	d109      	bne.n	8005c2e <HAL_TIM_PWM_Start+0x3e>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c20:	b2db      	uxtb	r3, r3
 8005c22:	2b01      	cmp	r3, #1
 8005c24:	bf14      	ite	ne
 8005c26:	2301      	movne	r3, #1
 8005c28:	2300      	moveq	r3, #0
 8005c2a:	b2db      	uxtb	r3, r3
 8005c2c:	e02f      	b.n	8005c8e <HAL_TIM_PWM_Start+0x9e>
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	2b08      	cmp	r3, #8
 8005c32:	d109      	bne.n	8005c48 <HAL_TIM_PWM_Start+0x58>
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c3a:	b2db      	uxtb	r3, r3
 8005c3c:	2b01      	cmp	r3, #1
 8005c3e:	bf14      	ite	ne
 8005c40:	2301      	movne	r3, #1
 8005c42:	2300      	moveq	r3, #0
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	e022      	b.n	8005c8e <HAL_TIM_PWM_Start+0x9e>
 8005c48:	683b      	ldr	r3, [r7, #0]
 8005c4a:	2b0c      	cmp	r3, #12
 8005c4c:	d109      	bne.n	8005c62 <HAL_TIM_PWM_Start+0x72>
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c54:	b2db      	uxtb	r3, r3
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	bf14      	ite	ne
 8005c5a:	2301      	movne	r3, #1
 8005c5c:	2300      	moveq	r3, #0
 8005c5e:	b2db      	uxtb	r3, r3
 8005c60:	e015      	b.n	8005c8e <HAL_TIM_PWM_Start+0x9e>
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b10      	cmp	r3, #16
 8005c66:	d109      	bne.n	8005c7c <HAL_TIM_PWM_Start+0x8c>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005c6e:	b2db      	uxtb	r3, r3
 8005c70:	2b01      	cmp	r3, #1
 8005c72:	bf14      	ite	ne
 8005c74:	2301      	movne	r3, #1
 8005c76:	2300      	moveq	r3, #0
 8005c78:	b2db      	uxtb	r3, r3
 8005c7a:	e008      	b.n	8005c8e <HAL_TIM_PWM_Start+0x9e>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b01      	cmp	r3, #1
 8005c86:	bf14      	ite	ne
 8005c88:	2301      	movne	r3, #1
 8005c8a:	2300      	moveq	r3, #0
 8005c8c:	b2db      	uxtb	r3, r3
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d001      	beq.n	8005c96 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005c92:	2301      	movs	r3, #1
 8005c94:	e097      	b.n	8005dc6 <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0xb6>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ca4:	e023      	b.n	8005cee <HAL_TIM_PWM_Start+0xfe>
 8005ca6:	683b      	ldr	r3, [r7, #0]
 8005ca8:	2b04      	cmp	r3, #4
 8005caa:	d104      	bne.n	8005cb6 <HAL_TIM_PWM_Start+0xc6>
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2202      	movs	r2, #2
 8005cb0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cb4:	e01b      	b.n	8005cee <HAL_TIM_PWM_Start+0xfe>
 8005cb6:	683b      	ldr	r3, [r7, #0]
 8005cb8:	2b08      	cmp	r3, #8
 8005cba:	d104      	bne.n	8005cc6 <HAL_TIM_PWM_Start+0xd6>
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2202      	movs	r2, #2
 8005cc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cc4:	e013      	b.n	8005cee <HAL_TIM_PWM_Start+0xfe>
 8005cc6:	683b      	ldr	r3, [r7, #0]
 8005cc8:	2b0c      	cmp	r3, #12
 8005cca:	d104      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0xe6>
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2202      	movs	r2, #2
 8005cd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005cd4:	e00b      	b.n	8005cee <HAL_TIM_PWM_Start+0xfe>
 8005cd6:	683b      	ldr	r3, [r7, #0]
 8005cd8:	2b10      	cmp	r3, #16
 8005cda:	d104      	bne.n	8005ce6 <HAL_TIM_PWM_Start+0xf6>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ce4:	e003      	b.n	8005cee <HAL_TIM_PWM_Start+0xfe>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	2202      	movs	r2, #2
 8005cea:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	6839      	ldr	r1, [r7, #0]
 8005cf6:	4618      	mov	r0, r3
 8005cf8:	f001 f85c 	bl	8006db4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	4a33      	ldr	r2, [pc, #204]	; (8005dd0 <HAL_TIM_PWM_Start+0x1e0>)
 8005d02:	4293      	cmp	r3, r2
 8005d04:	d013      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x13e>
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a32      	ldr	r2, [pc, #200]	; (8005dd4 <HAL_TIM_PWM_Start+0x1e4>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d00e      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x13e>
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8005d16:	4293      	cmp	r3, r2
 8005d18:	d009      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x13e>
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <HAL_TIM_PWM_Start+0x1ec>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d004      	beq.n	8005d2e <HAL_TIM_PWM_Start+0x13e>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a2d      	ldr	r2, [pc, #180]	; (8005de0 <HAL_TIM_PWM_Start+0x1f0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d101      	bne.n	8005d32 <HAL_TIM_PWM_Start+0x142>
 8005d2e:	2301      	movs	r3, #1
 8005d30:	e000      	b.n	8005d34 <HAL_TIM_PWM_Start+0x144>
 8005d32:	2300      	movs	r3, #0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005d46:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a20      	ldr	r2, [pc, #128]	; (8005dd0 <HAL_TIM_PWM_Start+0x1e0>)
 8005d4e:	4293      	cmp	r3, r2
 8005d50:	d018      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x194>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d5a:	d013      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x194>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	4a20      	ldr	r2, [pc, #128]	; (8005de4 <HAL_TIM_PWM_Start+0x1f4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00e      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x194>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	4a1f      	ldr	r2, [pc, #124]	; (8005de8 <HAL_TIM_PWM_Start+0x1f8>)
 8005d6c:	4293      	cmp	r3, r2
 8005d6e:	d009      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x194>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	4a17      	ldr	r2, [pc, #92]	; (8005dd4 <HAL_TIM_PWM_Start+0x1e4>)
 8005d76:	4293      	cmp	r3, r2
 8005d78:	d004      	beq.n	8005d84 <HAL_TIM_PWM_Start+0x194>
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	4a16      	ldr	r2, [pc, #88]	; (8005dd8 <HAL_TIM_PWM_Start+0x1e8>)
 8005d80:	4293      	cmp	r3, r2
 8005d82:	d115      	bne.n	8005db0 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	689a      	ldr	r2, [r3, #8]
 8005d8a:	4b18      	ldr	r3, [pc, #96]	; (8005dec <HAL_TIM_PWM_Start+0x1fc>)
 8005d8c:	4013      	ands	r3, r2
 8005d8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	2b06      	cmp	r3, #6
 8005d94:	d015      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x1d2>
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d9c:	d011      	beq.n	8005dc2 <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	f042 0201 	orr.w	r2, r2, #1
 8005dac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dae:	e008      	b.n	8005dc2 <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	681a      	ldr	r2, [r3, #0]
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	f042 0201 	orr.w	r2, r2, #1
 8005dbe:	601a      	str	r2, [r3, #0]
 8005dc0:	e000      	b.n	8005dc4 <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005dc2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
}
 8005dc6:	4618      	mov	r0, r3
 8005dc8:	3710      	adds	r7, #16
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	bd80      	pop	{r7, pc}
 8005dce:	bf00      	nop
 8005dd0:	40012c00 	.word	0x40012c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40014400 	.word	0x40014400
 8005de0:	40014800 	.word	0x40014800
 8005de4:	40000400 	.word	0x40000400
 8005de8:	40000800 	.word	0x40000800
 8005dec:	00010007 	.word	0x00010007

08005df0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005df0:	b580      	push	{r7, lr}
 8005df2:	b082      	sub	sp, #8
 8005df4:	af00      	add	r7, sp, #0
 8005df6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	681b      	ldr	r3, [r3, #0]
 8005dfc:	691b      	ldr	r3, [r3, #16]
 8005dfe:	f003 0302 	and.w	r3, r3, #2
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d122      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	f003 0302 	and.w	r3, r3, #2
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d11b      	bne.n	8005e4c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f06f 0202 	mvn.w	r2, #2
 8005e1c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	2201      	movs	r2, #1
 8005e22:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	699b      	ldr	r3, [r3, #24]
 8005e2a:	f003 0303 	and.w	r3, r3, #3
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d003      	beq.n	8005e3a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 fb7e 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8005e38:	e005      	b.n	8005e46 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e3a:	6878      	ldr	r0, [r7, #4]
 8005e3c:	f000 fb70 	bl	8006520 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 fb81 	bl	8006548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	f003 0304 	and.w	r3, r3, #4
 8005e56:	2b04      	cmp	r3, #4
 8005e58:	d122      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	68db      	ldr	r3, [r3, #12]
 8005e60:	f003 0304 	and.w	r3, r3, #4
 8005e64:	2b04      	cmp	r3, #4
 8005e66:	d11b      	bne.n	8005ea0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f06f 0204 	mvn.w	r2, #4
 8005e70:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2202      	movs	r2, #2
 8005e76:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	699b      	ldr	r3, [r3, #24]
 8005e7e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d003      	beq.n	8005e8e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 fb54 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8005e8c:	e005      	b.n	8005e9a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f000 fb46 	bl	8006520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 fb57 	bl	8006548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	691b      	ldr	r3, [r3, #16]
 8005ea6:	f003 0308 	and.w	r3, r3, #8
 8005eaa:	2b08      	cmp	r3, #8
 8005eac:	d122      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	68db      	ldr	r3, [r3, #12]
 8005eb4:	f003 0308 	and.w	r3, r3, #8
 8005eb8:	2b08      	cmp	r3, #8
 8005eba:	d11b      	bne.n	8005ef4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	f06f 0208 	mvn.w	r2, #8
 8005ec4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	2204      	movs	r2, #4
 8005eca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	69db      	ldr	r3, [r3, #28]
 8005ed2:	f003 0303 	and.w	r3, r3, #3
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d003      	beq.n	8005ee2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005eda:	6878      	ldr	r0, [r7, #4]
 8005edc:	f000 fb2a 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8005ee0:	e005      	b.n	8005eee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ee2:	6878      	ldr	r0, [r7, #4]
 8005ee4:	f000 fb1c 	bl	8006520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ee8:	6878      	ldr	r0, [r7, #4]
 8005eea:	f000 fb2d 	bl	8006548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	691b      	ldr	r3, [r3, #16]
 8005efa:	f003 0310 	and.w	r3, r3, #16
 8005efe:	2b10      	cmp	r3, #16
 8005f00:	d122      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	68db      	ldr	r3, [r3, #12]
 8005f08:	f003 0310 	and.w	r3, r3, #16
 8005f0c:	2b10      	cmp	r3, #16
 8005f0e:	d11b      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0210 	mvn.w	r2, #16
 8005f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2208      	movs	r2, #8
 8005f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	69db      	ldr	r3, [r3, #28]
 8005f26:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d003      	beq.n	8005f36 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fb00 	bl	8006534 <HAL_TIM_IC_CaptureCallback>
 8005f34:	e005      	b.n	8005f42 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f36:	6878      	ldr	r0, [r7, #4]
 8005f38:	f000 faf2 	bl	8006520 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f3c:	6878      	ldr	r0, [r7, #4]
 8005f3e:	f000 fb03 	bl	8006548 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2200      	movs	r2, #0
 8005f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	691b      	ldr	r3, [r3, #16]
 8005f4e:	f003 0301 	and.w	r3, r3, #1
 8005f52:	2b01      	cmp	r3, #1
 8005f54:	d10e      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	f003 0301 	and.w	r3, r3, #1
 8005f60:	2b01      	cmp	r3, #1
 8005f62:	d107      	bne.n	8005f74 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f06f 0201 	mvn.w	r2, #1
 8005f6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 facc 	bl	800650c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	691b      	ldr	r3, [r3, #16]
 8005f7a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f7e:	2b80      	cmp	r3, #128	; 0x80
 8005f80:	d10e      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	68db      	ldr	r3, [r3, #12]
 8005f88:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f8c:	2b80      	cmp	r3, #128	; 0x80
 8005f8e:	d107      	bne.n	8005fa0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005f98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f9a:	6878      	ldr	r0, [r7, #4]
 8005f9c:	f000 ffbc 	bl	8006f18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	691b      	ldr	r3, [r3, #16]
 8005fa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005faa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005fae:	d10e      	bne.n	8005fce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	68db      	ldr	r3, [r3, #12]
 8005fb6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fba:	2b80      	cmp	r3, #128	; 0x80
 8005fbc:	d107      	bne.n	8005fce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005fc6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005fc8:	6878      	ldr	r0, [r7, #4]
 8005fca:	f000 ffaf 	bl	8006f2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fd8:	2b40      	cmp	r3, #64	; 0x40
 8005fda:	d10e      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fe6:	2b40      	cmp	r3, #64	; 0x40
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f000 fab1 	bl	800655c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0320 	and.w	r3, r3, #32
 8006004:	2b20      	cmp	r3, #32
 8006006:	d10e      	bne.n	8006026 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b20      	cmp	r3, #32
 8006014:	d107      	bne.n	8006026 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0220 	mvn.w	r2, #32
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 ff6f 	bl	8006f04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006030:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006034:	d10f      	bne.n	8006056 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006044:	d107      	bne.n	8006056 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800604e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	f000 ff75 	bl	8006f40 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	691b      	ldr	r3, [r3, #16]
 800605c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006060:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006064:	d10f      	bne.n	8006086 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	68db      	ldr	r3, [r3, #12]
 800606c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006070:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006074:	d107      	bne.n	8006086 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800607e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006080:	6878      	ldr	r0, [r7, #4]
 8006082:	f000 ff67 	bl	8006f54 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	691b      	ldr	r3, [r3, #16]
 800608c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006090:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006094:	d10f      	bne.n	80060b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	681b      	ldr	r3, [r3, #0]
 800609a:	68db      	ldr	r3, [r3, #12]
 800609c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80060a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80060a4:	d107      	bne.n	80060b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	681b      	ldr	r3, [r3, #0]
 80060aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80060ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80060b0:	6878      	ldr	r0, [r7, #4]
 80060b2:	f000 ff59 	bl	8006f68 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	691b      	ldr	r3, [r3, #16]
 80060bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060c4:	d10f      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	68db      	ldr	r3, [r3, #12]
 80060cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80060d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80060d4:	d107      	bne.n	80060e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80060de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f000 ff4b 	bl	8006f7c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060e6:	bf00      	nop
 80060e8:	3708      	adds	r7, #8
 80060ea:	46bd      	mov	sp, r7
 80060ec:	bd80      	pop	{r7, pc}
	...

080060f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060f0:	b580      	push	{r7, lr}
 80060f2:	b086      	sub	sp, #24
 80060f4:	af00      	add	r7, sp, #0
 80060f6:	60f8      	str	r0, [r7, #12]
 80060f8:	60b9      	str	r1, [r7, #8]
 80060fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060fc:	2300      	movs	r3, #0
 80060fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006106:	2b01      	cmp	r3, #1
 8006108:	d101      	bne.n	800610e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800610a:	2302      	movs	r3, #2
 800610c:	e0ff      	b.n	800630e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2201      	movs	r2, #1
 8006112:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	2b14      	cmp	r3, #20
 800611a:	f200 80f0 	bhi.w	80062fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800611e:	a201      	add	r2, pc, #4	; (adr r2, 8006124 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006120:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006124:	08006179 	.word	0x08006179
 8006128:	080062ff 	.word	0x080062ff
 800612c:	080062ff 	.word	0x080062ff
 8006130:	080062ff 	.word	0x080062ff
 8006134:	080061b9 	.word	0x080061b9
 8006138:	080062ff 	.word	0x080062ff
 800613c:	080062ff 	.word	0x080062ff
 8006140:	080062ff 	.word	0x080062ff
 8006144:	080061fb 	.word	0x080061fb
 8006148:	080062ff 	.word	0x080062ff
 800614c:	080062ff 	.word	0x080062ff
 8006150:	080062ff 	.word	0x080062ff
 8006154:	0800623b 	.word	0x0800623b
 8006158:	080062ff 	.word	0x080062ff
 800615c:	080062ff 	.word	0x080062ff
 8006160:	080062ff 	.word	0x080062ff
 8006164:	0800627d 	.word	0x0800627d
 8006168:	080062ff 	.word	0x080062ff
 800616c:	080062ff 	.word	0x080062ff
 8006170:	080062ff 	.word	0x080062ff
 8006174:	080062bd 	.word	0x080062bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	68b9      	ldr	r1, [r7, #8]
 800617e:	4618      	mov	r0, r3
 8006180:	f000 fa86 	bl	8006690 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	699a      	ldr	r2, [r3, #24]
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f042 0208 	orr.w	r2, r2, #8
 8006192:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	699a      	ldr	r2, [r3, #24]
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	f022 0204 	bic.w	r2, r2, #4
 80061a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	6999      	ldr	r1, [r3, #24]
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	691a      	ldr	r2, [r3, #16]
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	430a      	orrs	r2, r1
 80061b4:	619a      	str	r2, [r3, #24]
      break;
 80061b6:	e0a5      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	68b9      	ldr	r1, [r7, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 faf6 	bl	80067b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	699a      	ldr	r2, [r3, #24]
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80061d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	699a      	ldr	r2, [r3, #24]
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	6999      	ldr	r1, [r3, #24]
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	691b      	ldr	r3, [r3, #16]
 80061ee:	021a      	lsls	r2, r3, #8
 80061f0:	68fb      	ldr	r3, [r7, #12]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	430a      	orrs	r2, r1
 80061f6:	619a      	str	r2, [r3, #24]
      break;
 80061f8:	e084      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	68b9      	ldr	r1, [r7, #8]
 8006200:	4618      	mov	r0, r3
 8006202:	f000 fb5f 	bl	80068c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	69da      	ldr	r2, [r3, #28]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	f042 0208 	orr.w	r2, r2, #8
 8006214:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	681b      	ldr	r3, [r3, #0]
 800621a:	69da      	ldr	r2, [r3, #28]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	f022 0204 	bic.w	r2, r2, #4
 8006224:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	69d9      	ldr	r1, [r3, #28]
 800622c:	68bb      	ldr	r3, [r7, #8]
 800622e:	691a      	ldr	r2, [r3, #16]
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	430a      	orrs	r2, r1
 8006236:	61da      	str	r2, [r3, #28]
      break;
 8006238:	e064      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	68b9      	ldr	r1, [r7, #8]
 8006240:	4618      	mov	r0, r3
 8006242:	f000 fbc7 	bl	80069d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	69da      	ldr	r2, [r3, #28]
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006254:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	69da      	ldr	r2, [r3, #28]
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006264:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	69d9      	ldr	r1, [r3, #28]
 800626c:	68bb      	ldr	r3, [r7, #8]
 800626e:	691b      	ldr	r3, [r3, #16]
 8006270:	021a      	lsls	r2, r3, #8
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	430a      	orrs	r2, r1
 8006278:	61da      	str	r2, [r3, #28]
      break;
 800627a:	e043      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	68b9      	ldr	r1, [r7, #8]
 8006282:	4618      	mov	r0, r3
 8006284:	f000 fc30 	bl	8006ae8 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006288:	68fb      	ldr	r3, [r7, #12]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	f042 0208 	orr.w	r2, r2, #8
 8006296:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	f022 0204 	bic.w	r2, r2, #4
 80062a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062ae:	68bb      	ldr	r3, [r7, #8]
 80062b0:	691a      	ldr	r2, [r3, #16]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	430a      	orrs	r2, r1
 80062b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062ba:	e023      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68b9      	ldr	r1, [r7, #8]
 80062c2:	4618      	mov	r0, r3
 80062c4:	f000 fc74 	bl	8006bb0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80062d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80062ee:	68bb      	ldr	r3, [r7, #8]
 80062f0:	691b      	ldr	r3, [r3, #16]
 80062f2:	021a      	lsls	r2, r3, #8
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	430a      	orrs	r2, r1
 80062fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80062fc:	e002      	b.n	8006304 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062fe:	2301      	movs	r3, #1
 8006300:	75fb      	strb	r3, [r7, #23]
      break;
 8006302:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	2200      	movs	r2, #0
 8006308:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800630c:	7dfb      	ldrb	r3, [r7, #23]
}
 800630e:	4618      	mov	r0, r3
 8006310:	3718      	adds	r7, #24
 8006312:	46bd      	mov	sp, r7
 8006314:	bd80      	pop	{r7, pc}
 8006316:	bf00      	nop

08006318 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b084      	sub	sp, #16
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006322:	2300      	movs	r3, #0
 8006324:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800632c:	2b01      	cmp	r3, #1
 800632e:	d101      	bne.n	8006334 <HAL_TIM_ConfigClockSource+0x1c>
 8006330:	2302      	movs	r3, #2
 8006332:	e0de      	b.n	80064f2 <HAL_TIM_ConfigClockSource+0x1da>
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2202      	movs	r2, #2
 8006340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	689b      	ldr	r3, [r3, #8]
 800634a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800634c:	68bb      	ldr	r3, [r7, #8]
 800634e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006352:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006358:	68bb      	ldr	r3, [r7, #8]
 800635a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800635e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	68ba      	ldr	r2, [r7, #8]
 8006366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006368:	683b      	ldr	r3, [r7, #0]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	4a63      	ldr	r2, [pc, #396]	; (80064fc <HAL_TIM_ConfigClockSource+0x1e4>)
 800636e:	4293      	cmp	r3, r2
 8006370:	f000 80a9 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006374:	4a61      	ldr	r2, [pc, #388]	; (80064fc <HAL_TIM_ConfigClockSource+0x1e4>)
 8006376:	4293      	cmp	r3, r2
 8006378:	f200 80ae 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800637c:	4a60      	ldr	r2, [pc, #384]	; (8006500 <HAL_TIM_ConfigClockSource+0x1e8>)
 800637e:	4293      	cmp	r3, r2
 8006380:	f000 80a1 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006384:	4a5e      	ldr	r2, [pc, #376]	; (8006500 <HAL_TIM_ConfigClockSource+0x1e8>)
 8006386:	4293      	cmp	r3, r2
 8006388:	f200 80a6 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800638c:	4a5d      	ldr	r2, [pc, #372]	; (8006504 <HAL_TIM_ConfigClockSource+0x1ec>)
 800638e:	4293      	cmp	r3, r2
 8006390:	f000 8099 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006394:	4a5b      	ldr	r2, [pc, #364]	; (8006504 <HAL_TIM_ConfigClockSource+0x1ec>)
 8006396:	4293      	cmp	r3, r2
 8006398:	f200 809e 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 800639c:	4a5a      	ldr	r2, [pc, #360]	; (8006508 <HAL_TIM_ConfigClockSource+0x1f0>)
 800639e:	4293      	cmp	r3, r2
 80063a0:	f000 8091 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80063a4:	4a58      	ldr	r2, [pc, #352]	; (8006508 <HAL_TIM_ConfigClockSource+0x1f0>)
 80063a6:	4293      	cmp	r3, r2
 80063a8:	f200 8096 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063ac:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063b0:	f000 8089 	beq.w	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80063b4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80063b8:	f200 808e 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c0:	d03e      	beq.n	8006440 <HAL_TIM_ConfigClockSource+0x128>
 80063c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063c6:	f200 8087 	bhi.w	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063ce:	f000 8086 	beq.w	80064de <HAL_TIM_ConfigClockSource+0x1c6>
 80063d2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063d6:	d87f      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063d8:	2b70      	cmp	r3, #112	; 0x70
 80063da:	d01a      	beq.n	8006412 <HAL_TIM_ConfigClockSource+0xfa>
 80063dc:	2b70      	cmp	r3, #112	; 0x70
 80063de:	d87b      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063e0:	2b60      	cmp	r3, #96	; 0x60
 80063e2:	d050      	beq.n	8006486 <HAL_TIM_ConfigClockSource+0x16e>
 80063e4:	2b60      	cmp	r3, #96	; 0x60
 80063e6:	d877      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063e8:	2b50      	cmp	r3, #80	; 0x50
 80063ea:	d03c      	beq.n	8006466 <HAL_TIM_ConfigClockSource+0x14e>
 80063ec:	2b50      	cmp	r3, #80	; 0x50
 80063ee:	d873      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063f0:	2b40      	cmp	r3, #64	; 0x40
 80063f2:	d058      	beq.n	80064a6 <HAL_TIM_ConfigClockSource+0x18e>
 80063f4:	2b40      	cmp	r3, #64	; 0x40
 80063f6:	d86f      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 80063f8:	2b30      	cmp	r3, #48	; 0x30
 80063fa:	d064      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 80063fc:	2b30      	cmp	r3, #48	; 0x30
 80063fe:	d86b      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006400:	2b20      	cmp	r3, #32
 8006402:	d060      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006404:	2b20      	cmp	r3, #32
 8006406:	d867      	bhi.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d05c      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 800640c:	2b10      	cmp	r3, #16
 800640e:	d05a      	beq.n	80064c6 <HAL_TIM_ConfigClockSource+0x1ae>
 8006410:	e062      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	6818      	ldr	r0, [r3, #0]
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	6899      	ldr	r1, [r3, #8]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	685a      	ldr	r2, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	f000 fca7 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800642e:	68bb      	ldr	r3, [r7, #8]
 8006430:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006434:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68ba      	ldr	r2, [r7, #8]
 800643c:	609a      	str	r2, [r3, #8]
      break;
 800643e:	e04f      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6818      	ldr	r0, [r3, #0]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	6899      	ldr	r1, [r3, #8]
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	685a      	ldr	r2, [r3, #4]
 800644c:	683b      	ldr	r3, [r7, #0]
 800644e:	68db      	ldr	r3, [r3, #12]
 8006450:	f000 fc90 	bl	8006d74 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	689a      	ldr	r2, [r3, #8]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006462:	609a      	str	r2, [r3, #8]
      break;
 8006464:	e03c      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	6818      	ldr	r0, [r3, #0]
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	6859      	ldr	r1, [r3, #4]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	68db      	ldr	r3, [r3, #12]
 8006472:	461a      	mov	r2, r3
 8006474:	f000 fc02 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	2150      	movs	r1, #80	; 0x50
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fc5b 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 8006484:	e02c      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	6818      	ldr	r0, [r3, #0]
 800648a:	683b      	ldr	r3, [r7, #0]
 800648c:	6859      	ldr	r1, [r3, #4]
 800648e:	683b      	ldr	r3, [r7, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	461a      	mov	r2, r3
 8006494:	f000 fc21 	bl	8006cda <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2160      	movs	r1, #96	; 0x60
 800649e:	4618      	mov	r0, r3
 80064a0:	f000 fc4b 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80064a4:	e01c      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6818      	ldr	r0, [r3, #0]
 80064aa:	683b      	ldr	r3, [r7, #0]
 80064ac:	6859      	ldr	r1, [r3, #4]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	68db      	ldr	r3, [r3, #12]
 80064b2:	461a      	mov	r2, r3
 80064b4:	f000 fbe2 	bl	8006c7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	2140      	movs	r1, #64	; 0x40
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 fc3b 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80064c4:	e00c      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	683b      	ldr	r3, [r7, #0]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f000 fc32 	bl	8006d3a <TIM_ITRx_SetConfig>
      break;
 80064d6:	e003      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80064d8:	2301      	movs	r3, #1
 80064da:	73fb      	strb	r3, [r7, #15]
      break;
 80064dc:	e000      	b.n	80064e0 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80064de:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2200      	movs	r2, #0
 80064ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80064f0:	7bfb      	ldrb	r3, [r7, #15]
}
 80064f2:	4618      	mov	r0, r3
 80064f4:	3710      	adds	r7, #16
 80064f6:	46bd      	mov	sp, r7
 80064f8:	bd80      	pop	{r7, pc}
 80064fa:	bf00      	nop
 80064fc:	00100070 	.word	0x00100070
 8006500:	00100040 	.word	0x00100040
 8006504:	00100030 	.word	0x00100030
 8006508:	00100020 	.word	0x00100020

0800650c <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8006514:	bf00      	nop
 8006516:	370c      	adds	r7, #12
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006520:	b480      	push	{r7}
 8006522:	b083      	sub	sp, #12
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006528:	bf00      	nop
 800652a:	370c      	adds	r7, #12
 800652c:	46bd      	mov	sp, r7
 800652e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006532:	4770      	bx	lr

08006534 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006534:	b480      	push	{r7}
 8006536:	b083      	sub	sp, #12
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800653c:	bf00      	nop
 800653e:	370c      	adds	r7, #12
 8006540:	46bd      	mov	sp, r7
 8006542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006546:	4770      	bx	lr

08006548 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006548:	b480      	push	{r7}
 800654a:	b083      	sub	sp, #12
 800654c:	af00      	add	r7, sp, #0
 800654e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006550:	bf00      	nop
 8006552:	370c      	adds	r7, #12
 8006554:	46bd      	mov	sp, r7
 8006556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800655a:	4770      	bx	lr

0800655c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800655c:	b480      	push	{r7}
 800655e:	b083      	sub	sp, #12
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006564:	bf00      	nop
 8006566:	370c      	adds	r7, #12
 8006568:	46bd      	mov	sp, r7
 800656a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800656e:	4770      	bx	lr

08006570 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006570:	b480      	push	{r7}
 8006572:	b085      	sub	sp, #20
 8006574:	af00      	add	r7, sp, #0
 8006576:	6078      	str	r0, [r7, #4]
 8006578:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	4a3c      	ldr	r2, [pc, #240]	; (8006674 <TIM_Base_SetConfig+0x104>)
 8006584:	4293      	cmp	r3, r2
 8006586:	d00f      	beq.n	80065a8 <TIM_Base_SetConfig+0x38>
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800658e:	d00b      	beq.n	80065a8 <TIM_Base_SetConfig+0x38>
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	4a39      	ldr	r2, [pc, #228]	; (8006678 <TIM_Base_SetConfig+0x108>)
 8006594:	4293      	cmp	r3, r2
 8006596:	d007      	beq.n	80065a8 <TIM_Base_SetConfig+0x38>
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	4a38      	ldr	r2, [pc, #224]	; (800667c <TIM_Base_SetConfig+0x10c>)
 800659c:	4293      	cmp	r3, r2
 800659e:	d003      	beq.n	80065a8 <TIM_Base_SetConfig+0x38>
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	4a37      	ldr	r2, [pc, #220]	; (8006680 <TIM_Base_SetConfig+0x110>)
 80065a4:	4293      	cmp	r3, r2
 80065a6:	d108      	bne.n	80065ba <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80065ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	68fa      	ldr	r2, [r7, #12]
 80065b6:	4313      	orrs	r3, r2
 80065b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <TIM_Base_SetConfig+0x104>)
 80065be:	4293      	cmp	r3, r2
 80065c0:	d01b      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065c8:	d017      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	4a2a      	ldr	r2, [pc, #168]	; (8006678 <TIM_Base_SetConfig+0x108>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d013      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	4a29      	ldr	r2, [pc, #164]	; (800667c <TIM_Base_SetConfig+0x10c>)
 80065d6:	4293      	cmp	r3, r2
 80065d8:	d00f      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	4a28      	ldr	r2, [pc, #160]	; (8006680 <TIM_Base_SetConfig+0x110>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d00b      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	4a27      	ldr	r2, [pc, #156]	; (8006684 <TIM_Base_SetConfig+0x114>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d007      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	4a26      	ldr	r2, [pc, #152]	; (8006688 <TIM_Base_SetConfig+0x118>)
 80065ee:	4293      	cmp	r3, r2
 80065f0:	d003      	beq.n	80065fa <TIM_Base_SetConfig+0x8a>
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	4a25      	ldr	r2, [pc, #148]	; (800668c <TIM_Base_SetConfig+0x11c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d108      	bne.n	800660c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006600:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006602:	683b      	ldr	r3, [r7, #0]
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	68fa      	ldr	r2, [r7, #12]
 8006608:	4313      	orrs	r3, r2
 800660a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006612:	683b      	ldr	r3, [r7, #0]
 8006614:	695b      	ldr	r3, [r3, #20]
 8006616:	4313      	orrs	r3, r2
 8006618:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	68fa      	ldr	r2, [r7, #12]
 800661e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	689a      	ldr	r2, [r3, #8]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	4a10      	ldr	r2, [pc, #64]	; (8006674 <TIM_Base_SetConfig+0x104>)
 8006634:	4293      	cmp	r3, r2
 8006636:	d00f      	beq.n	8006658 <TIM_Base_SetConfig+0xe8>
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	4a11      	ldr	r2, [pc, #68]	; (8006680 <TIM_Base_SetConfig+0x110>)
 800663c:	4293      	cmp	r3, r2
 800663e:	d00b      	beq.n	8006658 <TIM_Base_SetConfig+0xe8>
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	4a10      	ldr	r2, [pc, #64]	; (8006684 <TIM_Base_SetConfig+0x114>)
 8006644:	4293      	cmp	r3, r2
 8006646:	d007      	beq.n	8006658 <TIM_Base_SetConfig+0xe8>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	4a0f      	ldr	r2, [pc, #60]	; (8006688 <TIM_Base_SetConfig+0x118>)
 800664c:	4293      	cmp	r3, r2
 800664e:	d003      	beq.n	8006658 <TIM_Base_SetConfig+0xe8>
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	4a0e      	ldr	r2, [pc, #56]	; (800668c <TIM_Base_SetConfig+0x11c>)
 8006654:	4293      	cmp	r3, r2
 8006656:	d103      	bne.n	8006660 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006658:	683b      	ldr	r3, [r7, #0]
 800665a:	691a      	ldr	r2, [r3, #16]
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	615a      	str	r2, [r3, #20]
}
 8006666:	bf00      	nop
 8006668:	3714      	adds	r7, #20
 800666a:	46bd      	mov	sp, r7
 800666c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006670:	4770      	bx	lr
 8006672:	bf00      	nop
 8006674:	40012c00 	.word	0x40012c00
 8006678:	40000400 	.word	0x40000400
 800667c:	40000800 	.word	0x40000800
 8006680:	40013400 	.word	0x40013400
 8006684:	40014000 	.word	0x40014000
 8006688:	40014400 	.word	0x40014400
 800668c:	40014800 	.word	0x40014800

08006690 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006690:	b480      	push	{r7}
 8006692:	b087      	sub	sp, #28
 8006694:	af00      	add	r7, sp, #0
 8006696:	6078      	str	r0, [r7, #4]
 8006698:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	6a1b      	ldr	r3, [r3, #32]
 800669e:	f023 0201 	bic.w	r2, r3, #1
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	6a1b      	ldr	r3, [r3, #32]
 80066aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	685b      	ldr	r3, [r3, #4]
 80066b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	699b      	ldr	r3, [r3, #24]
 80066b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80066be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f023 0303 	bic.w	r3, r3, #3
 80066ca:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	68fa      	ldr	r2, [r7, #12]
 80066d2:	4313      	orrs	r3, r2
 80066d4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80066d6:	697b      	ldr	r3, [r7, #20]
 80066d8:	f023 0302 	bic.w	r3, r3, #2
 80066dc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	4a2c      	ldr	r2, [pc, #176]	; (800679c <TIM_OC1_SetConfig+0x10c>)
 80066ec:	4293      	cmp	r3, r2
 80066ee:	d00f      	beq.n	8006710 <TIM_OC1_SetConfig+0x80>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	4a2b      	ldr	r2, [pc, #172]	; (80067a0 <TIM_OC1_SetConfig+0x110>)
 80066f4:	4293      	cmp	r3, r2
 80066f6:	d00b      	beq.n	8006710 <TIM_OC1_SetConfig+0x80>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	4a2a      	ldr	r2, [pc, #168]	; (80067a4 <TIM_OC1_SetConfig+0x114>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d007      	beq.n	8006710 <TIM_OC1_SetConfig+0x80>
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	4a29      	ldr	r2, [pc, #164]	; (80067a8 <TIM_OC1_SetConfig+0x118>)
 8006704:	4293      	cmp	r3, r2
 8006706:	d003      	beq.n	8006710 <TIM_OC1_SetConfig+0x80>
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	4a28      	ldr	r2, [pc, #160]	; (80067ac <TIM_OC1_SetConfig+0x11c>)
 800670c:	4293      	cmp	r3, r2
 800670e:	d10c      	bne.n	800672a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006710:	697b      	ldr	r3, [r7, #20]
 8006712:	f023 0308 	bic.w	r3, r3, #8
 8006716:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	68db      	ldr	r3, [r3, #12]
 800671c:	697a      	ldr	r2, [r7, #20]
 800671e:	4313      	orrs	r3, r2
 8006720:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	f023 0304 	bic.w	r3, r3, #4
 8006728:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4a1b      	ldr	r2, [pc, #108]	; (800679c <TIM_OC1_SetConfig+0x10c>)
 800672e:	4293      	cmp	r3, r2
 8006730:	d00f      	beq.n	8006752 <TIM_OC1_SetConfig+0xc2>
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <TIM_OC1_SetConfig+0x110>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00b      	beq.n	8006752 <TIM_OC1_SetConfig+0xc2>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <TIM_OC1_SetConfig+0x114>)
 800673e:	4293      	cmp	r3, r2
 8006740:	d007      	beq.n	8006752 <TIM_OC1_SetConfig+0xc2>
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	4a18      	ldr	r2, [pc, #96]	; (80067a8 <TIM_OC1_SetConfig+0x118>)
 8006746:	4293      	cmp	r3, r2
 8006748:	d003      	beq.n	8006752 <TIM_OC1_SetConfig+0xc2>
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	4a17      	ldr	r2, [pc, #92]	; (80067ac <TIM_OC1_SetConfig+0x11c>)
 800674e:	4293      	cmp	r3, r2
 8006750:	d111      	bne.n	8006776 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006752:	693b      	ldr	r3, [r7, #16]
 8006754:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800675a:	693b      	ldr	r3, [r7, #16]
 800675c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	695b      	ldr	r3, [r3, #20]
 8006766:	693a      	ldr	r2, [r7, #16]
 8006768:	4313      	orrs	r3, r2
 800676a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800676c:	683b      	ldr	r3, [r7, #0]
 800676e:	699b      	ldr	r3, [r3, #24]
 8006770:	693a      	ldr	r2, [r7, #16]
 8006772:	4313      	orrs	r3, r2
 8006774:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006776:	687b      	ldr	r3, [r7, #4]
 8006778:	693a      	ldr	r2, [r7, #16]
 800677a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	685a      	ldr	r2, [r3, #4]
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	697a      	ldr	r2, [r7, #20]
 800678e:	621a      	str	r2, [r3, #32]
}
 8006790:	bf00      	nop
 8006792:	371c      	adds	r7, #28
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr
 800679c:	40012c00 	.word	0x40012c00
 80067a0:	40013400 	.word	0x40013400
 80067a4:	40014000 	.word	0x40014000
 80067a8:	40014400 	.word	0x40014400
 80067ac:	40014800 	.word	0x40014800

080067b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
 80067b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6a1b      	ldr	r3, [r3, #32]
 80067be:	f023 0210 	bic.w	r2, r3, #16
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	6a1b      	ldr	r3, [r3, #32]
 80067ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	685b      	ldr	r3, [r3, #4]
 80067d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	699b      	ldr	r3, [r3, #24]
 80067d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80067de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80067e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80067ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067ec:	683b      	ldr	r3, [r7, #0]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	021b      	lsls	r3, r3, #8
 80067f2:	68fa      	ldr	r2, [r7, #12]
 80067f4:	4313      	orrs	r3, r2
 80067f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80067f8:	697b      	ldr	r3, [r7, #20]
 80067fa:	f023 0320 	bic.w	r3, r3, #32
 80067fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006800:	683b      	ldr	r3, [r7, #0]
 8006802:	689b      	ldr	r3, [r3, #8]
 8006804:	011b      	lsls	r3, r3, #4
 8006806:	697a      	ldr	r2, [r7, #20]
 8006808:	4313      	orrs	r3, r2
 800680a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a28      	ldr	r2, [pc, #160]	; (80068b0 <TIM_OC2_SetConfig+0x100>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d003      	beq.n	800681c <TIM_OC2_SetConfig+0x6c>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	4a27      	ldr	r2, [pc, #156]	; (80068b4 <TIM_OC2_SetConfig+0x104>)
 8006818:	4293      	cmp	r3, r2
 800681a:	d10d      	bne.n	8006838 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006822:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006824:	683b      	ldr	r3, [r7, #0]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	011b      	lsls	r3, r3, #4
 800682a:	697a      	ldr	r2, [r7, #20]
 800682c:	4313      	orrs	r3, r2
 800682e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006830:	697b      	ldr	r3, [r7, #20]
 8006832:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006836:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	4a1d      	ldr	r2, [pc, #116]	; (80068b0 <TIM_OC2_SetConfig+0x100>)
 800683c:	4293      	cmp	r3, r2
 800683e:	d00f      	beq.n	8006860 <TIM_OC2_SetConfig+0xb0>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	4a1c      	ldr	r2, [pc, #112]	; (80068b4 <TIM_OC2_SetConfig+0x104>)
 8006844:	4293      	cmp	r3, r2
 8006846:	d00b      	beq.n	8006860 <TIM_OC2_SetConfig+0xb0>
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a1b      	ldr	r2, [pc, #108]	; (80068b8 <TIM_OC2_SetConfig+0x108>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d007      	beq.n	8006860 <TIM_OC2_SetConfig+0xb0>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a1a      	ldr	r2, [pc, #104]	; (80068bc <TIM_OC2_SetConfig+0x10c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d003      	beq.n	8006860 <TIM_OC2_SetConfig+0xb0>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a19      	ldr	r2, [pc, #100]	; (80068c0 <TIM_OC2_SetConfig+0x110>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d113      	bne.n	8006888 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006860:	693b      	ldr	r3, [r7, #16]
 8006862:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006866:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006868:	693b      	ldr	r3, [r7, #16]
 800686a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800686e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	695b      	ldr	r3, [r3, #20]
 8006874:	009b      	lsls	r3, r3, #2
 8006876:	693a      	ldr	r2, [r7, #16]
 8006878:	4313      	orrs	r3, r2
 800687a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800687c:	683b      	ldr	r3, [r7, #0]
 800687e:	699b      	ldr	r3, [r3, #24]
 8006880:	009b      	lsls	r3, r3, #2
 8006882:	693a      	ldr	r2, [r7, #16]
 8006884:	4313      	orrs	r3, r2
 8006886:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	693a      	ldr	r2, [r7, #16]
 800688c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006894:	683b      	ldr	r3, [r7, #0]
 8006896:	685a      	ldr	r2, [r3, #4]
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	621a      	str	r2, [r3, #32]
}
 80068a2:	bf00      	nop
 80068a4:	371c      	adds	r7, #28
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	40012c00 	.word	0x40012c00
 80068b4:	40013400 	.word	0x40013400
 80068b8:	40014000 	.word	0x40014000
 80068bc:	40014400 	.word	0x40014400
 80068c0:	40014800 	.word	0x40014800

080068c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c4:	b480      	push	{r7}
 80068c6:	b087      	sub	sp, #28
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6a1b      	ldr	r3, [r3, #32]
 80068de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	69db      	ldr	r3, [r3, #28]
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	f023 0303 	bic.w	r3, r3, #3
 80068fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006900:	683b      	ldr	r3, [r7, #0]
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	68fa      	ldr	r2, [r7, #12]
 8006906:	4313      	orrs	r3, r2
 8006908:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800690a:	697b      	ldr	r3, [r7, #20]
 800690c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006910:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006912:	683b      	ldr	r3, [r7, #0]
 8006914:	689b      	ldr	r3, [r3, #8]
 8006916:	021b      	lsls	r3, r3, #8
 8006918:	697a      	ldr	r2, [r7, #20]
 800691a:	4313      	orrs	r3, r2
 800691c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a27      	ldr	r2, [pc, #156]	; (80069c0 <TIM_OC3_SetConfig+0xfc>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d003      	beq.n	800692e <TIM_OC3_SetConfig+0x6a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a26      	ldr	r2, [pc, #152]	; (80069c4 <TIM_OC3_SetConfig+0x100>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d10d      	bne.n	800694a <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006934:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006936:	683b      	ldr	r3, [r7, #0]
 8006938:	68db      	ldr	r3, [r3, #12]
 800693a:	021b      	lsls	r3, r3, #8
 800693c:	697a      	ldr	r2, [r7, #20]
 800693e:	4313      	orrs	r3, r2
 8006940:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006942:	697b      	ldr	r3, [r7, #20]
 8006944:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006948:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	4a1c      	ldr	r2, [pc, #112]	; (80069c0 <TIM_OC3_SetConfig+0xfc>)
 800694e:	4293      	cmp	r3, r2
 8006950:	d00f      	beq.n	8006972 <TIM_OC3_SetConfig+0xae>
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	4a1b      	ldr	r2, [pc, #108]	; (80069c4 <TIM_OC3_SetConfig+0x100>)
 8006956:	4293      	cmp	r3, r2
 8006958:	d00b      	beq.n	8006972 <TIM_OC3_SetConfig+0xae>
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1a      	ldr	r2, [pc, #104]	; (80069c8 <TIM_OC3_SetConfig+0x104>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d007      	beq.n	8006972 <TIM_OC3_SetConfig+0xae>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a19      	ldr	r2, [pc, #100]	; (80069cc <TIM_OC3_SetConfig+0x108>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d003      	beq.n	8006972 <TIM_OC3_SetConfig+0xae>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a18      	ldr	r2, [pc, #96]	; (80069d0 <TIM_OC3_SetConfig+0x10c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d113      	bne.n	800699a <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006972:	693b      	ldr	r3, [r7, #16]
 8006974:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006978:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006980:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006982:	683b      	ldr	r3, [r7, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	011b      	lsls	r3, r3, #4
 8006988:	693a      	ldr	r2, [r7, #16]
 800698a:	4313      	orrs	r3, r2
 800698c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	699b      	ldr	r3, [r3, #24]
 8006992:	011b      	lsls	r3, r3, #4
 8006994:	693a      	ldr	r2, [r7, #16]
 8006996:	4313      	orrs	r3, r2
 8006998:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	693a      	ldr	r2, [r7, #16]
 800699e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80069a6:	683b      	ldr	r3, [r7, #0]
 80069a8:	685a      	ldr	r2, [r3, #4]
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	697a      	ldr	r2, [r7, #20]
 80069b2:	621a      	str	r2, [r3, #32]
}
 80069b4:	bf00      	nop
 80069b6:	371c      	adds	r7, #28
 80069b8:	46bd      	mov	sp, r7
 80069ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069be:	4770      	bx	lr
 80069c0:	40012c00 	.word	0x40012c00
 80069c4:	40013400 	.word	0x40013400
 80069c8:	40014000 	.word	0x40014000
 80069cc:	40014400 	.word	0x40014400
 80069d0:	40014800 	.word	0x40014800

080069d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069d4:	b480      	push	{r7}
 80069d6:	b087      	sub	sp, #28
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6a1b      	ldr	r3, [r3, #32]
 80069e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	6a1b      	ldr	r3, [r3, #32]
 80069ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	021b      	lsls	r3, r3, #8
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006a1c:	697b      	ldr	r3, [r7, #20]
 8006a1e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006a22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006a24:	683b      	ldr	r3, [r7, #0]
 8006a26:	689b      	ldr	r3, [r3, #8]
 8006a28:	031b      	lsls	r3, r3, #12
 8006a2a:	697a      	ldr	r2, [r7, #20]
 8006a2c:	4313      	orrs	r3, r2
 8006a2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	4a28      	ldr	r2, [pc, #160]	; (8006ad4 <TIM_OC4_SetConfig+0x100>)
 8006a34:	4293      	cmp	r3, r2
 8006a36:	d003      	beq.n	8006a40 <TIM_OC4_SetConfig+0x6c>
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	4a27      	ldr	r2, [pc, #156]	; (8006ad8 <TIM_OC4_SetConfig+0x104>)
 8006a3c:	4293      	cmp	r3, r2
 8006a3e:	d10d      	bne.n	8006a5c <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006a40:	697b      	ldr	r3, [r7, #20]
 8006a42:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a46:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	68db      	ldr	r3, [r3, #12]
 8006a4c:	031b      	lsls	r3, r3, #12
 8006a4e:	697a      	ldr	r2, [r7, #20]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006a54:	697b      	ldr	r3, [r7, #20]
 8006a56:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a5a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	4a1d      	ldr	r2, [pc, #116]	; (8006ad4 <TIM_OC4_SetConfig+0x100>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d00f      	beq.n	8006a84 <TIM_OC4_SetConfig+0xb0>
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a1c      	ldr	r2, [pc, #112]	; (8006ad8 <TIM_OC4_SetConfig+0x104>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d00b      	beq.n	8006a84 <TIM_OC4_SetConfig+0xb0>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a1b      	ldr	r2, [pc, #108]	; (8006adc <TIM_OC4_SetConfig+0x108>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d007      	beq.n	8006a84 <TIM_OC4_SetConfig+0xb0>
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	4a1a      	ldr	r2, [pc, #104]	; (8006ae0 <TIM_OC4_SetConfig+0x10c>)
 8006a78:	4293      	cmp	r3, r2
 8006a7a:	d003      	beq.n	8006a84 <TIM_OC4_SetConfig+0xb0>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a19      	ldr	r2, [pc, #100]	; (8006ae4 <TIM_OC4_SetConfig+0x110>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d113      	bne.n	8006aac <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006a84:	693b      	ldr	r3, [r7, #16]
 8006a86:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a8a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006a8c:	693b      	ldr	r3, [r7, #16]
 8006a8e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006a92:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	695b      	ldr	r3, [r3, #20]
 8006a98:	019b      	lsls	r3, r3, #6
 8006a9a:	693a      	ldr	r2, [r7, #16]
 8006a9c:	4313      	orrs	r3, r2
 8006a9e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	699b      	ldr	r3, [r3, #24]
 8006aa4:	019b      	lsls	r3, r3, #6
 8006aa6:	693a      	ldr	r2, [r7, #16]
 8006aa8:	4313      	orrs	r3, r2
 8006aaa:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	693a      	ldr	r2, [r7, #16]
 8006ab0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	68fa      	ldr	r2, [r7, #12]
 8006ab6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	685a      	ldr	r2, [r3, #4]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	621a      	str	r2, [r3, #32]
}
 8006ac6:	bf00      	nop
 8006ac8:	371c      	adds	r7, #28
 8006aca:	46bd      	mov	sp, r7
 8006acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad0:	4770      	bx	lr
 8006ad2:	bf00      	nop
 8006ad4:	40012c00 	.word	0x40012c00
 8006ad8:	40013400 	.word	0x40013400
 8006adc:	40014000 	.word	0x40014000
 8006ae0:	40014400 	.word	0x40014400
 8006ae4:	40014800 	.word	0x40014800

08006ae8 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b087      	sub	sp, #28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6a1b      	ldr	r3, [r3, #32]
 8006af6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	6a1b      	ldr	r3, [r3, #32]
 8006b02:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	685b      	ldr	r3, [r3, #4]
 8006b08:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68fa      	ldr	r2, [r7, #12]
 8006b22:	4313      	orrs	r3, r2
 8006b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006b2c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006b2e:	683b      	ldr	r3, [r7, #0]
 8006b30:	689b      	ldr	r3, [r3, #8]
 8006b32:	041b      	lsls	r3, r3, #16
 8006b34:	693a      	ldr	r2, [r7, #16]
 8006b36:	4313      	orrs	r3, r2
 8006b38:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	4a17      	ldr	r2, [pc, #92]	; (8006b9c <TIM_OC5_SetConfig+0xb4>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d00f      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	4a16      	ldr	r2, [pc, #88]	; (8006ba0 <TIM_OC5_SetConfig+0xb8>)
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d00b      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	4a15      	ldr	r2, [pc, #84]	; (8006ba4 <TIM_OC5_SetConfig+0xbc>)
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	d007      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	4a14      	ldr	r2, [pc, #80]	; (8006ba8 <TIM_OC5_SetConfig+0xc0>)
 8006b56:	4293      	cmp	r3, r2
 8006b58:	d003      	beq.n	8006b62 <TIM_OC5_SetConfig+0x7a>
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	4a13      	ldr	r2, [pc, #76]	; (8006bac <TIM_OC5_SetConfig+0xc4>)
 8006b5e:	4293      	cmp	r3, r2
 8006b60:	d109      	bne.n	8006b76 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006b62:	697b      	ldr	r3, [r7, #20]
 8006b64:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b68:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006b6a:	683b      	ldr	r3, [r7, #0]
 8006b6c:	695b      	ldr	r3, [r3, #20]
 8006b6e:	021b      	lsls	r3, r3, #8
 8006b70:	697a      	ldr	r2, [r7, #20]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	697a      	ldr	r2, [r7, #20]
 8006b7a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	68fa      	ldr	r2, [r7, #12]
 8006b80:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006b82:	683b      	ldr	r3, [r7, #0]
 8006b84:	685a      	ldr	r2, [r3, #4]
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	693a      	ldr	r2, [r7, #16]
 8006b8e:	621a      	str	r2, [r3, #32]
}
 8006b90:	bf00      	nop
 8006b92:	371c      	adds	r7, #28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9a:	4770      	bx	lr
 8006b9c:	40012c00 	.word	0x40012c00
 8006ba0:	40013400 	.word	0x40013400
 8006ba4:	40014000 	.word	0x40014000
 8006ba8:	40014400 	.word	0x40014400
 8006bac:	40014800 	.word	0x40014800

08006bb0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006bde:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	021b      	lsls	r3, r3, #8
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	4313      	orrs	r3, r2
 8006bee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006bf0:	693b      	ldr	r3, [r7, #16]
 8006bf2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006bf6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006bf8:	683b      	ldr	r3, [r7, #0]
 8006bfa:	689b      	ldr	r3, [r3, #8]
 8006bfc:	051b      	lsls	r3, r3, #20
 8006bfe:	693a      	ldr	r2, [r7, #16]
 8006c00:	4313      	orrs	r3, r2
 8006c02:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	4a18      	ldr	r2, [pc, #96]	; (8006c68 <TIM_OC6_SetConfig+0xb8>)
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d00f      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	4a17      	ldr	r2, [pc, #92]	; (8006c6c <TIM_OC6_SetConfig+0xbc>)
 8006c10:	4293      	cmp	r3, r2
 8006c12:	d00b      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	4a16      	ldr	r2, [pc, #88]	; (8006c70 <TIM_OC6_SetConfig+0xc0>)
 8006c18:	4293      	cmp	r3, r2
 8006c1a:	d007      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	4a15      	ldr	r2, [pc, #84]	; (8006c74 <TIM_OC6_SetConfig+0xc4>)
 8006c20:	4293      	cmp	r3, r2
 8006c22:	d003      	beq.n	8006c2c <TIM_OC6_SetConfig+0x7c>
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	4a14      	ldr	r2, [pc, #80]	; (8006c78 <TIM_OC6_SetConfig+0xc8>)
 8006c28:	4293      	cmp	r3, r2
 8006c2a:	d109      	bne.n	8006c40 <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006c2c:	697b      	ldr	r3, [r7, #20]
 8006c2e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006c32:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	695b      	ldr	r3, [r3, #20]
 8006c38:	029b      	lsls	r3, r3, #10
 8006c3a:	697a      	ldr	r2, [r7, #20]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	685a      	ldr	r2, [r3, #4]
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	693a      	ldr	r2, [r7, #16]
 8006c58:	621a      	str	r2, [r3, #32]
}
 8006c5a:	bf00      	nop
 8006c5c:	371c      	adds	r7, #28
 8006c5e:	46bd      	mov	sp, r7
 8006c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c64:	4770      	bx	lr
 8006c66:	bf00      	nop
 8006c68:	40012c00 	.word	0x40012c00
 8006c6c:	40013400 	.word	0x40013400
 8006c70:	40014000 	.word	0x40014000
 8006c74:	40014400 	.word	0x40014400
 8006c78:	40014800 	.word	0x40014800

08006c7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006c7c:	b480      	push	{r7}
 8006c7e:	b087      	sub	sp, #28
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	6a1b      	ldr	r3, [r3, #32]
 8006c8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f023 0201 	bic.w	r2, r3, #1
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	699b      	ldr	r3, [r3, #24]
 8006c9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ca0:	693b      	ldr	r3, [r7, #16]
 8006ca2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ca6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	011b      	lsls	r3, r3, #4
 8006cac:	693a      	ldr	r2, [r7, #16]
 8006cae:	4313      	orrs	r3, r2
 8006cb0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006cb2:	697b      	ldr	r3, [r7, #20]
 8006cb4:	f023 030a 	bic.w	r3, r3, #10
 8006cb8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	68bb      	ldr	r3, [r7, #8]
 8006cbe:	4313      	orrs	r3, r2
 8006cc0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	697a      	ldr	r2, [r7, #20]
 8006ccc:	621a      	str	r2, [r3, #32]
}
 8006cce:	bf00      	nop
 8006cd0:	371c      	adds	r7, #28
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd8:	4770      	bx	lr

08006cda <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006cda:	b480      	push	{r7}
 8006cdc:	b087      	sub	sp, #28
 8006cde:	af00      	add	r7, sp, #0
 8006ce0:	60f8      	str	r0, [r7, #12]
 8006ce2:	60b9      	str	r1, [r7, #8]
 8006ce4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ce6:	68fb      	ldr	r3, [r7, #12]
 8006ce8:	6a1b      	ldr	r3, [r3, #32]
 8006cea:	f023 0210 	bic.w	r2, r3, #16
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	699b      	ldr	r3, [r3, #24]
 8006cf6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf8:	68fb      	ldr	r3, [r7, #12]
 8006cfa:	6a1b      	ldr	r3, [r3, #32]
 8006cfc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006d04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	031b      	lsls	r3, r3, #12
 8006d0a:	697a      	ldr	r2, [r7, #20]
 8006d0c:	4313      	orrs	r3, r2
 8006d0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006d16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006d18:	68bb      	ldr	r3, [r7, #8]
 8006d1a:	011b      	lsls	r3, r3, #4
 8006d1c:	693a      	ldr	r2, [r7, #16]
 8006d1e:	4313      	orrs	r3, r2
 8006d20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	697a      	ldr	r2, [r7, #20]
 8006d26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]
 8006d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	689b      	ldr	r3, [r3, #8]
 8006d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006d50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d54:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	f043 0307 	orr.w	r3, r3, #7
 8006d60:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	68fa      	ldr	r2, [r7, #12]
 8006d66:	609a      	str	r2, [r3, #8]
}
 8006d68:	bf00      	nop
 8006d6a:	3714      	adds	r7, #20
 8006d6c:	46bd      	mov	sp, r7
 8006d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d72:	4770      	bx	lr

08006d74 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b087      	sub	sp, #28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	689b      	ldr	r3, [r3, #8]
 8006d86:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006d88:	697b      	ldr	r3, [r7, #20]
 8006d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006d8e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	021a      	lsls	r2, r3, #8
 8006d94:	687b      	ldr	r3, [r7, #4]
 8006d96:	431a      	orrs	r2, r3
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	697a      	ldr	r2, [r7, #20]
 8006d9e:	4313      	orrs	r3, r2
 8006da0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	697a      	ldr	r2, [r7, #20]
 8006da6:	609a      	str	r2, [r3, #8]
}
 8006da8:	bf00      	nop
 8006daa:	371c      	adds	r7, #28
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006db4:	b480      	push	{r7}
 8006db6:	b087      	sub	sp, #28
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	60f8      	str	r0, [r7, #12]
 8006dbc:	60b9      	str	r1, [r7, #8]
 8006dbe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006dc0:	68bb      	ldr	r3, [r7, #8]
 8006dc2:	f003 031f 	and.w	r3, r3, #31
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dcc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	6a1a      	ldr	r2, [r3, #32]
 8006dd2:	697b      	ldr	r3, [r7, #20]
 8006dd4:	43db      	mvns	r3, r3
 8006dd6:	401a      	ands	r2, r3
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	6a1a      	ldr	r2, [r3, #32]
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	6879      	ldr	r1, [r7, #4]
 8006de8:	fa01 f303 	lsl.w	r3, r1, r3
 8006dec:	431a      	orrs	r2, r3
 8006dee:	68fb      	ldr	r3, [r7, #12]
 8006df0:	621a      	str	r2, [r3, #32]
}
 8006df2:	bf00      	nop
 8006df4:	371c      	adds	r7, #28
 8006df6:	46bd      	mov	sp, r7
 8006df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dfc:	4770      	bx	lr
	...

08006e00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006e00:	b480      	push	{r7}
 8006e02:	b085      	sub	sp, #20
 8006e04:	af00      	add	r7, sp, #0
 8006e06:	6078      	str	r0, [r7, #4]
 8006e08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e10:	2b01      	cmp	r3, #1
 8006e12:	d101      	bne.n	8006e18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006e14:	2302      	movs	r3, #2
 8006e16:	e065      	b.n	8006ee4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	2201      	movs	r2, #1
 8006e1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2202      	movs	r2, #2
 8006e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	685b      	ldr	r3, [r3, #4]
 8006e2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	689b      	ldr	r3, [r3, #8]
 8006e36:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	4a2c      	ldr	r2, [pc, #176]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e3e:	4293      	cmp	r3, r2
 8006e40:	d004      	beq.n	8006e4c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	4a2b      	ldr	r2, [pc, #172]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d108      	bne.n	8006e5e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006e52:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	68fa      	ldr	r2, [r7, #12]
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006e5e:	68fb      	ldr	r3, [r7, #12]
 8006e60:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006e64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e68:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	68fa      	ldr	r2, [r7, #12]
 8006e7a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	4a1b      	ldr	r2, [pc, #108]	; (8006ef0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8006e82:	4293      	cmp	r3, r2
 8006e84:	d018      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e8e:	d013      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	4a18      	ldr	r2, [pc, #96]	; (8006ef8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 8006e96:	4293      	cmp	r3, r2
 8006e98:	d00e      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	4a17      	ldr	r2, [pc, #92]	; (8006efc <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8006ea0:	4293      	cmp	r3, r2
 8006ea2:	d009      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	4a12      	ldr	r2, [pc, #72]	; (8006ef4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d004      	beq.n	8006eb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	4a13      	ldr	r2, [pc, #76]	; (8006f00 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d10c      	bne.n	8006ed2 <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006eb8:	68bb      	ldr	r3, [r7, #8]
 8006eba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006ebe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	68ba      	ldr	r2, [r7, #8]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	681b      	ldr	r3, [r3, #0]
 8006ece:	68ba      	ldr	r2, [r7, #8]
 8006ed0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	2201      	movs	r2, #1
 8006ed6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2200      	movs	r2, #0
 8006ede:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ee2:	2300      	movs	r3, #0
}
 8006ee4:	4618      	mov	r0, r3
 8006ee6:	3714      	adds	r7, #20
 8006ee8:	46bd      	mov	sp, r7
 8006eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eee:	4770      	bx	lr
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40013400 	.word	0x40013400
 8006ef8:	40000400 	.word	0x40000400
 8006efc:	40000800 	.word	0x40000800
 8006f00:	40014000 	.word	0x40014000

08006f04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b083      	sub	sp, #12
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr

08006f18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006f18:	b480      	push	{r7}
 8006f1a:	b083      	sub	sp, #12
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006f20:	bf00      	nop
 8006f22:	370c      	adds	r7, #12
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b083      	sub	sp, #12
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006f34:	bf00      	nop
 8006f36:	370c      	adds	r7, #12
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr

08006f40 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006f40:	b480      	push	{r7}
 8006f42:	b083      	sub	sp, #12
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006f48:	bf00      	nop
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b083      	sub	sp, #12
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006f5c:	bf00      	nop
 8006f5e:	370c      	adds	r7, #12
 8006f60:	46bd      	mov	sp, r7
 8006f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f66:	4770      	bx	lr

08006f68 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b083      	sub	sp, #12
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8006f70:	bf00      	nop
 8006f72:	370c      	adds	r7, #12
 8006f74:	46bd      	mov	sp, r7
 8006f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7a:	4770      	bx	lr

08006f7c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006f7c:	b480      	push	{r7}
 8006f7e:	b083      	sub	sp, #12
 8006f80:	af00      	add	r7, sp, #0
 8006f82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006f84:	bf00      	nop
 8006f86:	370c      	adds	r7, #12
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8e:	4770      	bx	lr

08006f90 <__errno>:
 8006f90:	4b01      	ldr	r3, [pc, #4]	; (8006f98 <__errno+0x8>)
 8006f92:	6818      	ldr	r0, [r3, #0]
 8006f94:	4770      	bx	lr
 8006f96:	bf00      	nop
 8006f98:	2000000c 	.word	0x2000000c

08006f9c <__libc_init_array>:
 8006f9c:	b570      	push	{r4, r5, r6, lr}
 8006f9e:	4d0d      	ldr	r5, [pc, #52]	; (8006fd4 <__libc_init_array+0x38>)
 8006fa0:	4c0d      	ldr	r4, [pc, #52]	; (8006fd8 <__libc_init_array+0x3c>)
 8006fa2:	1b64      	subs	r4, r4, r5
 8006fa4:	10a4      	asrs	r4, r4, #2
 8006fa6:	2600      	movs	r6, #0
 8006fa8:	42a6      	cmp	r6, r4
 8006faa:	d109      	bne.n	8006fc0 <__libc_init_array+0x24>
 8006fac:	4d0b      	ldr	r5, [pc, #44]	; (8006fdc <__libc_init_array+0x40>)
 8006fae:	4c0c      	ldr	r4, [pc, #48]	; (8006fe0 <__libc_init_array+0x44>)
 8006fb0:	f001 f84a 	bl	8008048 <_init>
 8006fb4:	1b64      	subs	r4, r4, r5
 8006fb6:	10a4      	asrs	r4, r4, #2
 8006fb8:	2600      	movs	r6, #0
 8006fba:	42a6      	cmp	r6, r4
 8006fbc:	d105      	bne.n	8006fca <__libc_init_array+0x2e>
 8006fbe:	bd70      	pop	{r4, r5, r6, pc}
 8006fc0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fc4:	4798      	blx	r3
 8006fc6:	3601      	adds	r6, #1
 8006fc8:	e7ee      	b.n	8006fa8 <__libc_init_array+0xc>
 8006fca:	f855 3b04 	ldr.w	r3, [r5], #4
 8006fce:	4798      	blx	r3
 8006fd0:	3601      	adds	r6, #1
 8006fd2:	e7f2      	b.n	8006fba <__libc_init_array+0x1e>
 8006fd4:	080081d0 	.word	0x080081d0
 8006fd8:	080081d0 	.word	0x080081d0
 8006fdc:	080081d0 	.word	0x080081d0
 8006fe0:	080081d4 	.word	0x080081d4

08006fe4 <memset>:
 8006fe4:	4402      	add	r2, r0
 8006fe6:	4603      	mov	r3, r0
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d100      	bne.n	8006fee <memset+0xa>
 8006fec:	4770      	bx	lr
 8006fee:	f803 1b01 	strb.w	r1, [r3], #1
 8006ff2:	e7f9      	b.n	8006fe8 <memset+0x4>

08006ff4 <iprintf>:
 8006ff4:	b40f      	push	{r0, r1, r2, r3}
 8006ff6:	4b0a      	ldr	r3, [pc, #40]	; (8007020 <iprintf+0x2c>)
 8006ff8:	b513      	push	{r0, r1, r4, lr}
 8006ffa:	681c      	ldr	r4, [r3, #0]
 8006ffc:	b124      	cbz	r4, 8007008 <iprintf+0x14>
 8006ffe:	69a3      	ldr	r3, [r4, #24]
 8007000:	b913      	cbnz	r3, 8007008 <iprintf+0x14>
 8007002:	4620      	mov	r0, r4
 8007004:	f000 fa74 	bl	80074f0 <__sinit>
 8007008:	ab05      	add	r3, sp, #20
 800700a:	9a04      	ldr	r2, [sp, #16]
 800700c:	68a1      	ldr	r1, [r4, #8]
 800700e:	9301      	str	r3, [sp, #4]
 8007010:	4620      	mov	r0, r4
 8007012:	f000 fc45 	bl	80078a0 <_vfiprintf_r>
 8007016:	b002      	add	sp, #8
 8007018:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800701c:	b004      	add	sp, #16
 800701e:	4770      	bx	lr
 8007020:	2000000c 	.word	0x2000000c

08007024 <putchar>:
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <putchar+0x28>)
 8007026:	b513      	push	{r0, r1, r4, lr}
 8007028:	681c      	ldr	r4, [r3, #0]
 800702a:	4601      	mov	r1, r0
 800702c:	b134      	cbz	r4, 800703c <putchar+0x18>
 800702e:	69a3      	ldr	r3, [r4, #24]
 8007030:	b923      	cbnz	r3, 800703c <putchar+0x18>
 8007032:	9001      	str	r0, [sp, #4]
 8007034:	4620      	mov	r0, r4
 8007036:	f000 fa5b 	bl	80074f0 <__sinit>
 800703a:	9901      	ldr	r1, [sp, #4]
 800703c:	68a2      	ldr	r2, [r4, #8]
 800703e:	4620      	mov	r0, r4
 8007040:	b002      	add	sp, #8
 8007042:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007046:	f000 beef 	b.w	8007e28 <_putc_r>
 800704a:	bf00      	nop
 800704c:	2000000c 	.word	0x2000000c

08007050 <_puts_r>:
 8007050:	b570      	push	{r4, r5, r6, lr}
 8007052:	460e      	mov	r6, r1
 8007054:	4605      	mov	r5, r0
 8007056:	b118      	cbz	r0, 8007060 <_puts_r+0x10>
 8007058:	6983      	ldr	r3, [r0, #24]
 800705a:	b90b      	cbnz	r3, 8007060 <_puts_r+0x10>
 800705c:	f000 fa48 	bl	80074f0 <__sinit>
 8007060:	69ab      	ldr	r3, [r5, #24]
 8007062:	68ac      	ldr	r4, [r5, #8]
 8007064:	b913      	cbnz	r3, 800706c <_puts_r+0x1c>
 8007066:	4628      	mov	r0, r5
 8007068:	f000 fa42 	bl	80074f0 <__sinit>
 800706c:	4b2c      	ldr	r3, [pc, #176]	; (8007120 <_puts_r+0xd0>)
 800706e:	429c      	cmp	r4, r3
 8007070:	d120      	bne.n	80070b4 <_puts_r+0x64>
 8007072:	686c      	ldr	r4, [r5, #4]
 8007074:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007076:	07db      	lsls	r3, r3, #31
 8007078:	d405      	bmi.n	8007086 <_puts_r+0x36>
 800707a:	89a3      	ldrh	r3, [r4, #12]
 800707c:	0598      	lsls	r0, r3, #22
 800707e:	d402      	bmi.n	8007086 <_puts_r+0x36>
 8007080:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007082:	f000 fad3 	bl	800762c <__retarget_lock_acquire_recursive>
 8007086:	89a3      	ldrh	r3, [r4, #12]
 8007088:	0719      	lsls	r1, r3, #28
 800708a:	d51d      	bpl.n	80070c8 <_puts_r+0x78>
 800708c:	6923      	ldr	r3, [r4, #16]
 800708e:	b1db      	cbz	r3, 80070c8 <_puts_r+0x78>
 8007090:	3e01      	subs	r6, #1
 8007092:	68a3      	ldr	r3, [r4, #8]
 8007094:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007098:	3b01      	subs	r3, #1
 800709a:	60a3      	str	r3, [r4, #8]
 800709c:	bb39      	cbnz	r1, 80070ee <_puts_r+0x9e>
 800709e:	2b00      	cmp	r3, #0
 80070a0:	da38      	bge.n	8007114 <_puts_r+0xc4>
 80070a2:	4622      	mov	r2, r4
 80070a4:	210a      	movs	r1, #10
 80070a6:	4628      	mov	r0, r5
 80070a8:	f000 f848 	bl	800713c <__swbuf_r>
 80070ac:	3001      	adds	r0, #1
 80070ae:	d011      	beq.n	80070d4 <_puts_r+0x84>
 80070b0:	250a      	movs	r5, #10
 80070b2:	e011      	b.n	80070d8 <_puts_r+0x88>
 80070b4:	4b1b      	ldr	r3, [pc, #108]	; (8007124 <_puts_r+0xd4>)
 80070b6:	429c      	cmp	r4, r3
 80070b8:	d101      	bne.n	80070be <_puts_r+0x6e>
 80070ba:	68ac      	ldr	r4, [r5, #8]
 80070bc:	e7da      	b.n	8007074 <_puts_r+0x24>
 80070be:	4b1a      	ldr	r3, [pc, #104]	; (8007128 <_puts_r+0xd8>)
 80070c0:	429c      	cmp	r4, r3
 80070c2:	bf08      	it	eq
 80070c4:	68ec      	ldreq	r4, [r5, #12]
 80070c6:	e7d5      	b.n	8007074 <_puts_r+0x24>
 80070c8:	4621      	mov	r1, r4
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 f888 	bl	80071e0 <__swsetup_r>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d0dd      	beq.n	8007090 <_puts_r+0x40>
 80070d4:	f04f 35ff 	mov.w	r5, #4294967295
 80070d8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070da:	07da      	lsls	r2, r3, #31
 80070dc:	d405      	bmi.n	80070ea <_puts_r+0x9a>
 80070de:	89a3      	ldrh	r3, [r4, #12]
 80070e0:	059b      	lsls	r3, r3, #22
 80070e2:	d402      	bmi.n	80070ea <_puts_r+0x9a>
 80070e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070e6:	f000 faa2 	bl	800762e <__retarget_lock_release_recursive>
 80070ea:	4628      	mov	r0, r5
 80070ec:	bd70      	pop	{r4, r5, r6, pc}
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	da04      	bge.n	80070fc <_puts_r+0xac>
 80070f2:	69a2      	ldr	r2, [r4, #24]
 80070f4:	429a      	cmp	r2, r3
 80070f6:	dc06      	bgt.n	8007106 <_puts_r+0xb6>
 80070f8:	290a      	cmp	r1, #10
 80070fa:	d004      	beq.n	8007106 <_puts_r+0xb6>
 80070fc:	6823      	ldr	r3, [r4, #0]
 80070fe:	1c5a      	adds	r2, r3, #1
 8007100:	6022      	str	r2, [r4, #0]
 8007102:	7019      	strb	r1, [r3, #0]
 8007104:	e7c5      	b.n	8007092 <_puts_r+0x42>
 8007106:	4622      	mov	r2, r4
 8007108:	4628      	mov	r0, r5
 800710a:	f000 f817 	bl	800713c <__swbuf_r>
 800710e:	3001      	adds	r0, #1
 8007110:	d1bf      	bne.n	8007092 <_puts_r+0x42>
 8007112:	e7df      	b.n	80070d4 <_puts_r+0x84>
 8007114:	6823      	ldr	r3, [r4, #0]
 8007116:	250a      	movs	r5, #10
 8007118:	1c5a      	adds	r2, r3, #1
 800711a:	6022      	str	r2, [r4, #0]
 800711c:	701d      	strb	r5, [r3, #0]
 800711e:	e7db      	b.n	80070d8 <_puts_r+0x88>
 8007120:	0800815c 	.word	0x0800815c
 8007124:	0800817c 	.word	0x0800817c
 8007128:	0800813c 	.word	0x0800813c

0800712c <puts>:
 800712c:	4b02      	ldr	r3, [pc, #8]	; (8007138 <puts+0xc>)
 800712e:	4601      	mov	r1, r0
 8007130:	6818      	ldr	r0, [r3, #0]
 8007132:	f7ff bf8d 	b.w	8007050 <_puts_r>
 8007136:	bf00      	nop
 8007138:	2000000c 	.word	0x2000000c

0800713c <__swbuf_r>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	460e      	mov	r6, r1
 8007140:	4614      	mov	r4, r2
 8007142:	4605      	mov	r5, r0
 8007144:	b118      	cbz	r0, 800714e <__swbuf_r+0x12>
 8007146:	6983      	ldr	r3, [r0, #24]
 8007148:	b90b      	cbnz	r3, 800714e <__swbuf_r+0x12>
 800714a:	f000 f9d1 	bl	80074f0 <__sinit>
 800714e:	4b21      	ldr	r3, [pc, #132]	; (80071d4 <__swbuf_r+0x98>)
 8007150:	429c      	cmp	r4, r3
 8007152:	d12b      	bne.n	80071ac <__swbuf_r+0x70>
 8007154:	686c      	ldr	r4, [r5, #4]
 8007156:	69a3      	ldr	r3, [r4, #24]
 8007158:	60a3      	str	r3, [r4, #8]
 800715a:	89a3      	ldrh	r3, [r4, #12]
 800715c:	071a      	lsls	r2, r3, #28
 800715e:	d52f      	bpl.n	80071c0 <__swbuf_r+0x84>
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	b36b      	cbz	r3, 80071c0 <__swbuf_r+0x84>
 8007164:	6923      	ldr	r3, [r4, #16]
 8007166:	6820      	ldr	r0, [r4, #0]
 8007168:	1ac0      	subs	r0, r0, r3
 800716a:	6963      	ldr	r3, [r4, #20]
 800716c:	b2f6      	uxtb	r6, r6
 800716e:	4283      	cmp	r3, r0
 8007170:	4637      	mov	r7, r6
 8007172:	dc04      	bgt.n	800717e <__swbuf_r+0x42>
 8007174:	4621      	mov	r1, r4
 8007176:	4628      	mov	r0, r5
 8007178:	f000 f926 	bl	80073c8 <_fflush_r>
 800717c:	bb30      	cbnz	r0, 80071cc <__swbuf_r+0x90>
 800717e:	68a3      	ldr	r3, [r4, #8]
 8007180:	3b01      	subs	r3, #1
 8007182:	60a3      	str	r3, [r4, #8]
 8007184:	6823      	ldr	r3, [r4, #0]
 8007186:	1c5a      	adds	r2, r3, #1
 8007188:	6022      	str	r2, [r4, #0]
 800718a:	701e      	strb	r6, [r3, #0]
 800718c:	6963      	ldr	r3, [r4, #20]
 800718e:	3001      	adds	r0, #1
 8007190:	4283      	cmp	r3, r0
 8007192:	d004      	beq.n	800719e <__swbuf_r+0x62>
 8007194:	89a3      	ldrh	r3, [r4, #12]
 8007196:	07db      	lsls	r3, r3, #31
 8007198:	d506      	bpl.n	80071a8 <__swbuf_r+0x6c>
 800719a:	2e0a      	cmp	r6, #10
 800719c:	d104      	bne.n	80071a8 <__swbuf_r+0x6c>
 800719e:	4621      	mov	r1, r4
 80071a0:	4628      	mov	r0, r5
 80071a2:	f000 f911 	bl	80073c8 <_fflush_r>
 80071a6:	b988      	cbnz	r0, 80071cc <__swbuf_r+0x90>
 80071a8:	4638      	mov	r0, r7
 80071aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071ac:	4b0a      	ldr	r3, [pc, #40]	; (80071d8 <__swbuf_r+0x9c>)
 80071ae:	429c      	cmp	r4, r3
 80071b0:	d101      	bne.n	80071b6 <__swbuf_r+0x7a>
 80071b2:	68ac      	ldr	r4, [r5, #8]
 80071b4:	e7cf      	b.n	8007156 <__swbuf_r+0x1a>
 80071b6:	4b09      	ldr	r3, [pc, #36]	; (80071dc <__swbuf_r+0xa0>)
 80071b8:	429c      	cmp	r4, r3
 80071ba:	bf08      	it	eq
 80071bc:	68ec      	ldreq	r4, [r5, #12]
 80071be:	e7ca      	b.n	8007156 <__swbuf_r+0x1a>
 80071c0:	4621      	mov	r1, r4
 80071c2:	4628      	mov	r0, r5
 80071c4:	f000 f80c 	bl	80071e0 <__swsetup_r>
 80071c8:	2800      	cmp	r0, #0
 80071ca:	d0cb      	beq.n	8007164 <__swbuf_r+0x28>
 80071cc:	f04f 37ff 	mov.w	r7, #4294967295
 80071d0:	e7ea      	b.n	80071a8 <__swbuf_r+0x6c>
 80071d2:	bf00      	nop
 80071d4:	0800815c 	.word	0x0800815c
 80071d8:	0800817c 	.word	0x0800817c
 80071dc:	0800813c 	.word	0x0800813c

080071e0 <__swsetup_r>:
 80071e0:	4b32      	ldr	r3, [pc, #200]	; (80072ac <__swsetup_r+0xcc>)
 80071e2:	b570      	push	{r4, r5, r6, lr}
 80071e4:	681d      	ldr	r5, [r3, #0]
 80071e6:	4606      	mov	r6, r0
 80071e8:	460c      	mov	r4, r1
 80071ea:	b125      	cbz	r5, 80071f6 <__swsetup_r+0x16>
 80071ec:	69ab      	ldr	r3, [r5, #24]
 80071ee:	b913      	cbnz	r3, 80071f6 <__swsetup_r+0x16>
 80071f0:	4628      	mov	r0, r5
 80071f2:	f000 f97d 	bl	80074f0 <__sinit>
 80071f6:	4b2e      	ldr	r3, [pc, #184]	; (80072b0 <__swsetup_r+0xd0>)
 80071f8:	429c      	cmp	r4, r3
 80071fa:	d10f      	bne.n	800721c <__swsetup_r+0x3c>
 80071fc:	686c      	ldr	r4, [r5, #4]
 80071fe:	89a3      	ldrh	r3, [r4, #12]
 8007200:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007204:	0719      	lsls	r1, r3, #28
 8007206:	d42c      	bmi.n	8007262 <__swsetup_r+0x82>
 8007208:	06dd      	lsls	r5, r3, #27
 800720a:	d411      	bmi.n	8007230 <__swsetup_r+0x50>
 800720c:	2309      	movs	r3, #9
 800720e:	6033      	str	r3, [r6, #0]
 8007210:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007214:	81a3      	strh	r3, [r4, #12]
 8007216:	f04f 30ff 	mov.w	r0, #4294967295
 800721a:	e03e      	b.n	800729a <__swsetup_r+0xba>
 800721c:	4b25      	ldr	r3, [pc, #148]	; (80072b4 <__swsetup_r+0xd4>)
 800721e:	429c      	cmp	r4, r3
 8007220:	d101      	bne.n	8007226 <__swsetup_r+0x46>
 8007222:	68ac      	ldr	r4, [r5, #8]
 8007224:	e7eb      	b.n	80071fe <__swsetup_r+0x1e>
 8007226:	4b24      	ldr	r3, [pc, #144]	; (80072b8 <__swsetup_r+0xd8>)
 8007228:	429c      	cmp	r4, r3
 800722a:	bf08      	it	eq
 800722c:	68ec      	ldreq	r4, [r5, #12]
 800722e:	e7e6      	b.n	80071fe <__swsetup_r+0x1e>
 8007230:	0758      	lsls	r0, r3, #29
 8007232:	d512      	bpl.n	800725a <__swsetup_r+0x7a>
 8007234:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007236:	b141      	cbz	r1, 800724a <__swsetup_r+0x6a>
 8007238:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800723c:	4299      	cmp	r1, r3
 800723e:	d002      	beq.n	8007246 <__swsetup_r+0x66>
 8007240:	4630      	mov	r0, r6
 8007242:	f000 fa59 	bl	80076f8 <_free_r>
 8007246:	2300      	movs	r3, #0
 8007248:	6363      	str	r3, [r4, #52]	; 0x34
 800724a:	89a3      	ldrh	r3, [r4, #12]
 800724c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007250:	81a3      	strh	r3, [r4, #12]
 8007252:	2300      	movs	r3, #0
 8007254:	6063      	str	r3, [r4, #4]
 8007256:	6923      	ldr	r3, [r4, #16]
 8007258:	6023      	str	r3, [r4, #0]
 800725a:	89a3      	ldrh	r3, [r4, #12]
 800725c:	f043 0308 	orr.w	r3, r3, #8
 8007260:	81a3      	strh	r3, [r4, #12]
 8007262:	6923      	ldr	r3, [r4, #16]
 8007264:	b94b      	cbnz	r3, 800727a <__swsetup_r+0x9a>
 8007266:	89a3      	ldrh	r3, [r4, #12]
 8007268:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800726c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007270:	d003      	beq.n	800727a <__swsetup_r+0x9a>
 8007272:	4621      	mov	r1, r4
 8007274:	4630      	mov	r0, r6
 8007276:	f000 f9ff 	bl	8007678 <__smakebuf_r>
 800727a:	89a0      	ldrh	r0, [r4, #12]
 800727c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007280:	f010 0301 	ands.w	r3, r0, #1
 8007284:	d00a      	beq.n	800729c <__swsetup_r+0xbc>
 8007286:	2300      	movs	r3, #0
 8007288:	60a3      	str	r3, [r4, #8]
 800728a:	6963      	ldr	r3, [r4, #20]
 800728c:	425b      	negs	r3, r3
 800728e:	61a3      	str	r3, [r4, #24]
 8007290:	6923      	ldr	r3, [r4, #16]
 8007292:	b943      	cbnz	r3, 80072a6 <__swsetup_r+0xc6>
 8007294:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007298:	d1ba      	bne.n	8007210 <__swsetup_r+0x30>
 800729a:	bd70      	pop	{r4, r5, r6, pc}
 800729c:	0781      	lsls	r1, r0, #30
 800729e:	bf58      	it	pl
 80072a0:	6963      	ldrpl	r3, [r4, #20]
 80072a2:	60a3      	str	r3, [r4, #8]
 80072a4:	e7f4      	b.n	8007290 <__swsetup_r+0xb0>
 80072a6:	2000      	movs	r0, #0
 80072a8:	e7f7      	b.n	800729a <__swsetup_r+0xba>
 80072aa:	bf00      	nop
 80072ac:	2000000c 	.word	0x2000000c
 80072b0:	0800815c 	.word	0x0800815c
 80072b4:	0800817c 	.word	0x0800817c
 80072b8:	0800813c 	.word	0x0800813c

080072bc <__sflush_r>:
 80072bc:	898a      	ldrh	r2, [r1, #12]
 80072be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80072c2:	4605      	mov	r5, r0
 80072c4:	0710      	lsls	r0, r2, #28
 80072c6:	460c      	mov	r4, r1
 80072c8:	d458      	bmi.n	800737c <__sflush_r+0xc0>
 80072ca:	684b      	ldr	r3, [r1, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc05      	bgt.n	80072dc <__sflush_r+0x20>
 80072d0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	dc02      	bgt.n	80072dc <__sflush_r+0x20>
 80072d6:	2000      	movs	r0, #0
 80072d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80072dc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80072de:	2e00      	cmp	r6, #0
 80072e0:	d0f9      	beq.n	80072d6 <__sflush_r+0x1a>
 80072e2:	2300      	movs	r3, #0
 80072e4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80072e8:	682f      	ldr	r7, [r5, #0]
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	d032      	beq.n	8007354 <__sflush_r+0x98>
 80072ee:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80072f0:	89a3      	ldrh	r3, [r4, #12]
 80072f2:	075a      	lsls	r2, r3, #29
 80072f4:	d505      	bpl.n	8007302 <__sflush_r+0x46>
 80072f6:	6863      	ldr	r3, [r4, #4]
 80072f8:	1ac0      	subs	r0, r0, r3
 80072fa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80072fc:	b10b      	cbz	r3, 8007302 <__sflush_r+0x46>
 80072fe:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007300:	1ac0      	subs	r0, r0, r3
 8007302:	2300      	movs	r3, #0
 8007304:	4602      	mov	r2, r0
 8007306:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007308:	6a21      	ldr	r1, [r4, #32]
 800730a:	4628      	mov	r0, r5
 800730c:	47b0      	blx	r6
 800730e:	1c43      	adds	r3, r0, #1
 8007310:	89a3      	ldrh	r3, [r4, #12]
 8007312:	d106      	bne.n	8007322 <__sflush_r+0x66>
 8007314:	6829      	ldr	r1, [r5, #0]
 8007316:	291d      	cmp	r1, #29
 8007318:	d82c      	bhi.n	8007374 <__sflush_r+0xb8>
 800731a:	4a2a      	ldr	r2, [pc, #168]	; (80073c4 <__sflush_r+0x108>)
 800731c:	40ca      	lsrs	r2, r1
 800731e:	07d6      	lsls	r6, r2, #31
 8007320:	d528      	bpl.n	8007374 <__sflush_r+0xb8>
 8007322:	2200      	movs	r2, #0
 8007324:	6062      	str	r2, [r4, #4]
 8007326:	04d9      	lsls	r1, r3, #19
 8007328:	6922      	ldr	r2, [r4, #16]
 800732a:	6022      	str	r2, [r4, #0]
 800732c:	d504      	bpl.n	8007338 <__sflush_r+0x7c>
 800732e:	1c42      	adds	r2, r0, #1
 8007330:	d101      	bne.n	8007336 <__sflush_r+0x7a>
 8007332:	682b      	ldr	r3, [r5, #0]
 8007334:	b903      	cbnz	r3, 8007338 <__sflush_r+0x7c>
 8007336:	6560      	str	r0, [r4, #84]	; 0x54
 8007338:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800733a:	602f      	str	r7, [r5, #0]
 800733c:	2900      	cmp	r1, #0
 800733e:	d0ca      	beq.n	80072d6 <__sflush_r+0x1a>
 8007340:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007344:	4299      	cmp	r1, r3
 8007346:	d002      	beq.n	800734e <__sflush_r+0x92>
 8007348:	4628      	mov	r0, r5
 800734a:	f000 f9d5 	bl	80076f8 <_free_r>
 800734e:	2000      	movs	r0, #0
 8007350:	6360      	str	r0, [r4, #52]	; 0x34
 8007352:	e7c1      	b.n	80072d8 <__sflush_r+0x1c>
 8007354:	6a21      	ldr	r1, [r4, #32]
 8007356:	2301      	movs	r3, #1
 8007358:	4628      	mov	r0, r5
 800735a:	47b0      	blx	r6
 800735c:	1c41      	adds	r1, r0, #1
 800735e:	d1c7      	bne.n	80072f0 <__sflush_r+0x34>
 8007360:	682b      	ldr	r3, [r5, #0]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d0c4      	beq.n	80072f0 <__sflush_r+0x34>
 8007366:	2b1d      	cmp	r3, #29
 8007368:	d001      	beq.n	800736e <__sflush_r+0xb2>
 800736a:	2b16      	cmp	r3, #22
 800736c:	d101      	bne.n	8007372 <__sflush_r+0xb6>
 800736e:	602f      	str	r7, [r5, #0]
 8007370:	e7b1      	b.n	80072d6 <__sflush_r+0x1a>
 8007372:	89a3      	ldrh	r3, [r4, #12]
 8007374:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	e7ad      	b.n	80072d8 <__sflush_r+0x1c>
 800737c:	690f      	ldr	r7, [r1, #16]
 800737e:	2f00      	cmp	r7, #0
 8007380:	d0a9      	beq.n	80072d6 <__sflush_r+0x1a>
 8007382:	0793      	lsls	r3, r2, #30
 8007384:	680e      	ldr	r6, [r1, #0]
 8007386:	bf08      	it	eq
 8007388:	694b      	ldreq	r3, [r1, #20]
 800738a:	600f      	str	r7, [r1, #0]
 800738c:	bf18      	it	ne
 800738e:	2300      	movne	r3, #0
 8007390:	eba6 0807 	sub.w	r8, r6, r7
 8007394:	608b      	str	r3, [r1, #8]
 8007396:	f1b8 0f00 	cmp.w	r8, #0
 800739a:	dd9c      	ble.n	80072d6 <__sflush_r+0x1a>
 800739c:	6a21      	ldr	r1, [r4, #32]
 800739e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80073a0:	4643      	mov	r3, r8
 80073a2:	463a      	mov	r2, r7
 80073a4:	4628      	mov	r0, r5
 80073a6:	47b0      	blx	r6
 80073a8:	2800      	cmp	r0, #0
 80073aa:	dc06      	bgt.n	80073ba <__sflush_r+0xfe>
 80073ac:	89a3      	ldrh	r3, [r4, #12]
 80073ae:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80073b2:	81a3      	strh	r3, [r4, #12]
 80073b4:	f04f 30ff 	mov.w	r0, #4294967295
 80073b8:	e78e      	b.n	80072d8 <__sflush_r+0x1c>
 80073ba:	4407      	add	r7, r0
 80073bc:	eba8 0800 	sub.w	r8, r8, r0
 80073c0:	e7e9      	b.n	8007396 <__sflush_r+0xda>
 80073c2:	bf00      	nop
 80073c4:	20400001 	.word	0x20400001

080073c8 <_fflush_r>:
 80073c8:	b538      	push	{r3, r4, r5, lr}
 80073ca:	690b      	ldr	r3, [r1, #16]
 80073cc:	4605      	mov	r5, r0
 80073ce:	460c      	mov	r4, r1
 80073d0:	b913      	cbnz	r3, 80073d8 <_fflush_r+0x10>
 80073d2:	2500      	movs	r5, #0
 80073d4:	4628      	mov	r0, r5
 80073d6:	bd38      	pop	{r3, r4, r5, pc}
 80073d8:	b118      	cbz	r0, 80073e2 <_fflush_r+0x1a>
 80073da:	6983      	ldr	r3, [r0, #24]
 80073dc:	b90b      	cbnz	r3, 80073e2 <_fflush_r+0x1a>
 80073de:	f000 f887 	bl	80074f0 <__sinit>
 80073e2:	4b14      	ldr	r3, [pc, #80]	; (8007434 <_fflush_r+0x6c>)
 80073e4:	429c      	cmp	r4, r3
 80073e6:	d11b      	bne.n	8007420 <_fflush_r+0x58>
 80073e8:	686c      	ldr	r4, [r5, #4]
 80073ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d0ef      	beq.n	80073d2 <_fflush_r+0xa>
 80073f2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80073f4:	07d0      	lsls	r0, r2, #31
 80073f6:	d404      	bmi.n	8007402 <_fflush_r+0x3a>
 80073f8:	0599      	lsls	r1, r3, #22
 80073fa:	d402      	bmi.n	8007402 <_fflush_r+0x3a>
 80073fc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80073fe:	f000 f915 	bl	800762c <__retarget_lock_acquire_recursive>
 8007402:	4628      	mov	r0, r5
 8007404:	4621      	mov	r1, r4
 8007406:	f7ff ff59 	bl	80072bc <__sflush_r>
 800740a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800740c:	07da      	lsls	r2, r3, #31
 800740e:	4605      	mov	r5, r0
 8007410:	d4e0      	bmi.n	80073d4 <_fflush_r+0xc>
 8007412:	89a3      	ldrh	r3, [r4, #12]
 8007414:	059b      	lsls	r3, r3, #22
 8007416:	d4dd      	bmi.n	80073d4 <_fflush_r+0xc>
 8007418:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800741a:	f000 f908 	bl	800762e <__retarget_lock_release_recursive>
 800741e:	e7d9      	b.n	80073d4 <_fflush_r+0xc>
 8007420:	4b05      	ldr	r3, [pc, #20]	; (8007438 <_fflush_r+0x70>)
 8007422:	429c      	cmp	r4, r3
 8007424:	d101      	bne.n	800742a <_fflush_r+0x62>
 8007426:	68ac      	ldr	r4, [r5, #8]
 8007428:	e7df      	b.n	80073ea <_fflush_r+0x22>
 800742a:	4b04      	ldr	r3, [pc, #16]	; (800743c <_fflush_r+0x74>)
 800742c:	429c      	cmp	r4, r3
 800742e:	bf08      	it	eq
 8007430:	68ec      	ldreq	r4, [r5, #12]
 8007432:	e7da      	b.n	80073ea <_fflush_r+0x22>
 8007434:	0800815c 	.word	0x0800815c
 8007438:	0800817c 	.word	0x0800817c
 800743c:	0800813c 	.word	0x0800813c

08007440 <std>:
 8007440:	2300      	movs	r3, #0
 8007442:	b510      	push	{r4, lr}
 8007444:	4604      	mov	r4, r0
 8007446:	e9c0 3300 	strd	r3, r3, [r0]
 800744a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800744e:	6083      	str	r3, [r0, #8]
 8007450:	8181      	strh	r1, [r0, #12]
 8007452:	6643      	str	r3, [r0, #100]	; 0x64
 8007454:	81c2      	strh	r2, [r0, #14]
 8007456:	6183      	str	r3, [r0, #24]
 8007458:	4619      	mov	r1, r3
 800745a:	2208      	movs	r2, #8
 800745c:	305c      	adds	r0, #92	; 0x5c
 800745e:	f7ff fdc1 	bl	8006fe4 <memset>
 8007462:	4b05      	ldr	r3, [pc, #20]	; (8007478 <std+0x38>)
 8007464:	6263      	str	r3, [r4, #36]	; 0x24
 8007466:	4b05      	ldr	r3, [pc, #20]	; (800747c <std+0x3c>)
 8007468:	62a3      	str	r3, [r4, #40]	; 0x28
 800746a:	4b05      	ldr	r3, [pc, #20]	; (8007480 <std+0x40>)
 800746c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800746e:	4b05      	ldr	r3, [pc, #20]	; (8007484 <std+0x44>)
 8007470:	6224      	str	r4, [r4, #32]
 8007472:	6323      	str	r3, [r4, #48]	; 0x30
 8007474:	bd10      	pop	{r4, pc}
 8007476:	bf00      	nop
 8007478:	08007ed9 	.word	0x08007ed9
 800747c:	08007efb 	.word	0x08007efb
 8007480:	08007f33 	.word	0x08007f33
 8007484:	08007f57 	.word	0x08007f57

08007488 <_cleanup_r>:
 8007488:	4901      	ldr	r1, [pc, #4]	; (8007490 <_cleanup_r+0x8>)
 800748a:	f000 b8af 	b.w	80075ec <_fwalk_reent>
 800748e:	bf00      	nop
 8007490:	080073c9 	.word	0x080073c9

08007494 <__sfmoreglue>:
 8007494:	b570      	push	{r4, r5, r6, lr}
 8007496:	1e4a      	subs	r2, r1, #1
 8007498:	2568      	movs	r5, #104	; 0x68
 800749a:	4355      	muls	r5, r2
 800749c:	460e      	mov	r6, r1
 800749e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80074a2:	f000 f979 	bl	8007798 <_malloc_r>
 80074a6:	4604      	mov	r4, r0
 80074a8:	b140      	cbz	r0, 80074bc <__sfmoreglue+0x28>
 80074aa:	2100      	movs	r1, #0
 80074ac:	e9c0 1600 	strd	r1, r6, [r0]
 80074b0:	300c      	adds	r0, #12
 80074b2:	60a0      	str	r0, [r4, #8]
 80074b4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80074b8:	f7ff fd94 	bl	8006fe4 <memset>
 80074bc:	4620      	mov	r0, r4
 80074be:	bd70      	pop	{r4, r5, r6, pc}

080074c0 <__sfp_lock_acquire>:
 80074c0:	4801      	ldr	r0, [pc, #4]	; (80074c8 <__sfp_lock_acquire+0x8>)
 80074c2:	f000 b8b3 	b.w	800762c <__retarget_lock_acquire_recursive>
 80074c6:	bf00      	nop
 80074c8:	20000414 	.word	0x20000414

080074cc <__sfp_lock_release>:
 80074cc:	4801      	ldr	r0, [pc, #4]	; (80074d4 <__sfp_lock_release+0x8>)
 80074ce:	f000 b8ae 	b.w	800762e <__retarget_lock_release_recursive>
 80074d2:	bf00      	nop
 80074d4:	20000414 	.word	0x20000414

080074d8 <__sinit_lock_acquire>:
 80074d8:	4801      	ldr	r0, [pc, #4]	; (80074e0 <__sinit_lock_acquire+0x8>)
 80074da:	f000 b8a7 	b.w	800762c <__retarget_lock_acquire_recursive>
 80074de:	bf00      	nop
 80074e0:	2000040f 	.word	0x2000040f

080074e4 <__sinit_lock_release>:
 80074e4:	4801      	ldr	r0, [pc, #4]	; (80074ec <__sinit_lock_release+0x8>)
 80074e6:	f000 b8a2 	b.w	800762e <__retarget_lock_release_recursive>
 80074ea:	bf00      	nop
 80074ec:	2000040f 	.word	0x2000040f

080074f0 <__sinit>:
 80074f0:	b510      	push	{r4, lr}
 80074f2:	4604      	mov	r4, r0
 80074f4:	f7ff fff0 	bl	80074d8 <__sinit_lock_acquire>
 80074f8:	69a3      	ldr	r3, [r4, #24]
 80074fa:	b11b      	cbz	r3, 8007504 <__sinit+0x14>
 80074fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007500:	f7ff bff0 	b.w	80074e4 <__sinit_lock_release>
 8007504:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007508:	6523      	str	r3, [r4, #80]	; 0x50
 800750a:	4b13      	ldr	r3, [pc, #76]	; (8007558 <__sinit+0x68>)
 800750c:	4a13      	ldr	r2, [pc, #76]	; (800755c <__sinit+0x6c>)
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	62a2      	str	r2, [r4, #40]	; 0x28
 8007512:	42a3      	cmp	r3, r4
 8007514:	bf04      	itt	eq
 8007516:	2301      	moveq	r3, #1
 8007518:	61a3      	streq	r3, [r4, #24]
 800751a:	4620      	mov	r0, r4
 800751c:	f000 f820 	bl	8007560 <__sfp>
 8007520:	6060      	str	r0, [r4, #4]
 8007522:	4620      	mov	r0, r4
 8007524:	f000 f81c 	bl	8007560 <__sfp>
 8007528:	60a0      	str	r0, [r4, #8]
 800752a:	4620      	mov	r0, r4
 800752c:	f000 f818 	bl	8007560 <__sfp>
 8007530:	2200      	movs	r2, #0
 8007532:	60e0      	str	r0, [r4, #12]
 8007534:	2104      	movs	r1, #4
 8007536:	6860      	ldr	r0, [r4, #4]
 8007538:	f7ff ff82 	bl	8007440 <std>
 800753c:	68a0      	ldr	r0, [r4, #8]
 800753e:	2201      	movs	r2, #1
 8007540:	2109      	movs	r1, #9
 8007542:	f7ff ff7d 	bl	8007440 <std>
 8007546:	68e0      	ldr	r0, [r4, #12]
 8007548:	2202      	movs	r2, #2
 800754a:	2112      	movs	r1, #18
 800754c:	f7ff ff78 	bl	8007440 <std>
 8007550:	2301      	movs	r3, #1
 8007552:	61a3      	str	r3, [r4, #24]
 8007554:	e7d2      	b.n	80074fc <__sinit+0xc>
 8007556:	bf00      	nop
 8007558:	08008138 	.word	0x08008138
 800755c:	08007489 	.word	0x08007489

08007560 <__sfp>:
 8007560:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007562:	4607      	mov	r7, r0
 8007564:	f7ff ffac 	bl	80074c0 <__sfp_lock_acquire>
 8007568:	4b1e      	ldr	r3, [pc, #120]	; (80075e4 <__sfp+0x84>)
 800756a:	681e      	ldr	r6, [r3, #0]
 800756c:	69b3      	ldr	r3, [r6, #24]
 800756e:	b913      	cbnz	r3, 8007576 <__sfp+0x16>
 8007570:	4630      	mov	r0, r6
 8007572:	f7ff ffbd 	bl	80074f0 <__sinit>
 8007576:	3648      	adds	r6, #72	; 0x48
 8007578:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800757c:	3b01      	subs	r3, #1
 800757e:	d503      	bpl.n	8007588 <__sfp+0x28>
 8007580:	6833      	ldr	r3, [r6, #0]
 8007582:	b30b      	cbz	r3, 80075c8 <__sfp+0x68>
 8007584:	6836      	ldr	r6, [r6, #0]
 8007586:	e7f7      	b.n	8007578 <__sfp+0x18>
 8007588:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800758c:	b9d5      	cbnz	r5, 80075c4 <__sfp+0x64>
 800758e:	4b16      	ldr	r3, [pc, #88]	; (80075e8 <__sfp+0x88>)
 8007590:	60e3      	str	r3, [r4, #12]
 8007592:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007596:	6665      	str	r5, [r4, #100]	; 0x64
 8007598:	f000 f847 	bl	800762a <__retarget_lock_init_recursive>
 800759c:	f7ff ff96 	bl	80074cc <__sfp_lock_release>
 80075a0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80075a4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80075a8:	6025      	str	r5, [r4, #0]
 80075aa:	61a5      	str	r5, [r4, #24]
 80075ac:	2208      	movs	r2, #8
 80075ae:	4629      	mov	r1, r5
 80075b0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80075b4:	f7ff fd16 	bl	8006fe4 <memset>
 80075b8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80075bc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80075c0:	4620      	mov	r0, r4
 80075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c4:	3468      	adds	r4, #104	; 0x68
 80075c6:	e7d9      	b.n	800757c <__sfp+0x1c>
 80075c8:	2104      	movs	r1, #4
 80075ca:	4638      	mov	r0, r7
 80075cc:	f7ff ff62 	bl	8007494 <__sfmoreglue>
 80075d0:	4604      	mov	r4, r0
 80075d2:	6030      	str	r0, [r6, #0]
 80075d4:	2800      	cmp	r0, #0
 80075d6:	d1d5      	bne.n	8007584 <__sfp+0x24>
 80075d8:	f7ff ff78 	bl	80074cc <__sfp_lock_release>
 80075dc:	230c      	movs	r3, #12
 80075de:	603b      	str	r3, [r7, #0]
 80075e0:	e7ee      	b.n	80075c0 <__sfp+0x60>
 80075e2:	bf00      	nop
 80075e4:	08008138 	.word	0x08008138
 80075e8:	ffff0001 	.word	0xffff0001

080075ec <_fwalk_reent>:
 80075ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80075f0:	4606      	mov	r6, r0
 80075f2:	4688      	mov	r8, r1
 80075f4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80075f8:	2700      	movs	r7, #0
 80075fa:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80075fe:	f1b9 0901 	subs.w	r9, r9, #1
 8007602:	d505      	bpl.n	8007610 <_fwalk_reent+0x24>
 8007604:	6824      	ldr	r4, [r4, #0]
 8007606:	2c00      	cmp	r4, #0
 8007608:	d1f7      	bne.n	80075fa <_fwalk_reent+0xe>
 800760a:	4638      	mov	r0, r7
 800760c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007610:	89ab      	ldrh	r3, [r5, #12]
 8007612:	2b01      	cmp	r3, #1
 8007614:	d907      	bls.n	8007626 <_fwalk_reent+0x3a>
 8007616:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800761a:	3301      	adds	r3, #1
 800761c:	d003      	beq.n	8007626 <_fwalk_reent+0x3a>
 800761e:	4629      	mov	r1, r5
 8007620:	4630      	mov	r0, r6
 8007622:	47c0      	blx	r8
 8007624:	4307      	orrs	r7, r0
 8007626:	3568      	adds	r5, #104	; 0x68
 8007628:	e7e9      	b.n	80075fe <_fwalk_reent+0x12>

0800762a <__retarget_lock_init_recursive>:
 800762a:	4770      	bx	lr

0800762c <__retarget_lock_acquire_recursive>:
 800762c:	4770      	bx	lr

0800762e <__retarget_lock_release_recursive>:
 800762e:	4770      	bx	lr

08007630 <__swhatbuf_r>:
 8007630:	b570      	push	{r4, r5, r6, lr}
 8007632:	460e      	mov	r6, r1
 8007634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007638:	2900      	cmp	r1, #0
 800763a:	b096      	sub	sp, #88	; 0x58
 800763c:	4614      	mov	r4, r2
 800763e:	461d      	mov	r5, r3
 8007640:	da07      	bge.n	8007652 <__swhatbuf_r+0x22>
 8007642:	2300      	movs	r3, #0
 8007644:	602b      	str	r3, [r5, #0]
 8007646:	89b3      	ldrh	r3, [r6, #12]
 8007648:	061a      	lsls	r2, r3, #24
 800764a:	d410      	bmi.n	800766e <__swhatbuf_r+0x3e>
 800764c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007650:	e00e      	b.n	8007670 <__swhatbuf_r+0x40>
 8007652:	466a      	mov	r2, sp
 8007654:	f000 fca6 	bl	8007fa4 <_fstat_r>
 8007658:	2800      	cmp	r0, #0
 800765a:	dbf2      	blt.n	8007642 <__swhatbuf_r+0x12>
 800765c:	9a01      	ldr	r2, [sp, #4]
 800765e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007662:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007666:	425a      	negs	r2, r3
 8007668:	415a      	adcs	r2, r3
 800766a:	602a      	str	r2, [r5, #0]
 800766c:	e7ee      	b.n	800764c <__swhatbuf_r+0x1c>
 800766e:	2340      	movs	r3, #64	; 0x40
 8007670:	2000      	movs	r0, #0
 8007672:	6023      	str	r3, [r4, #0]
 8007674:	b016      	add	sp, #88	; 0x58
 8007676:	bd70      	pop	{r4, r5, r6, pc}

08007678 <__smakebuf_r>:
 8007678:	898b      	ldrh	r3, [r1, #12]
 800767a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800767c:	079d      	lsls	r5, r3, #30
 800767e:	4606      	mov	r6, r0
 8007680:	460c      	mov	r4, r1
 8007682:	d507      	bpl.n	8007694 <__smakebuf_r+0x1c>
 8007684:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007688:	6023      	str	r3, [r4, #0]
 800768a:	6123      	str	r3, [r4, #16]
 800768c:	2301      	movs	r3, #1
 800768e:	6163      	str	r3, [r4, #20]
 8007690:	b002      	add	sp, #8
 8007692:	bd70      	pop	{r4, r5, r6, pc}
 8007694:	ab01      	add	r3, sp, #4
 8007696:	466a      	mov	r2, sp
 8007698:	f7ff ffca 	bl	8007630 <__swhatbuf_r>
 800769c:	9900      	ldr	r1, [sp, #0]
 800769e:	4605      	mov	r5, r0
 80076a0:	4630      	mov	r0, r6
 80076a2:	f000 f879 	bl	8007798 <_malloc_r>
 80076a6:	b948      	cbnz	r0, 80076bc <__smakebuf_r+0x44>
 80076a8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80076ac:	059a      	lsls	r2, r3, #22
 80076ae:	d4ef      	bmi.n	8007690 <__smakebuf_r+0x18>
 80076b0:	f023 0303 	bic.w	r3, r3, #3
 80076b4:	f043 0302 	orr.w	r3, r3, #2
 80076b8:	81a3      	strh	r3, [r4, #12]
 80076ba:	e7e3      	b.n	8007684 <__smakebuf_r+0xc>
 80076bc:	4b0d      	ldr	r3, [pc, #52]	; (80076f4 <__smakebuf_r+0x7c>)
 80076be:	62b3      	str	r3, [r6, #40]	; 0x28
 80076c0:	89a3      	ldrh	r3, [r4, #12]
 80076c2:	6020      	str	r0, [r4, #0]
 80076c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80076c8:	81a3      	strh	r3, [r4, #12]
 80076ca:	9b00      	ldr	r3, [sp, #0]
 80076cc:	6163      	str	r3, [r4, #20]
 80076ce:	9b01      	ldr	r3, [sp, #4]
 80076d0:	6120      	str	r0, [r4, #16]
 80076d2:	b15b      	cbz	r3, 80076ec <__smakebuf_r+0x74>
 80076d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80076d8:	4630      	mov	r0, r6
 80076da:	f000 fc75 	bl	8007fc8 <_isatty_r>
 80076de:	b128      	cbz	r0, 80076ec <__smakebuf_r+0x74>
 80076e0:	89a3      	ldrh	r3, [r4, #12]
 80076e2:	f023 0303 	bic.w	r3, r3, #3
 80076e6:	f043 0301 	orr.w	r3, r3, #1
 80076ea:	81a3      	strh	r3, [r4, #12]
 80076ec:	89a0      	ldrh	r0, [r4, #12]
 80076ee:	4305      	orrs	r5, r0
 80076f0:	81a5      	strh	r5, [r4, #12]
 80076f2:	e7cd      	b.n	8007690 <__smakebuf_r+0x18>
 80076f4:	08007489 	.word	0x08007489

080076f8 <_free_r>:
 80076f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076fa:	2900      	cmp	r1, #0
 80076fc:	d048      	beq.n	8007790 <_free_r+0x98>
 80076fe:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007702:	9001      	str	r0, [sp, #4]
 8007704:	2b00      	cmp	r3, #0
 8007706:	f1a1 0404 	sub.w	r4, r1, #4
 800770a:	bfb8      	it	lt
 800770c:	18e4      	addlt	r4, r4, r3
 800770e:	f000 fc7d 	bl	800800c <__malloc_lock>
 8007712:	4a20      	ldr	r2, [pc, #128]	; (8007794 <_free_r+0x9c>)
 8007714:	9801      	ldr	r0, [sp, #4]
 8007716:	6813      	ldr	r3, [r2, #0]
 8007718:	4615      	mov	r5, r2
 800771a:	b933      	cbnz	r3, 800772a <_free_r+0x32>
 800771c:	6063      	str	r3, [r4, #4]
 800771e:	6014      	str	r4, [r2, #0]
 8007720:	b003      	add	sp, #12
 8007722:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007726:	f000 bc77 	b.w	8008018 <__malloc_unlock>
 800772a:	42a3      	cmp	r3, r4
 800772c:	d90b      	bls.n	8007746 <_free_r+0x4e>
 800772e:	6821      	ldr	r1, [r4, #0]
 8007730:	1862      	adds	r2, r4, r1
 8007732:	4293      	cmp	r3, r2
 8007734:	bf04      	itt	eq
 8007736:	681a      	ldreq	r2, [r3, #0]
 8007738:	685b      	ldreq	r3, [r3, #4]
 800773a:	6063      	str	r3, [r4, #4]
 800773c:	bf04      	itt	eq
 800773e:	1852      	addeq	r2, r2, r1
 8007740:	6022      	streq	r2, [r4, #0]
 8007742:	602c      	str	r4, [r5, #0]
 8007744:	e7ec      	b.n	8007720 <_free_r+0x28>
 8007746:	461a      	mov	r2, r3
 8007748:	685b      	ldr	r3, [r3, #4]
 800774a:	b10b      	cbz	r3, 8007750 <_free_r+0x58>
 800774c:	42a3      	cmp	r3, r4
 800774e:	d9fa      	bls.n	8007746 <_free_r+0x4e>
 8007750:	6811      	ldr	r1, [r2, #0]
 8007752:	1855      	adds	r5, r2, r1
 8007754:	42a5      	cmp	r5, r4
 8007756:	d10b      	bne.n	8007770 <_free_r+0x78>
 8007758:	6824      	ldr	r4, [r4, #0]
 800775a:	4421      	add	r1, r4
 800775c:	1854      	adds	r4, r2, r1
 800775e:	42a3      	cmp	r3, r4
 8007760:	6011      	str	r1, [r2, #0]
 8007762:	d1dd      	bne.n	8007720 <_free_r+0x28>
 8007764:	681c      	ldr	r4, [r3, #0]
 8007766:	685b      	ldr	r3, [r3, #4]
 8007768:	6053      	str	r3, [r2, #4]
 800776a:	4421      	add	r1, r4
 800776c:	6011      	str	r1, [r2, #0]
 800776e:	e7d7      	b.n	8007720 <_free_r+0x28>
 8007770:	d902      	bls.n	8007778 <_free_r+0x80>
 8007772:	230c      	movs	r3, #12
 8007774:	6003      	str	r3, [r0, #0]
 8007776:	e7d3      	b.n	8007720 <_free_r+0x28>
 8007778:	6825      	ldr	r5, [r4, #0]
 800777a:	1961      	adds	r1, r4, r5
 800777c:	428b      	cmp	r3, r1
 800777e:	bf04      	itt	eq
 8007780:	6819      	ldreq	r1, [r3, #0]
 8007782:	685b      	ldreq	r3, [r3, #4]
 8007784:	6063      	str	r3, [r4, #4]
 8007786:	bf04      	itt	eq
 8007788:	1949      	addeq	r1, r1, r5
 800778a:	6021      	streq	r1, [r4, #0]
 800778c:	6054      	str	r4, [r2, #4]
 800778e:	e7c7      	b.n	8007720 <_free_r+0x28>
 8007790:	b003      	add	sp, #12
 8007792:	bd30      	pop	{r4, r5, pc}
 8007794:	20000094 	.word	0x20000094

08007798 <_malloc_r>:
 8007798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800779a:	1ccd      	adds	r5, r1, #3
 800779c:	f025 0503 	bic.w	r5, r5, #3
 80077a0:	3508      	adds	r5, #8
 80077a2:	2d0c      	cmp	r5, #12
 80077a4:	bf38      	it	cc
 80077a6:	250c      	movcc	r5, #12
 80077a8:	2d00      	cmp	r5, #0
 80077aa:	4606      	mov	r6, r0
 80077ac:	db01      	blt.n	80077b2 <_malloc_r+0x1a>
 80077ae:	42a9      	cmp	r1, r5
 80077b0:	d903      	bls.n	80077ba <_malloc_r+0x22>
 80077b2:	230c      	movs	r3, #12
 80077b4:	6033      	str	r3, [r6, #0]
 80077b6:	2000      	movs	r0, #0
 80077b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ba:	f000 fc27 	bl	800800c <__malloc_lock>
 80077be:	4921      	ldr	r1, [pc, #132]	; (8007844 <_malloc_r+0xac>)
 80077c0:	680a      	ldr	r2, [r1, #0]
 80077c2:	4614      	mov	r4, r2
 80077c4:	b99c      	cbnz	r4, 80077ee <_malloc_r+0x56>
 80077c6:	4f20      	ldr	r7, [pc, #128]	; (8007848 <_malloc_r+0xb0>)
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	b923      	cbnz	r3, 80077d6 <_malloc_r+0x3e>
 80077cc:	4621      	mov	r1, r4
 80077ce:	4630      	mov	r0, r6
 80077d0:	f000 fb72 	bl	8007eb8 <_sbrk_r>
 80077d4:	6038      	str	r0, [r7, #0]
 80077d6:	4629      	mov	r1, r5
 80077d8:	4630      	mov	r0, r6
 80077da:	f000 fb6d 	bl	8007eb8 <_sbrk_r>
 80077de:	1c43      	adds	r3, r0, #1
 80077e0:	d123      	bne.n	800782a <_malloc_r+0x92>
 80077e2:	230c      	movs	r3, #12
 80077e4:	6033      	str	r3, [r6, #0]
 80077e6:	4630      	mov	r0, r6
 80077e8:	f000 fc16 	bl	8008018 <__malloc_unlock>
 80077ec:	e7e3      	b.n	80077b6 <_malloc_r+0x1e>
 80077ee:	6823      	ldr	r3, [r4, #0]
 80077f0:	1b5b      	subs	r3, r3, r5
 80077f2:	d417      	bmi.n	8007824 <_malloc_r+0x8c>
 80077f4:	2b0b      	cmp	r3, #11
 80077f6:	d903      	bls.n	8007800 <_malloc_r+0x68>
 80077f8:	6023      	str	r3, [r4, #0]
 80077fa:	441c      	add	r4, r3
 80077fc:	6025      	str	r5, [r4, #0]
 80077fe:	e004      	b.n	800780a <_malloc_r+0x72>
 8007800:	6863      	ldr	r3, [r4, #4]
 8007802:	42a2      	cmp	r2, r4
 8007804:	bf0c      	ite	eq
 8007806:	600b      	streq	r3, [r1, #0]
 8007808:	6053      	strne	r3, [r2, #4]
 800780a:	4630      	mov	r0, r6
 800780c:	f000 fc04 	bl	8008018 <__malloc_unlock>
 8007810:	f104 000b 	add.w	r0, r4, #11
 8007814:	1d23      	adds	r3, r4, #4
 8007816:	f020 0007 	bic.w	r0, r0, #7
 800781a:	1ac2      	subs	r2, r0, r3
 800781c:	d0cc      	beq.n	80077b8 <_malloc_r+0x20>
 800781e:	1a1b      	subs	r3, r3, r0
 8007820:	50a3      	str	r3, [r4, r2]
 8007822:	e7c9      	b.n	80077b8 <_malloc_r+0x20>
 8007824:	4622      	mov	r2, r4
 8007826:	6864      	ldr	r4, [r4, #4]
 8007828:	e7cc      	b.n	80077c4 <_malloc_r+0x2c>
 800782a:	1cc4      	adds	r4, r0, #3
 800782c:	f024 0403 	bic.w	r4, r4, #3
 8007830:	42a0      	cmp	r0, r4
 8007832:	d0e3      	beq.n	80077fc <_malloc_r+0x64>
 8007834:	1a21      	subs	r1, r4, r0
 8007836:	4630      	mov	r0, r6
 8007838:	f000 fb3e 	bl	8007eb8 <_sbrk_r>
 800783c:	3001      	adds	r0, #1
 800783e:	d1dd      	bne.n	80077fc <_malloc_r+0x64>
 8007840:	e7cf      	b.n	80077e2 <_malloc_r+0x4a>
 8007842:	bf00      	nop
 8007844:	20000094 	.word	0x20000094
 8007848:	20000098 	.word	0x20000098

0800784c <__sfputc_r>:
 800784c:	6893      	ldr	r3, [r2, #8]
 800784e:	3b01      	subs	r3, #1
 8007850:	2b00      	cmp	r3, #0
 8007852:	b410      	push	{r4}
 8007854:	6093      	str	r3, [r2, #8]
 8007856:	da08      	bge.n	800786a <__sfputc_r+0x1e>
 8007858:	6994      	ldr	r4, [r2, #24]
 800785a:	42a3      	cmp	r3, r4
 800785c:	db01      	blt.n	8007862 <__sfputc_r+0x16>
 800785e:	290a      	cmp	r1, #10
 8007860:	d103      	bne.n	800786a <__sfputc_r+0x1e>
 8007862:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007866:	f7ff bc69 	b.w	800713c <__swbuf_r>
 800786a:	6813      	ldr	r3, [r2, #0]
 800786c:	1c58      	adds	r0, r3, #1
 800786e:	6010      	str	r0, [r2, #0]
 8007870:	7019      	strb	r1, [r3, #0]
 8007872:	4608      	mov	r0, r1
 8007874:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007878:	4770      	bx	lr

0800787a <__sfputs_r>:
 800787a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800787c:	4606      	mov	r6, r0
 800787e:	460f      	mov	r7, r1
 8007880:	4614      	mov	r4, r2
 8007882:	18d5      	adds	r5, r2, r3
 8007884:	42ac      	cmp	r4, r5
 8007886:	d101      	bne.n	800788c <__sfputs_r+0x12>
 8007888:	2000      	movs	r0, #0
 800788a:	e007      	b.n	800789c <__sfputs_r+0x22>
 800788c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007890:	463a      	mov	r2, r7
 8007892:	4630      	mov	r0, r6
 8007894:	f7ff ffda 	bl	800784c <__sfputc_r>
 8007898:	1c43      	adds	r3, r0, #1
 800789a:	d1f3      	bne.n	8007884 <__sfputs_r+0xa>
 800789c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080078a0 <_vfiprintf_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	460d      	mov	r5, r1
 80078a6:	b09d      	sub	sp, #116	; 0x74
 80078a8:	4614      	mov	r4, r2
 80078aa:	4698      	mov	r8, r3
 80078ac:	4606      	mov	r6, r0
 80078ae:	b118      	cbz	r0, 80078b8 <_vfiprintf_r+0x18>
 80078b0:	6983      	ldr	r3, [r0, #24]
 80078b2:	b90b      	cbnz	r3, 80078b8 <_vfiprintf_r+0x18>
 80078b4:	f7ff fe1c 	bl	80074f0 <__sinit>
 80078b8:	4b89      	ldr	r3, [pc, #548]	; (8007ae0 <_vfiprintf_r+0x240>)
 80078ba:	429d      	cmp	r5, r3
 80078bc:	d11b      	bne.n	80078f6 <_vfiprintf_r+0x56>
 80078be:	6875      	ldr	r5, [r6, #4]
 80078c0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078c2:	07d9      	lsls	r1, r3, #31
 80078c4:	d405      	bmi.n	80078d2 <_vfiprintf_r+0x32>
 80078c6:	89ab      	ldrh	r3, [r5, #12]
 80078c8:	059a      	lsls	r2, r3, #22
 80078ca:	d402      	bmi.n	80078d2 <_vfiprintf_r+0x32>
 80078cc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80078ce:	f7ff fead 	bl	800762c <__retarget_lock_acquire_recursive>
 80078d2:	89ab      	ldrh	r3, [r5, #12]
 80078d4:	071b      	lsls	r3, r3, #28
 80078d6:	d501      	bpl.n	80078dc <_vfiprintf_r+0x3c>
 80078d8:	692b      	ldr	r3, [r5, #16]
 80078da:	b9eb      	cbnz	r3, 8007918 <_vfiprintf_r+0x78>
 80078dc:	4629      	mov	r1, r5
 80078de:	4630      	mov	r0, r6
 80078e0:	f7ff fc7e 	bl	80071e0 <__swsetup_r>
 80078e4:	b1c0      	cbz	r0, 8007918 <_vfiprintf_r+0x78>
 80078e6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80078e8:	07dc      	lsls	r4, r3, #31
 80078ea:	d50e      	bpl.n	800790a <_vfiprintf_r+0x6a>
 80078ec:	f04f 30ff 	mov.w	r0, #4294967295
 80078f0:	b01d      	add	sp, #116	; 0x74
 80078f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f6:	4b7b      	ldr	r3, [pc, #492]	; (8007ae4 <_vfiprintf_r+0x244>)
 80078f8:	429d      	cmp	r5, r3
 80078fa:	d101      	bne.n	8007900 <_vfiprintf_r+0x60>
 80078fc:	68b5      	ldr	r5, [r6, #8]
 80078fe:	e7df      	b.n	80078c0 <_vfiprintf_r+0x20>
 8007900:	4b79      	ldr	r3, [pc, #484]	; (8007ae8 <_vfiprintf_r+0x248>)
 8007902:	429d      	cmp	r5, r3
 8007904:	bf08      	it	eq
 8007906:	68f5      	ldreq	r5, [r6, #12]
 8007908:	e7da      	b.n	80078c0 <_vfiprintf_r+0x20>
 800790a:	89ab      	ldrh	r3, [r5, #12]
 800790c:	0598      	lsls	r0, r3, #22
 800790e:	d4ed      	bmi.n	80078ec <_vfiprintf_r+0x4c>
 8007910:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007912:	f7ff fe8c 	bl	800762e <__retarget_lock_release_recursive>
 8007916:	e7e9      	b.n	80078ec <_vfiprintf_r+0x4c>
 8007918:	2300      	movs	r3, #0
 800791a:	9309      	str	r3, [sp, #36]	; 0x24
 800791c:	2320      	movs	r3, #32
 800791e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007922:	f8cd 800c 	str.w	r8, [sp, #12]
 8007926:	2330      	movs	r3, #48	; 0x30
 8007928:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007aec <_vfiprintf_r+0x24c>
 800792c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007930:	f04f 0901 	mov.w	r9, #1
 8007934:	4623      	mov	r3, r4
 8007936:	469a      	mov	sl, r3
 8007938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800793c:	b10a      	cbz	r2, 8007942 <_vfiprintf_r+0xa2>
 800793e:	2a25      	cmp	r2, #37	; 0x25
 8007940:	d1f9      	bne.n	8007936 <_vfiprintf_r+0x96>
 8007942:	ebba 0b04 	subs.w	fp, sl, r4
 8007946:	d00b      	beq.n	8007960 <_vfiprintf_r+0xc0>
 8007948:	465b      	mov	r3, fp
 800794a:	4622      	mov	r2, r4
 800794c:	4629      	mov	r1, r5
 800794e:	4630      	mov	r0, r6
 8007950:	f7ff ff93 	bl	800787a <__sfputs_r>
 8007954:	3001      	adds	r0, #1
 8007956:	f000 80aa 	beq.w	8007aae <_vfiprintf_r+0x20e>
 800795a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800795c:	445a      	add	r2, fp
 800795e:	9209      	str	r2, [sp, #36]	; 0x24
 8007960:	f89a 3000 	ldrb.w	r3, [sl]
 8007964:	2b00      	cmp	r3, #0
 8007966:	f000 80a2 	beq.w	8007aae <_vfiprintf_r+0x20e>
 800796a:	2300      	movs	r3, #0
 800796c:	f04f 32ff 	mov.w	r2, #4294967295
 8007970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007974:	f10a 0a01 	add.w	sl, sl, #1
 8007978:	9304      	str	r3, [sp, #16]
 800797a:	9307      	str	r3, [sp, #28]
 800797c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007980:	931a      	str	r3, [sp, #104]	; 0x68
 8007982:	4654      	mov	r4, sl
 8007984:	2205      	movs	r2, #5
 8007986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800798a:	4858      	ldr	r0, [pc, #352]	; (8007aec <_vfiprintf_r+0x24c>)
 800798c:	f7f8 fc48 	bl	8000220 <memchr>
 8007990:	9a04      	ldr	r2, [sp, #16]
 8007992:	b9d8      	cbnz	r0, 80079cc <_vfiprintf_r+0x12c>
 8007994:	06d1      	lsls	r1, r2, #27
 8007996:	bf44      	itt	mi
 8007998:	2320      	movmi	r3, #32
 800799a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800799e:	0713      	lsls	r3, r2, #28
 80079a0:	bf44      	itt	mi
 80079a2:	232b      	movmi	r3, #43	; 0x2b
 80079a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80079a8:	f89a 3000 	ldrb.w	r3, [sl]
 80079ac:	2b2a      	cmp	r3, #42	; 0x2a
 80079ae:	d015      	beq.n	80079dc <_vfiprintf_r+0x13c>
 80079b0:	9a07      	ldr	r2, [sp, #28]
 80079b2:	4654      	mov	r4, sl
 80079b4:	2000      	movs	r0, #0
 80079b6:	f04f 0c0a 	mov.w	ip, #10
 80079ba:	4621      	mov	r1, r4
 80079bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80079c0:	3b30      	subs	r3, #48	; 0x30
 80079c2:	2b09      	cmp	r3, #9
 80079c4:	d94e      	bls.n	8007a64 <_vfiprintf_r+0x1c4>
 80079c6:	b1b0      	cbz	r0, 80079f6 <_vfiprintf_r+0x156>
 80079c8:	9207      	str	r2, [sp, #28]
 80079ca:	e014      	b.n	80079f6 <_vfiprintf_r+0x156>
 80079cc:	eba0 0308 	sub.w	r3, r0, r8
 80079d0:	fa09 f303 	lsl.w	r3, r9, r3
 80079d4:	4313      	orrs	r3, r2
 80079d6:	9304      	str	r3, [sp, #16]
 80079d8:	46a2      	mov	sl, r4
 80079da:	e7d2      	b.n	8007982 <_vfiprintf_r+0xe2>
 80079dc:	9b03      	ldr	r3, [sp, #12]
 80079de:	1d19      	adds	r1, r3, #4
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	9103      	str	r1, [sp, #12]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	bfbb      	ittet	lt
 80079e8:	425b      	neglt	r3, r3
 80079ea:	f042 0202 	orrlt.w	r2, r2, #2
 80079ee:	9307      	strge	r3, [sp, #28]
 80079f0:	9307      	strlt	r3, [sp, #28]
 80079f2:	bfb8      	it	lt
 80079f4:	9204      	strlt	r2, [sp, #16]
 80079f6:	7823      	ldrb	r3, [r4, #0]
 80079f8:	2b2e      	cmp	r3, #46	; 0x2e
 80079fa:	d10c      	bne.n	8007a16 <_vfiprintf_r+0x176>
 80079fc:	7863      	ldrb	r3, [r4, #1]
 80079fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007a00:	d135      	bne.n	8007a6e <_vfiprintf_r+0x1ce>
 8007a02:	9b03      	ldr	r3, [sp, #12]
 8007a04:	1d1a      	adds	r2, r3, #4
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	9203      	str	r2, [sp, #12]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfb8      	it	lt
 8007a0e:	f04f 33ff 	movlt.w	r3, #4294967295
 8007a12:	3402      	adds	r4, #2
 8007a14:	9305      	str	r3, [sp, #20]
 8007a16:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007afc <_vfiprintf_r+0x25c>
 8007a1a:	7821      	ldrb	r1, [r4, #0]
 8007a1c:	2203      	movs	r2, #3
 8007a1e:	4650      	mov	r0, sl
 8007a20:	f7f8 fbfe 	bl	8000220 <memchr>
 8007a24:	b140      	cbz	r0, 8007a38 <_vfiprintf_r+0x198>
 8007a26:	2340      	movs	r3, #64	; 0x40
 8007a28:	eba0 000a 	sub.w	r0, r0, sl
 8007a2c:	fa03 f000 	lsl.w	r0, r3, r0
 8007a30:	9b04      	ldr	r3, [sp, #16]
 8007a32:	4303      	orrs	r3, r0
 8007a34:	3401      	adds	r4, #1
 8007a36:	9304      	str	r3, [sp, #16]
 8007a38:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a3c:	482c      	ldr	r0, [pc, #176]	; (8007af0 <_vfiprintf_r+0x250>)
 8007a3e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007a42:	2206      	movs	r2, #6
 8007a44:	f7f8 fbec 	bl	8000220 <memchr>
 8007a48:	2800      	cmp	r0, #0
 8007a4a:	d03f      	beq.n	8007acc <_vfiprintf_r+0x22c>
 8007a4c:	4b29      	ldr	r3, [pc, #164]	; (8007af4 <_vfiprintf_r+0x254>)
 8007a4e:	bb1b      	cbnz	r3, 8007a98 <_vfiprintf_r+0x1f8>
 8007a50:	9b03      	ldr	r3, [sp, #12]
 8007a52:	3307      	adds	r3, #7
 8007a54:	f023 0307 	bic.w	r3, r3, #7
 8007a58:	3308      	adds	r3, #8
 8007a5a:	9303      	str	r3, [sp, #12]
 8007a5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a5e:	443b      	add	r3, r7
 8007a60:	9309      	str	r3, [sp, #36]	; 0x24
 8007a62:	e767      	b.n	8007934 <_vfiprintf_r+0x94>
 8007a64:	fb0c 3202 	mla	r2, ip, r2, r3
 8007a68:	460c      	mov	r4, r1
 8007a6a:	2001      	movs	r0, #1
 8007a6c:	e7a5      	b.n	80079ba <_vfiprintf_r+0x11a>
 8007a6e:	2300      	movs	r3, #0
 8007a70:	3401      	adds	r4, #1
 8007a72:	9305      	str	r3, [sp, #20]
 8007a74:	4619      	mov	r1, r3
 8007a76:	f04f 0c0a 	mov.w	ip, #10
 8007a7a:	4620      	mov	r0, r4
 8007a7c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007a80:	3a30      	subs	r2, #48	; 0x30
 8007a82:	2a09      	cmp	r2, #9
 8007a84:	d903      	bls.n	8007a8e <_vfiprintf_r+0x1ee>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d0c5      	beq.n	8007a16 <_vfiprintf_r+0x176>
 8007a8a:	9105      	str	r1, [sp, #20]
 8007a8c:	e7c3      	b.n	8007a16 <_vfiprintf_r+0x176>
 8007a8e:	fb0c 2101 	mla	r1, ip, r1, r2
 8007a92:	4604      	mov	r4, r0
 8007a94:	2301      	movs	r3, #1
 8007a96:	e7f0      	b.n	8007a7a <_vfiprintf_r+0x1da>
 8007a98:	ab03      	add	r3, sp, #12
 8007a9a:	9300      	str	r3, [sp, #0]
 8007a9c:	462a      	mov	r2, r5
 8007a9e:	4b16      	ldr	r3, [pc, #88]	; (8007af8 <_vfiprintf_r+0x258>)
 8007aa0:	a904      	add	r1, sp, #16
 8007aa2:	4630      	mov	r0, r6
 8007aa4:	f3af 8000 	nop.w
 8007aa8:	4607      	mov	r7, r0
 8007aaa:	1c78      	adds	r0, r7, #1
 8007aac:	d1d6      	bne.n	8007a5c <_vfiprintf_r+0x1bc>
 8007aae:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007ab0:	07d9      	lsls	r1, r3, #31
 8007ab2:	d405      	bmi.n	8007ac0 <_vfiprintf_r+0x220>
 8007ab4:	89ab      	ldrh	r3, [r5, #12]
 8007ab6:	059a      	lsls	r2, r3, #22
 8007ab8:	d402      	bmi.n	8007ac0 <_vfiprintf_r+0x220>
 8007aba:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007abc:	f7ff fdb7 	bl	800762e <__retarget_lock_release_recursive>
 8007ac0:	89ab      	ldrh	r3, [r5, #12]
 8007ac2:	065b      	lsls	r3, r3, #25
 8007ac4:	f53f af12 	bmi.w	80078ec <_vfiprintf_r+0x4c>
 8007ac8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007aca:	e711      	b.n	80078f0 <_vfiprintf_r+0x50>
 8007acc:	ab03      	add	r3, sp, #12
 8007ace:	9300      	str	r3, [sp, #0]
 8007ad0:	462a      	mov	r2, r5
 8007ad2:	4b09      	ldr	r3, [pc, #36]	; (8007af8 <_vfiprintf_r+0x258>)
 8007ad4:	a904      	add	r1, sp, #16
 8007ad6:	4630      	mov	r0, r6
 8007ad8:	f000 f880 	bl	8007bdc <_printf_i>
 8007adc:	e7e4      	b.n	8007aa8 <_vfiprintf_r+0x208>
 8007ade:	bf00      	nop
 8007ae0:	0800815c 	.word	0x0800815c
 8007ae4:	0800817c 	.word	0x0800817c
 8007ae8:	0800813c 	.word	0x0800813c
 8007aec:	0800819c 	.word	0x0800819c
 8007af0:	080081a6 	.word	0x080081a6
 8007af4:	00000000 	.word	0x00000000
 8007af8:	0800787b 	.word	0x0800787b
 8007afc:	080081a2 	.word	0x080081a2

08007b00 <_printf_common>:
 8007b00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007b04:	4616      	mov	r6, r2
 8007b06:	4699      	mov	r9, r3
 8007b08:	688a      	ldr	r2, [r1, #8]
 8007b0a:	690b      	ldr	r3, [r1, #16]
 8007b0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007b10:	4293      	cmp	r3, r2
 8007b12:	bfb8      	it	lt
 8007b14:	4613      	movlt	r3, r2
 8007b16:	6033      	str	r3, [r6, #0]
 8007b18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007b1c:	4607      	mov	r7, r0
 8007b1e:	460c      	mov	r4, r1
 8007b20:	b10a      	cbz	r2, 8007b26 <_printf_common+0x26>
 8007b22:	3301      	adds	r3, #1
 8007b24:	6033      	str	r3, [r6, #0]
 8007b26:	6823      	ldr	r3, [r4, #0]
 8007b28:	0699      	lsls	r1, r3, #26
 8007b2a:	bf42      	ittt	mi
 8007b2c:	6833      	ldrmi	r3, [r6, #0]
 8007b2e:	3302      	addmi	r3, #2
 8007b30:	6033      	strmi	r3, [r6, #0]
 8007b32:	6825      	ldr	r5, [r4, #0]
 8007b34:	f015 0506 	ands.w	r5, r5, #6
 8007b38:	d106      	bne.n	8007b48 <_printf_common+0x48>
 8007b3a:	f104 0a19 	add.w	sl, r4, #25
 8007b3e:	68e3      	ldr	r3, [r4, #12]
 8007b40:	6832      	ldr	r2, [r6, #0]
 8007b42:	1a9b      	subs	r3, r3, r2
 8007b44:	42ab      	cmp	r3, r5
 8007b46:	dc26      	bgt.n	8007b96 <_printf_common+0x96>
 8007b48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007b4c:	1e13      	subs	r3, r2, #0
 8007b4e:	6822      	ldr	r2, [r4, #0]
 8007b50:	bf18      	it	ne
 8007b52:	2301      	movne	r3, #1
 8007b54:	0692      	lsls	r2, r2, #26
 8007b56:	d42b      	bmi.n	8007bb0 <_printf_common+0xb0>
 8007b58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007b5c:	4649      	mov	r1, r9
 8007b5e:	4638      	mov	r0, r7
 8007b60:	47c0      	blx	r8
 8007b62:	3001      	adds	r0, #1
 8007b64:	d01e      	beq.n	8007ba4 <_printf_common+0xa4>
 8007b66:	6823      	ldr	r3, [r4, #0]
 8007b68:	68e5      	ldr	r5, [r4, #12]
 8007b6a:	6832      	ldr	r2, [r6, #0]
 8007b6c:	f003 0306 	and.w	r3, r3, #6
 8007b70:	2b04      	cmp	r3, #4
 8007b72:	bf08      	it	eq
 8007b74:	1aad      	subeq	r5, r5, r2
 8007b76:	68a3      	ldr	r3, [r4, #8]
 8007b78:	6922      	ldr	r2, [r4, #16]
 8007b7a:	bf0c      	ite	eq
 8007b7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007b80:	2500      	movne	r5, #0
 8007b82:	4293      	cmp	r3, r2
 8007b84:	bfc4      	itt	gt
 8007b86:	1a9b      	subgt	r3, r3, r2
 8007b88:	18ed      	addgt	r5, r5, r3
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	341a      	adds	r4, #26
 8007b8e:	42b5      	cmp	r5, r6
 8007b90:	d11a      	bne.n	8007bc8 <_printf_common+0xc8>
 8007b92:	2000      	movs	r0, #0
 8007b94:	e008      	b.n	8007ba8 <_printf_common+0xa8>
 8007b96:	2301      	movs	r3, #1
 8007b98:	4652      	mov	r2, sl
 8007b9a:	4649      	mov	r1, r9
 8007b9c:	4638      	mov	r0, r7
 8007b9e:	47c0      	blx	r8
 8007ba0:	3001      	adds	r0, #1
 8007ba2:	d103      	bne.n	8007bac <_printf_common+0xac>
 8007ba4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ba8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bac:	3501      	adds	r5, #1
 8007bae:	e7c6      	b.n	8007b3e <_printf_common+0x3e>
 8007bb0:	18e1      	adds	r1, r4, r3
 8007bb2:	1c5a      	adds	r2, r3, #1
 8007bb4:	2030      	movs	r0, #48	; 0x30
 8007bb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007bba:	4422      	add	r2, r4
 8007bbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007bc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007bc4:	3302      	adds	r3, #2
 8007bc6:	e7c7      	b.n	8007b58 <_printf_common+0x58>
 8007bc8:	2301      	movs	r3, #1
 8007bca:	4622      	mov	r2, r4
 8007bcc:	4649      	mov	r1, r9
 8007bce:	4638      	mov	r0, r7
 8007bd0:	47c0      	blx	r8
 8007bd2:	3001      	adds	r0, #1
 8007bd4:	d0e6      	beq.n	8007ba4 <_printf_common+0xa4>
 8007bd6:	3601      	adds	r6, #1
 8007bd8:	e7d9      	b.n	8007b8e <_printf_common+0x8e>
	...

08007bdc <_printf_i>:
 8007bdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007be0:	460c      	mov	r4, r1
 8007be2:	4691      	mov	r9, r2
 8007be4:	7e27      	ldrb	r7, [r4, #24]
 8007be6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8007be8:	2f78      	cmp	r7, #120	; 0x78
 8007bea:	4680      	mov	r8, r0
 8007bec:	469a      	mov	sl, r3
 8007bee:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007bf2:	d807      	bhi.n	8007c04 <_printf_i+0x28>
 8007bf4:	2f62      	cmp	r7, #98	; 0x62
 8007bf6:	d80a      	bhi.n	8007c0e <_printf_i+0x32>
 8007bf8:	2f00      	cmp	r7, #0
 8007bfa:	f000 80d8 	beq.w	8007dae <_printf_i+0x1d2>
 8007bfe:	2f58      	cmp	r7, #88	; 0x58
 8007c00:	f000 80a3 	beq.w	8007d4a <_printf_i+0x16e>
 8007c04:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007c0c:	e03a      	b.n	8007c84 <_printf_i+0xa8>
 8007c0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007c12:	2b15      	cmp	r3, #21
 8007c14:	d8f6      	bhi.n	8007c04 <_printf_i+0x28>
 8007c16:	a001      	add	r0, pc, #4	; (adr r0, 8007c1c <_printf_i+0x40>)
 8007c18:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8007c1c:	08007c75 	.word	0x08007c75
 8007c20:	08007c89 	.word	0x08007c89
 8007c24:	08007c05 	.word	0x08007c05
 8007c28:	08007c05 	.word	0x08007c05
 8007c2c:	08007c05 	.word	0x08007c05
 8007c30:	08007c05 	.word	0x08007c05
 8007c34:	08007c89 	.word	0x08007c89
 8007c38:	08007c05 	.word	0x08007c05
 8007c3c:	08007c05 	.word	0x08007c05
 8007c40:	08007c05 	.word	0x08007c05
 8007c44:	08007c05 	.word	0x08007c05
 8007c48:	08007d95 	.word	0x08007d95
 8007c4c:	08007cb9 	.word	0x08007cb9
 8007c50:	08007d77 	.word	0x08007d77
 8007c54:	08007c05 	.word	0x08007c05
 8007c58:	08007c05 	.word	0x08007c05
 8007c5c:	08007db7 	.word	0x08007db7
 8007c60:	08007c05 	.word	0x08007c05
 8007c64:	08007cb9 	.word	0x08007cb9
 8007c68:	08007c05 	.word	0x08007c05
 8007c6c:	08007c05 	.word	0x08007c05
 8007c70:	08007d7f 	.word	0x08007d7f
 8007c74:	680b      	ldr	r3, [r1, #0]
 8007c76:	1d1a      	adds	r2, r3, #4
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	600a      	str	r2, [r1, #0]
 8007c7c:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8007c80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007c84:	2301      	movs	r3, #1
 8007c86:	e0a3      	b.n	8007dd0 <_printf_i+0x1f4>
 8007c88:	6825      	ldr	r5, [r4, #0]
 8007c8a:	6808      	ldr	r0, [r1, #0]
 8007c8c:	062e      	lsls	r6, r5, #24
 8007c8e:	f100 0304 	add.w	r3, r0, #4
 8007c92:	d50a      	bpl.n	8007caa <_printf_i+0xce>
 8007c94:	6805      	ldr	r5, [r0, #0]
 8007c96:	600b      	str	r3, [r1, #0]
 8007c98:	2d00      	cmp	r5, #0
 8007c9a:	da03      	bge.n	8007ca4 <_printf_i+0xc8>
 8007c9c:	232d      	movs	r3, #45	; 0x2d
 8007c9e:	426d      	negs	r5, r5
 8007ca0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ca4:	485e      	ldr	r0, [pc, #376]	; (8007e20 <_printf_i+0x244>)
 8007ca6:	230a      	movs	r3, #10
 8007ca8:	e019      	b.n	8007cde <_printf_i+0x102>
 8007caa:	f015 0f40 	tst.w	r5, #64	; 0x40
 8007cae:	6805      	ldr	r5, [r0, #0]
 8007cb0:	600b      	str	r3, [r1, #0]
 8007cb2:	bf18      	it	ne
 8007cb4:	b22d      	sxthne	r5, r5
 8007cb6:	e7ef      	b.n	8007c98 <_printf_i+0xbc>
 8007cb8:	680b      	ldr	r3, [r1, #0]
 8007cba:	6825      	ldr	r5, [r4, #0]
 8007cbc:	1d18      	adds	r0, r3, #4
 8007cbe:	6008      	str	r0, [r1, #0]
 8007cc0:	0628      	lsls	r0, r5, #24
 8007cc2:	d501      	bpl.n	8007cc8 <_printf_i+0xec>
 8007cc4:	681d      	ldr	r5, [r3, #0]
 8007cc6:	e002      	b.n	8007cce <_printf_i+0xf2>
 8007cc8:	0669      	lsls	r1, r5, #25
 8007cca:	d5fb      	bpl.n	8007cc4 <_printf_i+0xe8>
 8007ccc:	881d      	ldrh	r5, [r3, #0]
 8007cce:	4854      	ldr	r0, [pc, #336]	; (8007e20 <_printf_i+0x244>)
 8007cd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007cd2:	bf0c      	ite	eq
 8007cd4:	2308      	moveq	r3, #8
 8007cd6:	230a      	movne	r3, #10
 8007cd8:	2100      	movs	r1, #0
 8007cda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007cde:	6866      	ldr	r6, [r4, #4]
 8007ce0:	60a6      	str	r6, [r4, #8]
 8007ce2:	2e00      	cmp	r6, #0
 8007ce4:	bfa2      	ittt	ge
 8007ce6:	6821      	ldrge	r1, [r4, #0]
 8007ce8:	f021 0104 	bicge.w	r1, r1, #4
 8007cec:	6021      	strge	r1, [r4, #0]
 8007cee:	b90d      	cbnz	r5, 8007cf4 <_printf_i+0x118>
 8007cf0:	2e00      	cmp	r6, #0
 8007cf2:	d04d      	beq.n	8007d90 <_printf_i+0x1b4>
 8007cf4:	4616      	mov	r6, r2
 8007cf6:	fbb5 f1f3 	udiv	r1, r5, r3
 8007cfa:	fb03 5711 	mls	r7, r3, r1, r5
 8007cfe:	5dc7      	ldrb	r7, [r0, r7]
 8007d00:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007d04:	462f      	mov	r7, r5
 8007d06:	42bb      	cmp	r3, r7
 8007d08:	460d      	mov	r5, r1
 8007d0a:	d9f4      	bls.n	8007cf6 <_printf_i+0x11a>
 8007d0c:	2b08      	cmp	r3, #8
 8007d0e:	d10b      	bne.n	8007d28 <_printf_i+0x14c>
 8007d10:	6823      	ldr	r3, [r4, #0]
 8007d12:	07df      	lsls	r7, r3, #31
 8007d14:	d508      	bpl.n	8007d28 <_printf_i+0x14c>
 8007d16:	6923      	ldr	r3, [r4, #16]
 8007d18:	6861      	ldr	r1, [r4, #4]
 8007d1a:	4299      	cmp	r1, r3
 8007d1c:	bfde      	ittt	le
 8007d1e:	2330      	movle	r3, #48	; 0x30
 8007d20:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007d24:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007d28:	1b92      	subs	r2, r2, r6
 8007d2a:	6122      	str	r2, [r4, #16]
 8007d2c:	f8cd a000 	str.w	sl, [sp]
 8007d30:	464b      	mov	r3, r9
 8007d32:	aa03      	add	r2, sp, #12
 8007d34:	4621      	mov	r1, r4
 8007d36:	4640      	mov	r0, r8
 8007d38:	f7ff fee2 	bl	8007b00 <_printf_common>
 8007d3c:	3001      	adds	r0, #1
 8007d3e:	d14c      	bne.n	8007dda <_printf_i+0x1fe>
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	b004      	add	sp, #16
 8007d46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d4a:	4835      	ldr	r0, [pc, #212]	; (8007e20 <_printf_i+0x244>)
 8007d4c:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8007d50:	6823      	ldr	r3, [r4, #0]
 8007d52:	680e      	ldr	r6, [r1, #0]
 8007d54:	061f      	lsls	r7, r3, #24
 8007d56:	f856 5b04 	ldr.w	r5, [r6], #4
 8007d5a:	600e      	str	r6, [r1, #0]
 8007d5c:	d514      	bpl.n	8007d88 <_printf_i+0x1ac>
 8007d5e:	07d9      	lsls	r1, r3, #31
 8007d60:	bf44      	itt	mi
 8007d62:	f043 0320 	orrmi.w	r3, r3, #32
 8007d66:	6023      	strmi	r3, [r4, #0]
 8007d68:	b91d      	cbnz	r5, 8007d72 <_printf_i+0x196>
 8007d6a:	6823      	ldr	r3, [r4, #0]
 8007d6c:	f023 0320 	bic.w	r3, r3, #32
 8007d70:	6023      	str	r3, [r4, #0]
 8007d72:	2310      	movs	r3, #16
 8007d74:	e7b0      	b.n	8007cd8 <_printf_i+0xfc>
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	f043 0320 	orr.w	r3, r3, #32
 8007d7c:	6023      	str	r3, [r4, #0]
 8007d7e:	2378      	movs	r3, #120	; 0x78
 8007d80:	4828      	ldr	r0, [pc, #160]	; (8007e24 <_printf_i+0x248>)
 8007d82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007d86:	e7e3      	b.n	8007d50 <_printf_i+0x174>
 8007d88:	065e      	lsls	r6, r3, #25
 8007d8a:	bf48      	it	mi
 8007d8c:	b2ad      	uxthmi	r5, r5
 8007d8e:	e7e6      	b.n	8007d5e <_printf_i+0x182>
 8007d90:	4616      	mov	r6, r2
 8007d92:	e7bb      	b.n	8007d0c <_printf_i+0x130>
 8007d94:	680b      	ldr	r3, [r1, #0]
 8007d96:	6826      	ldr	r6, [r4, #0]
 8007d98:	6960      	ldr	r0, [r4, #20]
 8007d9a:	1d1d      	adds	r5, r3, #4
 8007d9c:	600d      	str	r5, [r1, #0]
 8007d9e:	0635      	lsls	r5, r6, #24
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	d501      	bpl.n	8007da8 <_printf_i+0x1cc>
 8007da4:	6018      	str	r0, [r3, #0]
 8007da6:	e002      	b.n	8007dae <_printf_i+0x1d2>
 8007da8:	0671      	lsls	r1, r6, #25
 8007daa:	d5fb      	bpl.n	8007da4 <_printf_i+0x1c8>
 8007dac:	8018      	strh	r0, [r3, #0]
 8007dae:	2300      	movs	r3, #0
 8007db0:	6123      	str	r3, [r4, #16]
 8007db2:	4616      	mov	r6, r2
 8007db4:	e7ba      	b.n	8007d2c <_printf_i+0x150>
 8007db6:	680b      	ldr	r3, [r1, #0]
 8007db8:	1d1a      	adds	r2, r3, #4
 8007dba:	600a      	str	r2, [r1, #0]
 8007dbc:	681e      	ldr	r6, [r3, #0]
 8007dbe:	6862      	ldr	r2, [r4, #4]
 8007dc0:	2100      	movs	r1, #0
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7f8 fa2c 	bl	8000220 <memchr>
 8007dc8:	b108      	cbz	r0, 8007dce <_printf_i+0x1f2>
 8007dca:	1b80      	subs	r0, r0, r6
 8007dcc:	6060      	str	r0, [r4, #4]
 8007dce:	6863      	ldr	r3, [r4, #4]
 8007dd0:	6123      	str	r3, [r4, #16]
 8007dd2:	2300      	movs	r3, #0
 8007dd4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007dd8:	e7a8      	b.n	8007d2c <_printf_i+0x150>
 8007dda:	6923      	ldr	r3, [r4, #16]
 8007ddc:	4632      	mov	r2, r6
 8007dde:	4649      	mov	r1, r9
 8007de0:	4640      	mov	r0, r8
 8007de2:	47d0      	blx	sl
 8007de4:	3001      	adds	r0, #1
 8007de6:	d0ab      	beq.n	8007d40 <_printf_i+0x164>
 8007de8:	6823      	ldr	r3, [r4, #0]
 8007dea:	079b      	lsls	r3, r3, #30
 8007dec:	d413      	bmi.n	8007e16 <_printf_i+0x23a>
 8007dee:	68e0      	ldr	r0, [r4, #12]
 8007df0:	9b03      	ldr	r3, [sp, #12]
 8007df2:	4298      	cmp	r0, r3
 8007df4:	bfb8      	it	lt
 8007df6:	4618      	movlt	r0, r3
 8007df8:	e7a4      	b.n	8007d44 <_printf_i+0x168>
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	4632      	mov	r2, r6
 8007dfe:	4649      	mov	r1, r9
 8007e00:	4640      	mov	r0, r8
 8007e02:	47d0      	blx	sl
 8007e04:	3001      	adds	r0, #1
 8007e06:	d09b      	beq.n	8007d40 <_printf_i+0x164>
 8007e08:	3501      	adds	r5, #1
 8007e0a:	68e3      	ldr	r3, [r4, #12]
 8007e0c:	9903      	ldr	r1, [sp, #12]
 8007e0e:	1a5b      	subs	r3, r3, r1
 8007e10:	42ab      	cmp	r3, r5
 8007e12:	dcf2      	bgt.n	8007dfa <_printf_i+0x21e>
 8007e14:	e7eb      	b.n	8007dee <_printf_i+0x212>
 8007e16:	2500      	movs	r5, #0
 8007e18:	f104 0619 	add.w	r6, r4, #25
 8007e1c:	e7f5      	b.n	8007e0a <_printf_i+0x22e>
 8007e1e:	bf00      	nop
 8007e20:	080081ad 	.word	0x080081ad
 8007e24:	080081be 	.word	0x080081be

08007e28 <_putc_r>:
 8007e28:	b570      	push	{r4, r5, r6, lr}
 8007e2a:	460d      	mov	r5, r1
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	4606      	mov	r6, r0
 8007e30:	b118      	cbz	r0, 8007e3a <_putc_r+0x12>
 8007e32:	6983      	ldr	r3, [r0, #24]
 8007e34:	b90b      	cbnz	r3, 8007e3a <_putc_r+0x12>
 8007e36:	f7ff fb5b 	bl	80074f0 <__sinit>
 8007e3a:	4b1c      	ldr	r3, [pc, #112]	; (8007eac <_putc_r+0x84>)
 8007e3c:	429c      	cmp	r4, r3
 8007e3e:	d124      	bne.n	8007e8a <_putc_r+0x62>
 8007e40:	6874      	ldr	r4, [r6, #4]
 8007e42:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e44:	07d8      	lsls	r0, r3, #31
 8007e46:	d405      	bmi.n	8007e54 <_putc_r+0x2c>
 8007e48:	89a3      	ldrh	r3, [r4, #12]
 8007e4a:	0599      	lsls	r1, r3, #22
 8007e4c:	d402      	bmi.n	8007e54 <_putc_r+0x2c>
 8007e4e:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e50:	f7ff fbec 	bl	800762c <__retarget_lock_acquire_recursive>
 8007e54:	68a3      	ldr	r3, [r4, #8]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	60a3      	str	r3, [r4, #8]
 8007e5c:	da05      	bge.n	8007e6a <_putc_r+0x42>
 8007e5e:	69a2      	ldr	r2, [r4, #24]
 8007e60:	4293      	cmp	r3, r2
 8007e62:	db1c      	blt.n	8007e9e <_putc_r+0x76>
 8007e64:	b2eb      	uxtb	r3, r5
 8007e66:	2b0a      	cmp	r3, #10
 8007e68:	d019      	beq.n	8007e9e <_putc_r+0x76>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	1c5a      	adds	r2, r3, #1
 8007e6e:	6022      	str	r2, [r4, #0]
 8007e70:	701d      	strb	r5, [r3, #0]
 8007e72:	b2ed      	uxtb	r5, r5
 8007e74:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007e76:	07da      	lsls	r2, r3, #31
 8007e78:	d405      	bmi.n	8007e86 <_putc_r+0x5e>
 8007e7a:	89a3      	ldrh	r3, [r4, #12]
 8007e7c:	059b      	lsls	r3, r3, #22
 8007e7e:	d402      	bmi.n	8007e86 <_putc_r+0x5e>
 8007e80:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007e82:	f7ff fbd4 	bl	800762e <__retarget_lock_release_recursive>
 8007e86:	4628      	mov	r0, r5
 8007e88:	bd70      	pop	{r4, r5, r6, pc}
 8007e8a:	4b09      	ldr	r3, [pc, #36]	; (8007eb0 <_putc_r+0x88>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d101      	bne.n	8007e94 <_putc_r+0x6c>
 8007e90:	68b4      	ldr	r4, [r6, #8]
 8007e92:	e7d6      	b.n	8007e42 <_putc_r+0x1a>
 8007e94:	4b07      	ldr	r3, [pc, #28]	; (8007eb4 <_putc_r+0x8c>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	bf08      	it	eq
 8007e9a:	68f4      	ldreq	r4, [r6, #12]
 8007e9c:	e7d1      	b.n	8007e42 <_putc_r+0x1a>
 8007e9e:	4629      	mov	r1, r5
 8007ea0:	4622      	mov	r2, r4
 8007ea2:	4630      	mov	r0, r6
 8007ea4:	f7ff f94a 	bl	800713c <__swbuf_r>
 8007ea8:	4605      	mov	r5, r0
 8007eaa:	e7e3      	b.n	8007e74 <_putc_r+0x4c>
 8007eac:	0800815c 	.word	0x0800815c
 8007eb0:	0800817c 	.word	0x0800817c
 8007eb4:	0800813c 	.word	0x0800813c

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	; (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 fa3c 	bl	8001340 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20000418 	.word	0x20000418

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f000 f8a0 	bl	8008024 <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	05db      	lsls	r3, r3, #23
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f10:	2302      	movs	r3, #2
 8007f12:	2200      	movs	r2, #0
 8007f14:	f000 f868 	bl	8007fe8 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b817 	b.w	8007f60 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f000 f855 	bl	8007fe8 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b813 	b.w	8007f84 <_close_r>
	...

08007f60 <_write_r>:
 8007f60:	b538      	push	{r3, r4, r5, lr}
 8007f62:	4d07      	ldr	r5, [pc, #28]	; (8007f80 <_write_r+0x20>)
 8007f64:	4604      	mov	r4, r0
 8007f66:	4608      	mov	r0, r1
 8007f68:	4611      	mov	r1, r2
 8007f6a:	2200      	movs	r2, #0
 8007f6c:	602a      	str	r2, [r5, #0]
 8007f6e:	461a      	mov	r2, r3
 8007f70:	f7f8 fca3 	bl	80008ba <_write>
 8007f74:	1c43      	adds	r3, r0, #1
 8007f76:	d102      	bne.n	8007f7e <_write_r+0x1e>
 8007f78:	682b      	ldr	r3, [r5, #0]
 8007f7a:	b103      	cbz	r3, 8007f7e <_write_r+0x1e>
 8007f7c:	6023      	str	r3, [r4, #0]
 8007f7e:	bd38      	pop	{r3, r4, r5, pc}
 8007f80:	20000418 	.word	0x20000418

08007f84 <_close_r>:
 8007f84:	b538      	push	{r3, r4, r5, lr}
 8007f86:	4d06      	ldr	r5, [pc, #24]	; (8007fa0 <_close_r+0x1c>)
 8007f88:	2300      	movs	r3, #0
 8007f8a:	4604      	mov	r4, r0
 8007f8c:	4608      	mov	r0, r1
 8007f8e:	602b      	str	r3, [r5, #0]
 8007f90:	f7f9 f9a1 	bl	80012d6 <_close>
 8007f94:	1c43      	adds	r3, r0, #1
 8007f96:	d102      	bne.n	8007f9e <_close_r+0x1a>
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	b103      	cbz	r3, 8007f9e <_close_r+0x1a>
 8007f9c:	6023      	str	r3, [r4, #0]
 8007f9e:	bd38      	pop	{r3, r4, r5, pc}
 8007fa0:	20000418 	.word	0x20000418

08007fa4 <_fstat_r>:
 8007fa4:	b538      	push	{r3, r4, r5, lr}
 8007fa6:	4d07      	ldr	r5, [pc, #28]	; (8007fc4 <_fstat_r+0x20>)
 8007fa8:	2300      	movs	r3, #0
 8007faa:	4604      	mov	r4, r0
 8007fac:	4608      	mov	r0, r1
 8007fae:	4611      	mov	r1, r2
 8007fb0:	602b      	str	r3, [r5, #0]
 8007fb2:	f7f9 f99c 	bl	80012ee <_fstat>
 8007fb6:	1c43      	adds	r3, r0, #1
 8007fb8:	d102      	bne.n	8007fc0 <_fstat_r+0x1c>
 8007fba:	682b      	ldr	r3, [r5, #0]
 8007fbc:	b103      	cbz	r3, 8007fc0 <_fstat_r+0x1c>
 8007fbe:	6023      	str	r3, [r4, #0]
 8007fc0:	bd38      	pop	{r3, r4, r5, pc}
 8007fc2:	bf00      	nop
 8007fc4:	20000418 	.word	0x20000418

08007fc8 <_isatty_r>:
 8007fc8:	b538      	push	{r3, r4, r5, lr}
 8007fca:	4d06      	ldr	r5, [pc, #24]	; (8007fe4 <_isatty_r+0x1c>)
 8007fcc:	2300      	movs	r3, #0
 8007fce:	4604      	mov	r4, r0
 8007fd0:	4608      	mov	r0, r1
 8007fd2:	602b      	str	r3, [r5, #0]
 8007fd4:	f7f9 f99b 	bl	800130e <_isatty>
 8007fd8:	1c43      	adds	r3, r0, #1
 8007fda:	d102      	bne.n	8007fe2 <_isatty_r+0x1a>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	b103      	cbz	r3, 8007fe2 <_isatty_r+0x1a>
 8007fe0:	6023      	str	r3, [r4, #0]
 8007fe2:	bd38      	pop	{r3, r4, r5, pc}
 8007fe4:	20000418 	.word	0x20000418

08007fe8 <_lseek_r>:
 8007fe8:	b538      	push	{r3, r4, r5, lr}
 8007fea:	4d07      	ldr	r5, [pc, #28]	; (8008008 <_lseek_r+0x20>)
 8007fec:	4604      	mov	r4, r0
 8007fee:	4608      	mov	r0, r1
 8007ff0:	4611      	mov	r1, r2
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	602a      	str	r2, [r5, #0]
 8007ff6:	461a      	mov	r2, r3
 8007ff8:	f7f9 f994 	bl	8001324 <_lseek>
 8007ffc:	1c43      	adds	r3, r0, #1
 8007ffe:	d102      	bne.n	8008006 <_lseek_r+0x1e>
 8008000:	682b      	ldr	r3, [r5, #0]
 8008002:	b103      	cbz	r3, 8008006 <_lseek_r+0x1e>
 8008004:	6023      	str	r3, [r4, #0]
 8008006:	bd38      	pop	{r3, r4, r5, pc}
 8008008:	20000418 	.word	0x20000418

0800800c <__malloc_lock>:
 800800c:	4801      	ldr	r0, [pc, #4]	; (8008014 <__malloc_lock+0x8>)
 800800e:	f7ff bb0d 	b.w	800762c <__retarget_lock_acquire_recursive>
 8008012:	bf00      	nop
 8008014:	20000410 	.word	0x20000410

08008018 <__malloc_unlock>:
 8008018:	4801      	ldr	r0, [pc, #4]	; (8008020 <__malloc_unlock+0x8>)
 800801a:	f7ff bb08 	b.w	800762e <__retarget_lock_release_recursive>
 800801e:	bf00      	nop
 8008020:	20000410 	.word	0x20000410

08008024 <_read_r>:
 8008024:	b538      	push	{r3, r4, r5, lr}
 8008026:	4d07      	ldr	r5, [pc, #28]	; (8008044 <_read_r+0x20>)
 8008028:	4604      	mov	r4, r0
 800802a:	4608      	mov	r0, r1
 800802c:	4611      	mov	r1, r2
 800802e:	2200      	movs	r2, #0
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	461a      	mov	r2, r3
 8008034:	f7f9 f932 	bl	800129c <_read>
 8008038:	1c43      	adds	r3, r0, #1
 800803a:	d102      	bne.n	8008042 <_read_r+0x1e>
 800803c:	682b      	ldr	r3, [r5, #0]
 800803e:	b103      	cbz	r3, 8008042 <_read_r+0x1e>
 8008040:	6023      	str	r3, [r4, #0]
 8008042:	bd38      	pop	{r3, r4, r5, pc}
 8008044:	20000418 	.word	0x20000418

08008048 <_init>:
 8008048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800804a:	bf00      	nop
 800804c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800804e:	bc08      	pop	{r3}
 8008050:	469e      	mov	lr, r3
 8008052:	4770      	bx	lr

08008054 <_fini>:
 8008054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008056:	bf00      	nop
 8008058:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800805a:	bc08      	pop	{r3}
 800805c:	469e      	mov	lr, r3
 800805e:	4770      	bx	lr
